
TinyEngine_vww_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007bc78  0800cf60  0800cf60  0001cf60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08088bd8  08088bd8  00098bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08088be0  08088be0  00098be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08088bf0  08088bf0  00098bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009d0  20000000  08088bf8  000a0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000172ac  200009d0  080895c8  000a09d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000a00  20017c7c  080895c8  000a7c7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000a09d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000ac844  00000000  00000000  000a0a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000702b  00000000  00000000  0014d244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002d21a  00000000  00000000  0015426f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f08  00000000  00000000  00181490  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000039d8  00000000  00000000  00182398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013da9  00000000  00000000  00185d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000800c  00000000  00000000  00199b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001a1b25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003f74  00000000  00000000  001a1ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  001a5b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d0 	.word	0x200009d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf44 	.word	0x0800cf44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d4 	.word	0x200009d4
 800020c:	0800cf44 	.word	0x0800cf44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ee8:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <BSP_PB_Init+0x98>)
{
 8000eea:	460b      	mov	r3, r1
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000eec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000eee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8000ef2:	b530      	push	{r4, r5, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ef4:	6311      	str	r1, [r2, #48]	; 0x30
{
 8000ef6:	b089      	sub	sp, #36	; 0x24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ef8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000efa:	4604      	mov	r4, r0
 8000efc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000f00:	bb28      	cbnz	r0, 8000f4e <BSP_PB_Init+0x66>
 8000f02:	9200      	str	r2, [sp, #0]
 8000f04:	9a00      	ldr	r2, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f06:	b343      	cbz	r3, 8000f5a <BSP_PB_Init+0x72>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d11e      	bne.n	8000f4a <BSP_PB_Init+0x62>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000f0c:	2500      	movs	r5, #0
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    
    if(Button != BUTTON_WAKEUP)
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000f0e:	481d      	ldr	r0, [pc, #116]	; (8000f84 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f10:	491d      	ldr	r1, [pc, #116]	; (8000f88 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f12:	2202      	movs	r2, #2
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <BSP_PB_Init+0xa4>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f16:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	bf18      	it	ne
 8000f1e:	4603      	movne	r3, r0
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f20:	481b      	ldr	r0, [pc, #108]	; (8000f90 <BSP_PB_Init+0xa8>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f22:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f24:	a903      	add	r1, sp, #12
 8000f26:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f2a:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000f2c:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f30:	f000 ff6a 	bl	8001e08 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <BSP_PB_Init+0xac>)
 8000f36:	462a      	mov	r2, r5
 8000f38:	210f      	movs	r1, #15
 8000f3a:	f913 4014 	ldrsb.w	r4, [r3, r4, lsl #1]
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f000 fcba 	bl	80018b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000f44:	4620      	mov	r0, r4
 8000f46:	f000 fced 	bl	8001924 <HAL_NVIC_EnableIRQ>
  }
}
 8000f4a:	b009      	add	sp, #36	; 0x24
 8000f4c:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d013      	beq.n	8000f7a <BSP_PB_Init+0x92>
 8000f52:	9202      	str	r2, [sp, #8]
 8000f54:	9a02      	ldr	r2, [sp, #8]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1d6      	bne.n	8000f08 <BSP_PB_Init+0x20>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f5a:	4d0b      	ldr	r5, [pc, #44]	; (8000f88 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f5c:	2202      	movs	r2, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <BSP_PB_Init+0xa8>)
 8000f60:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f62:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f66:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f6a:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f6c:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000f6e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f72:	f000 ff49 	bl	8001e08 <HAL_GPIO_Init>
}
 8000f76:	b009      	add	sp, #36	; 0x24
 8000f78:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9a01      	ldr	r2, [sp, #4]
 8000f7e:	e7c2      	b.n	8000f06 <BSP_PB_Init+0x1e>
 8000f80:	40023800 	.word	0x40023800
 8000f84:	10210000 	.word	0x10210000
 8000f88:	0800cf68 	.word	0x0800cf68
 8000f8c:	10110000 	.word	0x10110000
 8000f90:	20000000 	.word	0x20000000
 8000f94:	0800cf60 	.word	0x0800cf60

08000f98 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <BSP_LCD_GetXSize+0x10>)
 8000f9a:	2134      	movs	r1, #52	; 0x34
 8000f9c:	4a03      	ldr	r2, [pc, #12]	; (8000fac <BSP_LCD_GetXSize+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000fa4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000fa6:	4770      	bx	lr
 8000fa8:	200009ec 	.word	0x200009ec
 8000fac:	20000a48 	.word	0x20000a48

08000fb0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <BSP_LCD_GetYSize+0x10>)
 8000fb2:	2134      	movs	r1, #52	; 0x34
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <BSP_LCD_GetYSize+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	fb01 2303 	mla	r3, r1, r3, r2
}
 8000fbc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8000fbe:	4770      	bx	lr
 8000fc0:	200009ec 	.word	0x200009ec
 8000fc4:	20000a48 	.word	0x20000a48

08000fc8 <BSP_LCD_LayerRgb565Init>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <BSP_LCD_LayerRgb565Init+0x70>)
  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fca:	f04f 0c02 	mov.w	ip, #2
{     
 8000fce:	b5f0      	push	{r4, r5, r6, r7, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	2634      	movs	r6, #52	; 0x34
 8000fd4:	4d19      	ldr	r5, [pc, #100]	; (800103c <BSP_LCD_LayerRgb565Init+0x74>)
{     
 8000fd6:	b08f      	sub	sp, #60	; 0x3c
 8000fd8:	4604      	mov	r4, r0
  layer_cfg.WindowX0 = 0;
 8000fda:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fdc:	fb06 5202 	mla	r2, r6, r2, r5
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000fe0:	4628      	mov	r0, r5
  layer_cfg.FBStartAdress = FB_Address;
 8000fe2:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8000fe4:	27ff      	movs	r7, #255	; 0xff
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fe6:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fea:	2507      	movs	r5, #7
  layer_cfg.WindowX0 = 0;
 8000fec:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowY0 = 0;
 8000fee:	9303      	str	r3, [sp, #12]
  layer_cfg.Alpha0 = 0;
 8000ff0:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8000ff2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8000ff6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ffa:	f8cd c014 	str.w	ip, [sp, #20]
  layer_cfg.Alpha = 255;
 8000ffe:	9706      	str	r7, [sp, #24]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001000:	e9d2 1218 	ldrd	r1, r2, [r2, #96]	; 0x60
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001004:	e9cd 6508 	strd	r6, r5, [sp, #32]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001008:	9204      	str	r2, [sp, #16]

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
  DrawProp[LayerIndex].pFont     = &Font24;
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800100a:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800100e:	920c      	str	r2, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001010:	4622      	mov	r2, r4
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001012:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001016:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001018:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800101a:	a901      	add	r1, sp, #4
 800101c:	f001 f88e 	bl	800213c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <BSP_LCD_LayerRgb565Init+0x78>)
 8001022:	00a4      	lsls	r4, r4, #2
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  DrawProp[LayerIndex].pFont     = &Font24;
 8001028:	4906      	ldr	r1, [pc, #24]	; (8001044 <BSP_LCD_LayerRgb565Init+0x7c>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800102a:	1913      	adds	r3, r2, r4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800102c:	5115      	str	r5, [r2, r4]
  DrawProp[LayerIndex].pFont     = &Font24;
 800102e:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
 8001032:	b00f      	add	sp, #60	; 0x3c
 8001034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001036:	bf00      	nop
 8001038:	200009ec 	.word	0x200009ec
 800103c:	20000a48 	.word	0x20000a48
 8001040:	200009f0 	.word	0x200009f0
 8001044:	20000018 	.word	0x20000018

08001048 <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 8001048:	4b01      	ldr	r3, [pc, #4]	; (8001050 <BSP_LCD_SelectLayer+0x8>)
 800104a:	6018      	str	r0, [r3, #0]
} 
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200009ec 	.word	0x200009ec

08001054 <BSP_LCD_SetTransparency>:
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8001054:	4602      	mov	r2, r0
 8001056:	4801      	ldr	r0, [pc, #4]	; (800105c <BSP_LCD_SetTransparency+0x8>)
 8001058:	f001 b938 	b.w	80022cc <HAL_LTDC_SetAlpha>
 800105c:	20000a48 	.word	0x20000a48

08001060 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <BSP_LCD_SetTextColor+0x10>)
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <BSP_LCD_SetTextColor+0x14>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800106a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 800106e:	4770      	bx	lr
 8001070:	200009ec 	.word	0x200009ec
 8001074:	200009f0 	.word	0x200009f0

08001078 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800107c:	4c1a      	ldr	r4, [pc, #104]	; (80010e8 <BSP_LCD_Clear+0x70>)
 800107e:	2334      	movs	r3, #52	; 0x34
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <BSP_LCD_Clear+0x74>)
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001082:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001086:	6825      	ldr	r5, [r4, #0]
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001088:	2600      	movs	r6, #0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800108a:	4c19      	ldr	r4, [pc, #100]	; (80010f0 <BSP_LCD_Clear+0x78>)
{ 
 800108c:	b083      	sub	sp, #12
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800108e:	fb03 1305 	mla	r3, r3, r5, r1
  
  hDma2dHandler.Instance = DMA2D;
 8001092:	4918      	ldr	r1, [pc, #96]	; (80010f4 <BSP_LCD_Clear+0x7c>)
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001094:	6062      	str	r2, [r4, #4]
{ 
 8001096:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800109a:	4620      	mov	r0, r4
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800109c:	60e6      	str	r6, [r4, #12]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800109e:	2a02      	cmp	r2, #2
  hDma2dHandler.Instance = DMA2D;
 80010a0:	6021      	str	r1, [r4, #0]
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80010a2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80010a4:	bf18      	it	ne
 80010a6:	2200      	movne	r2, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010a8:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 80010ac:	60a2      	str	r2, [r4, #8]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010ae:	f000 fd3f 	bl	8001b30 <HAL_DMA2D_Init>
 80010b2:	b110      	cbz	r0, 80010ba <BSP_LCD_Clear+0x42>
}
 80010b4:	b003      	add	sp, #12
 80010b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80010ba:	4629      	mov	r1, r5
 80010bc:	4620      	mov	r0, r4
 80010be:	f000 fe51 	bl	8001d64 <HAL_DMA2D_ConfigLayer>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d1f6      	bne.n	80010b4 <BSP_LCD_Clear+0x3c>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010c6:	f8cd 9000 	str.w	r9, [sp]
 80010ca:	4643      	mov	r3, r8
 80010cc:	4632      	mov	r2, r6
 80010ce:	4639      	mov	r1, r7
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 fd5b 	bl	8001b8c <HAL_DMA2D_Start>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d1ec      	bne.n	80010b4 <BSP_LCD_Clear+0x3c>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80010da:	4620      	mov	r0, r4
 80010dc:	210a      	movs	r1, #10
}
 80010de:	b003      	add	sp, #12
 80010e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80010e4:	f000 bda8 	b.w	8001c38 <HAL_DMA2D_PollForTransfer>
 80010e8:	200009ec 	.word	0x200009ec
 80010ec:	20000a48 	.word	0x20000a48
 80010f0:	20000a08 	.word	0x20000a08
 80010f4:	4002b000 	.word	0x4002b000

080010f8 <BSP_LCD_DisplayChar>:
{
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010fc:	4c3b      	ldr	r4, [pc, #236]	; (80011ec <BSP_LCD_DisplayChar+0xf4>)
{
 80010fe:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <BSP_LCD_DisplayChar+0xf8>)
{
 8001102:	4682      	mov	sl, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001104:	6825      	ldr	r5, [r4, #0]
 8001106:	3a20      	subs	r2, #32
{
 8001108:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800110a:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800110e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8001112:	f8de 3008 	ldr.w	r3, [lr, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001116:	8898      	ldrh	r0, [r3, #4]
 8001118:	88de      	ldrh	r6, [r3, #6]
 800111a:	1dc1      	adds	r1, r0, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800111c:	681c      	ldr	r4, [r3, #0]
 800111e:	fb06 f202 	mul.w	r2, r6, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001122:	10c9      	asrs	r1, r1, #3
 8001124:	9602      	str	r6, [sp, #8]
  offset =  8 *((width + 7)/8) -  width ;
 8001126:	ebc0 03c1 	rsb	r3, r0, r1, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800112a:	9101      	str	r1, [sp, #4]
 800112c:	fb01 f202 	mul.w	r2, r1, r2
  offset =  8 *((width + 7)/8) -  width ;
 8001130:	b2db      	uxtb	r3, r3
 8001132:	9304      	str	r3, [sp, #16]
  for(i = 0; i < height; i++)
 8001134:	2e00      	cmp	r6, #0
 8001136:	d04c      	beq.n	80011d2 <BSP_LCD_DisplayChar+0xda>
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <BSP_LCD_DisplayChar+0xfc>)
 800113a:	2134      	movs	r1, #52	; 0x34
 800113c:	eb04 0b02 	add.w	fp, r4, r2
 8001140:	fb01 3505 	mla	r5, r1, r5, r3
 8001144:	2300      	movs	r3, #0
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	1e43      	subs	r3, r0, #1
 800114a:	9305      	str	r3, [sp, #20]
 800114c:	9b03      	ldr	r3, [sp, #12]
 800114e:	9a00      	ldr	r2, [sp, #0]
 8001150:	f89b 7000 	ldrb.w	r7, [fp]
 8001154:	eb03 0c02 	add.w	ip, r3, r2
    switch(((width + 7)/8))
 8001158:	9b01      	ldr	r3, [sp, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	fa1f fc8c 	uxth.w	ip, ip
 8001160:	d005      	beq.n	800116e <BSP_LCD_DisplayChar+0x76>
 8001162:	2b02      	cmp	r3, #2
 8001164:	d138      	bne.n	80011d8 <BSP_LCD_DisplayChar+0xe0>
      line =  (pchar[0]<< 8) | pchar[1];      
 8001166:	f8bb 7000 	ldrh.w	r7, [fp]
 800116a:	ba7f      	rev16	r7, r7
 800116c:	b2bf      	uxth	r7, r7
    for (j = 0; j < width; j++)
 800116e:	b340      	cbz	r0, 80011c2 <BSP_LCD_DisplayChar+0xca>
 8001170:	2100      	movs	r1, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001172:	f04f 0801 	mov.w	r8, #1
 8001176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800117a:	eb03 0902 	add.w	r9, r3, r2
 800117e:	e008      	b.n	8001192 <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001180:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001182:	f8de 2000 	ldr.w	r2, [lr]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001186:	d016      	beq.n	80011b6 <BSP_LCD_DisplayChar+0xbe>
    for (j = 0; j < width; j++)
 8001188:	3101      	adds	r1, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800118a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (j = 0; j < width; j++)
 800118e:	4288      	cmp	r0, r1
 8001190:	d017      	beq.n	80011c2 <BSP_LCD_DisplayChar+0xca>
      if(line & (1 << (width- j + offset- 1))) 
 8001192:	eba9 0201 	sub.w	r2, r9, r1
 8001196:	eb0a 0301 	add.w	r3, sl, r1
 800119a:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 800119c:	fa08 f202 	lsl.w	r2, r8, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	6cae      	ldr	r6, [r5, #72]	; 0x48
 80011a4:	423a      	tst	r2, r7
 80011a6:	fb04 330c 	mla	r3, r4, ip, r3
 80011aa:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 80011ac:	d1e8      	bne.n	8001180 <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011ae:	2e02      	cmp	r6, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80011b0:	f8de 2004 	ldr.w	r2, [lr, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011b4:	d1e8      	bne.n	8001188 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 80011b6:	3101      	adds	r1, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80011b8:	b292      	uxth	r2, r2
    for (j = 0; j < width; j++)
 80011ba:	4288      	cmp	r0, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80011bc:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (j = 0; j < width; j++)
 80011c0:	d1e7      	bne.n	8001192 <BSP_LCD_DisplayChar+0x9a>
  for(i = 0; i < height; i++)
 80011c2:	9b00      	ldr	r3, [sp, #0]
 80011c4:	9a01      	ldr	r2, [sp, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4493      	add	fp, r2
 80011ca:	9a02      	ldr	r2, [sp, #8]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d1bc      	bne.n	800114c <BSP_LCD_DisplayChar+0x54>
}
 80011d2:	b007      	add	sp, #28
 80011d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80011d8:	043f      	lsls	r7, r7, #16
 80011da:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80011de:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80011e2:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 80011e6:	431f      	orrs	r7, r3
 80011e8:	e7c1      	b.n	800116e <BSP_LCD_DisplayChar+0x76>
 80011ea:	bf00      	nop
 80011ec:	200009ec 	.word	0x200009ec
 80011f0:	200009f0 	.word	0x200009f0
 80011f4:	20000a48 	.word	0x20000a48

080011f8 <BSP_LCD_DisplayStringAt>:
{
 80011f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011fc:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 80011fe:	7812      	ldrb	r2, [r2, #0]
{
 8001200:	4604      	mov	r4, r0
 8001202:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 8001204:	2a00      	cmp	r2, #0
 8001206:	d04b      	beq.n	80012a0 <BSP_LCD_DisplayStringAt+0xa8>
 8001208:	1c71      	adds	r1, r6, #1
 800120a:	1b8d      	subs	r5, r1, r6
 800120c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001210:	2800      	cmp	r0, #0
 8001212:	d1fa      	bne.n	800120a <BSP_LCD_DisplayStringAt+0x12>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001214:	4f23      	ldr	r7, [pc, #140]	; (80012a4 <BSP_LCD_DisplayStringAt+0xac>)
 8001216:	2034      	movs	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001218:	4923      	ldr	r1, [pc, #140]	; (80012a8 <BSP_LCD_DisplayStringAt+0xb0>)
  switch (Mode)
 800121a:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800121c:	f8d7 9000 	ldr.w	r9, [r7]
 8001220:	f8df c088 	ldr.w	ip, [pc, #136]	; 80012ac <BSP_LCD_DisplayStringAt+0xb4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001224:	eb09 0749 	add.w	r7, r9, r9, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001228:	fb00 c009 	mla	r0, r0, r9, ip
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800122c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001230:	6e00      	ldr	r0, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001232:	688f      	ldr	r7, [r1, #8]
 8001234:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 8001238:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 800123c:	d029      	beq.n	8001292 <BSP_LCD_DisplayStringAt+0x9a>
 800123e:	2b02      	cmp	r3, #2
 8001240:	d021      	beq.n	8001286 <BSP_LCD_DisplayStringAt+0x8e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001242:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001244:	b280      	uxth	r0, r0
    ref_column = 1;
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfd8      	it	le
 800124a:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800124c:	4586      	cmp	lr, r0
 800124e:	d818      	bhi.n	8001282 <BSP_LCD_DisplayStringAt+0x8a>
 8001250:	b1ba      	cbz	r2, 8001282 <BSP_LCD_DisplayStringAt+0x8a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001252:	2334      	movs	r3, #52	; 0x34
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001254:	4635      	mov	r5, r6
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001256:	fb03 c909 	mla	r9, r3, r9, ip
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800125a:	4620      	mov	r0, r4
 800125c:	4641      	mov	r1, r8
 800125e:	f7ff ff4b 	bl	80010f8 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001262:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001266:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001268:	1bab      	subs	r3, r5, r6
 800126a:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800126e:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001270:	b29b      	uxth	r3, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001272:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001274:	fb00 1313 	mls	r3, r0, r3, r1
 8001278:	b29b      	uxth	r3, r3
 800127a:	4283      	cmp	r3, r0
 800127c:	d301      	bcc.n	8001282 <BSP_LCD_DisplayStringAt+0x8a>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d1eb      	bne.n	800125a <BSP_LCD_DisplayStringAt+0x62>
}
 8001282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001286:	1b49      	subs	r1, r1, r5
 8001288:	fb11 f10e 	smulbb	r1, r1, lr
 800128c:	1b0c      	subs	r4, r1, r4
 800128e:	b2a4      	uxth	r4, r4
      break;
 8001290:	e7d7      	b.n	8001242 <BSP_LCD_DisplayStringAt+0x4a>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001292:	1b49      	subs	r1, r1, r5
 8001294:	fb0e f101 	mul.w	r1, lr, r1
 8001298:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 800129c:	b2a4      	uxth	r4, r4
      break;
 800129e:	e7d0      	b.n	8001242 <BSP_LCD_DisplayStringAt+0x4a>
  uint32_t size = 0, xsize = 0; 
 80012a0:	4615      	mov	r5, r2
 80012a2:	e7b7      	b.n	8001214 <BSP_LCD_DisplayStringAt+0x1c>
 80012a4:	200009ec 	.word	0x200009ec
 80012a8:	200009f0 	.word	0x200009f0
 80012ac:	20000a48 	.word	0x20000a48

080012b0 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <BSP_LCD_DrawPixel+0x30>)
{
 80012b2:	b430      	push	{r4, r5}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2534      	movs	r5, #52	; 0x34
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <BSP_LCD_DrawPixel+0x34>)
 80012ba:	fb05 4303 	mla	r3, r5, r3, r4
 80012be:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80012c0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80012c2:	2d02      	cmp	r5, #2
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	fb04 0101 	mla	r1, r4, r1, r0
 80012ca:	d003      	beq.n	80012d4 <BSP_LCD_DrawPixel+0x24>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80012cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80012d0:	bc30      	pop	{r4, r5}
 80012d2:	4770      	bx	lr
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012d4:	b292      	uxth	r2, r2
}
 80012d6:	bc30      	pop	{r4, r5}
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012d8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200009ec 	.word	0x200009ec
 80012e4:	20000a48 	.word	0x20000a48

080012e8 <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <BSP_LCD_DisplayOn+0x2c>)
{
 80012f2:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80012f4:	681c      	ldr	r4, [r3, #0]
 80012f6:	69a3      	ldr	r3, [r4, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80012fc:	f000 fea2 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001300:	2201      	movs	r2, #1
 8001302:	2108      	movs	r1, #8
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <BSP_LCD_DisplayOn+0x30>)
}
 8001306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800130a:	f000 be9b 	b.w	8002044 <HAL_GPIO_WritePin>
 800130e:	bf00      	nop
 8001310:	20000a48 	.word	0x20000a48
 8001314:	40022000 	.word	0x40022000
 8001318:	40022800 	.word	0x40022800

0800131c <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 800131c:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800131e:	f04f 0c10 	mov.w	ip, #16
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001322:	484e      	ldr	r0, [pc, #312]	; (800145c <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001326:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 800132a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
{
 8001330:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001334:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001336:	250e      	movs	r5, #14
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001338:	2700      	movs	r7, #0
  __HAL_RCC_LTDC_CLK_ENABLE();
 800133a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800133e:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001340:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001344:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800146c <BSP_LCD_MspInit+0x150>
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001348:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800134a:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_LTDC_CLK_ENABLE();
 800134e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001352:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
 8001358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800135e:	9201      	str	r2, [sp, #4]
 8001360:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001364:	ea42 020c 	orr.w	r2, r2, ip
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
 800136a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136c:	ea02 020c 	and.w	r2, r2, ip
 8001370:	9202      	str	r2, [sp, #8]
 8001372:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001382:	9203      	str	r2, [sp, #12]
 8001384:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800138c:	631a      	str	r2, [r3, #48]	; 0x30
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001394:	9204      	str	r2, [sp, #16]
 8001396:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
 80013a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80013a6:	9205      	str	r2, [sp, #20]
 80013a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80013b8:	9206      	str	r2, [sp, #24]
 80013ba:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80013ca:	9207      	str	r2, [sp, #28]
 80013cc:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80013d8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80013e0:	970b      	str	r7, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80013e2:	940a      	str	r4, [sp, #40]	; 0x28
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013e4:	9308      	str	r3, [sp, #32]
 80013e6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80013e8:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80013ea:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80013ec:	f000 fd0c 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80013f0:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80013f2:	a909      	add	r1, sp, #36	; 0x24
 80013f4:	481a      	ldr	r0, [pc, #104]	; (8001460 <BSP_LCD_MspInit+0x144>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80013f6:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80013f8:	4f1a      	ldr	r7, [pc, #104]	; (8001464 <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80013fa:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80013fe:	f000 fd03 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8001402:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001406:	a909      	add	r1, sp, #36	; 0x24
 8001408:	4648      	mov	r0, r9
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 800140a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800140c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800140e:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001410:	f000 fcfa 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001414:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001418:	a909      	add	r1, sp, #36	; 0x24
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800141c:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800141e:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001420:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001422:	f000 fcf1 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001426:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001428:	a909      	add	r1, sp, #36	; 0x24
 800142a:	4638      	mov	r0, r7
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800142c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800142e:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001430:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001432:	f000 fce9 	bl	8001e08 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001436:	4648      	mov	r0, r9
 8001438:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800143a:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800143e:	f000 fce3 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001442:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001444:	a909      	add	r1, sp, #36	; 0x24
 8001446:	4638      	mov	r0, r7
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001448:	e9cd 3809 	strd	r3, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800144c:	f000 fcdc 	bl	8001e08 <HAL_GPIO_Init>
}
 8001450:	b00f      	add	sp, #60	; 0x3c
 8001452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40021000 	.word	0x40021000
 8001460:	40021800 	.word	0x40021800
 8001464:	40022800 	.word	0x40022800
 8001468:	40022400 	.word	0x40022400
 800146c:	40022000 	.word	0x40022000

08001470 <BSP_LCD_ClockConfig>:
{
 8001470:	b430      	push	{r4, r5}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <BSP_LCD_ClockConfig+0x20>)
 8001474:	2508      	movs	r5, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001476:	24c0      	movs	r4, #192	; 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001478:	2105      	movs	r1, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800147a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800147e:	601d      	str	r5, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001480:	615c      	str	r4, [r3, #20]
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001482:	4618      	mov	r0, r3
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001484:	61d9      	str	r1, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001488:	bc30      	pop	{r4, r5}
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800148a:	f001 bac1 	b.w	8002a10 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	bf00      	nop
 8001490:	20000af0 	.word	0x20000af0

08001494 <BSP_LCD_Init>:
{    
 8001494:	b538      	push	{r3, r4, r5, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001496:	2209      	movs	r2, #9
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001498:	4c25      	ldr	r4, [pc, #148]	; (8001530 <BSP_LCD_Init+0x9c>)
 800149a:	2528      	movs	r5, #40	; 0x28
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800149c:	2335      	movs	r3, #53	; 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800149e:	200b      	movs	r0, #11
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014a0:	f240 111b 	movw	r1, #283	; 0x11b
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80014a4:	6165      	str	r5, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014a6:	f240 2515 	movw	r5, #533	; 0x215
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80014aa:	61a2      	str	r2, [r4, #24]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80014ac:	f240 121d 	movw	r2, #285	; 0x11d
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014b0:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80014b2:	f240 2335 	movw	r3, #565	; 0x235
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014b6:	6220      	str	r0, [r4, #32]
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80014b8:	4620      	mov	r0, r4
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014ba:	62a1      	str	r1, [r4, #40]	; 0x28
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80014bc:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014be:	6265      	str	r5, [r4, #36]	; 0x24
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80014c0:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80014c4:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80014c8:	f7ff ffd2 	bl	8001470 <BSP_LCD_ClockConfig>
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80014cc:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80014ce:	f44f 7188 	mov.w	r1, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <BSP_LCD_Init+0xa0>)
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80014d4:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80014d6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hLtdcHandler.Instance = LTDC;
 80014d8:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.Backcolor.Green = 0;
 80014da:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80014de:	e9c4 5118 	strd	r5, r1, [r4, #96]	; 0x60
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80014e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014e6:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80014ea:	f000 ffbb 	bl	8002464 <HAL_LTDC_GetState>
 80014ee:	b918      	cbnz	r0, 80014f8 <BSP_LCD_Init+0x64>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80014f0:	4601      	mov	r1, r0
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff ff12 	bl	800131c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <BSP_LCD_Init+0x9c>)
 80014fa:	f000 fda7 	bl	800204c <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <BSP_LCD_Init+0xa4>)
 8001506:	f000 fd9d 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2108      	movs	r1, #8
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <BSP_LCD_Init+0xa8>)
 8001510:	f000 fd98 	bl	8002044 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001514:	f000 f8d4 	bl	80016c0 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <BSP_LCD_Init+0xac>)
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <BSP_LCD_Init+0xb0>)
}
 800151c:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4909      	ldr	r1, [pc, #36]	; (8001548 <BSP_LCD_Init+0xb4>)
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800152a:	6099      	str	r1, [r3, #8]
}
 800152c:	bd38      	pop	{r3, r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	20000a48 	.word	0x20000a48
 8001534:	40016800 	.word	0x40016800
 8001538:	40022000 	.word	0x40022000
 800153c:	40022800 	.word	0x40022800
 8001540:	200009ec 	.word	0x200009ec
 8001544:	200009f0 	.word	0x200009f0
 8001548:	20000018 	.word	0x20000018

0800154c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <BSP_SDRAM_MspInit+0x150>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800154e:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
 8001550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001552:	f042 0201 	orr.w	r2, r2, #1
{  
 8001556:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
{  
 800155a:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 800155c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800155e:	2001      	movs	r0, #1
{  
 8001560:	b08e      	sub	sp, #56	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001562:	2508      	movs	r5, #8
  __HAL_RCC_FMC_CLK_ENABLE();
 8001564:	4002      	ands	r2, r0
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001566:	ac0e      	add	r4, sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001568:	9201      	str	r2, [sp, #4]
 800156a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800156c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
 8001574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001576:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800157a:	9202      	str	r2, [sp, #8]
 800157c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001580:	f042 0204 	orr.w	r2, r2, #4
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
 8001586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001588:	f002 0204 	and.w	r2, r2, #4
 800158c:	9203      	str	r2, [sp, #12]
 800158e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001592:	432a      	orrs	r2, r5
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	402a      	ands	r2, r5
 800159a:	9204      	str	r2, [sp, #16]
 800159c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f042 0210 	orr.w	r2, r2, #16
 80015a4:	631a      	str	r2, [r3, #48]	; 0x30
 80015a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a8:	f002 0210 	and.w	r2, r2, #16
 80015ac:	9205      	str	r2, [sp, #20]
 80015ae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
 80015b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ba:	f002 0220 	and.w	r2, r2, #32
 80015be:	9206      	str	r2, [sp, #24]
 80015c0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80015d0:	9207      	str	r2, [sp, #28]
 80015d2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80015dc:	220c      	movs	r2, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80015e0:	f844 5d14 	str.w	r5, [r4, #-20]!
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80015e4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80015ea:	910a      	str	r1, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80015ec:	910c      	str	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80015ee:	4621      	mov	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f0:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80015f2:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80015f4:	482a      	ldr	r0, [pc, #168]	; (80016a0 <BSP_SDRAM_MspInit+0x154>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80015f6:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f8:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80015fa:	f000 fc05 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80015fe:	f24c 730b 	movw	r3, #50955	; 0xc70b
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001602:	4621      	mov	r1, r4
 8001604:	4827      	ldr	r0, [pc, #156]	; (80016a4 <BSP_SDRAM_MspInit+0x158>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001606:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001608:	f000 fbfe 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800160c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001610:	4621      	mov	r1, r4
 8001612:	4825      	ldr	r0, [pc, #148]	; (80016a8 <BSP_SDRAM_MspInit+0x15c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001614:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001616:	f000 fbf7 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800161a:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800161e:	4621      	mov	r1, r4
 8001620:	4822      	ldr	r0, [pc, #136]	; (80016ac <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001622:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001624:	f000 fbf0 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001628:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800162c:	4621      	mov	r1, r4
 800162e:	4820      	ldr	r0, [pc, #128]	; (80016b0 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001630:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001632:	f000 fbe9 	bl	8001e08 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001636:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001638:	4621      	mov	r1, r4
 800163a:	481e      	ldr	r0, [pc, #120]	; (80016b4 <BSP_SDRAM_MspInit+0x168>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800163c:	4c1e      	ldr	r4, [pc, #120]	; (80016b8 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800163e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001640:	f000 fbe2 	bl	8001e08 <HAL_GPIO_Init>
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001644:	f44f 7300 	mov.w	r3, #512	; 0x200
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001648:	2180      	movs	r1, #128	; 0x80
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800164a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800164e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001652:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001658:	60a1      	str	r1, [r4, #8]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800165a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800165e:	6122      	str	r2, [r4, #16]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001660:	2203      	movs	r2, #3
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001662:	6223      	str	r3, [r4, #32]
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <BSP_SDRAM_MspInit+0x170>)
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001666:	6325      	str	r5, [r4, #48]	; 0x30
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001668:	6160      	str	r0, [r4, #20]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800166a:	4620      	mov	r0, r4
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800166c:	6334      	str	r4, [r6, #48]	; 0x30
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800166e:	61a1      	str	r1, [r4, #24]
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001670:	62a2      	str	r2, [r4, #40]	; 0x28
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001672:	61e5      	str	r5, [r4, #28]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001674:	6265      	str	r5, [r4, #36]	; 0x24
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001676:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001678:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800167a:	e9c4 3500 	strd	r3, r5, [r4]
  HAL_DMA_DeInit(&dma_handle);
 800167e:	f000 fa13 	bl	8001aa8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001682:	4620      	mov	r0, r4
 8001684:	f000 f974 	bl	8001970 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8001688:	462a      	mov	r2, r5
 800168a:	2105      	movs	r1, #5
 800168c:	2038      	movs	r0, #56	; 0x38
 800168e:	f000 f913 	bl	80018b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001692:	2038      	movs	r0, #56	; 0x38
 8001694:	f000 f946 	bl	8001924 <HAL_NVIC_EnableIRQ>
}
 8001698:	b00e      	add	sp, #56	; 0x38
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40021c00 	.word	0x40021c00
 80016b8:	20000ba0 	.word	0x20000ba0
 80016bc:	40026410 	.word	0x40026410

080016c0 <BSP_SDRAM_Init>:
{ 
 80016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80016c4:	483d      	ldr	r0, [pc, #244]	; (80017bc <BSP_SDRAM_Init+0xfc>)
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80016c6:	2600      	movs	r6, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80016c8:	4d3d      	ldr	r5, [pc, #244]	; (80017c0 <BSP_SDRAM_Init+0x100>)
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ca:	2140      	movs	r1, #64	; 0x40
  Timing.LoadToActiveDelay    = 2;
 80016cc:	4c3d      	ldr	r4, [pc, #244]	; (80017c4 <BSP_SDRAM_Init+0x104>)
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80016ce:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80016d2:	f04f 0810 	mov.w	r8, #16
  Timing.LoadToActiveDelay    = 2;
 80016d6:	f04f 0902 	mov.w	r9, #2
  Timing.ExitSelfRefreshDelay = 7;
 80016da:	2307      	movs	r3, #7
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80016dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  Timing.SelfRefreshTime      = 4;
 80016e0:	f04f 0a04 	mov.w	sl, #4
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80016e4:	f44f 7780 	mov.w	r7, #256	; 0x100
{ 
 80016e8:	b083      	sub	sp, #12
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80016ea:	6028      	str	r0, [r5, #0]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ec:	6169      	str	r1, [r5, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80016ee:	4628      	mov	r0, r5
 80016f0:	4631      	mov	r1, r6
  Timing.ExitSelfRefreshDelay = 7;
 80016f2:	6063      	str	r3, [r4, #4]
  Timing.RowCycleDelay        = 7;
 80016f4:	60e3      	str	r3, [r4, #12]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80016f6:	61af      	str	r7, [r5, #24]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80016f8:	2701      	movs	r7, #1
  Timing.SelfRefreshTime      = 4;
 80016fa:	f8c4 a008 	str.w	sl, [r4, #8]
  Timing.LoadToActiveDelay    = 2;
 80016fe:	f8c4 9000 	str.w	r9, [r4]
  Timing.RCDDelay             = 2;
 8001702:	f8c4 9018 	str.w	r9, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001706:	61ee      	str	r6, [r5, #28]
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001708:	62ae      	str	r6, [r5, #40]	; 0x28
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800170a:	f8c5 a00c 	str.w	sl, [r5, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800170e:	f8c5 8010 	str.w	r8, [r5, #16]
 8001712:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80017cc <BSP_SDRAM_Init+0x10c>
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001716:	e9c5 c208 	strd	ip, r2, [r5, #32]
  Timing.RPDelay              = 2;
 800171a:	e9c4 9904 	strd	r9, r9, [r4, #16]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800171e:	e9c5 6601 	strd	r6, r6, [r5, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001722:	f7ff ff13 	bl	800154c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001726:	4621      	mov	r1, r4
 8001728:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800172a:	4c27      	ldr	r4, [pc, #156]	; (80017c8 <BSP_SDRAM_Init+0x108>)
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800172c:	f001 fc12 	bl	8002f54 <HAL_SDRAM_Init>
 8001730:	1b83      	subs	r3, r0, r6
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001732:	4621      	mov	r1, r4
 8001734:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001738:	bf18      	it	ne
 800173a:	2301      	movne	r3, #1
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800173c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800173e:	9601      	str	r6, [sp, #4]
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001740:	f88b 3000 	strb.w	r3, [fp]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001744:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8001748:	60e6      	str	r6, [r4, #12]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800174a:	6027      	str	r7, [r4, #0]
  Command.AutoRefreshNumber      = 1;
 800174c:	60a7      	str	r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800174e:	f001 fc23 	bl	8002f98 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8001752:	4638      	mov	r0, r7
 8001754:	f000 f88a 	bl	800186c <HAL_Delay>
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001758:	4621      	mov	r1, r4
 800175a:	4628      	mov	r0, r5
 800175c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001760:	e9c4 9800 	strd	r9, r8, [r4]
  Command.ModeRegisterDefinition = 0;
 8001764:	e9c4 7602 	strd	r7, r6, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001768:	f001 fc16 	bl	8002f98 <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800176c:	f04f 0c03 	mov.w	ip, #3
  Command.AutoRefreshNumber      = 8;
 8001770:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001772:	4621      	mov	r1, r4
 8001774:	4628      	mov	r0, r5
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800177a:	f8c4 c000 	str.w	ip, [r4]
  Command.AutoRefreshNumber      = 8;
 800177e:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001780:	f8c4 8004 	str.w	r8, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8001784:	60e6      	str	r6, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001786:	f001 fc07 	bl	8002f98 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800178a:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800178e:	4621      	mov	r1, r4
 8001790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001794:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001796:	9301      	str	r3, [sp, #4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001798:	9b01      	ldr	r3, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800179a:	e9c4 a800 	strd	sl, r8, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 800179e:	e9c4 7302 	strd	r7, r3, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80017a2:	f001 fbf9 	bl	8002f98 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80017a6:	4628      	mov	r0, r5
 80017a8:	f240 6103 	movw	r1, #1539	; 0x603
 80017ac:	f001 fc0e 	bl	8002fcc <HAL_SDRAM_ProgramRefreshRate>
}
 80017b0:	f89b 0000 	ldrb.w	r0, [fp]
 80017b4:	b003      	add	sp, #12
 80017b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ba:	bf00      	nop
 80017bc:	a0000140 	.word	0xa0000140
 80017c0:	20000c00 	.word	0x20000c00
 80017c4:	20000b84 	.word	0x20000b84
 80017c8:	20000b74 	.word	0x20000b74
 80017cc:	2000000c 	.word	0x2000000c

080017d0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_InitTick+0x3c>)
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_InitTick+0x40>)
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	fbb3 f3f2 	udiv	r3, r3, r2
{
 80017e2:	b510      	push	{r4, lr}
 80017e4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e6:	6808      	ldr	r0, [r1, #0]
 80017e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80017ec:	f000 f8a8 	bl	8001940 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f0:	b908      	cbnz	r0, 80017f6 <HAL_InitTick+0x22>
 80017f2:	2c0f      	cmp	r4, #15
 80017f4:	d901      	bls.n	80017fa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80017f8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fa:	2200      	movs	r2, #0
 80017fc:	4621      	mov	r1, r4
 80017fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001802:	f000 f859 	bl	80018b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_InitTick+0x44>)
 8001808:	2000      	movs	r0, #0
 800180a:	601c      	str	r4, [r3, #0]
}
 800180c:	bd10      	pop	{r4, pc}
 800180e:	bf00      	nop
 8001810:	2000000d 	.word	0x2000000d
 8001814:	20000014 	.word	0x20000014
 8001818:	20000010 	.word	0x20000010

0800181c <HAL_Init>:
{
 800181c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001828:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001830:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001832:	f000 f82d 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff ffcc 	bl	80017d4 <HAL_InitTick>
  HAL_MspInit();
 800183c:	f7ff ffc8 	bl	80017d0 <HAL_MspInit>
}
 8001840:	2000      	movs	r0, #0
 8001842:	bd08      	pop	{r3, pc}
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x10>)
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_IncTick+0x14>)
 800184c:	6811      	ldr	r1, [r2, #0]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	440b      	add	r3, r1
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20017c68 	.word	0x20017c68
 800185c:	2000000d 	.word	0x2000000d

08001860 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001860:	4b01      	ldr	r3, [pc, #4]	; (8001868 <HAL_GetTick+0x8>)
 8001862:	6818      	ldr	r0, [r3, #0]
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20017c68 	.word	0x20017c68

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff fff6 	bl	8001860 <HAL_GetTick>
 8001874:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	1c63      	adds	r3, r4, #1
 8001878:	d002      	beq.n	8001880 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_Delay+0x20>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	1b40      	subs	r0, r0, r5
 8001886:	42a0      	cmp	r0, r4
 8001888:	d3fa      	bcc.n	8001880 <HAL_Delay+0x14>
  {
  }
}
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	2000000d 	.word	0x2000000d

08001890 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001892:	0200      	lsls	r0, r0, #8
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001896:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80018a2:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018aa:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80018ac:	60c8      	str	r0, [r1, #12]
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	05fa0000 	.word	0x05fa0000

080018b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_NVIC_SetPriority+0x60>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c0:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	2d04      	cmp	r5, #4
 80018ca:	bf28      	it	cs
 80018cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	2c06      	cmp	r4, #6
 80018d0:	d918      	bls.n	8001904 <HAL_NVIC_SetPriority+0x4c>
 80018d2:	3b03      	subs	r3, #3
 80018d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80018d8:	409c      	lsls	r4, r3
 80018da:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80018e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	fa02 f205 	lsl.w	r2, r2, r5
 80018e8:	ea21 0102 	bic.w	r1, r1, r2
 80018ec:	fa01 f203 	lsl.w	r2, r1, r3
 80018f0:	ea42 0204 	orr.w	r2, r2, r4
 80018f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80018f8:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80018fa:	db06      	blt.n	800190a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_NVIC_SetPriority+0x64>)
 80018fe:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001900:	bc30      	pop	{r4, r5}
 8001902:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001904:	2400      	movs	r4, #0
 8001906:	4623      	mov	r3, r4
 8001908:	e7e9      	b.n	80018de <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	f000 000f 	and.w	r0, r0, #15
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_NVIC_SetPriority+0x68>)
 8001910:	541a      	strb	r2, [r3, r0]
 8001912:	bc30      	pop	{r4, r5}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	e000e400 	.word	0xe000e400
 8001920:	e000ed14 	.word	0xe000ed14

08001924 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001924:	2800      	cmp	r0, #0
 8001926:	db07      	blt.n	8001938 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001928:	2301      	movs	r3, #1
 800192a:	f000 011f 	and.w	r1, r0, #31
 800192e:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_NVIC_EnableIRQ+0x18>)
 8001930:	0940      	lsrs	r0, r0, #5
 8001932:	408b      	lsls	r3, r1
 8001934:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	3801      	subs	r0, #1
 8001942:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001946:	d20d      	bcs.n	8001964 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194c:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	25f0      	movs	r5, #240	; 0xf0
 8001952:	4c06      	ldr	r4, [pc, #24]	; (800196c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001954:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001956:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001960:	bc30      	pop	{r4, r5}
 8001962:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001964:	2001      	movs	r0, #1
 8001966:	4770      	bx	lr
 8001968:	e000e010 	.word	0xe000e010
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ff74 	bl	8001860 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001978:	2c00      	cmp	r4, #0
 800197a:	d053      	beq.n	8001a24 <HAL_DMA_Init+0xb4>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800197e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001980:	2100      	movs	r1, #0
 8001982:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001988:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800198a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001994:	e005      	b.n	80019a2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7ff ff63 	bl	8001860 <HAL_GetTick>
 800199a:	1b40      	subs	r0, r0, r5
 800199c:	2805      	cmp	r0, #5
 800199e:	d83a      	bhi.n	8001a16 <HAL_DMA_Init+0xa6>
 80019a0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	07d1      	lsls	r1, r2, #31
 80019a6:	d4f6      	bmi.n	8001996 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80019ac:	68e1      	ldr	r1, [r4, #12]
 80019ae:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CR;
 80019b0:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b8:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ba:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019bc:	e9d4 6106 	ldrd	r6, r1, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c0:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c2:	4d35      	ldr	r5, [pc, #212]	; (8001a98 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c4:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c6:	403d      	ands	r5, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80019cc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ce:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d0:	ea42 0205 	orr.w	r2, r2, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d4:	d028      	beq.n	8001a28 <HAL_DMA_Init+0xb8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d8:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019da:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019de:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4d2e      	ldr	r5, [pc, #184]	; (8001a9c <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80019e4:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e6:	3a10      	subs	r2, #16
 80019e8:	492d      	ldr	r1, [pc, #180]	; (8001aa0 <HAL_DMA_Init+0x130>)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ea:	482e      	ldr	r0, [pc, #184]	; (8001aa4 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019ec:	fba5 5202 	umull	r5, r2, r5, r2
 80019f0:	4019      	ands	r1, r3
  hdma->State = HAL_DMA_STATE_READY;
 80019f2:	2501      	movs	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f4:	0913      	lsrs	r3, r2, #4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019f8:	5cc0      	ldrb	r0, [r0, r3]
  
  if (stream_number > 3U)
 80019fa:	2b03      	cmp	r3, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019fc:	f04f 033f 	mov.w	r3, #63	; 0x3f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a00:	bf88      	it	hi
 8001a02:	3104      	addhi	r1, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a04:	65e0      	str	r0, [r4, #92]	; 0x5c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a06:	4083      	lsls	r3, r0
  return HAL_OK;
 8001a08:	4610      	mov	r0, r2
 8001a0a:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0c:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0e:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001a10:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a18:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001a1a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
}
 8001a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a28:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001a2c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2e:	ea45 0001 	orr.w	r0, r5, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001a32:	f047 0104 	orr.w	r1, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a36:	4302      	orrs	r2, r0
  hdma->Instance->CR = tmp;  
 8001a38:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001a3a:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a3c:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001a40:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a42:	2d00      	cmp	r5, #0
 8001a44:	d0cc      	beq.n	80019e0 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a46:	b17e      	cbz	r6, 8001a68 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a48:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001a4c:	d016      	beq.n	8001a7c <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a4e:	2f02      	cmp	r7, #2
 8001a50:	d903      	bls.n	8001a5a <HAL_DMA_Init+0xea>
 8001a52:	2f03      	cmp	r7, #3
 8001a54:	d1c4      	bne.n	80019e0 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a56:	01ea      	lsls	r2, r5, #7
 8001a58:	d5c2      	bpl.n	80019e0 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5c:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8001a5e:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a60:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001a62:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001a68:	2f01      	cmp	r7, #1
 8001a6a:	d003      	beq.n	8001a74 <HAL_DMA_Init+0x104>
 8001a6c:	d3f3      	bcc.n	8001a56 <HAL_DMA_Init+0xe6>
 8001a6e:	2f02      	cmp	r7, #2
 8001a70:	d1b6      	bne.n	80019e0 <HAL_DMA_Init+0x70>
 8001a72:	e7f0      	b.n	8001a56 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a74:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001a78:	d1b2      	bne.n	80019e0 <HAL_DMA_Init+0x70>
 8001a7a:	e7ee      	b.n	8001a5a <HAL_DMA_Init+0xea>
    switch (tmp)
 8001a7c:	2f03      	cmp	r7, #3
 8001a7e:	d8af      	bhi.n	80019e0 <HAL_DMA_Init+0x70>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <HAL_DMA_Init+0x118>)
 8001a82:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001a5b 	.word	0x08001a5b
 8001a8c:	08001a57 	.word	0x08001a57
 8001a90:	08001a5b 	.word	0x08001a5b
 8001a94:	08001a75 	.word	0x08001a75
 8001a98:	f010803f 	.word	0xf010803f
 8001a9c:	aaaaaaab 	.word	0xaaaaaaab
 8001aa0:	fffffc00 	.word	0xfffffc00
 8001aa4:	0800cf70 	.word	0x0800cf70

08001aa8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d035      	beq.n	8001b18 <HAL_DMA_DeInit+0x70>
 8001aac:	4603      	mov	r3, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001aae:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
 8001ab2:	b2c0      	uxtb	r0, r0
 8001ab4:	2802      	cmp	r0, #2
 8001ab6:	d031      	beq.n	8001b1c <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8001ab8:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8001aba:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001abc:	b2d1      	uxtb	r1, r2
{
 8001abe:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac0:	3910      	subs	r1, #16
  __HAL_DMA_DISABLE(hdma);
 8001ac2:	6814      	ldr	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac4:	4d16      	ldr	r5, [pc, #88]	; (8001b20 <HAL_DMA_DeInit+0x78>)
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001ac6:	2621      	movs	r6, #33	; 0x21
  __HAL_DMA_DISABLE(hdma);
 8001ac8:	f024 0401 	bic.w	r4, r4, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001acc:	fba5 5101 	umull	r5, r1, r5, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad0:	4d14      	ldr	r5, [pc, #80]	; (8001b24 <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 8001ad2:	6014      	str	r4, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ad4:	0909      	lsrs	r1, r1, #4
 8001ad6:	4c14      	ldr	r4, [pc, #80]	; (8001b28 <HAL_DMA_DeInit+0x80>)
  hdma->Instance->CR   = 0U;
 8001ad8:	6010      	str	r0, [r2, #0]
 8001ada:	4014      	ands	r4, r2
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001adc:	5c6d      	ldrb	r5, [r5, r1]
  if (stream_number > 3U)
 8001ade:	2903      	cmp	r1, #3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae0:	f04f 013f 	mov.w	r1, #63	; 0x3f
  hdma->Instance->NDTR = 0U;
 8001ae4:	6050      	str	r0, [r2, #4]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ae6:	bf88      	it	hi
 8001ae8:	3404      	addhi	r4, #4
  hdma->Instance->PAR  = 0U;
 8001aea:	6090      	str	r0, [r2, #8]
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	40a9      	lsls	r1, r5
  hdma->Instance->M0AR = 0U;
 8001aee:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8001af0:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001af2:	6156      	str	r6, [r2, #20]
  hdma->XferCpltCallback = NULL;
 8001af4:	2200      	movs	r2, #0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001af6:	65dd      	str	r5, [r3, #92]	; 0x5c
 8001af8:	659c      	str	r4, [r3, #88]	; 0x58
  return HAL_OK;
 8001afa:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	60a1      	str	r1, [r4, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001b08:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001b0c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8001b10:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
}
 8001b14:	bc70      	pop	{r4, r5, r6}
 8001b16:	4770      	bx	lr
    return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	4770      	bx	lr
}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	aaaaaaab 	.word	0xaaaaaaab
 8001b24:	0800cf70 	.word	0x0800cf70
 8001b28:	fffffc00 	.word	0xfffffc00

08001b2c <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001b30:	b340      	cbz	r0, 8001b84 <HAL_DMA2D_Init+0x54>
{ 
 8001b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b34:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b38:	4604      	mov	r4, r0
 8001b3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b3e:	b1e3      	cbz	r3, 8001b7a <HAL_DMA2D_Init+0x4a>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001b40:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b42:	68a7      	ldr	r7, [r4, #8]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b44:	2500      	movs	r5, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b46:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001b48:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  return HAL_OK;
 8001b4c:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b4e:	e9d4 3100 	ldrd	r3, r1, [r4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b60:	f021 0107 	bic.w	r1, r1, #7
 8001b64:	4339      	orrs	r1, r7
 8001b66:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001b68:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	68e1      	ldr	r1, [r4, #12]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b72:	63e5      	str	r5, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b74:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
}
 8001b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001b7a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001b7e:	f7ff ffd5 	bl	8001b2c <HAL_DMA2D_MspInit>
 8001b82:	e7dd      	b.n	8001b40 <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
}
 8001b86:	4770      	bx	lr
 8001b88:	ffffc000 	.word	0xffffc000

08001b8c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001b8c:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b8e:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001b92:	2c01      	cmp	r4, #1
 8001b94:	d036      	beq.n	8001c04 <HAL_DMA2D_Start+0x78>
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001b96:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b98:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001b9a:	9e03      	ldr	r6, [sp, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b9c:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001ba0:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8001ba4:	6c65      	ldr	r5, [r4, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 8001ba6:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001ba8:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  __HAL_LOCK(hdma2d);
 8001bac:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bb0:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001bb2:	432b      	orrs	r3, r5
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bb4:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001bb8:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001bba:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bbc:	d007      	beq.n	8001bce <HAL_DMA2D_Start+0x42>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001bbe:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8001bc0:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6023      	str	r3, [r4, #0]
}
 8001bca:	bc70      	pop	{r4, r5, r6}
 8001bcc:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001bce:	6882      	ldr	r2, [r0, #8]
 8001bd0:	b1b2      	cbz	r2, 8001c00 <HAL_DMA2D_Start+0x74>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001bd2:	2a01      	cmp	r2, #1
 8001bd4:	d024      	beq.n	8001c20 <HAL_DMA2D_Start+0x94>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001bd6:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001bd8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001bdc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001be0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001be2:	d020      	beq.n	8001c26 <HAL_DMA2D_Start+0x9a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001be4:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001be6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA2D_Start+0x7e>
      tmp2 = (tmp2 >> 20);
 8001bec:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12);
 8001bee:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001bf0:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 8001bf2:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001bf4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001bf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001bfc:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8001c00:	63a1      	str	r1, [r4, #56]	; 0x38
 8001c02:	e7dd      	b.n	8001bc0 <HAL_DMA2D_Start+0x34>
  __HAL_LOCK(hdma2d);
 8001c04:	2002      	movs	r0, #2
}
 8001c06:	bc70      	pop	{r4, r5, r6}
 8001c08:	4770      	bx	lr
      tmp2 = (tmp2 >> 19);
 8001c0a:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 8001c0c:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001c0e:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8001c10:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001c12:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001c16:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8001c1a:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001c1e:	e7ef      	b.n	8001c00 <HAL_DMA2D_Start+0x74>
      tmp = (tmp3 | tmp2 | tmp4);  
 8001c20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001c24:	e7ec      	b.n	8001c00 <HAL_DMA2D_Start+0x74>
      tmp2 = (tmp2 >> 19);
 8001c26:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 8001c28:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8001c2a:	02c9      	lsls	r1, r1, #11
 8001c2c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8001c30:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8001c34:	e7e4      	b.n	8001c00 <HAL_DMA2D_Start+0x74>
 8001c36:	bf00      	nop

08001c38 <HAL_DMA2D_PollForTransfer>:
{
 8001c38:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001c3a:	2200      	movs	r2, #0
{
 8001c3c:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001c3e:	6803      	ldr	r3, [r0, #0]
{
 8001c40:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0;  
 8001c42:	9201      	str	r2, [sp, #4]
{
 8001c44:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	07d2      	lsls	r2, r2, #31
 8001c4a:	d420      	bmi.n	8001c8e <HAL_DMA2D_PollForTransfer+0x56>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	0690      	lsls	r0, r2, #26
 8001c50:	d402      	bmi.n	8001c58 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001c54:	0691      	lsls	r1, r2, #26
 8001c56:	d50f      	bpl.n	8001c78 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 8001c58:	f7ff fe02 	bl	8001860 <HAL_GetTick>
 8001c5c:	4606      	mov	r6, r0
 8001c5e:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	d006      	beq.n	8001c72 <HAL_DMA2D_PollForTransfer+0x3a>
 8001c64:	e032      	b.n	8001ccc <HAL_DMA2D_PollForTransfer+0x94>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001c6a:	9a01      	ldr	r2, [sp, #4]
 8001c6c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001c70:	d147      	bne.n	8001d02 <HAL_DMA2D_PollForTransfer+0xca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	06d1      	lsls	r1, r2, #27
 8001c76:	d5f6      	bpl.n	8001c66 <HAL_DMA2D_PollForTransfer+0x2e>
  __HAL_UNLOCK(hdma2d);
 8001c78:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001c7a:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c7c:	2101      	movs	r1, #1
  return HAL_OK;
 8001c7e:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001c80:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001c82:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c86:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
}
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001c8e:	f7ff fde7 	bl	8001860 <HAL_GetTick>
 8001c92:	4606      	mov	r6, r0
 8001c94:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	d153      	bne.n	8001d42 <HAL_DMA2D_PollForTransfer+0x10a>
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	0791      	lsls	r1, r2, #30
 8001c9e:	d4d5      	bmi.n	8001c4c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001ca4:	9a01      	ldr	r2, [sp, #4]
 8001ca6:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001caa:	d0f6      	beq.n	8001c9a <HAL_DMA2D_PollForTransfer+0x62>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001cac:	9a01      	ldr	r2, [sp, #4]
 8001cae:	0696      	lsls	r6, r2, #26
 8001cb0:	d503      	bpl.n	8001cba <HAL_DMA2D_PollForTransfer+0x82>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001cb2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cb4:	f042 0202 	orr.w	r2, r2, #2
 8001cb8:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001cba:	9a01      	ldr	r2, [sp, #4]
 8001cbc:	07d5      	lsls	r5, r2, #31
 8001cbe:	d503      	bpl.n	8001cc8 <HAL_DMA2D_PollForTransfer+0x90>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001cc0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001cc8:	2521      	movs	r5, #33	; 0x21
 8001cca:	e030      	b.n	8001d2e <HAL_DMA2D_PollForTransfer+0xf6>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	06d2      	lsls	r2, r2, #27
 8001cd0:	d4d2      	bmi.n	8001c78 <HAL_DMA2D_PollForTransfer+0x40>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001cd6:	9a01      	ldr	r2, [sp, #4]
 8001cd8:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001cdc:	d111      	bne.n	8001d02 <HAL_DMA2D_PollForTransfer+0xca>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cde:	b125      	cbz	r5, 8001cea <HAL_DMA2D_PollForTransfer+0xb2>
 8001ce0:	f7ff fdbe 	bl	8001860 <HAL_GetTick>
 8001ce4:	1b80      	subs	r0, r0, r6
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d9b9      	bls.n	8001c5e <HAL_DMA2D_PollForTransfer+0x26>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001cea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001cec:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 8001cee:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 8001cf4:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 8001cf6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001cfa:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001cfc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8001d00:	e7c3      	b.n	8001c8a <HAL_DMA2D_PollForTransfer+0x52>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001d02:	9a01      	ldr	r2, [sp, #4]
 8001d04:	0712      	lsls	r2, r2, #28
 8001d06:	d503      	bpl.n	8001d10 <HAL_DMA2D_PollForTransfer+0xd8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001d08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d0a:	f042 0204 	orr.w	r2, r2, #4
 8001d0e:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001d10:	9a01      	ldr	r2, [sp, #4]
 8001d12:	0696      	lsls	r6, r2, #26
 8001d14:	d503      	bpl.n	8001d1e <HAL_DMA2D_PollForTransfer+0xe6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001d16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d18:	f042 0202 	orr.w	r2, r2, #2
 8001d1c:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001d1e:	9a01      	ldr	r2, [sp, #4]
 8001d20:	07d5      	lsls	r5, r2, #31
 8001d22:	d503      	bpl.n	8001d2c <HAL_DMA2D_PollForTransfer+0xf4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001d24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d2c:	2529      	movs	r5, #41	; 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001d2e:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 8001d30:	2200      	movs	r2, #0
        return HAL_ERROR;      
 8001d32:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d34:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001d36:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001d3a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	0792      	lsls	r2, r2, #30
 8001d46:	d481      	bmi.n	8001c4c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001d4c:	9a01      	ldr	r2, [sp, #4]
 8001d4e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001d52:	d1ab      	bne.n	8001cac <HAL_DMA2D_PollForTransfer+0x74>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	d0c8      	beq.n	8001cea <HAL_DMA2D_PollForTransfer+0xb2>
 8001d58:	f7ff fd82 	bl	8001860 <HAL_GetTick>
 8001d5c:	1b80      	subs	r0, r0, r6
 8001d5e:	42a8      	cmp	r0, r5
 8001d60:	d998      	bls.n	8001c94 <HAL_DMA2D_PollForTransfer+0x5c>
 8001d62:	e7c2      	b.n	8001cea <HAL_DMA2D_PollForTransfer+0xb2>

08001d64 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001d64:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001d68:	2a01      	cmp	r2, #1
 8001d6a:	d049      	beq.n	8001e00 <HAL_DMA2D_ConfigLayer+0x9c>
 8001d6c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d6e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
{ 
 8001d72:	b4f0      	push	{r4, r5, r6, r7}
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d74:	e9d0 2507 	ldrd	r2, r5, [r0, #28]
  __HAL_LOCK(hdma2d);
 8001d78:	2701      	movs	r7, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001d7a:	2402      	movs	r4, #2
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d7c:	f1a2 0609 	sub.w	r6, r2, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d80:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  __HAL_LOCK(hdma2d);
 8001d84:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d88:	42be      	cmp	r6, r7
 8001d8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001d8c:	f883 4039 	strb.w	r4, [r3, #57]	; 0x39
 8001d90:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d92:	d91a      	bls.n	8001dca <HAL_DMA2D_ConfigLayer+0x66>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d94:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == 0)
 8001d98:	b179      	cbz	r1, 8001dba <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001d9a:	69e5      	ldr	r5, [r4, #28]
 8001d9c:	4919      	ldr	r1, [pc, #100]	; (8001e04 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001d9e:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001da0:	4029      	ands	r1, r5
 8001da2:	430a      	orrs	r2, r1
 8001da4:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001da6:	6120      	str	r0, [r4, #16]
  __HAL_UNLOCK(hdma2d);  
 8001da8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001daa:	2101      	movs	r1, #1
  return HAL_OK;
 8001dac:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dae:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 8001db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001db6:	bcf0      	pop	{r4, r5, r6, r7}
 8001db8:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001dbc:	4911      	ldr	r1, [pc, #68]	; (8001e04 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dbe:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dc0:	4029      	ands	r1, r5
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dc6:	61a0      	str	r0, [r4, #24]
 8001dc8:	e7ee      	b.n	8001da8 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001dca:	f005 467f 	and.w	r6, r5, #4278190080	; 0xff000000
 8001dce:	4332      	orrs	r2, r6
  if(LayerIdx == 0)
 8001dd0:	b151      	cbz	r1, 8001de8 <HAL_DMA2D_ConfigLayer+0x84>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dd2:	69e6      	ldr	r6, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001dd4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dd8:	490a      	ldr	r1, [pc, #40]	; (8001e04 <HAL_DMA2D_ConfigLayer+0xa0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001dda:	6980      	ldr	r0, [r0, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ddc:	4031      	ands	r1, r6
 8001dde:	430a      	orrs	r2, r1
 8001de0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001de2:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001de4:	6225      	str	r5, [r4, #32]
 8001de6:	e7df      	b.n	8001da8 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001de8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001dea:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_DMA2D_ConfigLayer+0xa0>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001dec:	6a58      	ldr	r0, [r3, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dee:	4029      	ands	r1, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001df0:	699d      	ldr	r5, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001df6:	430a      	orrs	r2, r1
 8001df8:	6262      	str	r2, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dfa:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001dfc:	62a0      	str	r0, [r4, #40]	; 0x28
 8001dfe:	e7d3      	b.n	8001da8 <HAL_DMA2D_ConfigLayer+0x44>
  __HAL_LOCK(hdma2d);
 8001e00:	2002      	movs	r0, #2
}
 8001e02:	4770      	bx	lr
 8001e04:	00fcfff0 	.word	0x00fcfff0

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	f8df c22c 	ldr.w	ip, [pc, #556]	; 800203c <HAL_GPIO_Init+0x234>
{
 8001e10:	b083      	sub	sp, #12
 8001e12:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e14:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8002040 <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	f8d1 8000 	ldr.w	r8, [r1]
 8001e1e:	e003      	b.n	8001e28 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e20:	3501      	adds	r5, #1
 8001e22:	2d10      	cmp	r5, #16
 8001e24:	f000 80b6 	beq.w	8001f94 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2c:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d1f5      	bne.n	8001e20 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e34:	f8de 4004 	ldr.w	r4, [lr, #4]
 8001e38:	f024 0710 	bic.w	r7, r4, #16
 8001e3c:	2f02      	cmp	r7, #2
 8001e3e:	f040 80ac 	bne.w	8001f9a <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 8001e42:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e44:	f005 0a07 	and.w	sl, r5, #7
 8001e48:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e4c:	f8de 2010 	ldr.w	r2, [lr, #16]
 8001e50:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e54:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001e58:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e5a:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e5e:	fa02 f20a 	lsl.w	r2, r2, sl
 8001e62:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e66:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e6a:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e6e:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e70:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e74:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8001e78:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e7a:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 8001e7e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e80:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e84:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e86:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001e88:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8001e8a:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e8c:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e90:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e94:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e98:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e9a:	fa06 f60a 	lsl.w	r6, r6, sl
 8001e9e:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 8001ea2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ea4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea6:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001eaa:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 8001eac:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001eae:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb0:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eb2:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eb6:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eba:	fa03 f30a 	lsl.w	r3, r3, sl
 8001ebe:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 8001ec2:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec4:	d5ac      	bpl.n	8001e20 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001eca:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ece:	f005 0303 	and.w	r3, r5, #3
 8001ed2:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001ed8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001edc:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001ee2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001ee6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eea:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001ef2:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ef4:	4e48      	ldr	r6, [pc, #288]	; (8002018 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ef8:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 8001efa:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001efc:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f00:	d020      	beq.n	8001f44 <HAL_GPIO_Init+0x13c>
 8001f02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f06:	42b0      	cmp	r0, r6
 8001f08:	d05e      	beq.n	8001fc8 <HAL_GPIO_Init+0x1c0>
 8001f0a:	4e44      	ldr	r6, [pc, #272]	; (800201c <HAL_GPIO_Init+0x214>)
 8001f0c:	42b0      	cmp	r0, r6
 8001f0e:	d060      	beq.n	8001fd2 <HAL_GPIO_Init+0x1ca>
 8001f10:	4e43      	ldr	r6, [pc, #268]	; (8002020 <HAL_GPIO_Init+0x218>)
 8001f12:	42b0      	cmp	r0, r6
 8001f14:	d062      	beq.n	8001fdc <HAL_GPIO_Init+0x1d4>
 8001f16:	4e43      	ldr	r6, [pc, #268]	; (8002024 <HAL_GPIO_Init+0x21c>)
 8001f18:	42b0      	cmp	r0, r6
 8001f1a:	d064      	beq.n	8001fe6 <HAL_GPIO_Init+0x1de>
 8001f1c:	4e42      	ldr	r6, [pc, #264]	; (8002028 <HAL_GPIO_Init+0x220>)
 8001f1e:	42b0      	cmp	r0, r6
 8001f20:	d06b      	beq.n	8001ffa <HAL_GPIO_Init+0x1f2>
 8001f22:	4e42      	ldr	r6, [pc, #264]	; (800202c <HAL_GPIO_Init+0x224>)
 8001f24:	42b0      	cmp	r0, r6
 8001f26:	d06d      	beq.n	8002004 <HAL_GPIO_Init+0x1fc>
 8001f28:	4e41      	ldr	r6, [pc, #260]	; (8002030 <HAL_GPIO_Init+0x228>)
 8001f2a:	42b0      	cmp	r0, r6
 8001f2c:	d060      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e8>
 8001f2e:	4e41      	ldr	r6, [pc, #260]	; (8002034 <HAL_GPIO_Init+0x22c>)
 8001f30:	42b0      	cmp	r0, r6
 8001f32:	d06c      	beq.n	800200e <HAL_GPIO_Init+0x206>
 8001f34:	4e40      	ldr	r6, [pc, #256]	; (8002038 <HAL_GPIO_Init+0x230>)
 8001f36:	42b0      	cmp	r0, r6
 8001f38:	bf0c      	ite	eq
 8001f3a:	2609      	moveq	r6, #9
 8001f3c:	260a      	movne	r6, #10
 8001f3e:	fa06 f303 	lsl.w	r3, r6, r3
 8001f42:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f44:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f46:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8001f48:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f50:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001f54:	bf54      	ite	pl
 8001f56:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001f58:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5a:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8001f5c:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8001f60:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	bf54      	ite	pl
 8001f66:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001f68:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6a:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8001f6c:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8001f70:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	bf54      	ite	pl
 8001f76:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001f78:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001f7c:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8001f80:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	bf54      	ite	pl
 8001f86:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001f88:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f8a:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8001f8c:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f90:	f47f af4a 	bne.w	8001e28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f94:	b003      	add	sp, #12
 8001f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f9a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f9e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001fa0:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fa6:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001faa:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fae:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb0:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fb4:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fb8:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fbc:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8001fc0:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc2:	f63f af74 	bhi.w	8001eae <HAL_GPIO_Init+0xa6>
 8001fc6:	e760      	b.n	8001e8a <HAL_GPIO_Init+0x82>
 8001fc8:	2601      	movs	r6, #1
 8001fca:	fa06 f303 	lsl.w	r3, r6, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	e7b8      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8001fd2:	2602      	movs	r6, #2
 8001fd4:	fa06 f303 	lsl.w	r3, r6, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	e7b3      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8001fdc:	2603      	movs	r6, #3
 8001fde:	fa06 f303 	lsl.w	r3, r6, r3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	e7ae      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8001fe6:	2604      	movs	r6, #4
 8001fe8:	fa06 f303 	lsl.w	r3, r6, r3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	e7a9      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8001ff0:	2607      	movs	r6, #7
 8001ff2:	fa06 f303 	lsl.w	r3, r6, r3
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	e7a4      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8001ffa:	2605      	movs	r6, #5
 8001ffc:	fa06 f303 	lsl.w	r3, r6, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	e79f      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8002004:	2606      	movs	r6, #6
 8002006:	fa06 f303 	lsl.w	r3, r6, r3
 800200a:	431a      	orrs	r2, r3
 800200c:	e79a      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 800200e:	2608      	movs	r6, #8
 8002010:	fa06 f303 	lsl.w	r3, r6, r3
 8002014:	431a      	orrs	r2, r3
 8002016:	e795      	b.n	8001f44 <HAL_GPIO_Init+0x13c>
 8002018:	40020000 	.word	0x40020000
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40022000 	.word	0x40022000
 8002038:	40022400 	.word	0x40022400
 800203c:	40013c00 	.word	0x40013c00
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	b902      	cbnz	r2, 8002048 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002046:	0409      	lsls	r1, r1, #16
 8002048:	6181      	str	r1, [r0, #24]
  }
}
 800204a:	4770      	bx	lr

0800204c <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	d071      	beq.n	8002134 <HAL_LTDC_Init+0xe8>
{
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002052:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002056:	4604      	mov	r4, r0
 8002058:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800205c:	2b00      	cmp	r3, #0
 800205e:	d064      	beq.n	800212a <HAL_LTDC_Init+0xde>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002060:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002062:	2502      	movs	r5, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002064:	68e6      	ldr	r6, [r4, #12]

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002066:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002068:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800206c:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800206e:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002070:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002074:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002078:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800207a:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800207c:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800207e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002082:	4e2d      	ldr	r6, [pc, #180]	; (8002138 <HAL_LTDC_Init+0xec>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002084:	6198      	str	r0, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002086:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002088:	6998      	ldr	r0, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800208a:	2501      	movs	r5, #1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800208c:	4302      	orrs	r2, r0
 800208e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	4032      	ands	r2, r6
 8002094:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002096:	6898      	ldr	r0, [r3, #8]
 8002098:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800209c:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800209e:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80020a2:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80020a6:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80020a8:	68d8      	ldr	r0, [r3, #12]
 80020aa:	4030      	ands	r0, r6
 80020ac:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80020b4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80020b6:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020ba:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80020be:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	4032      	ands	r2, r6
 80020c4:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020c6:	6918      	ldr	r0, [r3, #16]
 80020c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16);
 80020cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020ce:	ea40 000c 	orr.w	r0, r0, ip
 80020d2:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80020d4:	6958      	ldr	r0, [r3, #20]
 80020d6:	4006      	ands	r6, r0
 80020d8:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80020de:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80020e2:	4302      	orrs	r2, r0
 80020e4:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80020e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80020e8:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80020ec:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80020f0:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80020f4:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80020f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80020f8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80020fc:	4302      	orrs	r2, r0

  return HAL_OK;
 80020fe:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002100:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002104:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800210a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210c:	f042 0204 	orr.w	r2, r2, #4
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002114:	f042 0202 	orr.w	r2, r2, #2
 8002118:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	432a      	orrs	r2, r5
 800211e:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002120:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002124:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800212a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800212e:	f001 fd7f 	bl	8003c30 <HAL_LTDC_MspInit>
 8002132:	e795      	b.n	8002060 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8002134:	2001      	movs	r0, #1
}
 8002136:	4770      	bx	lr
 8002138:	f000f800 	.word	0xf000f800

0800213c <HAL_LTDC_ConfigLayer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800213c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002140:	2b01      	cmp	r3, #1
 8002142:	f000 80b9 	beq.w	80022b8 <HAL_LTDC_ConfigLayer+0x17c>
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002146:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800214a:	2302      	movs	r3, #2
{   
 800214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002150:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002154:	6806      	ldr	r6, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002156:	f04f 0834 	mov.w	r8, #52	; 0x34
 800215a:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800215c:	eb06 040c 	add.w	r4, r6, ip
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002160:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002164:	fb08 0202 	mla	r2, r8, r2, r0
 8002168:	4689      	mov	r9, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800216a:	68f1      	ldr	r1, [r6, #12]
 800216c:	4607      	mov	r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800216e:	6863      	ldr	r3, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002170:	f102 0838 	add.w	r8, r2, #56	; 0x38
  __HAL_LOCK(hltdc);
 8002174:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002178:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800217c:	f403 4e70 	and.w	lr, r3, #61440	; 0xf000
  __HAL_LOCK(hltdc);
 8002180:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002184:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8002188:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800218c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8002190:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8002194:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8002198:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800219c:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80021a0:	4848      	ldr	r0, [pc, #288]	; (80022c4 <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021a2:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80021a6:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80021a8:	f8c4 e004 	str.w	lr, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80021ac:	f8d5 e000 	ldr.w	lr, [r5]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80021b0:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80021b2:	68f1      	ldr	r1, [r6, #12]
 80021b4:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80021b8:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80021bc:	f3c1 410b 	ubfx	r1, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80021c0:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80021c2:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80021c4:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80021c8:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80021ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80021ce:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80021d2:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80021d4:	68f1      	ldr	r1, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80021d6:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80021da:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80021de:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80021e2:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80021e4:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80021e8:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80021ec:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80021f0:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 80021f4:	445a      	add	r2, fp
 80021f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021fa:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80021fc:	6922      	ldr	r2, [r4, #16]
 80021fe:	f022 0207 	bic.w	r2, r2, #7
 8002202:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002204:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002208:	69a2      	ldr	r2, [r4, #24]
 800220a:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800220c:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002210:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002214:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002216:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800221a:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800221e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002222:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002224:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002228:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800222a:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800222e:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002230:	6962      	ldr	r2, [r4, #20]
 8002232:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002236:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002238:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800223c:	69e2      	ldr	r2, [r4, #28]
 800223e:	4010      	ands	r0, r2
 8002240:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002242:	61e1      	str	r1, [r4, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002244:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002246:	2200      	movs	r2, #0
 8002248:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800224a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800224c:	62a2      	str	r2, [r4, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800224e:	f1b8 0f00 	cmp.w	r8, #0
 8002252:	d00b      	beq.n	800226c <HAL_LTDC_ConfigLayer+0x130>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002254:	f1b8 0f01 	cmp.w	r8, #1
 8002258:	d030      	beq.n	80022bc <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800225a:	f1a8 0202 	sub.w	r2, r8, #2
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800225e:	2a02      	cmp	r2, #2
 8002260:	d902      	bls.n	8002268 <HAL_LTDC_ConfigLayer+0x12c>
 8002262:	f1b8 0f07 	cmp.w	r8, #7
 8002266:	d12b      	bne.n	80022c0 <HAL_LTDC_ConfigLayer+0x184>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8002268:	2202      	movs	r2, #2
 800226a:	e000      	b.n	800226e <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4;
 800226c:	2204      	movs	r2, #4
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800226e:	eba3 030e 	sub.w	r3, r3, lr

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002272:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002276:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800227a:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800227c:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002280:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002282:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002284:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800228e:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 8002290:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002292:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002294:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 8002296:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002298:	401a      	ands	r2, r3
 800229a:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800229c:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80022a0:	f856 300c 	ldr.w	r3, [r6, ip]
 80022a4:	432b      	orrs	r3, r5
 80022a6:	f846 300c 	str.w	r3, [r6, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80022aa:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80022ac:	f887 50a1 	strb.w	r5, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80022b0:	f887 10a0 	strb.w	r1, [r7, #160]	; 0xa0
}
 80022b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 80022b8:	2002      	movs	r0, #2
}
 80022ba:	4770      	bx	lr
    tmp = 3;
 80022bc:	2203      	movs	r2, #3
 80022be:	e7d6      	b.n	800226e <HAL_LTDC_ConfigLayer+0x132>
    tmp = 1;
 80022c0:	2201      	movs	r2, #1
 80022c2:	e7d4      	b.n	800226e <HAL_LTDC_ConfigLayer+0x132>
 80022c4:	fffff8f8 	.word	0xfffff8f8
 80022c8:	fffff800 	.word	0xfffff800

080022cc <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 80022cc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80022d0:	2b01      	cmp	r3, #1
{
 80022d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d6:	b083      	sub	sp, #12
  __HAL_LOCK(hltdc);
 80022d8:	f000 80b4 	beq.w	8002444 <HAL_LTDC_SetAlpha+0x178>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022dc:	01d7      	lsls	r7, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80022de:	6806      	ldr	r6, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022e0:	2302      	movs	r3, #2
  pLayerCfg->Alpha = Alpha;
 80022e2:	2434      	movs	r4, #52	; 0x34
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022e4:	3784      	adds	r7, #132	; 0x84
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80022e6:	f04f 0800 	mov.w	r8, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022ea:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022ee:	19f3      	adds	r3, r6, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80022f0:	68f5      	ldr	r5, [r6, #12]
  pLayerCfg->Alpha = Alpha;
 80022f2:	fb04 0402 	mla	r4, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022f6:	f8d3 9004 	ldr.w	r9, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80022fa:	f3c5 4c0b 	ubfx	ip, r5, #16, #12
 80022fe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002300:	f409 4970 	and.w	r9, r9, #61440	; 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002304:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
  pLayerCfg->Alpha = Alpha;
 8002308:	64e1      	str	r1, [r4, #76]	; 0x4c
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800230a:	eb0c 0a05 	add.w	sl, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800230e:	f8c3 9004 	str.w	r9, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002312:	f10e 0b01 	add.w	fp, lr, #1
 8002316:	f8d6 c00c 	ldr.w	ip, [r6, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800231a:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800231e:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002322:	9501      	str	r5, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002324:	6c25      	ldr	r5, [r4, #64]	; 0x40
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002326:	44dc      	add	ip, fp
 8002328:	ea4c 4c0a 	orr.w	ip, ip, sl, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800232c:	f105 0a01 	add.w	sl, r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002330:	6d25      	ldr	r5, [r4, #80]	; 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002332:	f8c3 c004 	str.w	ip, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002336:	f8d6 b00c 	ldr.w	fp, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800233a:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800233e:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002342:	f40c 4c70 	and.w	ip, ip, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002346:	44d9      	add	r9, fp
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002348:	f8c3 c008 	str.w	ip, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800234c:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8002350:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8002354:	44e2      	add	sl, ip
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002356:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800235a:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800235e:	f894 a069 	ldrb.w	sl, [r4, #105]	; 0x69
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002362:	ea4c 6c05 	orr.w	ip, ip, r5, lsl #24
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002366:	f8c3 9008 	str.w	r9, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800236a:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800236e:	f894 906a 	ldrb.w	r9, [r4, #106]	; 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002372:	f8d3 a010 	ldr.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002376:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800237a:	f8d4 9048 	ldr.w	r9, [r4, #72]	; 0x48
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800237e:	f02a 0a07 	bic.w	sl, sl, #7
 8002382:	f8c3 a010 	str.w	sl, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002386:	f8c3 9010 	str.w	r9, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800238a:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800238e:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002392:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002396:	f8d3 c014 	ldr.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800239a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002460 <HAL_LTDC_SetAlpha+0x194>
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800239e:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
 80023a2:	f8c3 c014 	str.w	ip, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80023a6:	6159      	str	r1, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80023a8:	69d9      	ldr	r1, [r3, #28]
 80023aa:	ea01 0a0a 	and.w	sl, r1, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80023ae:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	; 0x54
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80023b2:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80023b4:	ea41 010c 	orr.w	r1, r1, ip
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80023b8:	f8c3 a01c 	str.w	sl, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80023bc:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80023be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023c0:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80023c4:	629c      	str	r4, [r3, #40]	; 0x28
  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80023c6:	f1b9 0f00 	cmp.w	r9, #0
 80023ca:	d00c      	beq.n	80023e6 <HAL_LTDC_SetAlpha+0x11a>
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80023cc:	f1b9 0f01 	cmp.w	r9, #1
 80023d0:	d03d      	beq.n	800244e <HAL_LTDC_SetAlpha+0x182>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80023d2:	f1a9 0102 	sub.w	r1, r9, #2
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80023d6:	2902      	cmp	r1, #2
 80023d8:	d902      	bls.n	80023e0 <HAL_LTDC_SetAlpha+0x114>
 80023da:	f1b9 0f07 	cmp.w	r9, #7
 80023de:	d139      	bne.n	8002454 <HAL_LTDC_SetAlpha+0x188>
    tmp = 2;
 80023e0:	f04f 0c02 	mov.w	ip, #2
 80023e4:	e001      	b.n	80023ea <HAL_LTDC_SetAlpha+0x11e>
    tmp = 4;
 80023e6:	f04f 0c04 	mov.w	ip, #4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80023ea:	9901      	ldr	r1, [sp, #4]
 80023ec:	2434      	movs	r4, #52	; 0x34
 80023ee:	eba1 050e 	sub.w	r5, r1, lr
 80023f2:	fb04 0202 	mla	r2, r4, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80023f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80023f8:	6e14      	ldr	r4, [r2, #96]	; 0x60
 80023fa:	fb0c f505 	mul.w	r5, ip, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80023fe:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002402:	f8d2 e064 	ldr.w	lr, [r2, #100]	; 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002406:	fb04 f40c 	mul.w	r4, r4, ip
 800240a:	3503      	adds	r5, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800240c:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800240e:	f04f 0c01 	mov.w	ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002412:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002416:	4911      	ldr	r1, [pc, #68]	; (800245c <HAL_LTDC_SetAlpha+0x190>)
  __HAL_UNLOCK(hltdc);
 8002418:	2200      	movs	r2, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800241a:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800241c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  return HAL_OK;
 800241e:	4614      	mov	r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002420:	4029      	ands	r1, r5
 8002422:	6319      	str	r1, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002424:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002428:	59f3      	ldr	r3, [r6, r7]
 800242a:	ea43 030c 	orr.w	r3, r3, ip
 800242e:	51f3      	str	r3, [r6, r7]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002430:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002434:	f880 c0a1 	strb.w	ip, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002438:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 800243c:	4620      	mov	r0, r4
 800243e:	b003      	add	sp, #12
 8002440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 8002444:	2402      	movs	r4, #2
}
 8002446:	4620      	mov	r0, r4
 8002448:	b003      	add	sp, #12
 800244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 3;
 800244e:	f04f 0c03 	mov.w	ip, #3
 8002452:	e7ca      	b.n	80023ea <HAL_LTDC_SetAlpha+0x11e>
    tmp = 1;
 8002454:	f04f 0c01 	mov.w	ip, #1
 8002458:	e7c7      	b.n	80023ea <HAL_LTDC_SetAlpha+0x11e>
 800245a:	bf00      	nop
 800245c:	fffff800 	.word	0xfffff800
 8002460:	fffff8f8 	.word	0xfffff8f8

08002464 <HAL_LTDC_GetState>:
  return hltdc->State;
 8002464:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop

0800246c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002470:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002472:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8002476:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	6411      	str	r1, [r2, #64]	; 0x40
{
 800247a:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800247e:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800248e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002490:	f7ff f9e6 	bl	8001860 <HAL_GetTick>
 8002494:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002496:	e005      	b.n	80024a4 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002498:	f7ff f9e2 	bl	8001860 <HAL_GetTick>
 800249c:	1b40      	subs	r0, r0, r5
 800249e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80024a2:	d817      	bhi.n	80024d4 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024a4:	6863      	ldr	r3, [r4, #4]
 80024a6:	03da      	lsls	r2, r3, #15
 80024a8:	d5f6      	bpl.n	8002498 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024aa:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ac:	4d0c      	ldr	r5, [pc, #48]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b2:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80024b4:	f7ff f9d4 	bl	8001860 <HAL_GetTick>
 80024b8:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ba:	e005      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024bc:	f7ff f9d0 	bl	8001860 <HAL_GetTick>
 80024c0:	1b00      	subs	r0, r0, r4
 80024c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80024c6:	d805      	bhi.n	80024d4 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024c8:	686b      	ldr	r3, [r5, #4]
 80024ca:	039b      	lsls	r3, r3, #14
 80024cc:	d5f6      	bpl.n	80024bc <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80024ce:	2000      	movs	r0, #0
}
 80024d0:	b003      	add	sp, #12
 80024d2:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80024d4:	2003      	movs	r0, #3
}
 80024d6:	b003      	add	sp, #12
 80024d8:	bd30      	pop	{r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40007000 	.word	0x40007000

080024e4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	2800      	cmp	r0, #0
 80024e6:	f000 8134 	beq.w	8002752 <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	6803      	ldr	r3, [r0, #0]
{
 80024ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f0:	07dd      	lsls	r5, r3, #31
{
 80024f2:	b082      	sub	sp, #8
 80024f4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	d535      	bpl.n	8002564 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f8:	49ab      	ldr	r1, [pc, #684]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 80024fa:	688a      	ldr	r2, [r1, #8]
 80024fc:	f002 020c 	and.w	r2, r2, #12
 8002500:	2a04      	cmp	r2, #4
 8002502:	f000 80fe 	beq.w	8002702 <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	688a      	ldr	r2, [r1, #8]
 8002508:	f002 020c 	and.w	r2, r2, #12
 800250c:	2a08      	cmp	r2, #8
 800250e:	f000 80f4 	beq.w	80026fa <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002512:	6863      	ldr	r3, [r4, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d010      	beq.n	800253c <HAL_RCC_OscConfig+0x58>
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 811b 	beq.w	8002756 <HAL_RCC_OscConfig+0x272>
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	4ba0      	ldr	r3, [pc, #640]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f000 8162 	beq.w	80027f0 <HAL_RCC_OscConfig+0x30c>
 800252c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e004      	b.n	8002546 <HAL_RCC_OscConfig+0x62>
 800253c:	4a9a      	ldr	r2, [pc, #616]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7ff f98b 	bl	8001860 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4d97      	ldr	r5, [pc, #604]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 800254c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e005      	b.n	800255c <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff f986 	bl	8001860 <HAL_GetTick>
 8002554:	1b80      	subs	r0, r0, r6
 8002556:	2864      	cmp	r0, #100	; 0x64
 8002558:	f200 80ee 	bhi.w	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	039a      	lsls	r2, r3, #14
 8002560:	d5f6      	bpl.n	8002550 <HAL_RCC_OscConfig+0x6c>
 8002562:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002564:	079f      	lsls	r7, r3, #30
 8002566:	d442      	bmi.n	80025ee <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002568:	071a      	lsls	r2, r3, #28
 800256a:	d517      	bpl.n	800259c <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800256c:	6963      	ldr	r3, [r4, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80b0 	beq.w	80026d4 <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002574:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002576:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002578:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002580:	f7ff f96e 	bl	8001860 <HAL_GetTick>
 8002584:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e005      	b.n	8002594 <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff f96a 	bl	8001860 <HAL_GetTick>
 800258c:	1b80      	subs	r0, r0, r6
 800258e:	2802      	cmp	r0, #2
 8002590:	f200 80d2 	bhi.w	8002738 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002594:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002596:	079b      	lsls	r3, r3, #30
 8002598:	d5f6      	bpl.n	8002588 <HAL_RCC_OscConfig+0xa4>
 800259a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	075d      	lsls	r5, r3, #29
 800259e:	d56b      	bpl.n	8002678 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a0:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 80025a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a4:	00d0      	lsls	r0, r2, #3
 80025a6:	f100 80ed 	bmi.w	8002784 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80025ac:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x2c8>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	05d1      	lsls	r1, r2, #23
 80025c4:	f140 80a7 	bpl.w	8002716 <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	68a3      	ldr	r3, [r4, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d039      	beq.n	8002642 <HAL_RCC_OscConfig+0x15e>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80da 	beq.w	8002788 <HAL_RCC_OscConfig+0x2a4>
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	4b74      	ldr	r3, [pc, #464]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 80025d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025da:	f000 8111 	beq.w	8002800 <HAL_RCC_OscConfig+0x31c>
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	671a      	str	r2, [r3, #112]	; 0x70
 80025e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	671a      	str	r2, [r3, #112]	; 0x70
 80025ec:	e02e      	b.n	800264c <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ee:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 80025f0:	6891      	ldr	r1, [r2, #8]
 80025f2:	f011 0f0c 	tst.w	r1, #12
 80025f6:	d062      	beq.n	80026be <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f8:	6891      	ldr	r1, [r2, #8]
 80025fa:	f001 010c 	and.w	r1, r1, #12
 80025fe:	2908      	cmp	r1, #8
 8002600:	d05a      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002602:	68e3      	ldr	r3, [r4, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80df 	beq.w	80027c8 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 800260c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002616:	f7ff f923 	bl	8001860 <HAL_GetTick>
 800261a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e005      	b.n	800262a <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff f91f 	bl	8001860 <HAL_GetTick>
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	2802      	cmp	r0, #2
 8002626:	f200 8087 	bhi.w	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	0798      	lsls	r0, r3, #30
 800262e:	d5f6      	bpl.n	800261e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	6922      	ldr	r2, [r4, #16]
 8002634:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002638:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800263c:	602b      	str	r3, [r5, #0]
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	e792      	b.n	8002568 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002642:	4a59      	ldr	r2, [pc, #356]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002644:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff f908 	bl	8001860 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	4e55      	ldr	r6, [pc, #340]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8002652:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e005      	b.n	8002666 <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7ff f901 	bl	8001860 <HAL_GetTick>
 800265e:	eba0 0008 	sub.w	r0, r0, r8
 8002662:	42b8      	cmp	r0, r7
 8002664:	d868      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002666:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002668:	079b      	lsls	r3, r3, #30
 800266a:	d5f6      	bpl.n	800265a <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266c:	b125      	cbz	r5, 8002678 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002670:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	69a3      	ldr	r3, [r4, #24]
 800267a:	b1cb      	cbz	r3, 80026b0 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 800267e:	6891      	ldr	r1, [r2, #8]
 8002680:	f001 010c 	and.w	r1, r1, #12
 8002684:	2908      	cmp	r1, #8
 8002686:	d021      	beq.n	80026cc <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002688:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268c:	f000 80c0 	beq.w	8002810 <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8002696:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002698:	f7ff f8e2 	bl	8001860 <HAL_GetTick>
 800269c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e004      	b.n	80026aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7ff f8de 	bl	8001860 <HAL_GetTick>
 80026a4:	1b40      	subs	r0, r0, r5
 80026a6:	2802      	cmp	r0, #2
 80026a8:	d846      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	d4f7      	bmi.n	80026a0 <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80026b0:	2000      	movs	r0, #0
}
 80026b2:	b002      	add	sp, #8
 80026b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b8:	6852      	ldr	r2, [r2, #4]
 80026ba:	0256      	lsls	r6, r2, #9
 80026bc:	d4a1      	bmi.n	8002602 <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	0795      	lsls	r5, r2, #30
 80026c4:	d53c      	bpl.n	8002740 <HAL_RCC_OscConfig+0x25c>
 80026c6:	68e2      	ldr	r2, [r4, #12]
 80026c8:	2a01      	cmp	r2, #1
 80026ca:	d039      	beq.n	8002740 <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 80026cc:	2001      	movs	r0, #1
}
 80026ce:	b002      	add	sp, #8
 80026d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 80026d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80026e0:	f7ff f8be 	bl	8001860 <HAL_GetTick>
 80026e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e6:	e004      	b.n	80026f2 <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e8:	f7ff f8ba 	bl	8001860 <HAL_GetTick>
 80026ec:	1b80      	subs	r0, r0, r6
 80026ee:	2802      	cmp	r0, #2
 80026f0:	d822      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026f4:	079f      	lsls	r7, r3, #30
 80026f6:	d4f7      	bmi.n	80026e8 <HAL_RCC_OscConfig+0x204>
 80026f8:	e74f      	b.n	800259a <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	684a      	ldr	r2, [r1, #4]
 80026fc:	0250      	lsls	r0, r2, #9
 80026fe:	f57f af08 	bpl.w	8002512 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002702:	4a29      	ldr	r2, [pc, #164]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	0391      	lsls	r1, r2, #14
 8002708:	f57f af2c 	bpl.w	8002564 <HAL_RCC_OscConfig+0x80>
 800270c:	6862      	ldr	r2, [r4, #4]
 800270e:	2a00      	cmp	r2, #0
 8002710:	f47f af28 	bne.w	8002564 <HAL_RCC_OscConfig+0x80>
 8002714:	e7da      	b.n	80026cc <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 8002716:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002718:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800271a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002720:	f7ff f89e 	bl	8001860 <HAL_GetTick>
 8002724:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002726:	6833      	ldr	r3, [r6, #0]
 8002728:	05da      	lsls	r2, r3, #23
 800272a:	f53f af4d 	bmi.w	80025c8 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800272e:	f7ff f897 	bl	8001860 <HAL_GetTick>
 8002732:	1bc0      	subs	r0, r0, r7
 8002734:	2864      	cmp	r0, #100	; 0x64
 8002736:	d9f6      	bls.n	8002726 <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8002738:	2003      	movs	r0, #3
}
 800273a:	b002      	add	sp, #8
 800273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4919      	ldr	r1, [pc, #100]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002742:	6920      	ldr	r0, [r4, #16]
 8002744:	680a      	ldr	r2, [r1, #0]
 8002746:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800274a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800274e:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002750:	e70a      	b.n	8002568 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 8002752:	2001      	movs	r0, #1
}
 8002754:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
 8002758:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002768:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800276a:	f7ff f879 	bl	8001860 <HAL_GetTick>
 800276e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002770:	e004      	b.n	800277c <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002772:	f7ff f875 	bl	8001860 <HAL_GetTick>
 8002776:	1b80      	subs	r0, r0, r6
 8002778:	2864      	cmp	r0, #100	; 0x64
 800277a:	d8dd      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	039b      	lsls	r3, r3, #14
 8002780:	d4f7      	bmi.n	8002772 <HAL_RCC_OscConfig+0x28e>
 8002782:	e6ee      	b.n	8002562 <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 8002784:	2500      	movs	r5, #0
 8002786:	e71a      	b.n	80025be <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	671a      	str	r2, [r3, #112]	; 0x70
 8002798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80027a0:	f7ff f85e 	bl	8001860 <HAL_GetTick>
 80027a4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x2d6>
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff f856 	bl	8001860 <HAL_GetTick>
 80027b4:	1bc0      	subs	r0, r0, r7
 80027b6:	4540      	cmp	r0, r8
 80027b8:	d8be      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80027bc:	0798      	lsls	r0, r3, #30
 80027be:	d4f7      	bmi.n	80027b0 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	f43f af59 	beq.w	8002678 <HAL_RCC_OscConfig+0x194>
 80027c6:	e752      	b.n	800266e <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_OscConfig+0x394>)
 80027ca:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027cc:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027d4:	f7ff f844 	bl	8001860 <HAL_GetTick>
 80027d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	e004      	b.n	80027e6 <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7ff f840 	bl	8001860 <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	2802      	cmp	r0, #2
 80027e4:	d8a8      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	0799      	lsls	r1, r3, #30
 80027ea:	d4f7      	bmi.n	80027dc <HAL_RCC_OscConfig+0x2f8>
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	e6bb      	b.n	8002568 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e6a2      	b.n	8002546 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002800:	f042 0204 	orr.w	r2, r2, #4
 8002804:	671a      	str	r2, [r3, #112]	; 0x70
 8002806:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	671a      	str	r2, [r3, #112]	; 0x70
 800280e:	e71d      	b.n	800264c <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 8002810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002814:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8002816:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002818:	f7ff f822 	bl	8001860 <HAL_GetTick>
 800281c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e004      	b.n	800282a <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff f81e 	bl	8001860 <HAL_GetTick>
 8002824:	1b80      	subs	r0, r0, r6
 8002826:	2802      	cmp	r0, #2
 8002828:	d886      	bhi.n	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	0199      	lsls	r1, r3, #6
 800282e:	d4f7      	bmi.n	8002820 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002834:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002836:	4313      	orrs	r3, r2
 8002838:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800283c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	4c0d      	ldr	r4, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002842:	0852      	lsrs	r2, r2, #1
 8002844:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002848:	3a01      	subs	r2, #1
 800284a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800284e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002852:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800285c:	f7ff f800 	bl	8001860 <HAL_GetTick>
 8002860:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	e005      	b.n	8002870 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fffc 	bl	8001860 <HAL_GetTick>
 8002868:	1b40      	subs	r0, r0, r5
 800286a:	2802      	cmp	r0, #2
 800286c:	f63f af64 	bhi.w	8002738 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	019a      	lsls	r2, r3, #6
 8002874:	d5f6      	bpl.n	8002864 <HAL_RCC_OscConfig+0x380>
 8002876:	e71b      	b.n	80026b0 <HAL_RCC_OscConfig+0x1cc>
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287c:	b178      	cbz	r0, 800289e <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287e:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_RCC_ClockConfig+0x17c>)
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	428b      	cmp	r3, r1
 8002888:	d20b      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	6813      	ldr	r3, [r2, #0]
 800288c:	f023 030f 	bic.w	r3, r3, #15
 8002890:	430b      	orrs	r3, r1
 8002892:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	428b      	cmp	r3, r1
 800289c:	d001      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800289e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80028a0:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a2:	6803      	ldr	r3, [r0, #0]
{
 80028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	079d      	lsls	r5, r3, #30
 80028aa:	d514      	bpl.n	80028d6 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	075c      	lsls	r4, r3, #29
 80028ae:	d504      	bpl.n	80028ba <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b0:	4c52      	ldr	r4, [pc, #328]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 80028b2:	68a2      	ldr	r2, [r4, #8]
 80028b4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80028b8:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	071a      	lsls	r2, r3, #28
 80028bc:	d504      	bpl.n	80028c8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028be:	4c4f      	ldr	r4, [pc, #316]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 80028c0:	68a2      	ldr	r2, [r4, #8]
 80028c2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80028c6:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4c4c      	ldr	r4, [pc, #304]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 80028ca:	6885      	ldr	r5, [r0, #8]
 80028cc:	68a2      	ldr	r2, [r4, #8]
 80028ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028d2:	432a      	orrs	r2, r5
 80028d4:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	07df      	lsls	r7, r3, #31
 80028d8:	4604      	mov	r4, r0
 80028da:	460d      	mov	r5, r1
 80028dc:	d521      	bpl.n	8002922 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e4:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	d063      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e8:	2a02      	cmp	r2, #2
 80028ea:	d078      	beq.n	80029de <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	0799      	lsls	r1, r3, #30
 80028ee:	d528      	bpl.n	8002942 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f0:	4942      	ldr	r1, [pc, #264]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f8:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002902:	f7fe ffad 	bl	8001860 <HAL_GetTick>
 8002906:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002908:	e004      	b.n	8002914 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290a:	f7fe ffa9 	bl	8001860 <HAL_GetTick>
 800290e:	1bc0      	subs	r0, r0, r7
 8002910:	4540      	cmp	r0, r8
 8002912:	d862      	bhi.n	80029da <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002914:	68b3      	ldr	r3, [r6, #8]
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002920:	d1f3      	bne.n	800290a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002922:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <HAL_RCC_ClockConfig+0x17c>)
 8002924:	6813      	ldr	r3, [r2, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	42ab      	cmp	r3, r5
 800292c:	d90c      	bls.n	8002948 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	f023 030f 	bic.w	r3, r3, #15
 8002934:	432b      	orrs	r3, r5
 8002936:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002938:	6813      	ldr	r3, [r2, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	42ab      	cmp	r3, r5
 8002940:	d002      	beq.n	8002948 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 8002942:	2001      	movs	r0, #1
}
 8002944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	075a      	lsls	r2, r3, #29
 800294c:	d506      	bpl.n	800295c <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294e:	492b      	ldr	r1, [pc, #172]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 8002950:	68e0      	ldr	r0, [r4, #12]
 8002952:	688a      	ldr	r2, [r1, #8]
 8002954:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002958:	4302      	orrs	r2, r0
 800295a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	d507      	bpl.n	8002970 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002960:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 8002962:	6921      	ldr	r1, [r4, #16]
 8002964:	6893      	ldr	r3, [r2, #8]
 8002966:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800296a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800296e:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002970:	4922      	ldr	r1, [pc, #136]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 8002972:	688b      	ldr	r3, [r1, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b04      	cmp	r3, #4
 800297a:	d01c      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x13a>
 800297c:	2b08      	cmp	r3, #8
 800297e:	d12a      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002982:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002984:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002988:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800298a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800298e:	d129      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	481b      	ldr	r0, [pc, #108]	; (8002a00 <HAL_RCC_ClockConfig+0x184>)
 8002992:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002996:	fba1 0100 	umull	r0, r1, r1, r0
 800299a:	f7fe f925 	bl	8000be8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029a6:	3301      	adds	r3, #1
 80029a8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	e003      	b.n	80029b8 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b0:	039e      	lsls	r6, r3, #14
 80029b2:	d49d      	bmi.n	80028f0 <HAL_RCC_ClockConfig+0x74>
 80029b4:	e7c5      	b.n	8002942 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b8:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 80029ba:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029bc:	4c12      	ldr	r4, [pc, #72]	; (8002a08 <HAL_RCC_ClockConfig+0x18c>)
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	4912      	ldr	r1, [pc, #72]	; (8002a0c <HAL_RCC_ClockConfig+0x190>)
 80029c2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80029c6:	5ca2      	ldrb	r2, [r4, r2]
 80029c8:	40d3      	lsrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80029cc:	f7fe ff02 	bl	80017d4 <HAL_InitTick>
  return HAL_OK;
 80029d0:	2000      	movs	r0, #0
}
 80029d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_ClockConfig+0x184>)
 80029d8:	e7ee      	b.n	80029b8 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 80029da:	2003      	movs	r0, #3
 80029dc:	e7b2      	b.n	8002944 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	0198      	lsls	r0, r3, #6
 80029e0:	d486      	bmi.n	80028f0 <HAL_RCC_ClockConfig+0x74>
 80029e2:	e7ae      	b.n	8002942 <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4807      	ldr	r0, [pc, #28]	; (8002a04 <HAL_RCC_ClockConfig+0x188>)
 80029e6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029ea:	2300      	movs	r3, #0
 80029ec:	fba1 0100 	umull	r0, r1, r1, r0
 80029f0:	f7fe f8fa 	bl	8000be8 <__aeabi_uldivmod>
 80029f4:	e7d3      	b.n	800299e <HAL_RCC_ClockConfig+0x122>
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	017d7840 	.word	0x017d7840
 8002a08:	08011b04 	.word	0x08011b04
 8002a0c:	20000014 	.word	0x20000014

08002a10 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a10:	6803      	ldr	r3, [r0, #0]
{
 8002a12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a16:	f013 0601 	ands.w	r6, r3, #1
{
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a1e:	d00b      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a20:	4ab8      	ldr	r2, [pc, #736]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a22:	6891      	ldr	r1, [r2, #8]
 8002a24:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002a28:	6091      	str	r1, [r2, #8]
 8002a2a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002a2c:	6891      	ldr	r1, [r2, #8]
 8002a2e:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a30:	fab6 f686 	clz	r6, r6
 8002a34:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a36:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a38:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8002a3c:	d010      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a3e:	49b1      	ldr	r1, [pc, #708]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a40:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002a42:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a46:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002a4e:	ea42 0205 	orr.w	r2, r2, r5
 8002a52:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a56:	f000 81b0 	beq.w	8002dba <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a5a:	fab5 f585 	clz	r5, r5
 8002a5e:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a60:	02d9      	lsls	r1, r3, #11
 8002a62:	d510      	bpl.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a64:	48a7      	ldr	r0, [pc, #668]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a68:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a6c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a70:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002a74:	ea42 0201 	orr.w	r2, r2, r1
 8002a78:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a7c:	f000 819b 	beq.w	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002a80:	2900      	cmp	r1, #0
 8002a82:	bf08      	it	eq
 8002a84:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002a86:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002a8a:	bf18      	it	ne
 8002a8c:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8e:	069a      	lsls	r2, r3, #26
 8002a90:	f100 8149 	bmi.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a94:	06d9      	lsls	r1, r3, #27
 8002a96:	d50c      	bpl.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a98:	4a9a      	ldr	r2, [pc, #616]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a9a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002a9e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8002aa2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002aa6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002aaa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002aac:	4301      	orrs	r1, r0
 8002aae:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ab2:	045a      	lsls	r2, r3, #17
 8002ab4:	d508      	bpl.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab6:	4993      	ldr	r1, [pc, #588]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ab8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002aba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002abe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002ac2:	4302      	orrs	r2, r0
 8002ac4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac8:	041f      	lsls	r7, r3, #16
 8002aca:	d508      	bpl.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002acc:	498d      	ldr	r1, [pc, #564]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ace:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002ad0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002ad4:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002ad8:	4302      	orrs	r2, r0
 8002ada:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ade:	03d8      	lsls	r0, r3, #15
 8002ae0:	d508      	bpl.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae2:	4988      	ldr	r1, [pc, #544]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002ae6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002aea:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002aee:	4302      	orrs	r2, r0
 8002af0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002af4:	0399      	lsls	r1, r3, #14
 8002af6:	d508      	bpl.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002af8:	4982      	ldr	r1, [pc, #520]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002afa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002afc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b00:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002b04:	4302      	orrs	r2, r0
 8002b06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0a:	065a      	lsls	r2, r3, #25
 8002b0c:	d508      	bpl.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0e:	497d      	ldr	r1, [pc, #500]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b10:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002b12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b16:	f022 0203 	bic.w	r2, r2, #3
 8002b1a:	4302      	orrs	r2, r0
 8002b1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b20:	061f      	lsls	r7, r3, #24
 8002b22:	d508      	bpl.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b24:	4977      	ldr	r1, [pc, #476]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002b28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b2c:	f022 020c 	bic.w	r2, r2, #12
 8002b30:	4302      	orrs	r2, r0
 8002b32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b36:	05d8      	lsls	r0, r3, #23
 8002b38:	d508      	bpl.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3a:	4972      	ldr	r1, [pc, #456]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b3c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b42:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002b46:	4302      	orrs	r2, r0
 8002b48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4c:	0599      	lsls	r1, r3, #22
 8002b4e:	d508      	bpl.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b50:	496c      	ldr	r1, [pc, #432]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b52:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002b54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b58:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002b5c:	4302      	orrs	r2, r0
 8002b5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b62:	055a      	lsls	r2, r3, #21
 8002b64:	d508      	bpl.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b66:	4967      	ldr	r1, [pc, #412]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b72:	4302      	orrs	r2, r0
 8002b74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b78:	051f      	lsls	r7, r3, #20
 8002b7a:	d508      	bpl.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b7c:	4961      	ldr	r1, [pc, #388]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b88:	4302      	orrs	r2, r0
 8002b8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b8e:	04d8      	lsls	r0, r3, #19
 8002b90:	d508      	bpl.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b92:	495c      	ldr	r1, [pc, #368]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b94:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002b96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002b9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ba4:	0499      	lsls	r1, r3, #18
 8002ba6:	d508      	bpl.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ba8:	4956      	ldr	r1, [pc, #344]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002baa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002bac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bb0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bba:	025a      	lsls	r2, r3, #9
 8002bbc:	d508      	bpl.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bbe:	4951      	ldr	r1, [pc, #324]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002bc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002bc6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bd0:	029f      	lsls	r7, r3, #10
 8002bd2:	d50c      	bpl.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bd4:	494b      	ldr	r1, [pc, #300]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bd6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002bd8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002bdc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002be0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8002be4:	bf08      	it	eq
 8002be6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002be8:	4302      	orrs	r2, r0
 8002bea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002bee:	f013 0f08 	tst.w	r3, #8
 8002bf2:	bf18      	it	ne
 8002bf4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bf6:	0358      	lsls	r0, r3, #13
 8002bf8:	d508      	bpl.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfa:	4942      	ldr	r1, [pc, #264]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bfc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002bfe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c02:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c06:	4302      	orrs	r2, r0
 8002c08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c0c:	0219      	lsls	r1, r3, #8
 8002c0e:	d40b      	bmi.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x218>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c14:	d016      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002c16:	07f2      	lsls	r2, r6, #31
 8002c18:	d414      	bmi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c1a:	2d01      	cmp	r5, #1
 8002c1c:	f000 80d0 	beq.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c20:	2000      	movs	r0, #0
}
 8002c22:	b003      	add	sp, #12
 8002c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c28:	4936      	ldr	r1, [pc, #216]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002c32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002c36:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c3a:	ea42 0200 	orr.w	r2, r2, r0
 8002c3e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c42:	d1e8      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 8002c44:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c46:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c48:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8002c4a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c4e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002c50:	f7fe fe06 	bl	8001860 <HAL_GetTick>
 8002c54:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c56:	e004      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x252>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c58:	f7fe fe02 	bl	8001860 <HAL_GetTick>
 8002c5c:	1bc0      	subs	r0, r0, r7
 8002c5e:	2864      	cmp	r0, #100	; 0x64
 8002c60:	d85d      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c62:	6833      	ldr	r3, [r6, #0]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	d4f7      	bmi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	07df      	lsls	r7, r3, #31
 8002c6c:	d512      	bpl.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002c6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002c70:	b982      	cbnz	r2, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c72:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c76:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c7a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002c7e:	6860      	ldr	r0, [r4, #4]
 8002c80:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8002c84:	68a1      	ldr	r1, [r4, #8]
 8002c86:	433a      	orrs	r2, r7
 8002c88:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002c8c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002c90:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c94:	031e      	lsls	r6, r3, #12
 8002c96:	f100 8111 	bmi.w	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002c9a:	02d8      	lsls	r0, r3, #11
 8002c9c:	d504      	bpl.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ca0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002ca4:	f000 810f 	beq.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ca8:	01d9      	lsls	r1, r3, #7
 8002caa:	d511      	bpl.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cac:	4e15      	ldr	r6, [pc, #84]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cae:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cb0:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cb4:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cb8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002cbc:	6921      	ldr	r1, [r4, #16]
 8002cbe:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002cc2:	433a      	orrs	r2, r7
 8002cc4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002cc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ccc:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cd0:	019a      	lsls	r2, r3, #6
 8002cd2:	d50d      	bpl.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd4:	6923      	ldr	r3, [r4, #16]
 8002cd6:	6862      	ldr	r2, [r4, #4]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002cde:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ce4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002ce8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002cec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cf4:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cfa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fdb0 	bl	8001860 <HAL_GetTick>
 8002d00:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d02:	e006      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8002d04:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d08:	f7fe fdaa 	bl	8001860 <HAL_GetTick>
 8002d0c:	1bc0      	subs	r0, r0, r7
 8002d0e:	2864      	cmp	r0, #100	; 0x64
 8002d10:	d805      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d12:	6833      	ldr	r3, [r6, #0]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	d5f7      	bpl.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if(pllsaiused == 1)
 8002d18:	2d01      	cmp	r5, #1
 8002d1a:	d181      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002d1c:	e050      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 8002d1e:	2003      	movs	r0, #3
}
 8002d20:	b003      	add	sp, #12
 8002d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4a87      	ldr	r2, [pc, #540]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
    PWR->CR1 |= PWR_CR1_DBP;
 8002d28:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x538>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d2c:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002d32:	6411      	str	r1, [r2, #64]	; 0x40
 8002d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d36:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002d3a:	9201      	str	r2, [sp, #4]
 8002d3c:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002d46:	f7fe fd8b 	bl	8001860 <HAL_GetTick>
 8002d4a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d4c:	e005      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe fd87 	bl	8001860 <HAL_GetTick>
 8002d52:	eba0 0008 	sub.w	r0, r0, r8
 8002d56:	2864      	cmp	r0, #100	; 0x64
 8002d58:	d8e1      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	d5f6      	bpl.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d60:	4a78      	ldr	r2, [pc, #480]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002d62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d64:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002d66:	f403 7040 	and.w	r0, r3, #768	; 0x300
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6a:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8002d6e:	d011      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002d70:	4281      	cmp	r1, r0
 8002d72:	d00f      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x384>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d74:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d78:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d7c:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8002d80:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d82:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8002d84:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8002d88:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002d8a:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d8c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002d8e:	07cf      	lsls	r7, r1, #31
 8002d90:	f100 80c3 	bmi.w	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d94:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002d98:	f000 80b1 	beq.w	8002efe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002d9c:	4969      	ldr	r1, [pc, #420]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002d9e:	688a      	ldr	r2, [r1, #8]
 8002da0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002da4:	608a      	str	r2, [r1, #8]
 8002da6:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	e66e      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x84>
      plli2sused = 1;
 8002db6:	2601      	movs	r6, #1
 8002db8:	e665      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x76>
  uint32_t pllsaiused = 0;
 8002dba:	2500      	movs	r5, #0
      plli2sused = 1;
 8002dbc:	2601      	movs	r6, #1
 8002dbe:	e64f      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x50>
    __HAL_RCC_PLLSAI_DISABLE();
 8002dc0:	4b60      	ldr	r3, [pc, #384]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dc4:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8002dc6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002dca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fd48 	bl	8001860 <HAL_GetTick>
 8002dd0:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dd2:	e004      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dd4:	f7fe fd44 	bl	8001860 <HAL_GetTick>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	2864      	cmp	r0, #100	; 0x64
 8002ddc:	d89f      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	009f      	lsls	r7, r3, #2
 8002de2:	d4f7      	bmi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	031d      	lsls	r5, r3, #12
 8002de8:	f100 8092 	bmi.w	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002dec:	02d8      	lsls	r0, r3, #11
 8002dee:	d51d      	bpl.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002df2:	b9da      	cbnz	r2, 8002e2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df4:	4953      	ldr	r1, [pc, #332]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002df6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dfc:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e00:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002e04:	69a0      	ldr	r0, [r4, #24]
 8002e06:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8002e0a:	4332      	orrs	r2, r6
 8002e0c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002e10:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002e14:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e18:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8002e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e1e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002e22:	3801      	subs	r0, #1
 8002e24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002e28:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e2c:	0299      	lsls	r1, r3, #10
 8002e2e:	d515      	bpl.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8002e30:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002e32:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002e36:	d111      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e38:	4942      	ldr	r1, [pc, #264]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e3a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e40:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e44:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002e48:	6a20      	ldr	r0, [r4, #32]
 8002e4a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8002e4e:	4332      	orrs	r2, r6
 8002e50:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002e54:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002e58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e5c:	071a      	lsls	r2, r3, #28
 8002e5e:	d519      	bpl.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e60:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e62:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e64:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e6c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002e70:	69e0      	ldr	r0, [r4, #28]
 8002e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e76:	430b      	orrs	r3, r1
 8002e78:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002e7c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e84:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002e88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002e96:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e98:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8002e9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fcde 	bl	8001860 <HAL_GetTick>
 8002ea4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ea8:	f7fe fcda 	bl	8001860 <HAL_GetTick>
 8002eac:	1b40      	subs	r0, r0, r5
 8002eae:	2864      	cmp	r0, #100	; 0x64
 8002eb0:	f63f af35 	bhi.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	d5f6      	bpl.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002eba:	e6b1      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x210>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ebc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ebe:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002ec2:	f47f aeea 	bne.w	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ec6:	4e1f      	ldr	r6, [pc, #124]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ec8:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eca:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ece:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ed2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002ed6:	68e1      	ldr	r1, [r4, #12]
 8002ed8:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002edc:	433a      	orrs	r2, r7
 8002ede:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002ee2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ee6:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eea:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ef0:	f021 011f 	bic.w	r1, r1, #31
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002efc:	e6d4      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002efe:	4811      	ldr	r0, [pc, #68]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8002f00:	4912      	ldr	r1, [pc, #72]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002f02:	6882      	ldr	r2, [r0, #8]
 8002f04:	4019      	ands	r1, r3
 8002f06:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	6082      	str	r2, [r0, #8]
 8002f0e:	e74a      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f12:	2a00      	cmp	r2, #0
 8002f14:	f43f af6e 	beq.w	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f18:	e768      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002f20:	f7fe fc9e 	bl	8001860 <HAL_GetTick>
 8002f24:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f26:	e006      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x526>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe fc9a 	bl	8001860 <HAL_GetTick>
 8002f2c:	eba0 0009 	sub.w	r0, r0, r9
 8002f30:	4540      	cmp	r0, r8
 8002f32:	f63f aef4 	bhi.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f38:	0798      	lsls	r0, r3, #30
 8002f3a:	d5f5      	bpl.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f3e:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002f42:	e727      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	0ffffcff 	.word	0x0ffffcff

08002f50 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop

08002f54 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8002f54:	b1e8      	cbz	r0, 8002f92 <HAL_SDRAM_Init+0x3e>
{   
 8002f56:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002f58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	460d      	mov	r5, r1
 8002f60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f64:	b183      	cbz	r3, 8002f88 <HAL_SDRAM_Init+0x34>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002f66:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002f68:	1d21      	adds	r1, r4, #4
 8002f6a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002f6c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002f70:	f000 f840 	bl	8002ff4 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002f74:	4629      	mov	r1, r5
 8002f76:	e9d4 0200 	ldrd	r0, r2, [r4]
 8002f7a:	f000 f879 	bl	8003070 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002f7e:	2301      	movs	r3, #1
  return HAL_OK;
 8002f80:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002f82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002f88:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002f8c:	f7ff ffe0 	bl	8002f50 <HAL_SDRAM_MspInit>
 8002f90:	e7e9      	b.n	8002f66 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002f98:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002f9a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d010      	beq.n	8002fc6 <HAL_SDRAM_SendCommand+0x2e>
 8002fa4:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	460d      	mov	r5, r1
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002faa:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002fb0:	f000 f8b0 	bl	8003114 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002fb4:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8002fb6:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002fb8:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002fba:	bf0c      	ite	eq
 8002fbc:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002fc6:	4618      	mov	r0, r3
}
 8002fc8:	bd38      	pop	{r3, r4, r5, pc}
 8002fca:	bf00      	nop

08002fcc <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002fcc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_SDRAM_ProgramRefreshRate+0x24>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fd6:	2302      	movs	r3, #2
{
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002fdc:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fde:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002fe2:	f000 f8ad 	bl	8003140 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002fe6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8002fe8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002fea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002fee:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002ff0:	4618      	mov	r0, r3
}
 8002ff2:	4770      	bx	lr

08002ff4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002ff8:	680f      	ldr	r7, [r1, #0]
 8002ffa:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 8002ffe:	2f01      	cmp	r7, #1
 8003000:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8003004:	e9d1 4801 	ldrd	r4, r8, [r1, #4]
 8003008:	e9d1 c603 	ldrd	ip, r6, [r1, #12]
 800300c:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 8003010:	d012      	beq.n	8003038 <FMC_SDRAM_Init+0x44>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003012:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003014:	4f15      	ldr	r7, [pc, #84]	; (800306c <FMC_SDRAM_Init+0x78>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003016:	6803      	ldr	r3, [r0, #0]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003018:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800301c:	401f      	ands	r7, r3
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800301e:	4322      	orrs	r2, r4
 8003020:	ea42 0308 	orr.w	r3, r2, r8
 8003024:	ea43 030c 	orr.w	r3, r3, ip
 8003028:	4333      	orrs	r3, r6
 800302a:	432b      	orrs	r3, r5
 800302c:	430b      	orrs	r3, r1
 800302e:	433b      	orrs	r3, r7
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003030:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003032:	2000      	movs	r0, #0
 8003034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003038:	ea44 0408 	orr.w	r4, r4, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800303c:	431a      	orrs	r2, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800303e:	6807      	ldr	r7, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003040:	ea44 030c 	orr.w	r3, r4, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003044:	f8d0 c004 	ldr.w	ip, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003048:	4c08      	ldr	r4, [pc, #32]	; (800306c <FMC_SDRAM_Init+0x78>)
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800304a:	ea42 020e 	orr.w	r2, r2, lr
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800304e:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003050:	f427 46f8 	bic.w	r6, r7, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003054:	ea0c 0404 	and.w	r4, ip, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003058:	432b      	orrs	r3, r5
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800305a:	4332      	orrs	r2, r6
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800305c:	430b      	orrs	r3, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800305e:	6002      	str	r2, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003060:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003062:	6043      	str	r3, [r0, #4]
}
 8003064:	2000      	movs	r0, #0
 8003066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800306a:	bf00      	nop
 800306c:	ffff8000 	.word	0xffff8000

08003070 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003074:	690b      	ldr	r3, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003076:	2a01      	cmp	r2, #1
 8003078:	68cf      	ldr	r7, [r1, #12]
 800307a:	694e      	ldr	r6, [r1, #20]
 800307c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003080:	684d      	ldr	r5, [r1, #4]
 8003082:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8003086:	688c      	ldr	r4, [r1, #8]
 8003088:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800308c:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8003090:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003094:	6809      	ldr	r1, [r1, #0]
 8003096:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800309a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800309e:	ea4f 3707 	mov.w	r7, r7, lsl #12
 80030a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80030a6:	ea4f 5606 	mov.w	r6, r6, lsl #20
 80030aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80030ae:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80030b2:	ea4f 4e03 	mov.w	lr, r3, lsl #16
 80030b6:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 80030ba:	d012      	beq.n	80030e2 <FMC_SDRAM_Timing_Init+0x72>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030bc:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80030c0:	6884      	ldr	r4, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030c2:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80030c6:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030ca:	ea42 0305 	orr.w	r3, r2, r5
 80030ce:	430b      	orrs	r3, r1
 80030d0:	ea43 030e 	orr.w	r3, r3, lr
 80030d4:	ea43 030c 	orr.w	r3, r3, ip
 80030d8:	4323      	orrs	r3, r4
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80030da:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80030dc:	2000      	movs	r0, #0
 80030de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030e2:	4329      	orrs	r1, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80030e4:	ea47 0206 	orr.w	r2, r7, r6
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80030e8:	6885      	ldr	r5, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030ea:	ea41 0108 	orr.w	r1, r1, r8
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80030ee:	68c4      	ldr	r4, [r0, #12]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80030f0:	4e07      	ldr	r6, [pc, #28]	; (8003110 <FMC_SDRAM_Timing_Init+0xa0>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030f2:	ea41 030e 	orr.w	r3, r1, lr
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80030f6:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80030fa:	402e      	ands	r6, r5
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030fc:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003100:	4316      	orrs	r6, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003102:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003104:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003106:	60c3      	str	r3, [r0, #12]
}
 8003108:	2000      	movs	r0, #0
 800310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800310e:	bf00      	nop
 8003110:	ff0f0fff 	.word	0xff0f0fff

08003114 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003114:	b430      	push	{r4, r5}
  __IO uint32_t tmpr = 0;
 8003116:	2200      	movs	r2, #0
{
 8003118:	b082      	sub	sp, #8
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800311a:	684d      	ldr	r5, [r1, #4]
{
 800311c:	4604      	mov	r4, r0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800311e:	680b      	ldr	r3, [r1, #0]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 8003120:	4610      	mov	r0, r2
  __IO uint32_t tmpr = 0;
 8003122:	9201      	str	r2, [sp, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003124:	432b      	orrs	r3, r5
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8003126:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800312a:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800312e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003130:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003134:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	6123      	str	r3, [r4, #16]
}
 800313a:	b002      	add	sp, #8
 800313c:	bc30      	pop	{r4, r5}
 800313e:	4770      	bx	lr

08003140 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003140:	4602      	mov	r2, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8003142:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8003144:	6953      	ldr	r3, [r2, #20]
 8003146:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800314a:	6151      	str	r1, [r2, #20]
}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <_GLOBAL__sub_I_JpegDec>:
#include "picojpeg.h"
#include <string.h>

JPEGDecoder JpegDec;

JPEGDecoder::JPEGDecoder() {
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <_GLOBAL__sub_I_JpegDec+0x14>)
 8003152:	2200      	movs	r2, #0
  mcu_x = 0;
  mcu_y = 0;
  is_available = 0;
  thisPtr = this;
 8003154:	665b      	str	r3, [r3, #100]	; 0x64
JPEGDecoder::JPEGDecoder() {
 8003156:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  is_available = 0;
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  mcu_y = 0;
 800315c:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000c34 	.word	0x20000c34

08003168 <_GLOBAL__sub_D_JpegDec>:
  if (pImage)
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <_GLOBAL__sub_D_JpegDec+0xc>)
 800316a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800316c:	b108      	cbz	r0, 8003172 <_GLOBAL__sub_D_JpegDec+0xa>
    delete[] pImage;
 800316e:	f006 bc3f 	b.w	80099f0 <_ZdaPv>
}
 8003172:	4770      	bx	lr
 8003174:	20000c34 	.word	0x20000c34

08003178 <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 8003178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317c:	b08b      	sub	sp, #44	; 0x2c
 800317e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003180:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
  for (int i = 0; i < height; i++) {
 8003184:	2b00      	cmp	r3, #0
 8003186:	d052      	beq.n	800322e <_Z13loadRGB565LCDmmmmPth+0xb6>
 8003188:	2a00      	cmp	r2, #0
 800318a:	d050      	beq.n	800322e <_Z13loadRGB565LCDmmmmPth+0xb6>
 800318c:	f1bb 0f00 	cmp.w	fp, #0
 8003190:	d04d      	beq.n	800322e <_Z13loadRGB565LCDmmmmPth+0xb6>
 8003192:	2500      	movs	r5, #0
 8003194:	9309      	str	r3, [sp, #36]	; 0x24
 8003196:	4613      	mov	r3, r2
 8003198:	4602      	mov	r2, r0
 800319a:	fa1f f08b 	uxth.w	r0, fp
 800319e:	9504      	str	r5, [sp, #16]
 80031a0:	ebc3 75c3 	rsb	r5, r3, r3, lsl #31
 80031a4:	4402      	add	r2, r0
 80031a6:	9002      	str	r0, [sp, #8]
 80031a8:	ebc3 7083 	rsb	r0, r3, r3, lsl #30
 80031ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80031b0:	fa1f f981 	uxth.w	r9, r1
 80031b4:	9303      	str	r3, [sp, #12]
 80031b6:	b293      	uxth	r3, r2
 80031b8:	9307      	str	r3, [sp, #28]
 80031ba:	006b      	lsls	r3, r5, #1
 80031bc:	9306      	str	r3, [sp, #24]
 80031be:	0083      	lsls	r3, r0, #2
 80031c0:	9308      	str	r3, [sp, #32]
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	9a06      	ldr	r2, [sp, #24]
 80031c6:	9d07      	ldr	r5, [sp, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	9305      	str	r3, [sp, #20]
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	9b02      	ldr	r3, [sp, #8]
    for (int j = 0; j < width; j++) {

      uint16_t color = src[i * width + j];

      for (int ti = 0; ti < resize; ti++) {
 80031d0:	2700      	movs	r7, #0
 80031d2:	eba5 0803 	sub.w	r8, r5, r3
      uint16_t color = src[i * width + j];
 80031d6:	9b01      	ldr	r3, [sp, #4]
 80031d8:	fa1f f888 	uxth.w	r8, r8
 80031dc:	f833 6b02 	ldrh.w	r6, [r3], #2
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	eb09 0a07 	add.w	sl, r9, r7
      for (int ti = 0; ti < resize; ti++) {
 80031e6:	4644      	mov	r4, r8
 80031e8:	fa1f fa8a 	uxth.w	sl, sl
        for (int tj = 0; tj < resize; tj++) {
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 80031ec:	4620      	mov	r0, r4
 80031ee:	3401      	adds	r4, #1
 80031f0:	4632      	mov	r2, r6
 80031f2:	4651      	mov	r1, sl
 80031f4:	b2a4      	uxth	r4, r4
 80031f6:	f7fe f85b 	bl	80012b0 <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 80031fa:	42a5      	cmp	r5, r4
 80031fc:	d1f6      	bne.n	80031ec <_Z13loadRGB565LCDmmmmPth+0x74>
      for (int ti = 0; ti < resize; ti++) {
 80031fe:	3701      	adds	r7, #1
 8003200:	455f      	cmp	r7, fp
 8003202:	d1ee      	bne.n	80031e2 <_Z13loadRGB565LCDmmmmPth+0x6a>
 8003204:	9b02      	ldr	r3, [sp, #8]
    for (int j = 0; j < width; j++) {
 8003206:	9a03      	ldr	r2, [sp, #12]
 8003208:	441d      	add	r5, r3
 800320a:	9b01      	ldr	r3, [sp, #4]
 800320c:	4293      	cmp	r3, r2
 800320e:	b2ad      	uxth	r5, r5
 8003210:	d1dd      	bne.n	80031ce <_Z13loadRGB565LCDmmmmPth+0x56>
 8003212:	9b02      	ldr	r3, [sp, #8]
 8003214:	9a05      	ldr	r2, [sp, #20]
 8003216:	9908      	ldr	r1, [sp, #32]
 8003218:	4499      	add	r9, r3
  for (int i = 0; i < height; i++) {
 800321a:	9b04      	ldr	r3, [sp, #16]
 800321c:	1a52      	subs	r2, r2, r1
 800321e:	fa1f f989 	uxth.w	r9, r9
 8003222:	3301      	adds	r3, #1
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003228:	9304      	str	r3, [sp, #16]
 800322a:	429a      	cmp	r2, r3
 800322c:	d1c9      	bne.n	80031c2 <_Z13loadRGB565LCDmmmmPth+0x4a>
        }
      }
    }
  }
}
 800322e:	b00b      	add	sp, #44	; 0x2c
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003234 <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 8003234:	b430      	push	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 8003236:	b295      	uxth	r5, r2
 8003238:	2303      	movs	r3, #3
 800323a:	b28c      	uxth	r4, r1
 800323c:	4602      	mov	r2, r0
 800323e:	4629      	mov	r1, r5
 8003240:	4620      	mov	r0, r4
}
 8003242:	bc30      	pop	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 8003244:	f7fd bfd8 	b.w	80011f8 <BSP_LCD_DisplayStringAt>

08003248 <_Z14detectResponseifiii>:
#define USENEW
int unper_cnt = 0;

#ifdef USENEW
void detectResponse(int person, float ms, int training_mode, int pred,
                    int label) {
 8003248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800324c:	4616      	mov	r6, r2
 800324e:	461d      	mov	r5, r3
 8003250:	ed2d 8b02 	vpush	{d8}
 8003254:	eeb0 8a40 	vmov.f32	s16, s0
 8003258:	b088      	sub	sp, #32
  char buf[20];
  if (person) {
 800325a:	2800      	cmp	r0, #0
 800325c:	d05b      	beq.n	8003316 <_Z14detectResponseifiii+0xce>
    unper_cnt = 0;
 800325e:	4bc0      	ldr	r3, [pc, #768]	; (8003560 <_Z14detectResponseifiii+0x318>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    if (training_mode) {
 8003264:	2900      	cmp	r1, #0
 8003266:	f000 813d 	beq.w	80034e4 <_Z14detectResponseifiii+0x29c>
  for (int i = x1 - 1; i < x2; i++)
 800326a:	f240 180d 	movw	r8, #269	; 0x10d
 800326e:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 8003272:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, green);
 8003274:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003276:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 8003278:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800327c:	4638      	mov	r0, r7
 800327e:	f7fe f817 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003282:	2c64      	cmp	r4, #100	; 0x64
 8003284:	d1f6      	bne.n	8003274 <_Z14detectResponseifiii+0x2c>
  for (int i = x1 - 1; i < x2; i++)
 8003286:	f108 0801 	add.w	r8, r8, #1
 800328a:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800328e:	d1ee      	bne.n	800326e <_Z14detectResponseifiii+0x26>
 8003290:	f240 180d 	movw	r8, #269	; 0x10d
 8003294:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 8003298:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, green);
 800329a:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800329c:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 800329e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80032a2:	4638      	mov	r0, r7
 80032a4:	f7fe f804 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80032a8:	2cb4      	cmp	r4, #180	; 0xb4
 80032aa:	d1f6      	bne.n	800329a <_Z14detectResponseifiii+0x52>
  for (int i = x1 - 1; i < x2; i++)
 80032ac:	f108 0801 	add.w	r8, r8, #1
 80032b0:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 80032b4:	d1ee      	bne.n	8003294 <_Z14detectResponseifiii+0x4c>
 80032b6:	f240 180d 	movw	r8, #269	; 0x10d
 80032ba:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 80032be:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, green);
 80032c0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80032c2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 80032c4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80032c8:	4638      	mov	r0, r7
 80032ca:	f7fd fff1 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80032ce:	2cfa      	cmp	r4, #250	; 0xfa
 80032d0:	d1f6      	bne.n	80032c0 <_Z14detectResponseifiii+0x78>
  for (int i = x1 - 1; i < x2; i++)
 80032d2:	f108 0801 	add.w	r8, r8, #1
 80032d6:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 80032da:	d1ee      	bne.n	80032ba <_Z14detectResponseifiii+0x72>
      drawGreenBackground(270, 480, 40, 100);
      drawGreenBackground(270, 480, 125, 180);
      drawGreenBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80032dc:	48a1      	ldr	r0, [pc, #644]	; (8003564 <_Z14detectResponseifiii+0x31c>)
      sprintf(buf, " Prediction:");
 80032de:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80032e0:	f7fd febe 	bl	8001060 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 80032e4:	4ba0      	ldr	r3, [pc, #640]	; (8003568 <_Z14detectResponseifiii+0x320>)
 80032e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e8:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 80032ea:	aa03      	add	r2, sp, #12
      sprintf(buf, " Prediction:");
 80032ec:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 80032ee:	2150      	movs	r1, #80	; 0x50
 80032f0:	2303      	movs	r3, #3
 80032f2:	f240 1011 	movw	r0, #273	; 0x111
 80032f6:	f7fd ff7f 	bl	80011f8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d  ", pred);
 80032fa:	4632      	mov	r2, r6
 80032fc:	499b      	ldr	r1, [pc, #620]	; (800356c <_Z14detectResponseifiii+0x324>)
 80032fe:	a803      	add	r0, sp, #12
 8003300:	f007 f83a 	bl	800a378 <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 8003304:	2303      	movs	r3, #3
 8003306:	aa03      	add	r2, sp, #12
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	f240 1011 	movw	r0, #273	; 0x111
 800330e:	f7fd ff73 	bl	80011f8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground True:");
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <_Z14detectResponseifiii+0x328>)
 8003314:	e057      	b.n	80033c6 <_Z14detectResponseifiii+0x17e>
      drawBlueBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
    }
  } else {
    if (training_mode) {
 8003316:	2900      	cmp	r1, #0
 8003318:	f000 80a0 	beq.w	800345c <_Z14detectResponseifiii+0x214>
  for (int i = x1 - 1; i < x2; i++)
 800331c:	f240 180d 	movw	r8, #269	; 0x10d
 8003320:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 8003324:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, red);
 8003326:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003328:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 800332a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800332e:	4638      	mov	r0, r7
 8003330:	f7fd ffbe 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003334:	2c64      	cmp	r4, #100	; 0x64
 8003336:	d1f6      	bne.n	8003326 <_Z14detectResponseifiii+0xde>
  for (int i = x1 - 1; i < x2; i++)
 8003338:	f108 0801 	add.w	r8, r8, #1
 800333c:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 8003340:	d1ee      	bne.n	8003320 <_Z14detectResponseifiii+0xd8>
 8003342:	f240 180d 	movw	r8, #269	; 0x10d
 8003346:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 800334a:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, red);
 800334c:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800334e:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 8003350:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003354:	4638      	mov	r0, r7
 8003356:	f7fd ffab 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800335a:	2cb4      	cmp	r4, #180	; 0xb4
 800335c:	d1f6      	bne.n	800334c <_Z14detectResponseifiii+0x104>
  for (int i = x1 - 1; i < x2; i++)
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 8003366:	d1ee      	bne.n	8003346 <_Z14detectResponseifiii+0xfe>
 8003368:	f240 180d 	movw	r8, #269	; 0x10d
 800336c:	fa1f f788 	uxth.w	r7, r8
    for (int j = y1 - 1; j < y2; j++) {
 8003370:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, red);
 8003372:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003374:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 8003376:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800337a:	4638      	mov	r0, r7
 800337c:	f7fd ff98 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003380:	2cfa      	cmp	r4, #250	; 0xfa
 8003382:	d1f6      	bne.n	8003372 <_Z14detectResponseifiii+0x12a>
  for (int i = x1 - 1; i < x2; i++)
 8003384:	f108 0801 	add.w	r8, r8, #1
 8003388:	f5b8 7ff0 	cmp.w	r8, #480	; 0x1e0
 800338c:	d1ee      	bne.n	800336c <_Z14detectResponseifiii+0x124>
      drawRedBackground(270, 480, 40, 100);
      drawRedBackground(270, 480, 125, 180);
      drawRedBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800338e:	4875      	ldr	r0, [pc, #468]	; (8003564 <_Z14detectResponseifiii+0x31c>)
      sprintf(buf, " Prediction:");
 8003390:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003392:	f7fd fe65 	bl	8001060 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 8003396:	4b74      	ldr	r3, [pc, #464]	; (8003568 <_Z14detectResponseifiii+0x320>)
 8003398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339a:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800339c:	aa03      	add	r2, sp, #12
      sprintf(buf, " Prediction:");
 800339e:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 80033a0:	2150      	movs	r1, #80	; 0x50
 80033a2:	2303      	movs	r3, #3
 80033a4:	f240 1011 	movw	r0, #273	; 0x111
 80033a8:	f7fd ff26 	bl	80011f8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", pred);
 80033ac:	4632      	mov	r2, r6
 80033ae:	4971      	ldr	r1, [pc, #452]	; (8003574 <_Z14detectResponseifiii+0x32c>)
 80033b0:	a803      	add	r0, sp, #12
 80033b2:	f006 ffe1 	bl	800a378 <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 80033b6:	2303      	movs	r3, #3
 80033b8:	aa03      	add	r2, sp, #12
 80033ba:	2164      	movs	r1, #100	; 0x64
 80033bc:	f240 1011 	movw	r0, #273	; 0x111
 80033c0:	f7fd ff1a 	bl	80011f8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground-Truth");
 80033c4:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <_Z14detectResponseifiii+0x330>)
 80033c6:	ae03      	add	r6, sp, #12
 80033c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ca:	c607      	stmia	r6!, {r0, r1, r2}
 80033cc:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 80033ce:	aa03      	add	r2, sp, #12
 80033d0:	2303      	movs	r3, #3
 80033d2:	2178      	movs	r1, #120	; 0x78
 80033d4:	f240 1011 	movw	r0, #273	; 0x111
 80033d8:	f7fd ff0e 	bl	80011f8 <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", label);
 80033dc:	462a      	mov	r2, r5
 80033de:	4965      	ldr	r1, [pc, #404]	; (8003574 <_Z14detectResponseifiii+0x32c>)
 80033e0:	a803      	add	r0, sp, #12
 80033e2:	f006 ffc9 	bl	800a378 <sprintf>
      BSP_LCD_DisplayStringAt(273, 140, buf, LEFT_MODE);
 80033e6:	aa03      	add	r2, sp, #12
 80033e8:	2303      	movs	r3, #3
 80033ea:	218c      	movs	r1, #140	; 0x8c
 80033ec:	f240 1011 	movw	r0, #273	; 0x111
 80033f0:	f7fd ff02 	bl	80011f8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
    }
  }

  if (ms == 0)
 80033f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	d06d      	beq.n	80034da <_Z14detectResponseifiii+0x292>
    return;
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80033fe:	485f      	ldr	r0, [pc, #380]	; (800357c <_Z14detectResponseifiii+0x334>)
 8003400:	f7fd fe2e 	bl	8001060 <BSP_LCD_SetTextColor>
  volatile float rate = 1000 / ms;
 8003404:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003580 <_Z14detectResponseifiii+0x338>
  volatile int decimal = (int)rate;
  volatile int floating = (int)((rate - (float)decimal) * 1000);
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 8003408:	a803      	add	r0, sp, #12
 800340a:	495e      	ldr	r1, [pc, #376]	; (8003584 <_Z14detectResponseifiii+0x33c>)
  volatile float rate = 1000 / ms;
 800340c:	eec6 7a88 	vdiv.f32	s15, s13, s16
 8003410:	edcd 7a00 	vstr	s15, [sp]
  volatile int decimal = (int)rate;
 8003414:	eddd 7a00 	vldr	s15, [sp]
 8003418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341c:	edcd 7a01 	vstr	s15, [sp, #4]
  volatile int floating = (int)((rate - (float)decimal) * 1000);
 8003420:	ed9d 7a00 	vldr	s14, [sp]
 8003424:	eddd 7a01 	vldr	s15, [sp, #4]
 8003428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003438:	edcd 7a02 	vstr	s15, [sp, #8]
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 800343c:	9a01      	ldr	r2, [sp, #4]
 800343e:	9b02      	ldr	r3, [sp, #8]
 8003440:	f006 ff9a 	bl	800a378 <sprintf>
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
 8003444:	aa03      	add	r2, sp, #12
 8003446:	2303      	movs	r3, #3
 8003448:	21b4      	movs	r1, #180	; 0xb4
 800344a:	f240 1011 	movw	r0, #273	; 0x111
 800344e:	f7fd fed3 	bl	80011f8 <BSP_LCD_DisplayStringAt>
}
 8003452:	b008      	add	sp, #32
 8003454:	ecbd 8b02 	vpop	{d8}
 8003458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = x1 - 1; i < x2; i++)
 800345c:	f240 160d 	movw	r6, #269	; 0x10d
 8003460:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 8003462:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, black);
 8003464:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003466:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 8003468:	2200      	movs	r2, #0
 800346a:	4628      	mov	r0, r5
 800346c:	f7fd ff20 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003470:	2c64      	cmp	r4, #100	; 0x64
 8003472:	d1f7      	bne.n	8003464 <_Z14detectResponseifiii+0x21c>
  for (int i = x1 - 1; i < x2; i++)
 8003474:	3601      	adds	r6, #1
 8003476:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800347a:	d1f1      	bne.n	8003460 <_Z14detectResponseifiii+0x218>
 800347c:	f240 160d 	movw	r6, #269	; 0x10d
 8003480:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 8003482:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, black);
 8003484:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003486:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 8003488:	2200      	movs	r2, #0
 800348a:	4628      	mov	r0, r5
 800348c:	f7fd ff10 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003490:	2cb4      	cmp	r4, #180	; 0xb4
 8003492:	d1f7      	bne.n	8003484 <_Z14detectResponseifiii+0x23c>
  for (int i = x1 - 1; i < x2; i++)
 8003494:	3601      	adds	r6, #1
 8003496:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 800349a:	d1f1      	bne.n	8003480 <_Z14detectResponseifiii+0x238>
 800349c:	f240 160d 	movw	r6, #269	; 0x10d
 80034a0:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 80034a2:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, black);
 80034a4:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80034a6:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 80034a8:	2200      	movs	r2, #0
 80034aa:	4628      	mov	r0, r5
 80034ac:	f7fd ff00 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80034b0:	2cfa      	cmp	r4, #250	; 0xfa
 80034b2:	d1f7      	bne.n	80034a4 <_Z14detectResponseifiii+0x25c>
  for (int i = x1 - 1; i < x2; i++)
 80034b4:	3601      	adds	r6, #1
 80034b6:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 80034ba:	d1f1      	bne.n	80034a0 <_Z14detectResponseifiii+0x258>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80034bc:	4829      	ldr	r0, [pc, #164]	; (8003564 <_Z14detectResponseifiii+0x31c>)
 80034be:	f7fd fdcf 	bl	8001060 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
 80034c2:	2303      	movs	r3, #3
 80034c4:	4a30      	ldr	r2, [pc, #192]	; (8003588 <_Z14detectResponseifiii+0x340>)
 80034c6:	2164      	movs	r1, #100	; 0x64
 80034c8:	f240 1011 	movw	r0, #273	; 0x111
 80034cc:	f7fd fe94 	bl	80011f8 <BSP_LCD_DisplayStringAt>
  if (ms == 0)
 80034d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d191      	bne.n	80033fe <_Z14detectResponseifiii+0x1b6>
}
 80034da:	b008      	add	sp, #32
 80034dc:	ecbd 8b02 	vpop	{d8}
 80034e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = x1 - 1; i < x2; i++)
 80034e4:	f240 160d 	movw	r6, #269	; 0x10d
 80034e8:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 80034ea:	2427      	movs	r4, #39	; 0x27
      BSP_LCD_DrawPixel(i, j, blue);
 80034ec:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80034ee:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 80034f0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7fd fedb 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80034fa:	2c64      	cmp	r4, #100	; 0x64
 80034fc:	d1f6      	bne.n	80034ec <_Z14detectResponseifiii+0x2a4>
  for (int i = x1 - 1; i < x2; i++)
 80034fe:	3601      	adds	r6, #1
 8003500:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8003504:	d1f0      	bne.n	80034e8 <_Z14detectResponseifiii+0x2a0>
 8003506:	f240 160d 	movw	r6, #269	; 0x10d
 800350a:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800350c:	247c      	movs	r4, #124	; 0x7c
      BSP_LCD_DrawPixel(i, j, blue);
 800350e:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003510:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 8003512:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003516:	4628      	mov	r0, r5
 8003518:	f7fd feca 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800351c:	2cb4      	cmp	r4, #180	; 0xb4
 800351e:	d1f6      	bne.n	800350e <_Z14detectResponseifiii+0x2c6>
  for (int i = x1 - 1; i < x2; i++)
 8003520:	3601      	adds	r6, #1
 8003522:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8003526:	d1f0      	bne.n	800350a <_Z14detectResponseifiii+0x2c2>
 8003528:	f240 160d 	movw	r6, #269	; 0x10d
 800352c:	b2b5      	uxth	r5, r6
    for (int j = y1 - 1; j < y2; j++) {
 800352e:	24cc      	movs	r4, #204	; 0xcc
      BSP_LCD_DrawPixel(i, j, blue);
 8003530:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003532:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 8003534:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003538:	4628      	mov	r0, r5
 800353a:	f7fd feb9 	bl	80012b0 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800353e:	2cfa      	cmp	r4, #250	; 0xfa
 8003540:	d1f6      	bne.n	8003530 <_Z14detectResponseifiii+0x2e8>
  for (int i = x1 - 1; i < x2; i++)
 8003542:	3601      	adds	r6, #1
 8003544:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
 8003548:	d1f0      	bne.n	800352c <_Z14detectResponseifiii+0x2e4>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800354a:	4806      	ldr	r0, [pc, #24]	; (8003564 <_Z14detectResponseifiii+0x31c>)
 800354c:	f7fd fd88 	bl	8001060 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
 8003550:	2303      	movs	r3, #3
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <_Z14detectResponseifiii+0x344>)
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	f240 1011 	movw	r0, #273	; 0x111
 800355a:	f7fd fe4d 	bl	80011f8 <BSP_LCD_DisplayStringAt>
 800355e:	e7b7      	b.n	80034d0 <_Z14detectResponseifiii+0x288>
 8003560:	20000cc4 	.word	0x20000cc4
 8003564:	ffff0000 	.word	0xffff0000
 8003568:	0800cf78 	.word	0x0800cf78
 800356c:	0800cf88 	.word	0x0800cf88
 8003570:	0800cf98 	.word	0x0800cf98
 8003574:	0800cfa8 	.word	0x0800cfa8
 8003578:	0800cfc8 	.word	0x0800cfc8
 800357c:	ff0000ff 	.word	0xff0000ff
 8003580:	447a0000 	.word	0x447a0000
 8003584:	0800cfe8 	.word	0x0800cfe8
 8003588:	0800cfd8 	.word	0x0800cfd8
 800358c:	0800cfb8 	.word	0x0800cfb8

08003590 <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 8003590:	b510      	push	{r4, lr}
 8003592:	b0a2      	sub	sp, #136	; 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003594:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800359a:	21c0      	movs	r1, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800359c:	2408      	movs	r4, #8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800359e:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80035a0:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80035a2:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80035a4:	9106      	str	r1, [sp, #24]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035a6:	9401      	str	r4, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80035a8:	f7ff fa32 	bl	8002a10 <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 80035ac:	f7fd ff72 	bl	8001494 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 80035b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fd fd07 	bl	8000fc8 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 80035ba:	f7fd fced 	bl	8000f98 <BSP_LCD_GetXSize>
 80035be:	4604      	mov	r4, r0
 80035c0:	f7fd fcf6 	bl	8000fb0 <BSP_LCD_GetYSize>
 80035c4:	fb00 f104 	mul.w	r1, r0, r4
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 80035c8:	2001      	movs	r0, #1
 80035ca:	f101 5140 	add.w	r1, r1, #805306368	; 0x30000000
 80035ce:	0089      	lsls	r1, r1, #2
 80035d0:	f7fd fcfa 	bl	8000fc8 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 80035d4:	f7fd fe88 	bl	80012e8 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fd fd35 	bl	8001048 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80035de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80035e2:	f7fd fd49 	bl	8001078 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f7fd fd2e 	bl	8001048 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80035ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80035f0:	f7fd fd42 	bl	8001078 <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 80035f4:	2100      	movs	r1, #0
 80035f6:	4608      	mov	r0, r1
 80035f8:	f7fd fd2c 	bl	8001054 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 80035fc:	2164      	movs	r1, #100	; 0x64
 80035fe:	2001      	movs	r0, #1
 8003600:	f7fd fd28 	bl	8001054 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <_Z8lcdsetupv+0x80>)
 8003606:	f7fd fd2b 	bl	8001060 <BSP_LCD_SetTextColor>
}
 800360a:	b022      	add	sp, #136	; 0x88
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	ff0000ff 	.word	0xff0000ff

08003614 <_Z27invoke_new_weights_givenimgPa>:

signed char out_int[OUTPUT_CH];

float labels[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

void invoke_new_weights_givenimg(signed char *out_int8) {
 8003614:	b510      	push	{r4, lr}
 8003616:	4604      	mov	r4, r0
  invoke(labels);
 8003618:	4805      	ldr	r0, [pc, #20]	; (8003630 <_Z27invoke_new_weights_givenimgPa+0x1c>)
 800361a:	f003 f98b 	bl	8006934 <invoke>
  signed char *output = (signed char *)getOutput();
 800361e:	f003 f985 	bl	800692c <getOutput>
  for (int i = 0; i < OUTPUT_CH; i++)
    out_int8[i] = output[i];
 8003622:	f990 3000 	ldrsb.w	r3, [r0]
 8003626:	7023      	strb	r3, [r4, #0]
 8003628:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800362c:	7063      	strb	r3, [r4, #1]
}
 800362e:	bd10      	pop	{r4, pc}
 8003630:	20000ccc 	.word	0x20000ccc

08003634 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <main+0xf0>)
#define BUTTON2_Pin GPIO_PIN_10
#define BUTTON2_GPIO_Port GPIOF

uint16_t *RGBbuf;

int main(void) {
 8003636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	b0bb      	sub	sp, #236	; 0xec
 800363e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8003642:	d111      	bne.n	8003668 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003648:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800364c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003650:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003654:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800365e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003660:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003664:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <main+0xf0>)
 800366a:	6953      	ldr	r3, [r2, #20]
 800366c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003670:	d128      	bne.n	80036c4 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003672:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003676:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800367a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800367e:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003682:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003686:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800368a:	07b7      	lsls	r7, r6, #30
 800368c:	0159      	lsls	r1, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800368e:	ea01 050c 	and.w	r5, r1, ip
 8003692:	463c      	mov	r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003694:	4630      	mov	r0, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003696:	ea45 0304 	orr.w	r3, r5, r4
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800369a:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800369c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80036a0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d1f6      	bne.n	8003696 <main+0x62>
 80036a8:	3920      	subs	r1, #32
    } while(sets-- != 0U);
 80036aa:	f111 0f20 	cmn.w	r1, #32
 80036ae:	d1ee      	bne.n	800368e <main+0x5a>
 80036b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80036b4:	6953      	ldr	r3, [r2, #20]
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6153      	str	r3, [r2, #20]
 80036bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036c0:	f3bf 8f6f 	isb	sy
  char buf[150];
  char showbuf[150];

  CPU_CACHE_Enable();
  HAL_Init();
 80036c4:	f7fe f8aa 	bl	800181c <HAL_Init>
void SystemClock_Config(void) {
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036c8:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80036ce:	ad14      	add	r5, sp, #80	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d0:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036d2:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 80036d6:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLN = 432;
 80036d8:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80036dc:	4628      	mov	r0, r5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036de:	961a      	str	r6, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036e0:	961e      	str	r6, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 432;
 80036e2:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036e4:	e9cd 7314 	strd	r7, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80036e8:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 80036ea:	e9cd 411b 	strd	r4, r1, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80036ee:	931f      	str	r3, [sp, #124]	; 0x7c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80036f0:	f7fe fef8 	bl	80024e4 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 80036f4:	b100      	cbz	r0, 80036f8 <main+0xc4>
 80036f6:	e7fe      	b.n	80036f6 <main+0xc2>
    while (1) {
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 80036f8:	f7fe feb8 	bl	800246c <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 80036fc:	b100      	cbz	r0, 8003700 <main+0xcc>
 80036fe:	e7fe      	b.n	80036fe <main+0xca>
    while (1) {
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8003700:	220f      	movs	r2, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003706:	f44f 5a80 	mov.w	sl, #4096	; 0x1000

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800370a:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800370c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800370e:	e9cd 6010 	strd	r6, r0, [sp, #64]	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8003712:	a80f      	add	r0, sp, #60	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003714:	e9cd 3a12 	strd	r3, sl, [sp, #72]	; 0x48
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8003718:	f7ff f8b0 	bl	800287c <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 800371c:	4604      	mov	r4, r0
 800371e:	b118      	cbz	r0, 8003728 <main+0xf4>
 8003720:	e7fe      	b.n	8003720 <main+0xec>
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003728:	4bd8      	ldr	r3, [pc, #864]	; (8003a8c <main+0x458>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800372a:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	6028      	str	r0, [r5, #0]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800372e:	463a      	mov	r2, r7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	60e8      	str	r0, [r5, #12]
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003732:	f04f 0803 	mov.w	r8, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003736:	6128      	str	r0, [r5, #16]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003738:	f04f 0b0b 	mov.w	fp, #11
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
                        ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800373c:	f04f 090a 	mov.w	r9, #10
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	e9c5 0001 	strd	r0, r0, [r5, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003744:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003746:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800374a:	48d1      	ldr	r0, [pc, #836]	; (8003a90 <main+0x45c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800374c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003750:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003754:	f00c 0c10 	and.w	ip, ip, #16
 8003758:	f8cd c014 	str.w	ip, [sp, #20]
 800375c:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003760:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003764:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 8003768:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800376c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003770:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 8003774:	f8cd c018 	str.w	ip, [sp, #24]
 8003778:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800377c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003780:	f04c 0c02 	orr.w	ip, ip, #2
 8003784:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003788:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800378c:	f00c 0c02 	and.w	ip, ip, #2
 8003790:	f8cd c01c 	str.w	ip, [sp, #28]
 8003794:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003798:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800379c:	f04c 0c08 	orr.w	ip, ip, #8
 80037a0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80037a4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037a8:	f00c 0c08 	and.w	ip, ip, #8
 80037ac:	f8cd c020 	str.w	ip, [sp, #32]
 80037b0:	f8dd c020 	ldr.w	ip, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037b8:	f04c 0c04 	orr.w	ip, ip, #4
 80037bc:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80037c0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037c4:	f00c 0c04 	and.w	ip, ip, #4
 80037c8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80037cc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037d4:	f04c 0c01 	orr.w	ip, ip, #1
 80037d8:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80037dc:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037e0:	f00c 0c01 	and.w	ip, ip, #1
 80037e4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80037e8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037ec:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037f0:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 80037f4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80037f8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80037fc:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 8003800:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8003804:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003808:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800380c:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8003810:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003814:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003818:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 800381c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8003820:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003824:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003828:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 800382c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003830:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003834:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 8003838:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800383c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003840:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003844:	ea4c 0c01 	orr.w	ip, ip, r1
 8003848:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800384c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003850:	ea0c 0c01 	and.w	ip, ip, r1
 8003854:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8003858:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800385c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8003860:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8003864:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8003872:	f7fe fbe7 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003876:	4622      	mov	r2, r4
 8003878:	210c      	movs	r1, #12
 800387a:	4886      	ldr	r0, [pc, #536]	; (8003a94 <main+0x460>)
 800387c:	f7fe fbe2 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003880:	463a      	mov	r2, r7
 8003882:	2108      	movs	r1, #8
 8003884:	4884      	ldr	r0, [pc, #528]	; (8003a98 <main+0x464>)
 8003886:	f7fe fbdd 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800388a:	463a      	mov	r2, r7
 800388c:	4651      	mov	r1, sl
 800388e:	4881      	ldr	r0, [pc, #516]	; (8003a94 <main+0x460>)
 8003890:	f7fe fbd8 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003894:	4622      	mov	r2, r4
 8003896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800389a:	4880      	ldr	r0, [pc, #512]	; (8003a9c <main+0x468>)
 800389c:	f7fe fbd2 	bl	8002044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 80038a0:	4622      	mov	r2, r4
 80038a2:	21c8      	movs	r1, #200	; 0xc8
 80038a4:	487e      	ldr	r0, [pc, #504]	; (8003aa0 <main+0x46c>)
 80038a6:	f7fe fbcd 	bl	8002044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80038aa:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80038ac:	4629      	mov	r1, r5
 80038ae:	487d      	ldr	r0, [pc, #500]	; (8003aa4 <main+0x470>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80038b0:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80038b6:	f7fe faa7 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 80038ba:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038be:	4629      	mov	r1, r5
 80038c0:	4877      	ldr	r0, [pc, #476]	; (8003aa0 <main+0x46c>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 80038c2:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038c8:	e9cd 8b17 	strd	r8, fp, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038cc:	f7fe fa9c 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 80038d0:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d4:	4629      	mov	r1, r5
 80038d6:	4874      	ldr	r0, [pc, #464]	; (8003aa8 <main+0x474>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d8:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 80038dc:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80038de:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e6:	f7fe fa8f 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80038ea:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80038ec:	2208      	movs	r2, #8
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80038ee:	4629      	mov	r1, r5
 80038f0:	4867      	ldr	r0, [pc, #412]	; (8003a90 <main+0x45c>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80038f2:	9218      	str	r2, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80038f4:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f6:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80038fc:	f7fe fa84 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003900:	4629      	mov	r1, r5
 8003902:	486a      	ldr	r0, [pc, #424]	; (8003aac <main+0x478>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003906:	e9cd a414 	strd	sl, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800390a:	f7fe fa7d 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = Audio_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800390e:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <main+0x47c>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003910:	2240      	movs	r2, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003912:	4629      	mov	r1, r5
 8003914:	485e      	ldr	r0, [pc, #376]	; (8003a90 <main+0x45c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003916:	9315      	str	r3, [sp, #84]	; 0x54
 8003918:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800391c:	9214      	str	r2, [sp, #80]	; 0x50
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800391e:	f7fe fa73 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8003922:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003926:	4629      	mov	r1, r5
 8003928:	4862      	ldr	r0, [pc, #392]	; (8003ab4 <main+0x480>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800392a:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800392c:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003934:	f7fe fa68 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003938:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800393a:	4629      	mov	r1, r5
 800393c:	4854      	ldr	r0, [pc, #336]	; (8003a90 <main+0x45c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003940:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	e9cd 7415 	strd	r7, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003946:	f7fe fa5f 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800394a:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800394e:	4629      	mov	r1, r5
 8003950:	4850      	ldr	r0, [pc, #320]	; (8003a94 <main+0x460>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8003952:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003954:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	e9cd 7415 	strd	r7, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800395a:	f7fe fa55 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800395e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003962:	4629      	mov	r1, r5
 8003964:	4854      	ldr	r0, [pc, #336]	; (8003ab8 <main+0x484>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003966:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800396c:	f7fe fa4c 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003970:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003972:	4629      	mov	r1, r5
 8003974:	4848      	ldr	r0, [pc, #288]	; (8003a98 <main+0x464>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003976:	e9cd 3714 	strd	r3, r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800397e:	f7fe fa43 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003982:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003984:	4629      	mov	r1, r5
 8003986:	4842      	ldr	r0, [pc, #264]	; (8003a90 <main+0x45c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003988:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800398e:	f7fe fa3b 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8003992:	f248 0204 	movw	r2, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003996:	4629      	mov	r1, r5
 8003998:	4840      	ldr	r0, [pc, #256]	; (8003a9c <main+0x468>)
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800399a:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039a0:	f7fe fa32 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039a4:	2305      	movs	r3, #5
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80039a6:	4629      	mov	r1, r5
 80039a8:	483a      	ldr	r0, [pc, #232]	; (8003a94 <main+0x460>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039aa:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b0:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80039b4:	f7fe fa28 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80039b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80039bc:	4629      	mov	r1, r5
 80039be:	4837      	ldr	r0, [pc, #220]	; (8003a9c <main+0x468>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c0:	e9cd 3714 	strd	r3, r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f7fe fa1e 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039d0:	4629      	mov	r1, r5
 80039d2:	4830      	ldr	r0, [pc, #192]	; (8003a94 <main+0x460>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039d4:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	e9cd 8415 	strd	r8, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039da:	f7fe fa15 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80039de:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80039e0:	4629      	mov	r1, r5
 80039e2:	482c      	ldr	r0, [pc, #176]	; (8003a94 <main+0x460>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80039e4:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80039e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80039ec:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80039ee:	f7fe fa0b 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80039f2:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80039f4:	4629      	mov	r1, r5
 80039f6:	4829      	ldr	r0, [pc, #164]	; (8003a9c <main+0x468>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80039f8:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039fa:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003a02:	f7fe fa01 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8003a06:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4825      	ldr	r0, [pc, #148]	; (8003aa0 <main+0x46c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8003a0e:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	e9cd 7415 	strd	r7, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a14:	f7fe f9f8 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8003a18:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4826      	ldr	r0, [pc, #152]	; (8003ab8 <main+0x484>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8003a1e:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003a20:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f7fe f9ee 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8003a2c:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2e:	4629      	mov	r1, r5
 8003a30:	4821      	ldr	r0, [pc, #132]	; (8003ab8 <main+0x484>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8003a32:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a38:	e9cd 8b17 	strd	r8, fp, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3c:	f7fe f9e4 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003a40:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003a42:	4629      	mov	r1, r5
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <main+0x46c>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003a46:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f7fe f9dc 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8003a50:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	4629      	mov	r1, r5
 8003a54:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <main+0x480>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8003a56:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	e9cd 8b17 	strd	r8, fp, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a60:	f7fe f9d2 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8003a64:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	4629      	mov	r1, r5
 8003a68:	4812      	ldr	r0, [pc, #72]	; (8003ab4 <main+0x480>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8003a6a:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a74:	f7fe f9c8 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a78:	2205      	movs	r2, #5
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8003a7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7e:	4629      	mov	r1, r5
 8003a80:	4809      	ldr	r0, [pc, #36]	; (8003aa8 <main+0x474>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a82:	9218      	str	r2, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8003a84:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a86:	9417      	str	r4, [sp, #92]	; 0x5c
 8003a88:	e018      	b.n	8003abc <main+0x488>
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40020c00 	.word	0x40020c00
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022800 	.word	0x40022800
 8003a9c:	40021c00 	.word	0x40021c00
 8003aa0:	40021800 	.word	0x40021800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40022400 	.word	0x40022400
 8003ab0:	10120000 	.word	0x10120000
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	40020800 	.word	0x40020800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	e9cd 6415 	strd	r6, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f7fe f9a2 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	483f      	ldr	r0, [pc, #252]	; (8003bc4 <main+0x590>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ac8:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aca:	e9cd 7414 	strd	r7, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003ace:	f7fe f99b 	bl	8001e08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8003ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	483b      	ldr	r0, [pc, #236]	; (8003bc8 <main+0x594>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8003ada:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003adc:	e9cd 4715 	strd	r4, r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8003ae0:	f7fe f992 	bl	8001e08 <HAL_GPIO_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4630      	mov	r0, r6
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 8003ae8:	4f38      	ldr	r7, [pc, #224]	; (8003bcc <main+0x598>)
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8003aea:	f7fd f9fd 	bl	8000ee8 <BSP_PB_Init>
  lcdsetup();
 8003aee:	f7ff fd4f 	bl	8003590 <_Z8lcdsetupv>
  signed char *input = getInput();
 8003af2:	f002 ff17 	bl	8006924 <getInput>
 8003af6:	4606      	mov	r6, r0
 8003af8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003afc:	4934      	ldr	r1, [pc, #208]	; (8003bd0 <main+0x59c>)
 8003afe:	f006 fa4b 	bl	8009f98 <memcpy>
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 8003b02:	f506 43c8 	add.w	r3, r6, #25600	; 0x6400
 8003b06:	f506 4996 	add.w	r9, r6, #19200	; 0x4b00
 8003b0a:	603b      	str	r3, [r7, #0]
  start = HAL_GetTick();
 8003b0c:	f7fd fea8 	bl	8001860 <HAL_GetTick>
      RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 8003b10:	f8d7 e000 	ldr.w	lr, [r7]
  start = HAL_GetTick();
 8003b14:	4604      	mov	r4, r0
 8003b16:	f1ae 0802 	sub.w	r8, lr, #2
 8003b1a:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b1e:	4642      	mov	r2, r8
      uint8_t red = (int32_t)input[(80 * i + j) * 3] + 128;
 8003b20:	7833      	ldrb	r3, [r6, #0]
 8003b22:	3603      	adds	r6, #3
      uint8_t green = (int32_t)input[(80 * i + j) * 3 + 1] + 128;
 8003b24:	f816 0c02 	ldrb.w	r0, [r6, #-2]
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8003b28:	f083 0380 	eor.w	r3, r3, #128	; 0x80
      uint8_t blue = (int32_t)input[(80 * i + j) * 3 + 2] + 128;
 8003b2c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
      uint16_t g = ((green >> 2) & 0x3f) << 5;
 8003b30:	f080 0080 	eor.w	r0, r0, #128	; 0x80
    for (int j = 0; j < RES_W; j++) {
 8003b34:	42b1      	cmp	r1, r6
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8003b36:	ea4f 03d3 	mov.w	r3, r3, lsr #3
      uint16_t b = (blue >> 3) & 0x1f;
 8003b3a:	f087 0780 	eor.w	r7, r7, #128	; 0x80
      uint16_t g = ((green >> 2) & 0x3f) << 5;
 8003b3e:	ea4f 0090 	mov.w	r0, r0, lsr #2
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8003b42:	ea4f 23c3 	mov.w	r3, r3, lsl #11
      RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 8003b46:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8003b4a:	ea43 03d7 	orr.w	r3, r3, r7, lsr #3
 8003b4e:	f822 3f02 	strh.w	r3, [r2, #2]!
    for (int j = 0; j < RES_W; j++) {
 8003b52:	d1e5      	bne.n	8003b20 <main+0x4ec>
  for (int i = 0; i < RES_W; i++) {
 8003b54:	4589      	cmp	r9, r1
 8003b56:	f108 08a0 	add.w	r8, r8, #160	; 0xa0
 8003b5a:	d1de      	bne.n	8003b1a <main+0x4e6>
  loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 3);
 8003b5c:	210a      	movs	r1, #10
 8003b5e:	2350      	movs	r3, #80	; 0x50
 8003b60:	2003      	movs	r0, #3
	invoke_new_weights_givenimg(out_int);
 8003b62:	4e1c      	ldr	r6, [pc, #112]	; (8003bd4 <main+0x5a0>)
  loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 3);
 8003b64:	f8cd e000 	str.w	lr, [sp]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	9001      	str	r0, [sp, #4]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	f7ff fb03 	bl	8003178 <_Z13loadRGB565LCDmmmmPth>
	invoke_new_weights_givenimg(out_int);
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7ff fd4e 	bl	8003614 <_Z27invoke_new_weights_givenimgPa>
	if (out_int[0] > out_int[1]) {
 8003b78:	f996 7000 	ldrsb.w	r7, [r6]
 8003b7c:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8003b80:	429f      	cmp	r7, r3
 8003b82:	bfcc      	ite	gt
 8003b84:	2700      	movgt	r7, #0
 8003b86:	2701      	movle	r7, #1
	end = HAL_GetTick();
 8003b88:	f7fd fe6a 	bl	8001860 <HAL_GetTick>
	sprintf(showbuf, " Inference ");
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <main+0x5a4>)
	end = HAL_GetTick();
 8003b8e:	4606      	mov	r6, r0
	sprintf(showbuf, " Inference ");
 8003b90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	displaystring(showbuf, 273, 10);
 8003b98:	4628      	mov	r0, r5
 8003b9a:	220a      	movs	r2, #10
 8003b9c:	f240 1111 	movw	r1, #273	; 0x111
 8003ba0:	f7ff fb48 	bl	8003234 <_Z13displaystringPcii>
	detectResponse(person, end - start, t_mode, 0, 0);
 8003ba4:	1b33      	subs	r3, r6, r4
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	ee00 3a10 	vmov	s0, r3
 8003bac:	2300      	movs	r3, #0
 8003bae:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f7ff fb47 	bl	8003248 <_Z14detectResponseifiii>
}
 8003bba:	2000      	movs	r0, #0
 8003bbc:	b03b      	add	sp, #236	; 0xec
 8003bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	20000cc8 	.word	0x20000cc8
 8003bd0:	0800cff8 	.word	0x0800cff8
 8003bd4:	20000cf4 	.word	0x20000cf4
 8003bd8:	08011af8 	.word	0x08011af8

08003bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003be2:	e003      	b.n	8003bec <LoopCopyDataInit>

08003be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bea:	3104      	adds	r1, #4

08003bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bec:	480b      	ldr	r0, [pc, #44]	; (8003c1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bf4:	d3f6      	bcc.n	8003be4 <CopyDataInit>
  ldr  r2, =_sbss
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bf8:	e002      	b.n	8003c00 <LoopFillZerobss>

08003bfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003bfc:	f842 3b04 	str.w	r3, [r2], #4

08003c00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c04:	d3f9      	bcc.n	8003bfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c06:	f000 f8b9 	bl	8003d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f005 ff59 	bl	8009ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c0e:	f7ff fd11 	bl	8003634 <main>
  bx  lr    
 8003c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c14:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8003c18:	08088bf8 	.word	0x08088bf8
  ldr  r0, =_sdata
 8003c1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c20:	200009d0 	.word	0x200009d0
  ldr  r2, =_sbss
 8003c24:	200009d0 	.word	0x200009d0
  ldr  r3, = _ebss
 8003c28:	20017c7c 	.word	0x20017c7c

08003c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c2c:	e7fe      	b.n	8003c2c <ADC_IRQHandler>
	...

08003c30 <HAL_LTDC_MspInit>:
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c30:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <HAL_LTDC_MspInit+0x110>)
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8003c32:	4844      	ldr	r0, [pc, #272]	; (8003d44 <HAL_LTDC_MspInit+0x114>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8003c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8003c40:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8003c44:	2510      	movs	r5, #16
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003c46:	2402      	movs	r4, #2
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003c48:	260e      	movs	r6, #14
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c4a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8003c4e:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8003c50:	a907      	add	r1, sp, #28

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8003c52:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c56:	9201      	str	r2, [sp, #4]
 8003c58:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003c5c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003d54 <HAL_LTDC_MspInit+0x124>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c60:	432a      	orrs	r2, r5
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	402a      	ands	r2, r5
 8003c68:	9202      	str	r2, [sp, #8]
 8003c6a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003c7a:	9203      	str	r2, [sp, #12]
 8003c7c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003c8c:	9204      	str	r2, [sp, #16]
 8003c8e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003c9e:	9205      	str	r2, [sp, #20]
 8003ca0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8003cac:	9507      	str	r5, [sp, #28]
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003cae:	2501      	movs	r5, #1
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003cb4:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cb6:	9306      	str	r3, [sp, #24]
 8003cb8:	9b06      	ldr	r3, [sp, #24]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003cba:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8003cbc:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8003cc0:	f7fe f8a2 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8003cc4:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003cc6:	a907      	add	r1, sp, #28
 8003cc8:	481f      	ldr	r0, [pc, #124]	; (8003d48 <HAL_LTDC_MspInit+0x118>)
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8003cca:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003ccc:	4f1f      	ldr	r7, [pc, #124]	; (8003d4c <HAL_LTDC_MspInit+0x11c>)
  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8003cce:	e9cd 9407 	strd	r9, r4, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003cd2:	f7fe f899 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8003cd6:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003cda:	a907      	add	r1, sp, #28
 8003cdc:	4640      	mov	r0, r8
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003cde:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8003ce0:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003ce2:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003ce4:	f7fe f890 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin =
 8003ce8:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8003cec:	a907      	add	r1, sp, #28
 8003cee:	4818      	ldr	r0, [pc, #96]	; (8003d50 <HAL_LTDC_MspInit+0x120>)
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003cf0:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin =
 8003cf2:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003cf4:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8003cf6:	f7fe f887 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8003cfa:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003cfc:	a907      	add	r1, sp, #28
 8003cfe:	4638      	mov	r0, r7
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003d00:	9408      	str	r4, [sp, #32]
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8003d02:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8003d04:	2408      	movs	r4, #8
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003d06:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d08:	f7fe f87e 	bl	8001e08 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003d0c:	a907      	add	r1, sp, #28
 8003d0e:	4640      	mov	r0, r8
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003d10:	e9cd 9507 	strd	r9, r5, [sp, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003d14:	f7fe f878 	bl	8001e08 <HAL_GPIO_Init>
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d18:	a907      	add	r1, sp, #28
 8003d1a:	4638      	mov	r0, r7
  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8003d1c:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d20:	f7fe f872 	bl	8001e08 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d24:	462a      	mov	r2, r5
 8003d26:	4649      	mov	r1, r9
 8003d28:	4640      	mov	r0, r8
 8003d2a:	f7fe f98b 	bl	8002044 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d2e:	462a      	mov	r2, r5
 8003d30:	4621      	mov	r1, r4
 8003d32:	4638      	mov	r0, r7
 8003d34:	f7fe f986 	bl	8002044 <HAL_GPIO_WritePin>
}
 8003d38:	b00d      	add	sp, #52	; 0x34
 8003d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40022800 	.word	0x40022800
 8003d50:	40022400 	.word	0x40022400
 8003d54:	40022000 	.word	0x40022000

08003d58 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <HardFault_Handler>:

void HardFault_Handler(void) {
 8003d5c:	e7fe      	b.n	8003d5c <HardFault_Handler>
 8003d5e:	bf00      	nop

08003d60 <MemManage_Handler>:

  while (1) {
  }
}

void MemManage_Handler(void) {
 8003d60:	e7fe      	b.n	8003d60 <MemManage_Handler>
 8003d62:	bf00      	nop

08003d64 <BusFault_Handler>:

  while (1) {
  }
}

void BusFault_Handler(void) {
 8003d64:	e7fe      	b.n	8003d64 <BusFault_Handler>
 8003d66:	bf00      	nop

08003d68 <UsageFault_Handler>:

  while (1) {
  }
}

void UsageFault_Handler(void) {
 8003d68:	e7fe      	b.n	8003d68 <UsageFault_Handler>
 8003d6a:	bf00      	nop

08003d6c <SVC_Handler>:
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop

08003d70 <DebugMon_Handler>:
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop

08003d74 <PendSV_Handler>:
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop

08003d78 <SysTick_Handler>:

void DebugMon_Handler(void) {}

void PendSV_Handler(void) {}

void SysTick_Handler(void) { HAL_IncTick(); }
 8003d78:	f7fd bd66 	b.w	8001848 <HAL_IncTick>

08003d7c <SystemInit>:
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <SystemInit+0x40>)
#endif

  RCC->CR |= (uint32_t)0x00000001;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <SystemInit+0x44>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003d80:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  RCC->CFGR = 0x00000000;

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d84:	490f      	ldr	r1, [pc, #60]	; (8003dc4 <SystemInit+0x48>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003d86:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8003d8a:	b470      	push	{r4, r5, r6}
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003d8c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8003d90:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003d92:	6818      	ldr	r0, [r3, #0]
  RCC->CIR = 0x00000000;

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8003d94:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8003d98:	4e0b      	ldr	r6, [pc, #44]	; (8003dc8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8003d9a:	f040 0001 	orr.w	r0, r0, #1
 8003d9e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003da0:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4001      	ands	r1, r0
 8003da6:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8003da8:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003daa:	6819      	ldr	r1, [r3, #0]
 8003dac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003db0:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8003db2:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8003db4:	6095      	str	r5, [r2, #8]
#endif
}
 8003db6:	bc70      	pop	{r4, r5, r6}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000ed00 	.word	0xe000ed00
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	fef6ffff 	.word	0xfef6ffff
 8003dc8:	24003010 	.word	0x24003010

08003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	b09d      	sub	sp, #116	; 0x74

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8003dd2:	f101 0901 	add.w	r9, r1, #1
{
 8003dd6:	9216      	str	r2, [sp, #88]	; 0x58
 8003dd8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8003dda:	930a      	str	r3, [sp, #40]	; 0x28
 8003ddc:	1c8b      	adds	r3, r1, #2
 8003dde:	4252      	negs	r2, r2
 8003de0:	910c      	str	r1, [sp, #48]	; 0x30
 8003de2:	9314      	str	r3, [sp, #80]	; 0x50
 8003de4:	f002 0207 	and.w	r2, r2, #7
 8003de8:	f8bd 10bc 	ldrh.w	r1, [sp, #188]	; 0xbc
 8003dec:	9013      	str	r0, [sp, #76]	; 0x4c
 8003dee:	1dd3      	adds	r3, r2, #7
 8003df0:	910d      	str	r1, [sp, #52]	; 0x34
 8003df2:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	; 0xc0
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8003dfc:	910b      	str	r1, [sp, #44]	; 0x2c
 8003dfe:	bf38      	it	cc
 8003e00:	230c      	movcc	r3, #12
 8003e02:	f99d 70cc 	ldrsb.w	r7, [sp, #204]	; 0xcc
 8003e06:	454b      	cmp	r3, r9
 8003e08:	f200 82cd 	bhi.w	80043a6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5da>
 8003e0c:	b322      	cbz	r2, 8003e58 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x8c>
        *cols_8b++ = PAD8;
 8003e0e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8003e10:	2a01      	cmp	r2, #1
 8003e12:	701f      	strb	r7, [r3, #0]
 8003e14:	f103 0c01 	add.w	ip, r3, #1
 8003e18:	d020      	beq.n	8003e5c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8003e1a:	2a02      	cmp	r2, #2
 8003e1c:	705f      	strb	r7, [r3, #1]
 8003e1e:	f103 0c02 	add.w	ip, r3, #2
 8003e22:	d01b      	beq.n	8003e5c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8003e24:	2a03      	cmp	r2, #3
 8003e26:	709f      	strb	r7, [r3, #2]
 8003e28:	f103 0c03 	add.w	ip, r3, #3
 8003e2c:	d016      	beq.n	8003e5c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8003e2e:	2a04      	cmp	r2, #4
 8003e30:	70df      	strb	r7, [r3, #3]
 8003e32:	f103 0c04 	add.w	ip, r3, #4
 8003e36:	d011      	beq.n	8003e5c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8003e38:	2a05      	cmp	r2, #5
 8003e3a:	711f      	strb	r7, [r3, #4]
 8003e3c:	f103 0c05 	add.w	ip, r3, #5
 8003e40:	d00c      	beq.n	8003e5c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8003e42:	2a07      	cmp	r2, #7
 8003e44:	715f      	strb	r7, [r3, #5]
 8003e46:	f103 0c06 	add.w	ip, r3, #6
 8003e4a:	f040 82b1 	bne.w	80043b0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5e4>
 8003e4e:	719f      	strb	r7, [r3, #6]
 8003e50:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8003e54:	4690      	mov	r8, r2
 8003e56:	e002      	b.n	8003e5e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 8003e58:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 8003e5c:	4690      	mov	r8, r2
 8003e5e:	2400      	movs	r4, #0
 8003e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e62:	f10c 0001 	add.w	r0, ip, #1
 8003e66:	4625      	mov	r5, r4
 8003e68:	f367 0407 	bfi	r4, r7, #0, #8
 8003e6c:	eba3 0e02 	sub.w	lr, r3, r2
 8003e70:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8003e72:	4629      	mov	r1, r5
 8003e74:	f367 0507 	bfi	r5, r7, #0, #8
 8003e78:	f367 240f 	bfi	r4, r7, #8, #8
 8003e7c:	441a      	add	r2, r3
 8003e7e:	f367 250f 	bfi	r5, r7, #8, #8
 8003e82:	ea4f 06de 	mov.w	r6, lr, lsr #3
 8003e86:	f367 4417 	bfi	r4, r7, #16, #8
 8003e8a:	f367 4517 	bfi	r5, r7, #16, #8
 8003e8e:	f367 641f 	bfi	r4, r7, #24, #8
 8003e92:	f367 651f 	bfi	r5, r7, #24, #8
 8003e96:	3101      	adds	r1, #1
 8003e98:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 8003e9a:	3008      	adds	r0, #8
 8003e9c:	428e      	cmp	r6, r1
 8003e9e:	f103 0307 	add.w	r3, r3, #7
 8003ea2:	e9c2 4500 	strd	r4, r5, [r2]
 8003ea6:	f102 0208 	add.w	r2, r2, #8
 8003eaa:	d8f4      	bhi.n	8003e96 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xca>
 8003eac:	f02e 0107 	bic.w	r1, lr, #7
 8003eb0:	eb08 0201 	add.w	r2, r8, r1
 8003eb4:	4571      	cmp	r1, lr
 8003eb6:	eb0c 0001 	add.w	r0, ip, r1
 8003eba:	b292      	uxth	r2, r2
 8003ebc:	d05c      	beq.n	8003f78 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
    for(i = 0; i < input_x + 2; i++){
 8003ebe:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 8003ec6:	b290      	uxth	r0, r2
 8003ec8:	4581      	cmp	r9, r0
 8003eca:	db55      	blt.n	8003f78 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 8003ecc:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 8003ece:	701f      	strb	r7, [r3, #0]
 8003ed0:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	4591      	cmp	r9, r2
 8003ed6:	db4e      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003ed8:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 8003eda:	705f      	strb	r7, [r3, #1]
 8003edc:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	4591      	cmp	r9, r2
 8003ee2:	db48      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003ee4:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 8003ee6:	709f      	strb	r7, [r3, #2]
 8003ee8:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8003eea:	b292      	uxth	r2, r2
 8003eec:	4591      	cmp	r9, r2
 8003eee:	db42      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003ef0:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 8003ef2:	70df      	strb	r7, [r3, #3]
 8003ef4:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	4591      	cmp	r9, r2
 8003efa:	db3c      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003efc:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 8003efe:	711f      	strb	r7, [r3, #4]
 8003f00:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 8003f02:	b292      	uxth	r2, r2
 8003f04:	4591      	cmp	r9, r2
 8003f06:	db36      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f08:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 8003f0a:	715f      	strb	r7, [r3, #5]
 8003f0c:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 8003f0e:	b292      	uxth	r2, r2
 8003f10:	4591      	cmp	r9, r2
 8003f12:	db30      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f14:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 8003f16:	719f      	strb	r7, [r3, #6]
 8003f18:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	4591      	cmp	r9, r2
 8003f1e:	db2a      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f20:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 8003f24:	71df      	strb	r7, [r3, #7]
 8003f26:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	4591      	cmp	r9, r2
 8003f2e:	db22      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f30:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 8003f34:	721f      	strb	r7, [r3, #8]
 8003f36:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	4591      	cmp	r9, r2
 8003f3e:	db1a      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f40:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 8003f44:	725f      	strb	r7, [r3, #9]
 8003f46:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	4591      	cmp	r9, r2
 8003f4e:	db12      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f50:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 8003f54:	729f      	strb	r7, [r3, #10]
 8003f56:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	4591      	cmp	r9, r2
 8003f5e:	db0a      	blt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8003f60:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 8003f64:	72df      	strb	r7, [r3, #11]
 8003f66:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	454a      	cmp	r2, r9
 8003f6e:	dc02      	bgt.n	8003f76 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
        *cols_8b++ = PAD8;
 8003f70:	731f      	strb	r7, [r3, #12]
 8003f72:	330d      	adds	r3, #13
 8003f74:	e000      	b.n	8003f78 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 8003f76:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8003f78:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003f7a:	b192      	cbz	r2, 8003fa2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1d6>
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	2100      	movs	r1, #0
 8003f80:	461a      	mov	r2, r3
 8003f82:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003f84:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8003f86:	7017      	strb	r7, [r2, #0]
 8003f88:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 8003f8a:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8003f8c:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8003f90:	4284      	cmp	r4, r0
 8003f92:	d8f7      	bhi.n	8003f84 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1b8>
 8003f94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003f96:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	b292      	uxth	r2, r2
 8003f9c:	fb02 1201 	mla	r2, r2, r1, r1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fa4:	f1a2 0113 	sub.w	r1, r2, #19
 8003fa8:	f64f 72ea 	movw	r2, #65514	; 0xffea
 8003fac:	4291      	cmp	r1, r2
 8003fae:	f200 81f0 	bhi.w	8004392 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c6>
 8003fb2:	425a      	negs	r2, r3
 8003fb4:	f012 0203 	ands.w	r2, r2, #3
 8003fb8:	f000 81d8 	beq.w	800436c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a0>
 8003fbc:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 8003fbe:	701f      	strb	r7, [r3, #0]
 8003fc0:	f103 0501 	add.w	r5, r3, #1
 8003fc4:	f000 81d3 	beq.w	800436e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a2>
 8003fc8:	2a03      	cmp	r2, #3
 8003fca:	705f      	strb	r7, [r3, #1]
 8003fcc:	f103 0502 	add.w	r5, r3, #2
 8003fd0:	f040 81e7 	bne.w	80043a2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5d6>
 8003fd4:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 8003fd6:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 8003fd8:	709f      	strb	r7, [r3, #2]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003fde:	4413      	add	r3, r2
 8003fe0:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	f367 0107 	bfi	r1, r7, #0, #8
 8003fe8:	08a0      	lsrs	r0, r4, #2
 8003fea:	f367 210f 	bfi	r1, r7, #8, #8
 8003fee:	f367 4117 	bfi	r1, r7, #16, #8
 8003ff2:	f367 611f 	bfi	r1, r7, #24, #8
 8003ff6:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8003ff8:	f843 1b04 	str.w	r1, [r3], #4
 8003ffc:	4290      	cmp	r0, r2
 8003ffe:	d8fa      	bhi.n	8003ff6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x22a>
 8004000:	f024 0303 	bic.w	r3, r4, #3
 8004004:	18f2      	adds	r2, r6, r3
 8004006:	42a3      	cmp	r3, r4
 8004008:	eb05 0003 	add.w	r0, r5, r3
 800400c:	b291      	uxth	r1, r2
 800400e:	d019      	beq.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
    for(i = 0; i < input_x + 2; i++){
 8004010:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 8004012:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 8004014:	b293      	uxth	r3, r2
 8004016:	4599      	cmp	r9, r3
 8004018:	db14      	blt.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 800401a:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 800401c:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 800401e:	b29b      	uxth	r3, r3
 8004020:	454b      	cmp	r3, r9
 8004022:	dc0f      	bgt.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8004024:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 8004026:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 8004028:	b29b      	uxth	r3, r3
 800402a:	4599      	cmp	r9, r3
 800402c:	db0a      	blt.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 800402e:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 8004030:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 8004032:	b29b      	uxth	r3, r3
 8004034:	4599      	cmp	r9, r3
 8004036:	db05      	blt.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8004038:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 800403a:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 800403c:	b29b      	uxth	r3, r3
 800403e:	4599      	cmp	r9, r3
 8004040:	db00      	blt.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
        *cols_8b++ = PAD8;
 8004042:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 8004044:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004046:	2800      	cmp	r0, #0
 8004048:	f000 818c 	beq.w	8004364 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x598>
 800404c:	1e43      	subs	r3, r0, #1
{
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 800404e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004050:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004052:	46d0      	mov	r8, sl
 8004054:	b29b      	uxth	r3, r3
 8004056:	1e69      	subs	r1, r5, #1
 8004058:	086f      	lsrs	r7, r5, #1
 800405a:	1e72      	subs	r2, r6, #1
 800405c:	3301      	adds	r3, #1
 800405e:	fb00 f101 	mul.w	r1, r0, r1
 8004062:	b292      	uxth	r2, r2
 8004064:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8004066:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800406a:	9115      	str	r1, [sp, #84]	; 0x54
 800406c:	0079      	lsls	r1, r7, #1
 800406e:	f104 0909 	add.w	r9, r4, #9
 8004072:	9317      	str	r3, [sp, #92]	; 0x5c
 8004074:	f005 0301 	and.w	r3, r5, #1
 8004078:	9111      	str	r1, [sp, #68]	; 0x44
 800407a:	1c51      	adds	r1, r2, #1
 800407c:	930e      	str	r3, [sp, #56]	; 0x38
 800407e:	4603      	mov	r3, r0
 8004080:	3203      	adds	r2, #3
 8004082:	970f      	str	r7, [sp, #60]	; 0x3c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	921b      	str	r2, [sp, #108]	; 0x6c
 800408a:	9319      	str	r3, [sp, #100]	; 0x64
 800408c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800408e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004090:	911a      	str	r1, [sp, #104]	; 0x68
 8004092:	4413      	add	r3, r2
 8004094:	9318      	str	r3, [sp, #96]	; 0x60
 8004096:	4603      	mov	r3, r0
 8004098:	fb05 f303 	mul.w	r3, r5, r3
 800409c:	9310      	str	r3, [sp, #64]	; 0x40
 800409e:	0073      	lsls	r3, r6, #1
 80040a0:	9312      	str	r3, [sp, #72]	; 0x48
 80040a2:	0043      	lsls	r3, r0, #1
 80040a4:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 80040a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80040a8:	b1db      	cbz	r3, 80040e2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 80040aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040ac:	b1ca      	cbz	r2, 80040e2 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 80040ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80040b0:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 80040b2:	9c18      	ldr	r4, [sp, #96]	; 0x60
        for(i = 0; i < input_y; i++){
 80040b4:	469a      	mov	sl, r3
 80040b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80040b8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 80040bc:	e9dd ce19 	ldrd	ip, lr, [sp, #100]	; 0x64
 80040c0:	eb04 000e 	add.w	r0, r4, lr
 80040c4:	4622      	mov	r2, r4
 80040c6:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 80040c8:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 80040cc:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 80040ce:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 80040d2:	4282      	cmp	r2, r0
 80040d4:	d1f8      	bne.n	80040c8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2fc>
 80040d6:	3501      	adds	r5, #1
 80040d8:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 80040da:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 80040dc:	b2ab      	uxth	r3, r5
 80040de:	459a      	cmp	sl, r3
 80040e0:	d8ee      	bhi.n	80040c0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2f4>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80040e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80040e4:	f108 0804 	add.w	r8, r8, #4
 80040e8:	3304      	adds	r3, #4
 80040ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80040ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80040ee:	3304      	adds	r3, #4
 80040f0:	9328      	str	r3, [sp, #160]	; 0xa0
    for (i = 0; i < output_y; i++) {
 80040f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 812c 	beq.w	8004352 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x586>
 80040fa:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 80040fe:	2300      	movs	r3, #0
 8004100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004102:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004104:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 8004108:	46f0      	mov	r8, lr
 800410a:	440a      	add	r2, r1
 800410c:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 8004110:	9307      	str	r3, [sp, #28]
 8004112:	9208      	str	r2, [sp, #32]
 8004114:	9309      	str	r3, [sp, #36]	; 0x24
        for (j = 0; j < output_x / 2; j++) {
 8004116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a8 	beq.w	800426e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x4a2>
 800411e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004120:	9907      	ldr	r1, [sp, #28]
 8004122:	fb01 2302 	mla	r3, r1, r2, r2
 8004126:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004128:	eb08 0c01 	add.w	ip, r8, r1
 800412c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	eb08 0701 	add.w	r7, r8, r1
 8004136:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004138:	9303      	str	r3, [sp, #12]
 800413a:	4441      	add	r1, r8
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            sum0 = MAX(sum0, activation_min);
            sum0 = MIN(sum0, activation_max);
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800413c:	9b08      	ldr	r3, [sp, #32]
 800413e:	9105      	str	r1, [sp, #20]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	9a01      	ldr	r2, [sp, #4]
            sum1 += output_offset;
            sum1 = MAX(sum1, activation_min);
            sum1 = MIN(sum1, activation_max);
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;

            cols_8b_iterptr += STRIDE * 2;
 8004144:	f108 0802 	add.w	r8, r8, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004148:	9904      	ldr	r1, [sp, #16]
 800414a:	f10c 0c02 	add.w	ip, ip, #2
            q31_t sum0 = bias[0] + biasR[0];
 800414e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8004150:	3702      	adds	r7, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004152:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 8004154:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            sum0 += cols_8b[0]*ksrc[0];
 8004156:	f918 4c02 	ldrsb.w	r4, [r8, #-2]
            q31_t sum0 = bias[0] + biasR[0];
 800415a:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800415e:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8004160:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[0]*ksrc[0];
 8004164:	f919 0c09 	ldrsb.w	r0, [r9, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 8004168:	4419      	add	r1, r3
            sum1 += cols_8b[1]*ksrc[0];
 800416a:	f918 5c01 	ldrsb.w	r5, [r8, #-1]
            sum0 += cols_8b[1]*ksrc[1];
 800416e:	f919 2c08 	ldrsb.w	r2, [r9, #-8]
            sum0 += cols_8b[0]*ksrc[0];
 8004172:	fb14 1400 	smlabb	r4, r4, r0, r1
            sum1 += cols_8b[2]*ksrc[1];
 8004176:	f998 3000 	ldrsb.w	r3, [r8]
            sum0 += cols_8b[2]*ksrc[2];
 800417a:	f919 bc07 	ldrsb.w	fp, [r9, #-7]
            sum1 += cols_8b[1]*ksrc[0];
 800417e:	fb10 1105 	smlabb	r1, r0, r5, r1
            sum0 += cols_8b[1]*ksrc[1];
 8004182:	fb15 4402 	smlabb	r4, r5, r2, r4
            sum0 += cols_8b[0]*ksrc[3];
 8004186:	f919 ac06 	ldrsb.w	sl, [r9, #-6]
            sum1 += cols_8b[2]*ksrc[1];
 800418a:	fb12 1003 	smlabb	r0, r2, r3, r1
            sum0 += cols_8b[0]*ksrc[3];
 800418e:	f99c 2000 	ldrsb.w	r2, [ip]
            sum0 += cols_8b[2]*ksrc[2];
 8004192:	fb13 430b 	smlabb	r3, r3, fp, r4
            sum1 += cols_8b[1]*ksrc[3];
 8004196:	f99c 1001 	ldrsb.w	r1, [ip, #1]
            sum0 += cols_8b[1]*ksrc[4];
 800419a:	f919 6c05 	ldrsb.w	r6, [r9, #-5]
            sum0 += cols_8b[0]*ksrc[3];
 800419e:	fb12 330a 	smlabb	r3, r2, sl, r3
            sum1 += cols_8b[2]*ksrc[4];
 80041a2:	f99c 5002 	ldrsb.w	r5, [ip, #2]
            sum1 += cols_8b[3]*ksrc[2];
 80041a6:	f998 2001 	ldrsb.w	r2, [r8, #1]
            sum0 += cols_8b[1]*ksrc[4];
 80041aa:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum0 += cols_8b[2]*ksrc[5];
 80041ae:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
            sum1 += cols_8b[3]*ksrc[2];
 80041b2:	fb1b 0202 	smlabb	r2, fp, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 80041b6:	f919 0c03 	ldrsb.w	r0, [r9, #-3]
 80041ba:	f997 b002 	ldrsb.w	fp, [r7, #2]
            sum0 += cols_8b[2]*ksrc[5];
 80041be:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[3];
 80041c2:	fb1a 2201 	smlabb	r2, sl, r1, r2
            sum0 += cols_8b[1]*ksrc[7];
 80041c6:	f919 1c02 	ldrsb.w	r1, [r9, #-2]
            sum0 += cols_8b[0]*ksrc[6];
 80041ca:	fb1b 3300 	smlabb	r3, fp, r0, r3
            sum1 += cols_8b[1]*ksrc[6];
 80041ce:	f997 b003 	ldrsb.w	fp, [r7, #3]
            sum1 += cols_8b[2]*ksrc[7];
 80041d2:	f997 a004 	ldrsb.w	sl, [r7, #4]
            sum1 += cols_8b[2]*ksrc[4];
 80041d6:	fb16 2205 	smlabb	r2, r6, r5, r2
            sum0 += cols_8b[1]*ksrc[7];
 80041da:	fb1b 3301 	smlabb	r3, fp, r1, r3
            sum0 += cols_8b[2]*ksrc[8];
 80041de:	f919 6c01 	ldrsb.w	r6, [r9, #-1]
            sum0 = (float) sum0 * *scales;
 80041e2:	ed5e 7a01 	vldr	s15, [lr, #-4]
            sum0 += cols_8b[2]*ksrc[8];
 80041e6:	fb1a 3306 	smlabb	r3, sl, r6, r3
            sum1 += cols_8b[3]*ksrc[5];
 80041ea:	f99c 5003 	ldrsb.w	r5, [ip, #3]
 80041ee:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum0 += cols_8b[2]*ksrc[8];
 80041f2:	ee07 3a10 	vmov	s14, r3
            sum1 += cols_8b[3]*ksrc[8];
 80041f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
            sum0 = (float) sum0 * *scales;
 80041fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            sum1 += cols_8b[1]*ksrc[6];
 80041fe:	fb10 220b 	smlabb	r2, r0, fp, r2
            sum0 += output_offset;
 8004202:	982a      	ldr	r0, [sp, #168]	; 0xa8
            sum1 += cols_8b[2]*ksrc[7];
 8004204:	fb11 220a 	smlabb	r2, r1, sl, r2
            sum0 = (float) sum0 * *scales;
 8004208:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 += cols_8b[3]*ksrc[8];
 800420c:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum0 = (float) sum0 * *scales;
 8004210:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            sum1 = (float) sum1 * *scales;
 8004214:	ee07 2a90 	vmov	s15, r2
 8004218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 800421c:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8004220:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 8004222:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8004224:	4283      	cmp	r3, r0
 8004226:	bfb8      	it	lt
 8004228:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 800422a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800422c:	4283      	cmp	r3, r0
 800422e:	bfa8      	it	ge
 8004230:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004232:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004236:	9a01      	ldr	r2, [sp, #4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004238:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 800423a:	ed1e 7a01 	vldr	s14, [lr, #-4]
            sum1 += output_offset;
 800423e:	992a      	ldr	r1, [sp, #168]	; 0xa8
            sum1 = (float) sum1 * *scales;
 8004240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004248:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 800424c:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 800424e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004250:	428b      	cmp	r3, r1
 8004252:	bfb8      	it	lt
 8004254:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8004256:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8004258:	428b      	cmp	r3, r1
 800425a:	bfa8      	it	ge
 800425c:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800425e:	7013      	strb	r3, [r2, #0]
 8004260:	9b06      	ldr	r3, [sp, #24]
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 8004266:	9b05      	ldr	r3, [sp, #20]
 8004268:	4598      	cmp	r8, r3
 800426a:	f47f af6a 	bne.w	8004142 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x376>
 800426e:	9f09      	ldr	r7, [sp, #36]	; 0x24
        }
        if (output_x & 1) {
 8004270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004272:	3701      	adds	r7, #1
 8004274:	9709      	str	r7, [sp, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d07b      	beq.n	8004372 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a6>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 800427a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800427c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800427e:	9807      	ldr	r0, [sp, #28]
 8004280:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8004284:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004286:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800428a:	4420      	add	r0, r4
            sum += cols_8b[0]*ksrc[0];
 800428c:	f998 4000 	ldrsb.w	r4, [r8]
            q31_t sum = bias[0] + biasR[0];
 8004290:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 8004292:	f919 2c09 	ldrsb.w	r2, [r9, #-9]
            sum += cols_8b[1]*ksrc[1];
 8004296:	f998 5001 	ldrsb.w	r5, [r8, #1]
            sum += cols_8b[0]*ksrc[0];
 800429a:	fb14 3c02 	smlabb	ip, r4, r2, r3

            sum = (float) sum * *scales;
            sum += output_offset;
            sum = MAX(sum, activation_min);
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800429e:	9a08      	ldr	r2, [sp, #32]
 80042a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            sum += cols_8b[1]*ksrc[1];
 80042a2:	f919 4c08 	ldrsb.w	r4, [r9, #-8]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80042a6:	eba2 0a03 	sub.w	sl, r2, r3
 80042aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
            cols_8b += column_x + 2;
 80042ac:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80042ae:	18d3      	adds	r3, r2, r3
 80042b0:	9007      	str	r0, [sp, #28]
 80042b2:	eb08 0106 	add.w	r1, r8, r6
            sum = (float) sum * *scales;
 80042b6:	ed1e 7a01 	vldr	s14, [lr, #-4]
 80042ba:	9308      	str	r3, [sp, #32]
            sum += cols_8b[1]*ksrc[1];
 80042bc:	fb15 c304 	smlabb	r3, r5, r4, ip
            sum += cols_8b[2]*ksrc[2];
 80042c0:	f998 5002 	ldrsb.w	r5, [r8, #2]
            cols_8b += column_x + 2;
 80042c4:	1988      	adds	r0, r1, r6
            sum += cols_8b[2]*ksrc[2];
 80042c6:	f919 4c07 	ldrsb.w	r4, [r9, #-7]
            sum += output_offset;
 80042ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 80042cc:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 80042d0:	f918 5006 	ldrsb.w	r5, [r8, r6]
 80042d4:	f919 4c06 	ldrsb.w	r4, [r9, #-6]
            sum += cols_8b[0]*ksrc[6];
 80042d8:	f918 6016 	ldrsb.w	r6, [r8, r6, lsl #1]

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2;
 80042dc:	f108 0803 	add.w	r8, r8, #3
            sum += cols_8b[0]*ksrc[3];
 80042e0:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 80042e4:	f991 4001 	ldrsb.w	r4, [r1, #1]
 80042e8:	f919 5c05 	ldrsb.w	r5, [r9, #-5]
            sum += cols_8b[2]*ksrc[5];
 80042ec:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 80042f0:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 80042f4:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
 80042f8:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 80042fc:	f919 3c03 	ldrsb.w	r3, [r9, #-3]
 8004300:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 8004304:	f990 6001 	ldrsb.w	r6, [r0, #1]
 8004308:	f919 3c02 	ldrsb.w	r3, [r9, #-2]
            sum += cols_8b[2]*ksrc[8];
 800430c:	f990 0002 	ldrsb.w	r0, [r0, #2]
            sum += cols_8b[1]*ksrc[7];
 8004310:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 8004314:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 8004318:	fb10 1103 	smlabb	r1, r0, r3, r1
            sum = (float) sum * *scales;
 800431c:	ee07 1a90 	vmov	s15, r1
 8004320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800432c:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8004330:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8004332:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8004334:	4293      	cmp	r3, r2
 8004336:	bfb8      	it	lt
 8004338:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 800433a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800433c:	4293      	cmp	r3, r2
 800433e:	bfa8      	it	ge
 8004340:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004342:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004344:	f80a 3002 	strb.w	r3, [sl, r2]
    for (i = 0; i < output_y; i++) {
 8004348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800434a:	42bb      	cmp	r3, r7
 800434c:	f47f aee3 	bne.w	8004116 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 8004350:	46f0      	mov	r8, lr
        input++;
 8004352:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004354:	f109 0909 	add.w	r9, r9, #9
 8004358:	3301      	adds	r3, #1
 800435a:	9313      	str	r3, [sp, #76]	; 0x4c
    for (c = 0; c < input_ch; c++){
 800435c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800435e:	4598      	cmp	r8, r3
 8004360:	f47f aea1 	bne.w	80040a6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2da>
}
 8004364:	2000      	movs	r0, #0
 8004366:	b01d      	add	sp, #116	; 0x74
 8004368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 800436c:	461d      	mov	r5, r3
 800436e:	4616      	mov	r6, r2
 8004370:	e633      	b.n	8003fda <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
 8004372:	9b08      	ldr	r3, [sp, #32]
        cols_8b_iterptr += 1 * 2;
 8004374:	f108 0802 	add.w	r8, r8, #2
 8004378:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800437a:	4413      	add	r3, r2
 800437c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800437e:	9308      	str	r3, [sp, #32]
 8004380:	9b07      	ldr	r3, [sp, #28]
 8004382:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8004384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004386:	9307      	str	r3, [sp, #28]
 8004388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800438a:	4293      	cmp	r3, r2
 800438c:	f47f aec3 	bne.w	8004116 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 8004390:	e7de      	b.n	8004350 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x584>
    for(i = 0; i < input_x + 2; i++){
 8004392:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 8004394:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 8004398:	1aca      	subs	r2, r1, r3
 800439a:	b292      	uxth	r2, r2
 800439c:	4591      	cmp	r9, r2
 800439e:	daf9      	bge.n	8004394 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c8>
 80043a0:	e650      	b.n	8004044 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80043a2:	2602      	movs	r6, #2
 80043a4:	e619      	b.n	8003fda <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
        *cols_8b++ = PAD8;
 80043a6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    for(i = 0; i < input_x + 2; i++){
 80043a8:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 80043aa:	701f      	strb	r7, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	e58d      	b.n	8003ecc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x100>
    for(i = 0; i < input_x + 2; i++){
 80043b0:	f04f 0806 	mov.w	r8, #6
 80043b4:	e553      	b.n	8003e5e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 80043b6:	bf00      	nop

080043b8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	b09f      	sub	sp, #124	; 0x7c

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 80043be:	f101 0901 	add.w	r9, r1, #1
{
 80043c2:	9218      	str	r2, [sp, #96]	; 0x60
 80043c4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80043c6:	930a      	str	r3, [sp, #40]	; 0x28
 80043c8:	1c8b      	adds	r3, r1, #2
 80043ca:	4252      	negs	r2, r2
 80043cc:	910c      	str	r1, [sp, #48]	; 0x30
 80043ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80043d0:	f002 0207 	and.w	r2, r2, #7
 80043d4:	f8bd 10c4 	ldrh.w	r1, [sp, #196]	; 0xc4
 80043d8:	9014      	str	r0, [sp, #80]	; 0x50
 80043da:	1dd3      	adds	r3, r2, #7
 80043dc:	910d      	str	r1, [sp, #52]	; 0x34
 80043de:	f8bd 10c8 	ldrh.w	r1, [sp, #200]	; 0xc8
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	f99d 70d4 	ldrsb.w	r7, [sp, #212]	; 0xd4
 80043e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80043ea:	bf38      	it	cc
 80043ec:	230c      	movcc	r3, #12
 80043ee:	454b      	cmp	r3, r9
 80043f0:	f200 82e5 	bhi.w	80049be <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x606>
 80043f4:	b322      	cbz	r2, 8004440 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x88>
        *cols_8b++ = PAD8;
 80043f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80043f8:	2a01      	cmp	r2, #1
 80043fa:	701f      	strb	r7, [r3, #0]
 80043fc:	f103 0c01 	add.w	ip, r3, #1
 8004400:	d020      	beq.n	8004444 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8004402:	2a02      	cmp	r2, #2
 8004404:	705f      	strb	r7, [r3, #1]
 8004406:	f103 0c02 	add.w	ip, r3, #2
 800440a:	d01b      	beq.n	8004444 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 800440c:	2a03      	cmp	r2, #3
 800440e:	709f      	strb	r7, [r3, #2]
 8004410:	f103 0c03 	add.w	ip, r3, #3
 8004414:	d016      	beq.n	8004444 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8004416:	2a04      	cmp	r2, #4
 8004418:	70df      	strb	r7, [r3, #3]
 800441a:	f103 0c04 	add.w	ip, r3, #4
 800441e:	d011      	beq.n	8004444 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 8004420:	2a05      	cmp	r2, #5
 8004422:	711f      	strb	r7, [r3, #4]
 8004424:	f103 0c05 	add.w	ip, r3, #5
 8004428:	d00c      	beq.n	8004444 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8c>
 800442a:	2a07      	cmp	r2, #7
 800442c:	715f      	strb	r7, [r3, #5]
 800442e:	f103 0c06 	add.w	ip, r3, #6
 8004432:	f040 82c9 	bne.w	80049c8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x610>
 8004436:	719f      	strb	r7, [r3, #6]
 8004438:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 800443c:	4690      	mov	r8, r2
 800443e:	e002      	b.n	8004446 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
 8004440:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
 8004444:	4690      	mov	r8, r2
 8004446:	2400      	movs	r4, #0
 8004448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800444a:	f10c 0001 	add.w	r0, ip, #1
 800444e:	4625      	mov	r5, r4
 8004450:	f367 0407 	bfi	r4, r7, #0, #8
 8004454:	eba3 0e02 	sub.w	lr, r3, r2
 8004458:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800445a:	4629      	mov	r1, r5
 800445c:	f367 0507 	bfi	r5, r7, #0, #8
 8004460:	f367 240f 	bfi	r4, r7, #8, #8
 8004464:	441a      	add	r2, r3
 8004466:	f367 250f 	bfi	r5, r7, #8, #8
 800446a:	ea4f 06de 	mov.w	r6, lr, lsr #3
 800446e:	f367 4417 	bfi	r4, r7, #16, #8
 8004472:	f367 4517 	bfi	r5, r7, #16, #8
 8004476:	f367 641f 	bfi	r4, r7, #24, #8
 800447a:	f367 651f 	bfi	r5, r7, #24, #8
 800447e:	3101      	adds	r1, #1
 8004480:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 8004482:	3008      	adds	r0, #8
 8004484:	428e      	cmp	r6, r1
 8004486:	f103 0307 	add.w	r3, r3, #7
 800448a:	e9c2 4500 	strd	r4, r5, [r2]
 800448e:	f102 0208 	add.w	r2, r2, #8
 8004492:	d8f4      	bhi.n	800447e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xc6>
 8004494:	f02e 0107 	bic.w	r1, lr, #7
 8004498:	eb08 0201 	add.w	r2, r8, r1
 800449c:	4571      	cmp	r1, lr
 800449e:	eb0c 0001 	add.w	r0, ip, r1
 80044a2:	b292      	uxth	r2, r2
 80044a4:	d05c      	beq.n	8004560 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
    for(i = 0; i < input_x + 2; i++){
 80044a6:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 80044ae:	b290      	uxth	r0, r2
 80044b0:	4581      	cmp	r9, r0
 80044b2:	db55      	blt.n	8004560 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
 80044b4:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 80044b6:	701f      	strb	r7, [r3, #0]
 80044b8:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 80044ba:	b292      	uxth	r2, r2
 80044bc:	4591      	cmp	r9, r2
 80044be:	db4e      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80044c0:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 80044c2:	705f      	strb	r7, [r3, #1]
 80044c4:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 80044c6:	b292      	uxth	r2, r2
 80044c8:	4591      	cmp	r9, r2
 80044ca:	db48      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80044cc:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 80044ce:	709f      	strb	r7, [r3, #2]
 80044d0:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 80044d2:	b292      	uxth	r2, r2
 80044d4:	4591      	cmp	r9, r2
 80044d6:	db42      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80044d8:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 80044da:	70df      	strb	r7, [r3, #3]
 80044dc:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 80044de:	b292      	uxth	r2, r2
 80044e0:	4591      	cmp	r9, r2
 80044e2:	db3c      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80044e4:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 80044e6:	711f      	strb	r7, [r3, #4]
 80044e8:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 80044ea:	b292      	uxth	r2, r2
 80044ec:	4591      	cmp	r9, r2
 80044ee:	db36      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80044f0:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 80044f2:	715f      	strb	r7, [r3, #5]
 80044f4:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 80044f6:	b292      	uxth	r2, r2
 80044f8:	4591      	cmp	r9, r2
 80044fa:	db30      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 80044fc:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 80044fe:	719f      	strb	r7, [r3, #6]
 8004500:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8004502:	b292      	uxth	r2, r2
 8004504:	4591      	cmp	r9, r2
 8004506:	db2a      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8004508:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 800450c:	71df      	strb	r7, [r3, #7]
 800450e:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 8004512:	b292      	uxth	r2, r2
 8004514:	4591      	cmp	r9, r2
 8004516:	db22      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8004518:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 800451c:	721f      	strb	r7, [r3, #8]
 800451e:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 8004522:	b292      	uxth	r2, r2
 8004524:	4591      	cmp	r9, r2
 8004526:	db1a      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8004528:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 800452c:	725f      	strb	r7, [r3, #9]
 800452e:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 8004532:	b292      	uxth	r2, r2
 8004534:	4591      	cmp	r9, r2
 8004536:	db12      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8004538:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 800453c:	729f      	strb	r7, [r3, #10]
 800453e:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 8004542:	b292      	uxth	r2, r2
 8004544:	4591      	cmp	r9, r2
 8004546:	db0a      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
 8004548:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 800454c:	72df      	strb	r7, [r3, #11]
 800454e:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 8004552:	b292      	uxth	r2, r2
 8004554:	4591      	cmp	r9, r2
 8004556:	db02      	blt.n	800455e <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a6>
        *cols_8b++ = PAD8;
 8004558:	731f      	strb	r7, [r3, #12]
 800455a:	330d      	adds	r3, #13
 800455c:	e000      	b.n	8004560 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1a8>
 800455e:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8004560:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004562:	b192      	cbz	r2, 800458a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1d2>
 8004564:	4614      	mov	r4, r2
 8004566:	2100      	movs	r1, #0
 8004568:	461a      	mov	r2, r3
 800456a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800456c:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 800456e:	7017      	strb	r7, [r2, #0]
 8004570:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 8004572:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8004574:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8004578:	4284      	cmp	r4, r0
 800457a:	d8f7      	bhi.n	800456c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x1b4>
 800457c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800457e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004580:	3a01      	subs	r2, #1
 8004582:	b292      	uxth	r2, r2
 8004584:	fb02 1201 	mla	r2, r2, r1, r1
 8004588:	4413      	add	r3, r2
 800458a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800458c:	f1a2 0113 	sub.w	r1, r2, #19
 8004590:	f64f 72ea 	movw	r2, #65514	; 0xffea
 8004594:	4291      	cmp	r1, r2
 8004596:	f200 8208 	bhi.w	80049aa <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5f2>
 800459a:	425a      	negs	r2, r3
 800459c:	f012 0203 	ands.w	r2, r2, #3
 80045a0:	f000 81f0 	beq.w	8004984 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5cc>
 80045a4:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 80045a6:	701f      	strb	r7, [r3, #0]
 80045a8:	f103 0501 	add.w	r5, r3, #1
 80045ac:	f000 81eb 	beq.w	8004986 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5ce>
 80045b0:	2a03      	cmp	r2, #3
 80045b2:	705f      	strb	r7, [r3, #1]
 80045b4:	f103 0502 	add.w	r5, r3, #2
 80045b8:	f040 81ff 	bne.w	80049ba <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x602>
 80045bc:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 80045be:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 80045c0:	709f      	strb	r7, [r3, #2]
 80045c2:	2100      	movs	r1, #0
 80045c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80045c6:	4413      	add	r3, r2
 80045c8:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 80045ca:	460a      	mov	r2, r1
 80045cc:	f367 0107 	bfi	r1, r7, #0, #8
 80045d0:	08a0      	lsrs	r0, r4, #2
 80045d2:	f367 210f 	bfi	r1, r7, #8, #8
 80045d6:	f367 4117 	bfi	r1, r7, #16, #8
 80045da:	f367 611f 	bfi	r1, r7, #24, #8
 80045de:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 80045e0:	f843 1b04 	str.w	r1, [r3], #4
 80045e4:	4290      	cmp	r0, r2
 80045e6:	d8fa      	bhi.n	80045de <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x226>
 80045e8:	f024 0303 	bic.w	r3, r4, #3
 80045ec:	18f2      	adds	r2, r6, r3
 80045ee:	42a3      	cmp	r3, r4
 80045f0:	eb05 0003 	add.w	r0, r5, r3
 80045f4:	b291      	uxth	r1, r2
 80045f6:	d019      	beq.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
    for(i = 0; i < input_x + 2; i++){
 80045f8:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 80045fa:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 80045fc:	b293      	uxth	r3, r2
 80045fe:	4599      	cmp	r9, r3
 8004600:	db14      	blt.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8004602:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 8004604:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 8004606:	b29b      	uxth	r3, r3
 8004608:	454b      	cmp	r3, r9
 800460a:	dc0f      	bgt.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 800460c:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 800460e:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 8004610:	b29b      	uxth	r3, r3
 8004612:	4599      	cmp	r9, r3
 8004614:	db0a      	blt.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8004616:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 8004618:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 800461a:	b29b      	uxth	r3, r3
 800461c:	4599      	cmp	r9, r3
 800461e:	db05      	blt.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 8004620:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 8004622:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 8004624:	b29b      	uxth	r3, r3
 8004626:	4599      	cmp	r9, r3
 8004628:	db00      	blt.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
        *cols_8b++ = PAD8;
 800462a:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 800462c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800462e:	2c00      	cmp	r4, #0
 8004630:	f000 81a4 	beq.w	800497c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5c4>
 8004634:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004636:	1e63      	subs	r3, r4, #1
 8004638:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800463a:	1e72      	subs	r2, r6, #1
 800463c:	f006 0101 	and.w	r1, r6, #1
 8004640:	f100 0a09 	add.w	sl, r0, #9
 8004644:	b29b      	uxth	r3, r3
 8004646:	b292      	uxth	r2, r2
 8004648:	f1c1 0102 	rsb	r1, r1, #2
 800464c:	3301      	adds	r3, #1
{
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 800464e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004650:	1c50      	adds	r0, r2, #1
 8004652:	086f      	lsrs	r7, r5, #1
 8004654:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8004658:	901a      	str	r0, [sp, #104]	; 0x68
 800465a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800465c:	970f      	str	r7, [sp, #60]	; 0x3c
 800465e:	4401      	add	r1, r0
 8004660:	982b      	ldr	r0, [sp, #172]	; 0xac
 8004662:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004666:	4684      	mov	ip, r0
 8004668:	981a      	ldr	r0, [sp, #104]	; 0x68
 800466a:	9319      	str	r3, [sp, #100]	; 0x64
 800466c:	1cd3      	adds	r3, r2, #3
 800466e:	46e1      	mov	r9, ip
 8004670:	9116      	str	r1, [sp, #88]	; 0x58
 8004672:	931d      	str	r3, [sp, #116]	; 0x74
 8004674:	4623      	mov	r3, r4
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800467c:	931c      	str	r3, [sp, #112]	; 0x70
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 800467e:	1c8b      	adds	r3, r1, #2
 8004680:	9317      	str	r3, [sp, #92]	; 0x5c
 8004682:	00bb      	lsls	r3, r7, #2
 8004684:	9312      	str	r3, [sp, #72]	; 0x48
 8004686:	4673      	mov	r3, lr
 8004688:	fb04 f303 	mul.w	r3, r4, r3
 800468c:	9315      	str	r3, [sp, #84]	; 0x54
 800468e:	f005 0301 	and.w	r3, r5, #1
 8004692:	930e      	str	r3, [sp, #56]	; 0x38
 8004694:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8004696:	4403      	add	r3, r0
 8004698:	931b      	str	r3, [sp, #108]	; 0x6c
 800469a:	4623      	mov	r3, r4
 800469c:	fb03 f305 	mul.w	r3, r3, r5
 80046a0:	9310      	str	r3, [sp, #64]	; 0x40
 80046a2:	0073      	lsls	r3, r6, #1
 80046a4:	9311      	str	r3, [sp, #68]	; 0x44
 80046a6:	0063      	lsls	r3, r4, #1
 80046a8:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 80046aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80046ac:	b1eb      	cbz	r3, 80046ea <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x332>
 80046ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046b0:	b1da      	cbz	r2, 80046ea <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x332>
 80046b2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80046b4:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 80046b6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
        for(i = 0; i < input_y; i++){
 80046b8:	4698      	mov	r8, r3
 80046ba:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 80046be:	f8dd e068 	ldr.w	lr, [sp, #104]	; 0x68
 80046c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80046c4:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80046c8:	eb04 000e 	add.w	r0, r4, lr
 80046cc:	4622      	mov	r2, r4
 80046ce:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 80046d0:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 80046d4:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 80046d6:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 80046da:	4282      	cmp	r2, r0
 80046dc:	d1f8      	bne.n	80046d0 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x318>
 80046de:	3501      	adds	r5, #1
 80046e0:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 80046e2:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 80046e4:	b2ab      	uxth	r3, r5
 80046e6:	4598      	cmp	r8, r3
 80046e8:	d8ee      	bhi.n	80046c8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x310>
        depthwise_kernel3x3_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80046ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80046ec:	f109 0904 	add.w	r9, r9, #4
 80046f0:	3304      	adds	r3, #4
 80046f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80046f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80046f6:	3304      	adds	r3, #4
 80046f8:	932a      	str	r3, [sp, #168]	; 0xa8
    for (i = 0; i < output_y; i++) {
 80046fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8134 	beq.w	800496a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5b2>
 8004702:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8004704:	2300      	movs	r3, #0
 8004706:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004708:	990a      	ldr	r1, [sp, #40]	; 0x28
 800470a:	f8cd 90ac 	str.w	r9, [sp, #172]	; 0xac
 800470e:	4681      	mov	r9, r0
 8004710:	440a      	add	r2, r1
 8004712:	982b      	ldr	r0, [sp, #172]	; 0xac
 8004714:	9308      	str	r3, [sp, #32]
 8004716:	9209      	str	r2, [sp, #36]	; 0x24
 8004718:	9307      	str	r3, [sp, #28]
        for (j = 0; j < output_x / 2; j++) {
 800471a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80b1 	beq.w	8004884 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x4cc>
 8004722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004724:	9908      	ldr	r1, [sp, #32]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004726:	902b      	str	r0, [sp, #172]	; 0xac
 8004728:	fb01 2302 	mla	r3, r1, r2, r2
 800472c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800472e:	eb09 0801 	add.w	r8, r9, r1
 8004732:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004734:	9303      	str	r3, [sp, #12]
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	eb09 0e01 	add.w	lr, r9, r1
 800473c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800473e:	9305      	str	r3, [sp, #20]
 8004740:	4449      	add	r1, r9
 8004742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004744:	9104      	str	r1, [sp, #16]
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	9a01      	ldr	r2, [sp, #4]
 800474a:	f108 0804 	add.w	r8, r8, #4
 800474e:	9903      	ldr	r1, [sp, #12]
 8004750:	f10e 0e04 	add.w	lr, lr, #4
            q31_t sum0 = bias[0] + biasR[0];
 8004754:	982a      	ldr	r0, [sp, #168]	; 0xa8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004756:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 8004758:	9b29      	ldr	r3, [sp, #164]	; 0xa4
            sum0 += cols_8b[0]*ksrc[0];
 800475a:	f91a 2c09 	ldrsb.w	r2, [sl, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 800475e:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004762:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8004764:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[1]*ksrc[1];
 8004768:	f91a 4c08 	ldrsb.w	r4, [sl, #-8]
            q31_t sum0 = bias[0] + biasR[0];
 800476c:	1858      	adds	r0, r3, r1
            sum0 += cols_8b[0]*ksrc[0];
 800476e:	f999 1000 	ldrsb.w	r1, [r9]
            sum1 += cols_8b[2]*ksrc[0];
 8004772:	f999 5002 	ldrsb.w	r5, [r9, #2]
            sum0 += cols_8b[0]*ksrc[0];
 8004776:	fb11 0302 	smlabb	r3, r1, r2, r0
            sum0 += cols_8b[1]*ksrc[1];
 800477a:	f999 1001 	ldrsb.w	r1, [r9, #1]
            sum0 += cols_8b[2]*ksrc[2];
 800477e:	f91a bc07 	ldrsb.w	fp, [sl, #-7]
            sum1 += cols_8b[2]*ksrc[0];
 8004782:	fb12 0005 	smlabb	r0, r2, r5, r0
            sum0 += cols_8b[1]*ksrc[1];
 8004786:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum0 += cols_8b[0]*ksrc[3];
 800478a:	f91a 6c06 	ldrsb.w	r6, [sl, #-6]
            sum0 += cols_8b[1]*ksrc[4];
 800478e:	f91a 3c05 	ldrsb.w	r3, [sl, #-5]
            sum0 += cols_8b[2]*ksrc[2];
 8004792:	fb15 150b 	smlabb	r5, r5, fp, r1
            sum0 += cols_8b[0]*ksrc[3];
 8004796:	f918 1c02 	ldrsb.w	r1, [r8, #-2]
            sum0 = (float) sum0 * *scales;
 800479a:	9f2b      	ldr	r7, [sp, #172]	; 0xac
            sum0 += cols_8b[0]*ksrc[3];
 800479c:	fb11 5506 	smlabb	r5, r1, r6, r5
            sum0 += cols_8b[1]*ksrc[4];
 80047a0:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
            sum1 += cols_8b[2]*ksrc[3];
 80047a4:	f998 c000 	ldrsb.w	ip, [r8]
            sum0 = (float) sum0 * *scales;
 80047a8:	ed17 7a01 	vldr	s14, [r7, #-4]
            sum0 += cols_8b[1]*ksrc[4];
 80047ac:	fb11 5103 	smlabb	r1, r1, r3, r5
            sum0 += cols_8b[2]*ksrc[5];
 80047b0:	f91a 7c04 	ldrsb.w	r7, [sl, #-4]
            sum1 += cols_8b[3]*ksrc[1];
 80047b4:	f999 2003 	ldrsb.w	r2, [r9, #3]
            sum0 += cols_8b[2]*ksrc[5];
 80047b8:	fb1c 1107 	smlabb	r1, ip, r7, r1
            sum0 += cols_8b[0]*ksrc[6];
 80047bc:	f91a 5c03 	ldrsb.w	r5, [sl, #-3]
            sum1 += cols_8b[3]*ksrc[1];
 80047c0:	fb14 0202 	smlabb	r2, r4, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 80047c4:	f99e 4000 	ldrsb.w	r4, [lr]
            sum1 += cols_8b[4]*ksrc[2];
 80047c8:	f919 0f04 	ldrsb.w	r0, [r9, #4]!
            sum0 += cols_8b[0]*ksrc[6];
 80047cc:	fb14 1105 	smlabb	r1, r4, r5, r1
            sum0 += cols_8b[1]*ksrc[7];
 80047d0:	f91a 4c02 	ldrsb.w	r4, [sl, #-2]
            sum1 += cols_8b[4]*ksrc[2];
 80047d4:	fb1b 2200 	smlabb	r2, fp, r0, r2
            sum0 += cols_8b[1]*ksrc[7];
 80047d8:	f99e 0001 	ldrsb.w	r0, [lr, #1]
            sum1 += cols_8b[2]*ksrc[6];
 80047dc:	f99e b002 	ldrsb.w	fp, [lr, #2]
            sum0 += cols_8b[1]*ksrc[7];
 80047e0:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[2]*ksrc[8];
 80047e4:	f91a 0c01 	ldrsb.w	r0, [sl, #-1]
            sum1 += cols_8b[2]*ksrc[3];
 80047e8:	fb16 220c 	smlabb	r2, r6, ip, r2
            sum1 += cols_8b[3]*ksrc[4];
 80047ec:	f998 6001 	ldrsb.w	r6, [r8, #1]
            sum0 += cols_8b[2]*ksrc[8];
 80047f0:	fb1b 1c00 	smlabb	ip, fp, r0, r1
            sum1 += cols_8b[3]*ksrc[4];
 80047f4:	fb13 2206 	smlabb	r2, r3, r6, r2
            sum1 += cols_8b[4]*ksrc[5];
 80047f8:	f998 6002 	ldrsb.w	r6, [r8, #2]
            sum0 += cols_8b[2]*ksrc[8];
 80047fc:	ee07 ca90 	vmov	s15, ip
            sum1 += cols_8b[3]*ksrc[7];
 8004800:	f99e c003 	ldrsb.w	ip, [lr, #3]
            sum1 += cols_8b[4]*ksrc[5];
 8004804:	fb17 2706 	smlabb	r7, r7, r6, r2
            sum1 += cols_8b[4]*ksrc[8];
 8004808:	f99e 1004 	ldrsb.w	r1, [lr, #4]
            sum0 = (float) sum0 * *scales;
 800480c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004810:	9a01      	ldr	r2, [sp, #4]
            sum1 += cols_8b[2]*ksrc[6];
 8004812:	fb15 770b 	smlabb	r7, r5, fp, r7
            sum0 = (float) sum0 * *scales;
 8004816:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[3]*ksrc[7];
 800481a:	fb14 770c 	smlabb	r7, r4, ip, r7
            sum1 += cols_8b[4]*ksrc[8];
 800481e:	fb10 7701 	smlabb	r7, r0, r1, r7
            sum0 += output_offset;
 8004822:	982c      	ldr	r0, [sp, #176]	; 0xb0
            sum0 = (float) sum0 * *scales;
 8004824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004828:	9902      	ldr	r1, [sp, #8]
            sum0 = (float) sum0 * *scales;
 800482a:	ee17 3a90 	vmov	r3, s15
            sum1 = (float) sum1 * *scales;
 800482e:	ee07 7a90 	vmov	s15, r7
            sum0 += output_offset;
 8004832:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 8004834:	982e      	ldr	r0, [sp, #184]	; 0xb8
            sum1 = (float) sum1 * *scales;
 8004836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = MAX(sum0, activation_min);
 800483a:	4283      	cmp	r3, r0
 800483c:	bfb8      	it	lt
 800483e:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 8004840:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8004842:	4283      	cmp	r3, r0
 8004844:	bfa8      	it	ge
 8004846:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004848:	9805      	ldr	r0, [sp, #20]
 800484a:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 800484c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
            sum1 += output_offset;
 800484e:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum1 = (float) sum1 * *scales;
 8004850:	ed13 7a01 	vldr	s14, [r3, #-4]
 8004854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485c:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8004860:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8004862:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8004864:	428b      	cmp	r3, r1
 8004866:	bfb8      	it	lt
 8004868:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 800486a:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800486c:	428b      	cmp	r3, r1
 800486e:	bfa8      	it	ge
 8004870:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004872:	7013      	strb	r3, [r2, #0]
 8004874:	9b06      	ldr	r3, [sp, #24]
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 800487a:	9b04      	ldr	r3, [sp, #16]
 800487c:	4599      	cmp	r9, r3
 800487e:	f47f af63 	bne.w	8004748 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x390>
 8004882:	982b      	ldr	r0, [sp, #172]	; 0xac
 8004884:	9b07      	ldr	r3, [sp, #28]
        if (output_x & 1) {
 8004886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004888:	3301      	adds	r3, #1
 800488a:	9307      	str	r3, [sp, #28]
 800488c:	2a00      	cmp	r2, #0
 800488e:	d07c      	beq.n	800498a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5d2>
            q31_t sum = bias[0] + biasR[0];
 8004890:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004892:	9c08      	ldr	r4, [sp, #32]
 8004894:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8004898:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800489a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800489c:	442c      	add	r4, r5
            sum += cols_8b[1]*ksrc[1];
 800489e:	f91a cc08 	ldrsb.w	ip, [sl, #-8]
            q31_t sum = bias[0] + biasR[0];
 80048a2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80048a6:	9408      	str	r4, [sp, #32]
 80048a8:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 80048aa:	f999 4000 	ldrsb.w	r4, [r9]
 80048ae:	f91a 2c09 	ldrsb.w	r2, [sl, #-9]
            sum += cols_8b[1]*ksrc[1];
 80048b2:	f999 5001 	ldrsb.w	r5, [r9, #1]
            sum += cols_8b[0]*ksrc[0];
 80048b6:	fb14 3302 	smlabb	r3, r4, r2, r3
            cols_8b += column_x + 2;
 80048ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
            sum = (float) sum * *scales;
 80048bc:	ed10 7a01 	vldr	s14, [r0, #-4]
            sum += cols_8b[1]*ksrc[1];
 80048c0:	fb15 330c 	smlabb	r3, r5, ip, r3
            sum += cols_8b[2]*ksrc[2];
 80048c4:	f999 5002 	ldrsb.w	r5, [r9, #2]
            cols_8b += column_x + 2;
 80048c8:	eb09 0106 	add.w	r1, r9, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80048cc:	e9dd 2409 	ldrd	r2, r4, [sp, #36]	; 0x24
            cols_8b += column_x + 2;
 80048d0:	198f      	adds	r7, r1, r6
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80048d2:	eba2 0e04 	sub.w	lr, r2, r4
 80048d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80048d8:	4422      	add	r2, r4
            sum += cols_8b[2]*ksrc[2];
 80048da:	f91a 4c07 	ldrsb.w	r4, [sl, #-7]
 80048de:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 80048e2:	f919 5006 	ldrsb.w	r5, [r9, r6]
 80048e6:	f91a 4c06 	ldrsb.w	r4, [sl, #-6]
            sum += cols_8b[0]*ksrc[6];
 80048ea:	f919 6016 	ldrsb.w	r6, [r9, r6, lsl #1]
            sum += cols_8b[0]*ksrc[3];
 80048ee:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 80048f2:	f991 4001 	ldrsb.w	r4, [r1, #1]
 80048f6:	f91a 5c05 	ldrsb.w	r5, [sl, #-5]
            sum += cols_8b[2]*ksrc[5];
 80048fa:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 80048fe:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 8004902:	f91a 4c04 	ldrsb.w	r4, [sl, #-4]
 8004906:	9209      	str	r2, [sp, #36]	; 0x24
 8004908:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 800490c:	f91a 3c03 	ldrsb.w	r3, [sl, #-3]
            sum += cols_8b[2]*ksrc[8];
 8004910:	f997 4002 	ldrsb.w	r4, [r7, #2]
            sum += cols_8b[0]*ksrc[6];
 8004914:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 8004918:	f91a 3c02 	ldrsb.w	r3, [sl, #-2]
 800491c:	f997 6001 	ldrsb.w	r6, [r7, #1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 8004920:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            sum += cols_8b[1]*ksrc[7];
 8004922:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 8004926:	f91a 3c01 	ldrsb.w	r3, [sl, #-1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 800492a:	4491      	add	r9, r2
            sum += output_offset;
 800492c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            sum += cols_8b[2]*ksrc[8];
 800492e:	fb14 1103 	smlabb	r1, r4, r3, r1
            sum = (float) sum * *scales;
 8004932:	ee07 1a90 	vmov	s15, r1
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004942:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8004946:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8004948:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800494a:	4293      	cmp	r3, r2
 800494c:	bfb8      	it	lt
 800494e:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8004950:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8004952:	4293      	cmp	r3, r2
 8004954:	bfa8      	it	ge
 8004956:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004958:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800495a:	f80e 3002 	strb.w	r3, [lr, r2]
    for (i = 0; i < output_y; i++) {
 800495e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004960:	9b07      	ldr	r3, [sp, #28]
 8004962:	429a      	cmp	r2, r3
 8004964:	f47f aed9 	bne.w	800471a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x362>
 8004968:	4681      	mov	r9, r0
        input++;
 800496a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800496c:	f10a 0a09 	add.w	sl, sl, #9
 8004970:	3301      	adds	r3, #1
 8004972:	9314      	str	r3, [sp, #80]	; 0x50
    for (c = 0; c < input_ch; c++){
 8004974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004976:	4599      	cmp	r9, r3
 8004978:	f47f ae97 	bne.w	80046aa <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x2f2>
}
 800497c:	2000      	movs	r0, #0
 800497e:	b01f      	add	sp, #124	; 0x7c
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 8004984:	461d      	mov	r5, r3
 8004986:	4616      	mov	r6, r2
 8004988:	e61b      	b.n	80045c2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x20a>
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 1 * 2);
 800498a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800498c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800498e:	4499      	add	r9, r3
 8004990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004992:	4413      	add	r3, r2
 8004994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004996:	9309      	str	r3, [sp, #36]	; 0x24
 8004998:	9b08      	ldr	r3, [sp, #32]
 800499a:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 800499c:	9a07      	ldr	r2, [sp, #28]
 800499e:	9308      	str	r3, [sp, #32]
 80049a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f47f aeb9 	bne.w	800471a <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x362>
 80049a8:	e7de      	b.n	8004968 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5b0>
    for(i = 0; i < input_x + 2; i++){
 80049aa:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 80049ac:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 80049b0:	1aca      	subs	r2, r1, r3
 80049b2:	b292      	uxth	r2, r2
 80049b4:	4591      	cmp	r9, r2
 80049b6:	daf9      	bge.n	80049ac <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x5f4>
 80049b8:	e638      	b.n	800462c <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x274>
 80049ba:	2602      	movs	r6, #2
 80049bc:	e601      	b.n	80045c2 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x20a>
        *cols_8b++ = PAD8;
 80049be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    for(i = 0; i < input_x + 2; i++){
 80049c0:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 80049c2:	701f      	strb	r7, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	e575      	b.n	80044b4 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0xfc>
    for(i = 0; i < input_x + 2; i++){
 80049c8:	f04f 0806 	mov.w	r8, #6
 80049cc:	e53b      	b.n	8004446 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq+0x8e>
 80049ce:	bf00      	nop

080049d0 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	b0a1      	sub	sp, #132	; 0x84

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 80049d6:	1ccf      	adds	r7, r1, #3
{
 80049d8:	930d      	str	r3, [sp, #52]	; 0x34
 80049da:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80049dc:	9103      	str	r1, [sp, #12]
 80049de:	1c99      	adds	r1, r3, #2
 80049e0:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
 80049e4:	921a      	str	r2, [sp, #104]	; 0x68
    for(i = 0; i < input_x + 4; i++){
 80049e6:	2200      	movs	r2, #0
{
 80049e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80049ea:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	; 0xd0
 80049ee:	9017      	str	r0, [sp, #92]	; 0x5c
 80049f0:	930e      	str	r3, [sp, #56]	; 0x38
 80049f2:	f99d 30dc 	ldrsb.w	r3, [sp, #220]	; 0xdc
    for(i = 0; i < input_x + 4; i++){
 80049f6:	3201      	adds	r2, #1
 80049f8:	460e      	mov	r6, r1
        *cols_8b++ = PAD8;
 80049fa:	f801 3c02 	strb.w	r3, [r1, #-2]
 80049fe:	3102      	adds	r1, #2
    for(i = 0; i < input_x + 4; i++){
 8004a00:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8004a02:	f801 3c03 	strb.w	r3, [r1, #-3]
    for(i = 0; i < input_x + 4; i++){
 8004a06:	42ba      	cmp	r2, r7
 8004a08:	ddf5      	ble.n	80049f6 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x26>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8004a0a:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004a0c:	b1b8      	cbz	r0, 8004a3e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x6e>
 8004a0e:	9c03      	ldr	r4, [sp, #12]
 8004a10:	4632      	mov	r2, r6
 8004a12:	2100      	movs	r1, #0
 8004a14:	4686      	mov	lr, r0
 8004a16:	1d25      	adds	r5, r4, #4
 8004a18:	46a4      	mov	ip, r4
 8004a1a:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8004a1c:	7013      	strb	r3, [r2, #0]
        *cols_8b++ = PAD8;//left
 8004a1e:	7053      	strb	r3, [r2, #1]
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8004a20:	eb02 040c 	add.w	r4, r2, ip
    for(i = 0; i < input_y; i++){
 8004a24:	b288      	uxth	r0, r1
 8004a26:	442a      	add	r2, r5
        *cols_8b++ = PAD8;//right
 8004a28:	70a3      	strb	r3, [r4, #2]
    for(i = 0; i < input_y; i++){
 8004a2a:	4586      	cmp	lr, r0
        *cols_8b++ = PAD8;//right
 8004a2c:	f802 3c01 	strb.w	r3, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8004a30:	d8f3      	bhi.n	8004a1a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x4a>
 8004a32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004a34:	3a01      	subs	r2, #1
 8004a36:	b292      	uxth	r2, r2
 8004a38:	fb02 5505 	mla	r5, r2, r5, r5
 8004a3c:	442e      	add	r6, r5
 8004a3e:	9c03      	ldr	r4, [sp, #12]
 8004a40:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004a44:	1fa1      	subs	r1, r4, #6
 8004a46:	4291      	cmp	r1, r2
 8004a48:	f200 82bb 	bhi.w	8004fc2 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5f2>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	1d25      	adds	r5, r4, #4
 8004a50:	4631      	mov	r1, r6
 8004a52:	4602      	mov	r2, r0
 8004a54:	f363 0007 	bfi	r0, r3, #0, #8
 8004a58:	086c      	lsrs	r4, r5, #1
 8004a5a:	f363 200f 	bfi	r0, r3, #8, #8
 8004a5e:	f363 4017 	bfi	r0, r3, #16, #8
 8004a62:	f363 601f 	bfi	r0, r3, #24, #8
 8004a66:	3201      	adds	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
        *cols_8b++ = PAD8;
 8004a68:	f841 0b04 	str.w	r0, [r1], #4
 8004a6c:	42a2      	cmp	r2, r4
 8004a6e:	d3fa      	bcc.n	8004a66 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x96>
 8004a70:	f025 0201 	bic.w	r2, r5, #1
 8004a74:	42aa      	cmp	r2, r5
 8004a76:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 8004a7a:	d002      	beq.n	8004a82 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0xb2>
 8004a7c:	f806 3012 	strb.w	r3, [r6, r2, lsl #1]
        *cols_8b++ = PAD8;
 8004a80:	704b      	strb	r3, [r1, #1]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 8004a82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f000 8288 	beq.w	8004f9a <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5ca>
 8004a8a:	9c03      	ldr	r4, [sp, #12]
 8004a8c:	1e43      	subs	r3, r0, #1
 8004a8e:	992a      	ldr	r1, [sp, #168]	; 0xa8
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8004a90:	0066      	lsls	r6, r4, #1
 8004a92:	1e62      	subs	r2, r4, #1
 8004a94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a96:	f101 0919 	add.w	r9, r1, #25
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	f106 0109 	add.w	r1, r6, #9
{
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 8004aa0:	086f      	lsrs	r7, r5, #1
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8004aa2:	9613      	str	r6, [sp, #76]	; 0x4c
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	911f      	str	r1, [sp, #124]	; 0x7c
 8004aa8:	1c51      	adds	r1, r2, #1
 8004aaa:	3205      	adds	r2, #5
 8004aac:	3301      	adds	r3, #1
 8004aae:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8004ab2:	921e      	str	r2, [sp, #120]	; 0x78
 8004ab4:	19f2      	adds	r2, r6, r7
 8004ab6:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
            sum += cols_8b[0]*ksrc[0];
            sum += cols_8b[1]*ksrc[1];
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            cols_8b += column_x + 4;
 8004ab8:	46ce      	mov	lr, r9
        for (j = 0; j < output_x / 2; j++) {
 8004aba:	9711      	str	r7, [sp, #68]	; 0x44
 8004abc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ac0:	911d      	str	r1, [sp, #116]	; 0x74
 8004ac2:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	931c      	str	r3, [sp, #112]	; 0x70
 8004acc:	007b      	lsls	r3, r7, #1
 8004ace:	9314      	str	r3, [sp, #80]	; 0x50
 8004ad0:	0053      	lsls	r3, r2, #1
 8004ad2:	fb00 f205 	mul.w	r2, r0, r5
 8004ad6:	9315      	str	r3, [sp, #84]	; 0x54
 8004ad8:	4663      	mov	r3, ip
 8004ada:	9212      	str	r2, [sp, #72]	; 0x48
 8004adc:	00a2      	lsls	r2, r4, #2
 8004ade:	fb00 f303 	mul.w	r3, r0, r3
 8004ae2:	9216      	str	r2, [sp, #88]	; 0x58
 8004ae4:	4262      	negs	r2, r4
 8004ae6:	9318      	str	r3, [sp, #96]	; 0x60
 8004ae8:	f005 0301 	and.w	r3, r5, #1
 8004aec:	9208      	str	r2, [sp, #32]
 8004aee:	9310      	str	r3, [sp, #64]	; 0x40
 8004af0:	0043      	lsls	r3, r0, #1
 8004af2:	9307      	str	r3, [sp, #28]
            cols_8b += column_x + 4;
 8004af4:	1d23      	adds	r3, r4, #4
 8004af6:	9319      	str	r3, [sp, #100]	; 0x64
        for(i = 0; i < input_y; i++){
 8004af8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004afa:	b1eb      	cbz	r3, 8004b38 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x168>
 8004afc:	9a03      	ldr	r2, [sp, #12]
 8004afe:	b1da      	cbz	r2, 8004b38 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x168>
 8004b00:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8004b02:	2500      	movs	r5, #0
 8004b04:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8004b06:	4699      	mov	r9, r3
 8004b08:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004b0a:	1854      	adds	r4, r2, r1
 8004b0c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b0e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004b12:	e9dd c81c 	ldrd	ip, r8, [sp, #112]	; 0x70
 8004b16:	eb04 0008 	add.w	r0, r4, r8
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 8004b1e:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8004b22:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8004b24:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8004b28:	4290      	cmp	r0, r2
 8004b2a:	d1f8      	bne.n	8004b1e <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x14e>
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	4466      	add	r6, ip
 8004b30:	4454      	add	r4, sl
        for(i = 0; i < input_y; i++){
 8004b32:	b2ab      	uxth	r3, r5
 8004b34:	4599      	cmp	r9, r3
 8004b36:	d8ee      	bhi.n	8004b16 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x146>
        depthwise_kernel5x5_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8004b38:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	932b      	str	r3, [sp, #172]	; 0xac
 8004b3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004b40:	3304      	adds	r3, #4
 8004b42:	932c      	str	r3, [sp, #176]	; 0xb0
 8004b44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004b46:	3304      	adds	r3, #4
 8004b48:	932d      	str	r3, [sp, #180]	; 0xb4
    for (i = 0; i < output_y; i++) {
 8004b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 821a 	beq.w	8004f86 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5b6>
 8004b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004b54:	2300      	movs	r3, #0
 8004b56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b5a:	440a      	add	r2, r1
 8004b5c:	920c      	str	r2, [sp, #48]	; 0x30
 8004b5e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8004b60:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        for (j = 0; j < output_x / 2; j++) {
 8004b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 813a 	beq.w	8004de0 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x410>
 8004b6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b72:	fb02 0100 	mla	r1, r2, r0, r0
 8004b76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004b78:	9c03      	ldr	r4, [sp, #12]
 8004b7a:	189f      	adds	r7, r3, r2
 8004b7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004b7e:	eb03 0c04 	add.w	ip, r3, r4
 8004b82:	9106      	str	r1, [sp, #24]
 8004b84:	189e      	adds	r6, r3, r2
 8004b86:	1a0a      	subs	r2, r1, r0
 8004b88:	9205      	str	r2, [sp, #20]
 8004b8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b8c:	4413      	add	r3, r2
 8004b8e:	9304      	str	r3, [sp, #16]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b92:	9300      	str	r3, [sp, #0]
            q31_t sum0 = bias[0] + biasR[0];
 8004b94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8004b96:	3602      	adds	r6, #2
 8004b98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8004b9a:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004b9e:	9c00      	ldr	r4, [sp, #0]
            q31_t sum0 = bias[0] + biasR[0];
 8004ba0:	9301      	str	r3, [sp, #4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004ba2:	9b06      	ldr	r3, [sp, #24]
 8004ba4:	9d08      	ldr	r5, [sp, #32]
 8004ba6:	1ae4      	subs	r4, r4, r3
            q31_t sum0 = bias[0] + biasR[0];
 8004ba8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8004bac:	9b01      	ldr	r3, [sp, #4]
 8004bae:	eb0c 0005 	add.w	r0, ip, r5
            sum0 += cols_8b[0]*ksrc[0];
 8004bb2:	f91e 8c19 	ldrsb.w	r8, [lr, #-25]
            q31_t sum0 = bias[0] + biasR[0];
 8004bb6:	441a      	add	r2, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004bb8:	9402      	str	r4, [sp, #8]
            sum0 += cols_8b[0]*ksrc[0];
 8004bba:	f91c 4005 	ldrsb.w	r4, [ip, r5]
 8004bbe:	f10c 0c02 	add.w	ip, ip, #2
            sum1 += cols_8b[1]*ksrc[0];
 8004bc2:	f990 5001 	ldrsb.w	r5, [r0, #1]
            sum0 += cols_8b[1]*ksrc[1];
 8004bc6:	f91e 9c18 	ldrsb.w	r9, [lr, #-24]
            sum0 += cols_8b[0]*ksrc[0];
 8004bca:	fb14 2408 	smlabb	r4, r4, r8, r2
            sum1 += cols_8b[2]*ksrc[1];
 8004bce:	f990 3002 	ldrsb.w	r3, [r0, #2]
            sum1 += cols_8b[1]*ksrc[0];
 8004bd2:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[1]*ksrc[1];
 8004bd6:	fb15 4409 	smlabb	r4, r5, r9, r4
            sum0 += cols_8b[2]*ksrc[2];
 8004bda:	f91e 8c17 	ldrsb.w	r8, [lr, #-23]
            sum1 += cols_8b[2]*ksrc[1];
 8004bde:	fb19 2203 	smlabb	r2, r9, r3, r2
            sum0 += cols_8b[3]*ksrc[3];
 8004be2:	f91e 9c16 	ldrsb.w	r9, [lr, #-22]
            sum0 += cols_8b[2]*ksrc[2];
 8004be6:	fb13 4408 	smlabb	r4, r3, r8, r4
            sum1 += cols_8b[3]*ksrc[2];
 8004bea:	f990 3003 	ldrsb.w	r3, [r0, #3]
            sum0 += cols_8b[4]*ksrc[4];
 8004bee:	f91e ac15 	ldrsb.w	sl, [lr, #-21]
            sum1 += cols_8b[3]*ksrc[2];
 8004bf2:	fb18 2203 	smlabb	r2, r8, r3, r2
            sum1 += cols_8b[2]*ksrc[6];
 8004bf6:	f99c 5004 	ldrsb.w	r5, [ip, #4]
            sum0 += cols_8b[3]*ksrc[3];
 8004bfa:	fb13 4309 	smlabb	r3, r3, r9, r4
            sum1 += cols_8b[4]*ksrc[3];
 8004bfe:	f990 4004 	ldrsb.w	r4, [r0, #4]
 8004c02:	9903      	ldr	r1, [sp, #12]
 8004c04:	fb19 2804 	smlabb	r8, r9, r4, r2
            sum1 += cols_8b[5]*ksrc[4];
 8004c08:	f990 9005 	ldrsb.w	r9, [r0, #5]
            sum0 += cols_8b[4]*ksrc[4];
 8004c0c:	fb14 340a 	smlabb	r4, r4, sl, r3
            sum0 += cols_8b[0]*ksrc[5];
 8004c10:	f91e 2c14 	ldrsb.w	r2, [lr, #-20]
 8004c14:	f99c 3002 	ldrsb.w	r3, [ip, #2]
            sum1 += cols_8b[5]*ksrc[4];
 8004c18:	fb1a 8909 	smlabb	r9, sl, r9, r8
            sum1 += cols_8b[1]*ksrc[5];
 8004c1c:	f99c 0003 	ldrsb.w	r0, [ip, #3]
 8004c20:	1879      	adds	r1, r7, r1
            sum0 += cols_8b[1]*ksrc[6];
 8004c22:	f91e 8c13 	ldrsb.w	r8, [lr, #-19]
            sum0 += cols_8b[0]*ksrc[5];
 8004c26:	fb13 4302 	smlabb	r3, r3, r2, r4
            sum1 += cols_8b[1]*ksrc[5];
 8004c2a:	fb12 9200 	smlabb	r2, r2, r0, r9
            sum0 += cols_8b[2]*ksrc[7];
 8004c2e:	f91e 4c12 	ldrsb.w	r4, [lr, #-18]
            sum0 += cols_8b[1]*ksrc[6];
 8004c32:	fb10 3308 	smlabb	r3, r0, r8, r3
            sum1 += cols_8b[3]*ksrc[7];
 8004c36:	f99c 9005 	ldrsb.w	r9, [ip, #5]
            sum1 += cols_8b[2]*ksrc[6];
 8004c3a:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[3]*ksrc[8];
 8004c3e:	f91e 8c11 	ldrsb.w	r8, [lr, #-17]
            sum0 += cols_8b[2]*ksrc[7];
 8004c42:	fb15 3004 	smlabb	r0, r5, r4, r3
            sum1 += cols_8b[4]*ksrc[8];
 8004c46:	f99c 3006 	ldrsb.w	r3, [ip, #6]
            sum1 += cols_8b[3]*ksrc[7];
 8004c4a:	fb14 2209 	smlabb	r2, r4, r9, r2
 8004c4e:	3702      	adds	r7, #2
            sum0 += cols_8b[3]*ksrc[8];
 8004c50:	fb19 0508 	smlabb	r5, r9, r8, r0
            sum0 += cols_8b[4]*ksrc[9];
 8004c54:	f91e 0c10 	ldrsb.w	r0, [lr, #-16]
            sum1 += cols_8b[4]*ksrc[8];
 8004c58:	fb18 2203 	smlabb	r2, r8, r3, r2
            sum0 += cols_8b[0]*ksrc[10];
 8004c5c:	f91e 4c0f 	ldrsb.w	r4, [lr, #-15]
            sum0 += cols_8b[4]*ksrc[9];
 8004c60:	fb13 5300 	smlabb	r3, r3, r0, r5
            sum0 += cols_8b[0]*ksrc[10];
 8004c64:	f997 5006 	ldrsb.w	r5, [r7, #6]
            sum1 += cols_8b[1]*ksrc[10];
 8004c68:	f997 a007 	ldrsb.w	sl, [r7, #7]
            sum0 += cols_8b[0]*ksrc[10];
 8004c6c:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum0 += cols_8b[1]*ksrc[11];
 8004c70:	f91e bc0e 	ldrsb.w	fp, [lr, #-14]
            sum1 += cols_8b[5]*ksrc[9];
 8004c74:	f99c 8007 	ldrsb.w	r8, [ip, #7]
            sum1 += cols_8b[2]*ksrc[11];
 8004c78:	f997 5008 	ldrsb.w	r5, [r7, #8]
            sum0 += cols_8b[1]*ksrc[11];
 8004c7c:	fb1a 330b 	smlabb	r3, sl, fp, r3
            sum1 += cols_8b[5]*ksrc[9];
 8004c80:	fb10 2808 	smlabb	r8, r0, r8, r2
            sum0 += cols_8b[2]*ksrc[12];
 8004c84:	f91e 9c0d 	ldrsb.w	r9, [lr, #-13]
            sum1 += cols_8b[3]*ksrc[12];
 8004c88:	f997 2009 	ldrsb.w	r2, [r7, #9]
            sum0 += cols_8b[3]*ksrc[13];
 8004c8c:	f91e 0c0c 	ldrsb.w	r0, [lr, #-12]
            sum1 += cols_8b[1]*ksrc[10];
 8004c90:	fb14 840a 	smlabb	r4, r4, sl, r8
            sum0 += cols_8b[2]*ksrc[12];
 8004c94:	fb15 3309 	smlabb	r3, r5, r9, r3
            sum1 += cols_8b[4]*ksrc[13];
 8004c98:	f997 a00a 	ldrsb.w	sl, [r7, #10]
            sum0 += cols_8b[4]*ksrc[14];
 8004c9c:	f91e 8c0b 	ldrsb.w	r8, [lr, #-11]
            sum1 += cols_8b[2]*ksrc[11];
 8004ca0:	fb1b 4b05 	smlabb	fp, fp, r5, r4
            sum0 += cols_8b[3]*ksrc[13];
 8004ca4:	fb12 3300 	smlabb	r3, r2, r0, r3
            sum0 = (float) sum0 * *scales;
 8004ca8:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
            sum0 += cols_8b[0]*ksrc[15];
 8004caa:	f91e 4c0a 	ldrsb.w	r4, [lr, #-10]
            sum1 += cols_8b[3]*ksrc[12];
 8004cae:	fb19 b902 	smlabb	r9, r9, r2, fp
            sum0 = (float) sum0 * *scales;
 8004cb2:	ed55 7a01 	vldr	s15, [r5, #-4]
            sum0 += cols_8b[4]*ksrc[14];
 8004cb6:	fb1a 3308 	smlabb	r3, sl, r8, r3
            sum0 += cols_8b[0]*ksrc[15];
 8004cba:	f991 500c 	ldrsb.w	r5, [r1, #12]
            sum1 += cols_8b[1]*ksrc[15];
 8004cbe:	f991 200d 	ldrsb.w	r2, [r1, #13]
            sum0 += cols_8b[1]*ksrc[16];
 8004cc2:	f91e bc09 	ldrsb.w	fp, [lr, #-9]
            sum0 += cols_8b[0]*ksrc[15];
 8004cc6:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[4]*ksrc[13];
 8004cca:	fb10 950a 	smlabb	r5, r0, sl, r9
            sum1 += cols_8b[2]*ksrc[16];
 8004cce:	f991 a00e 	ldrsb.w	sl, [r1, #14]
            sum0 += cols_8b[2]*ksrc[17];
 8004cd2:	f91e 9c08 	ldrsb.w	r9, [lr, #-8]
            sum0 += cols_8b[1]*ksrc[16];
 8004cd6:	fb12 330b 	smlabb	r3, r2, fp, r3
            sum1 += cols_8b[5]*ksrc[14];
 8004cda:	f997 000b 	ldrsb.w	r0, [r7, #11]
            sum0 += cols_8b[2]*ksrc[17];
 8004cde:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[14];
 8004ce2:	fb18 5000 	smlabb	r0, r8, r0, r5
            sum1 += cols_8b[3]*ksrc[17];
 8004ce6:	f991 800f 	ldrsb.w	r8, [r1, #15]
            sum0 += cols_8b[3]*ksrc[18];
 8004cea:	f91e 5c07 	ldrsb.w	r5, [lr, #-7]
            sum1 += cols_8b[1]*ksrc[15];
 8004cee:	fb14 0202 	smlabb	r2, r4, r2, r0
            sum1 += cols_8b[4]*ksrc[18];
 8004cf2:	f991 4010 	ldrsb.w	r4, [r1, #16]
            sum0 += cols_8b[4]*ksrc[19];
 8004cf6:	f91e 0c06 	ldrsb.w	r0, [lr, #-6]
            sum0 += cols_8b[3]*ksrc[18];
 8004cfa:	fb18 3305 	smlabb	r3, r8, r5, r3
            sum1 += cols_8b[2]*ksrc[16];
 8004cfe:	fb1b 220a 	smlabb	r2, fp, sl, r2
            sum0 += cols_8b[0]*ksrc[20];
 8004d02:	f996 b00e 	ldrsb.w	fp, [r6, #14]
            sum1 += cols_8b[5]*ksrc[19];
 8004d06:	f991 a011 	ldrsb.w	sl, [r1, #17]
            sum0 += cols_8b[4]*ksrc[19];
 8004d0a:	fb14 3300 	smlabb	r3, r4, r0, r3
            sum0 += cols_8b[0]*ksrc[20];
 8004d0e:	f91e 1c05 	ldrsb.w	r1, [lr, #-5]
            sum1 += cols_8b[3]*ksrc[17];
 8004d12:	fb19 2208 	smlabb	r2, r9, r8, r2
            sum0 += cols_8b[1]*ksrc[21];
 8004d16:	f91e 9c04 	ldrsb.w	r9, [lr, #-4]
            sum0 += cols_8b[0]*ksrc[20];
 8004d1a:	fb1b 3301 	smlabb	r3, fp, r1, r3
            sum1 += cols_8b[1]*ksrc[20];
 8004d1e:	f996 b00f 	ldrsb.w	fp, [r6, #15]
            sum1 += cols_8b[4]*ksrc[18];
 8004d22:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum0 += cols_8b[2]*ksrc[22];
 8004d26:	f91e 8c03 	ldrsb.w	r8, [lr, #-3]
            sum1 += cols_8b[2]*ksrc[21];
 8004d2a:	f996 5010 	ldrsb.w	r5, [r6, #16]
            sum0 += cols_8b[1]*ksrc[21];
 8004d2e:	fb1b 3309 	smlabb	r3, fp, r9, r3
            sum1 += cols_8b[3]*ksrc[22];
 8004d32:	f996 4011 	ldrsb.w	r4, [r6, #17]
            sum1 += cols_8b[5]*ksrc[19];
 8004d36:	fb10 220a 	smlabb	r2, r0, sl, r2
            sum0 += cols_8b[2]*ksrc[22];
 8004d3a:	fb15 3308 	smlabb	r3, r5, r8, r3
            sum0 += cols_8b[3]*ksrc[23];
 8004d3e:	f91e ac02 	ldrsb.w	sl, [lr, #-2]
            sum1 += cols_8b[1]*ksrc[20];
 8004d42:	fb11 220b 	smlabb	r2, r1, fp, r2
            sum1 += cols_8b[4]*ksrc[23];
 8004d46:	f996 0012 	ldrsb.w	r0, [r6, #18]
            sum0 += cols_8b[4]*ksrc[24];
 8004d4a:	f91e 1c01 	ldrsb.w	r1, [lr, #-1]
            sum0 += cols_8b[3]*ksrc[23];
 8004d4e:	fb14 330a 	smlabb	r3, r4, sl, r3
            sum1 += cols_8b[2]*ksrc[21];
 8004d52:	fb19 2205 	smlabb	r2, r9, r5, r2
            sum1 += cols_8b[5]*ksrc[24];
 8004d56:	f996 5013 	ldrsb.w	r5, [r6, #19]
            sum0 += cols_8b[4]*ksrc[24];
 8004d5a:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum1 += cols_8b[3]*ksrc[22];
 8004d5e:	fb18 2204 	smlabb	r2, r8, r4, r2
            sum0 += cols_8b[4]*ksrc[24];
 8004d62:	ee07 3a10 	vmov	s14, r3
            sum1 += cols_8b[4]*ksrc[23];
 8004d66:	fb1a 2200 	smlabb	r2, sl, r0, r2
            sum0 += output_offset;
 8004d6a:	982e      	ldr	r0, [sp, #184]	; 0xb8
            sum0 = (float) sum0 * *scales;
 8004d6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            sum1 += cols_8b[5]*ksrc[24];
 8004d70:	fb11 2205 	smlabb	r2, r1, r5, r2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004d74:	9902      	ldr	r1, [sp, #8]
            sum0 = (float) sum0 * *scales;
 8004d76:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 = (float) sum1 * *scales;
 8004d7a:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004d7e:	9a00      	ldr	r2, [sp, #0]
            sum1 = (float) sum1 * *scales;
 8004d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 8004d84:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004d88:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8004d8c:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 8004d8e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8004d90:	4283      	cmp	r3, r0
 8004d92:	bfb8      	it	lt
 8004d94:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 8004d96:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	bfa8      	it	ge
 8004d9c:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004d9e:	9805      	ldr	r0, [sp, #20]
 8004da0:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 8004da2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
            sum1 += output_offset;
 8004da4:	992e      	ldr	r1, [sp, #184]	; 0xb8
            sum1 = (float) sum1 * *scales;
 8004da6:	ed13 7a01 	vldr	s14, [r3, #-4]
 8004daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db2:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8004db6:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8004db8:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8004dba:	428b      	cmp	r3, r1
 8004dbc:	bfb8      	it	lt
 8004dbe:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8004dc0:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8004dc2:	428b      	cmp	r3, r1
 8004dc4:	bfa8      	it	ge
 8004dc6:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004dc8:	7013      	strb	r3, [r2, #0]
 8004dca:	9b07      	ldr	r3, [sp, #28]
 8004dcc:	18d3      	adds	r3, r2, r3
 8004dce:	9300      	str	r3, [sp, #0]
        for (j = 0; j < output_x / 2; j++) {
 8004dd0:	9b04      	ldr	r3, [sp, #16]
 8004dd2:	429e      	cmp	r6, r3
 8004dd4:	f47f aede 	bne.w	8004b94 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x1c4>
 8004dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ddc:	4413      	add	r3, r2
 8004dde:	9309      	str	r3, [sp, #36]	; 0x24
 8004de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if (output_x & 1) {
 8004de2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004de4:	3301      	adds	r3, #1
 8004de6:	930a      	str	r3, [sp, #40]	; 0x28
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	f000 80d9 	beq.w	8004fa0 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5d0>
            q31_t sum = bias[0] + biasR[0];
 8004dee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            cols_8b += column_x + 4;
 8004df0:	9e09      	ldr	r6, [sp, #36]	; 0x24
            q31_t sum = bias[0] + biasR[0];
 8004df2:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8004df6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8004df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dfa:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8004dfe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
            sum += cols_8b[0]*ksrc[0];
 8004e00:	f91e 5c19 	ldrsb.w	r5, [lr, #-25]
            q31_t sum = bias[0] + biasR[0];
 8004e04:	4413      	add	r3, r2
 8004e06:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8004e08:	f996 4000 	ldrsb.w	r4, [r6]
            sum += cols_8b[1]*ksrc[1];
 8004e0c:	f996 2001 	ldrsb.w	r2, [r6, #1]
            sum += cols_8b[0]*ksrc[0];
 8004e10:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8004e14:	f91e 5c18 	ldrsb.w	r5, [lr, #-24]
            sum += cols_8b[2]*ksrc[2];
 8004e18:	f996 4002 	ldrsb.w	r4, [r6, #2]
            sum += cols_8b[1]*ksrc[1];
 8004e1c:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8004e20:	f91e 5c17 	ldrsb.w	r5, [lr, #-23]
            sum += cols_8b[3]*ksrc[3];
 8004e24:	f996 2003 	ldrsb.w	r2, [r6, #3]
            sum += cols_8b[2]*ksrc[2];
 8004e28:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 8004e2c:	f91e 5c16 	ldrsb.w	r5, [lr, #-22]
            cols_8b += column_x + 4;
 8004e30:	9f19      	ldr	r7, [sp, #100]	; 0x64
            sum += cols_8b[4]*ksrc[4];
 8004e32:	f996 4004 	ldrsb.w	r4, [r6, #4]
            sum += cols_8b[3]*ksrc[3];
 8004e36:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8004e3a:	f91e 5c15 	ldrsb.w	r5, [lr, #-21]
            cols_8b += column_x + 4;
 8004e3e:	19f0      	adds	r0, r6, r7
            sum += cols_8b[0]*ksrc[5];
 8004e40:	57f2      	ldrsb	r2, [r6, r7]
            sum += cols_8b[4]*ksrc[4];
 8004e42:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[5];
 8004e46:	f91e 5c14 	ldrsb.w	r5, [lr, #-20]
            sum += cols_8b[1]*ksrc[6];
 8004e4a:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[5];
 8004e4e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[6];
 8004e52:	f91e 5c13 	ldrsb.w	r5, [lr, #-19]
            sum += cols_8b[2]*ksrc[7];
 8004e56:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[6];
 8004e5a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[7];
 8004e5e:	f91e 5c12 	ldrsb.w	r5, [lr, #-18]
            sum += cols_8b[3]*ksrc[8];
 8004e62:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[7];
 8004e66:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[8];
 8004e6a:	f91e 5c11 	ldrsb.w	r5, [lr, #-17]
            sum += cols_8b[4]*ksrc[9];
 8004e6e:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[8];
 8004e72:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[9];
 8004e76:	f91e 5c10 	ldrsb.w	r5, [lr, #-16]
            cols_8b += column_x + 4;
            sum += cols_8b[0]*ksrc[10];
 8004e7a:	f916 4017 	ldrsb.w	r4, [r6, r7, lsl #1]
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 2 * 2;
 8004e7e:	3605      	adds	r6, #5
            sum += cols_8b[4]*ksrc[9];
 8004e80:	fb12 3305 	smlabb	r3, r2, r5, r3
 8004e84:	910b      	str	r1, [sp, #44]	; 0x2c
            sum += cols_8b[0]*ksrc[10];
 8004e86:	f91e 5c0f 	ldrsb.w	r5, [lr, #-15]
            cols_8b += column_x + 4;
 8004e8a:	19c1      	adds	r1, r0, r7
        cols_8b_iterptr += 2 * 2;
 8004e8c:	9609      	str	r6, [sp, #36]	; 0x24
            sum += cols_8b[0]*ksrc[10];
 8004e8e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[11];
 8004e92:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8004e96:	f91e 5c0e 	ldrsb.w	r5, [lr, #-14]
            sum += cols_8b[2]*ksrc[12];
 8004e9a:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[11];
 8004e9e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[12];
 8004ea2:	f91e 2c0d 	ldrsb.w	r2, [lr, #-13]
            sum += cols_8b[3]*ksrc[13];
 8004ea6:	f991 6003 	ldrsb.w	r6, [r1, #3]
            sum += cols_8b[2]*ksrc[12];
 8004eaa:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[3]*ksrc[13];
 8004eae:	f91e 2c0c 	ldrsb.w	r2, [lr, #-12]
            sum += cols_8b[4]*ksrc[14];
 8004eb2:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[13];
 8004eb6:	fb16 3602 	smlabb	r6, r6, r2, r3
            sum += cols_8b[4]*ksrc[14];
 8004eba:	f91e 2c0b 	ldrsb.w	r2, [lr, #-11]
            cols_8b += column_x + 4;
 8004ebe:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[15];
 8004ec0:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[4]*ksrc[14];
 8004ec4:	fb14 6202 	smlabb	r2, r4, r2, r6
            sum += cols_8b[0]*ksrc[15];
 8004ec8:	f91e 4c0a 	ldrsb.w	r4, [lr, #-10]
            sum += cols_8b[1]*ksrc[16];
 8004ecc:	f993 5001 	ldrsb.w	r5, [r3, #1]
            sum += cols_8b[0]*ksrc[15];
 8004ed0:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[1]*ksrc[16];
 8004ed4:	f91e 0c09 	ldrsb.w	r0, [lr, #-9]
            sum += cols_8b[2]*ksrc[17];
 8004ed8:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[16];
 8004edc:	fb15 2200 	smlabb	r2, r5, r0, r2
            sum += cols_8b[2]*ksrc[17];
 8004ee0:	f91e 5c08 	ldrsb.w	r5, [lr, #-8]
            sum += cols_8b[3]*ksrc[18];
 8004ee4:	f993 6003 	ldrsb.w	r6, [r3, #3]
            sum += cols_8b[2]*ksrc[17];
 8004ee8:	fb14 2505 	smlabb	r5, r4, r5, r2
            sum += cols_8b[3]*ksrc[18];
 8004eec:	f91e 2c07 	ldrsb.w	r2, [lr, #-7]
            sum += cols_8b[4]*ksrc[19];
 8004ef0:	f993 0004 	ldrsb.w	r0, [r3, #4]
            cols_8b += column_x + 4;
 8004ef4:	443b      	add	r3, r7
            sum += cols_8b[3]*ksrc[18];
 8004ef6:	fb16 5402 	smlabb	r4, r6, r2, r5
            sum += cols_8b[4]*ksrc[19];
 8004efa:	f91e 2c06 	ldrsb.w	r2, [lr, #-6]
            sum += cols_8b[0]*ksrc[20];
 8004efe:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            sum += cols_8b[4]*ksrc[19];
 8004f02:	fb10 4202 	smlabb	r2, r0, r2, r4
            sum += cols_8b[0]*ksrc[20];
 8004f06:	f91e 4c05 	ldrsb.w	r4, [lr, #-5]
            sum += cols_8b[1]*ksrc[21];
 8004f0a:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[20];
 8004f0e:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum += cols_8b[1]*ksrc[21];
 8004f12:	f91e 5c04 	ldrsb.w	r5, [lr, #-4]
            sum += cols_8b[2]*ksrc[22];
 8004f16:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[21];
 8004f1a:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[22];
 8004f1e:	f91e 5c03 	ldrsb.w	r5, [lr, #-3]
            sum += cols_8b[3]*ksrc[23];
 8004f22:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[22];
 8004f26:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[23];
 8004f2a:	f91e 5c02 	ldrsb.w	r5, [lr, #-2]
            sum += cols_8b[4]*ksrc[24];
 8004f2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
            sum += cols_8b[3]*ksrc[23];
 8004f32:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[24];
 8004f36:	f91e 5c01 	ldrsb.w	r5, [lr, #-1]
 8004f3a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004f3c:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004f40:	e9dd 610c 	ldrd	r6, r1, [sp, #48]	; 0x30
            sum = (float) sum * *scales;
 8004f44:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004f48:	1a71      	subs	r1, r6, r1
 8004f4a:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 8004f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f50:	960c      	str	r6, [sp, #48]	; 0x30
 8004f52:	982d      	ldr	r0, [sp, #180]	; 0xb4
            sum += output_offset;
 8004f54:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum = (float) sum * *scales;
 8004f56:	ed10 7a01 	vldr	s14, [r0, #-4]
 8004f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f62:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8004f66:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8004f68:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	bfb8      	it	lt
 8004f6e:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8004f70:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8004f72:	4293      	cmp	r3, r2
 8004f74:	bfa8      	it	ge
 8004f76:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004f78:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004f7a:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 8004f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f80:	429a      	cmp	r2, r3
 8004f82:	f47f adef 	bne.w	8004b64 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x194>
        input++;
 8004f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f88:	f10e 0e19 	add.w	lr, lr, #25
    for (c = 0; c < input_ch; c++){
 8004f8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
        input++;
 8004f8e:	3301      	adds	r3, #1
 8004f90:	9317      	str	r3, [sp, #92]	; 0x5c
    for (c = 0; c < input_ch; c++){
 8004f92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004f94:	4293      	cmp	r3, r2
 8004f96:	f47f adaf 	bne.w	8004af8 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x128>
}
 8004f9a:	b021      	add	sp, #132	; 0x84
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += 2 * 2;
 8004fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004faa:	4413      	add	r3, r2
 8004fac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fae:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fb2:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8004fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	f47f add2 	bne.w	8004b64 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x194>
 8004fc0:	e7e1      	b.n	8004f86 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5b6>
 8004fc2:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8004fc8:	f806 3c02 	strb.w	r3, [r6, #-2]
        *cols_8b++ = PAD8;
 8004fcc:	f806 3c01 	strb.w	r3, [r6, #-1]
 8004fd0:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	4297      	cmp	r7, r2
 8004fd6:	daf6      	bge.n	8004fc6 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0x5f6>
 8004fd8:	e553      	b.n	8004a82 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq+0xb2>
 8004fda:	bf00      	nop

08004fdc <depthwise_kernel5x5_stride2_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	b0a5      	sub	sp, #148	; 0x94

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 8004fe2:	1ccf      	adds	r7, r1, #3
{
 8004fe4:	9310      	str	r3, [sp, #64]	; 0x40
 8004fe6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004fe8:	9106      	str	r1, [sp, #24]
 8004fea:	1c99      	adds	r1, r3, #2
 8004fec:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 8004ff0:	921f      	str	r2, [sp, #124]	; 0x7c
    for(i = 0; i < input_x + 4; i++){
 8004ff2:	2200      	movs	r2, #0
{
 8004ff4:	9312      	str	r3, [sp, #72]	; 0x48
 8004ff6:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
 8004ffa:	901a      	str	r0, [sp, #104]	; 0x68
 8004ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8004ffe:	f99d 30ec 	ldrsb.w	r3, [sp, #236]	; 0xec
    for(i = 0; i < input_x + 4; i++){
 8005002:	3201      	adds	r2, #1
 8005004:	460e      	mov	r6, r1
        *cols_8b++ = PAD8;
 8005006:	f801 3c02 	strb.w	r3, [r1, #-2]
 800500a:	3102      	adds	r1, #2
    for(i = 0; i < input_x + 4; i++){
 800500c:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 800500e:	f801 3c03 	strb.w	r3, [r1, #-3]
    for(i = 0; i < input_x + 4; i++){
 8005012:	42ba      	cmp	r2, r7
 8005014:	ddf5      	ble.n	8005002 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x26>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8005016:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8005018:	b1b8      	cbz	r0, 800504a <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x6e>
 800501a:	9c06      	ldr	r4, [sp, #24]
 800501c:	4632      	mov	r2, r6
 800501e:	2100      	movs	r1, #0
 8005020:	4686      	mov	lr, r0
 8005022:	1d25      	adds	r5, r4, #4
 8005024:	46a4      	mov	ip, r4
 8005026:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 8005028:	7013      	strb	r3, [r2, #0]
        *cols_8b++ = PAD8;//left
 800502a:	7053      	strb	r3, [r2, #1]
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 800502c:	eb02 040c 	add.w	r4, r2, ip
    for(i = 0; i < input_y; i++){
 8005030:	b288      	uxth	r0, r1
 8005032:	442a      	add	r2, r5
        *cols_8b++ = PAD8;//right
 8005034:	70a3      	strb	r3, [r4, #2]
    for(i = 0; i < input_y; i++){
 8005036:	4586      	cmp	lr, r0
        *cols_8b++ = PAD8;//right
 8005038:	f802 3c01 	strb.w	r3, [r2, #-1]
    for(i = 0; i < input_y; i++){
 800503c:	d8f3      	bhi.n	8005026 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x4a>
 800503e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005040:	3a01      	subs	r2, #1
 8005042:	b292      	uxth	r2, r2
 8005044:	fb02 5505 	mla	r5, r2, r5, r5
 8005048:	442e      	add	r6, r5
 800504a:	9c06      	ldr	r4, [sp, #24]
 800504c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005050:	1fa1      	subs	r1, r4, #6
 8005052:	4291      	cmp	r1, r2
 8005054:	f200 82e0 	bhi.w	8005618 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x63c>
 8005058:	2000      	movs	r0, #0
 800505a:	1d25      	adds	r5, r4, #4
 800505c:	4631      	mov	r1, r6
 800505e:	4602      	mov	r2, r0
 8005060:	f363 0007 	bfi	r0, r3, #0, #8
 8005064:	086c      	lsrs	r4, r5, #1
 8005066:	f363 200f 	bfi	r0, r3, #8, #8
 800506a:	f363 4017 	bfi	r0, r3, #16, #8
 800506e:	f363 601f 	bfi	r0, r3, #24, #8
 8005072:	3201      	adds	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
        *cols_8b++ = PAD8;
 8005074:	f841 0b04 	str.w	r0, [r1], #4
 8005078:	42a2      	cmp	r2, r4
 800507a:	d3fa      	bcc.n	8005072 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x96>
 800507c:	f025 0201 	bic.w	r2, r5, #1
 8005080:	42aa      	cmp	r2, r5
 8005082:	eb06 0142 	add.w	r1, r6, r2, lsl #1
 8005086:	d002      	beq.n	800508e <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0xb2>
 8005088:	f806 3012 	strb.w	r3, [r6, r2, lsl #1]
        *cols_8b++ = PAD8;
 800508c:	704b      	strb	r3, [r1, #1]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 800508e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005090:	2d00      	cmp	r5, #0
 8005092:	f000 82ac 	beq.w	80055ee <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x612>
 8005096:	9c06      	ldr	r4, [sp, #24]
 8005098:	1e6b      	subs	r3, r5, #1
 800509a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800509c:	1e61      	subs	r1, r4, #1
 800509e:	1d20      	adds	r0, r4, #4
 80050a0:	f004 0201 	and.w	r2, r4, #1
{
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 80050a4:	0877      	lsrs	r7, r6, #1
 80050a6:	b289      	uxth	r1, r1
 80050a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80050aa:	f1c2 0204 	rsb	r2, r2, #4
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	9123      	str	r1, [sp, #140]	; 0x8c
 80050b2:	3101      	adds	r1, #1
 80050b4:	9714      	str	r7, [sp, #80]	; 0x50
 80050b6:	3301      	adds	r3, #1
 80050b8:	9121      	str	r1, [sp, #132]	; 0x84
 80050ba:	1e70      	subs	r0, r6, #1
 80050bc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80050be:	440a      	add	r2, r1
 80050c0:	4621      	mov	r1, r4
 80050c2:	463c      	mov	r4, r7
 80050c4:	921c      	str	r2, [sp, #112]	; 0x70
 80050c6:	19ca      	adds	r2, r1, r7
 80050c8:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80050ca:	f107 0c19 	add.w	ip, r7, #25
 80050ce:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 80050d0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 80050d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050d6:	9720      	str	r7, [sp, #128]	; 0x80
 80050d8:	461f      	mov	r7, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 2 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 80050da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80050dc:	fb07 f705 	mul.w	r7, r7, r5
 80050e0:	3302      	adds	r3, #2
 80050e2:	9722      	str	r7, [sp, #136]	; 0x88
 80050e4:	931e      	str	r3, [sp, #120]	; 0x78
 80050e6:	0093      	lsls	r3, r2, #2
 80050e8:	9318      	str	r3, [sp, #96]	; 0x60
 80050ea:	00a3      	lsls	r3, r4, #2
 80050ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80050ee:	4603      	mov	r3, r0
 80050f0:	fb05 f303 	mul.w	r3, r5, r3
 80050f4:	931d      	str	r3, [sp, #116]	; 0x74
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 80050f6:	004b      	lsls	r3, r1, #1
 80050f8:	9316      	str	r3, [sp, #88]	; 0x58
 80050fa:	f006 0301 	and.w	r3, r6, #1
 80050fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8005100:	fb05 f306 	mul.w	r3, r5, r6
 8005104:	9315      	str	r3, [sp, #84]	; 0x54
 8005106:	008b      	lsls	r3, r1, #2
 8005108:	9319      	str	r3, [sp, #100]	; 0x64
 800510a:	006b      	lsls	r3, r5, #1
 800510c:	930a      	str	r3, [sp, #40]	; 0x28
 800510e:	424b      	negs	r3, r1
 8005110:	930b      	str	r3, [sp, #44]	; 0x2c
        for(i = 0; i < input_y; i++){
 8005112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005114:	b303      	cbz	r3, 8005158 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x17c>
 8005116:	9a06      	ldr	r2, [sp, #24]
 8005118:	b1f2      	cbz	r2, 8005158 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x17c>
 800511a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800511c:	2500      	movs	r5, #0
 800511e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005120:	469a      	mov	sl, r3
 8005122:	f102 0409 	add.w	r4, r2, #9
 8005126:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005128:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800512c:	1d57      	adds	r7, r2, #5
 800512e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8005130:	e9dd 9821 	ldrd	r9, r8, [sp, #132]	; 0x84
 8005134:	4414      	add	r4, r2
 8005136:	eb04 0009 	add.w	r0, r4, r9
 800513a:	4622      	mov	r2, r4
 800513c:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 800513e:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8005142:	4473      	add	r3, lr
                *cols_8b++ = *src;// + input_offset;
 8005144:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8005148:	4290      	cmp	r0, r2
 800514a:	d1f8      	bne.n	800513e <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x162>
 800514c:	3501      	adds	r5, #1
 800514e:	4446      	add	r6, r8
 8005150:	443c      	add	r4, r7
        for(i = 0; i < input_y; i++){
 8005152:	b2ab      	uxth	r3, r5
 8005154:	459a      	cmp	sl, r3
 8005156:	d8ee      	bhi.n	8005136 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x15a>
        depthwise_kernel5x5_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005158:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800515a:	3304      	adds	r3, #4
 800515c:	932f      	str	r3, [sp, #188]	; 0xbc
 800515e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005160:	3304      	adds	r3, #4
 8005162:	9330      	str	r3, [sp, #192]	; 0xc0
 8005164:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005166:	3304      	adds	r3, #4
 8005168:	9331      	str	r3, [sp, #196]	; 0xc4
    for (i = 0; i < output_y; i++) {
 800516a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8234 	beq.w	80055da <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x5fe>
 8005172:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005174:	2300      	movs	r3, #0
 8005176:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005178:	930e      	str	r3, [sp, #56]	; 0x38
 800517a:	440a      	add	r2, r1
 800517c:	920f      	str	r2, [sp, #60]	; 0x3c
 800517e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8005180:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
        for (j = 0; j < output_x / 2; j++) {
 8005184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8153 	beq.w	8005432 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x456>
 800518c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800518e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005192:	fb02 0100 	mla	r1, r2, r0, r0
 8005196:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005198:	9c06      	ldr	r4, [sp, #24]
 800519a:	189a      	adds	r2, r3, r2
 800519c:	9109      	str	r1, [sp, #36]	; 0x24
 800519e:	eb03 0e04 	add.w	lr, r3, r4
 80051a2:	9201      	str	r2, [sp, #4]
 80051a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051a6:	189a      	adds	r2, r3, r2
 80051a8:	9203      	str	r2, [sp, #12]
 80051aa:	1a0a      	subs	r2, r1, r0
 80051ac:	9208      	str	r2, [sp, #32]
 80051ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80051b0:	4413      	add	r3, r2
 80051b2:	9307      	str	r3, [sp, #28]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80051b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051b6:	e9cd 3e04 	strd	r3, lr, [sp, #16]
            q31_t sum0 = bias[0] + biasR[0];
 80051ba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80051bc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80051be:	9e05      	ldr	r6, [sp, #20]
 80051c0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80051c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80051c6:	f851 5c04 	ldr.w	r5, [r1, #-4]
 80051ca:	9c06      	ldr	r4, [sp, #24]
 80051cc:	1833      	adds	r3, r6, r0
 80051ce:	9901      	ldr	r1, [sp, #4]
 80051d0:	4415      	add	r5, r2
            sum0 += cols_8b[0]*ksrc[0];
 80051d2:	f91c bc19 	ldrsb.w	fp, [ip, #-25]
 80051d6:	f916 e000 	ldrsb.w	lr, [r6, r0]
 80051da:	4421      	add	r1, r4
            sum0 += cols_8b[1]*ksrc[1];
 80051dc:	f993 2001 	ldrsb.w	r2, [r3, #1]
            sum0 += cols_8b[0]*ksrc[0];
 80051e0:	4634      	mov	r4, r6
 80051e2:	fb1e 5e0b 	smlabb	lr, lr, fp, r5
 80051e6:	9100      	str	r1, [sp, #0]
            sum0 += cols_8b[1]*ksrc[1];
 80051e8:	f91c 1c18 	ldrsb.w	r1, [ip, #-24]
            sum1 += cols_8b[2]*ksrc[0];
 80051ec:	f993 9002 	ldrsb.w	r9, [r3, #2]
            sum0 += cols_8b[1]*ksrc[1];
 80051f0:	fb12 e601 	smlabb	r6, r2, r1, lr
            sum0 += cols_8b[2]*ksrc[2];
 80051f4:	f91c 7c17 	ldrsb.w	r7, [ip, #-23]
            sum1 += cols_8b[3]*ksrc[1];
 80051f8:	f993 8003 	ldrsb.w	r8, [r3, #3]
            sum1 += cols_8b[2]*ksrc[0];
 80051fc:	fb1b 5509 	smlabb	r5, fp, r9, r5
            sum0 += cols_8b[2]*ksrc[2];
 8005200:	fb19 6e07 	smlabb	lr, r9, r7, r6
            sum0 += cols_8b[3]*ksrc[3];
 8005204:	f91c bc16 	ldrsb.w	fp, [ip, #-22]
            sum1 += cols_8b[4]*ksrc[2];
 8005208:	f993 6004 	ldrsb.w	r6, [r3, #4]
            sum1 += cols_8b[3]*ksrc[1];
 800520c:	fb11 5508 	smlabb	r5, r1, r8, r5
            sum0 += cols_8b[3]*ksrc[3];
 8005210:	fb18 e20b 	smlabb	r2, r8, fp, lr
            sum0 += cols_8b[4]*ksrc[4];
 8005214:	f91c ec15 	ldrsb.w	lr, [ip, #-21]
            sum1 += cols_8b[4]*ksrc[2];
 8005218:	fb17 5106 	smlabb	r1, r7, r6, r5
            sum0 += cols_8b[0]*ksrc[5];
 800521c:	f91c ac14 	ldrsb.w	sl, [ip, #-20]
            sum0 += cols_8b[4]*ksrc[4];
 8005220:	fb16 260e 	smlabb	r6, r6, lr, r2
            sum0 += cols_8b[0]*ksrc[5];
 8005224:	f994 2004 	ldrsb.w	r2, [r4, #4]
            sum0 += cols_8b[1]*ksrc[6];
 8005228:	f91c 9c13 	ldrsb.w	r9, [ip, #-19]
            sum0 += cols_8b[0]*ksrc[5];
 800522c:	fb12 660a 	smlabb	r6, r2, sl, r6
            sum1 += cols_8b[5]*ksrc[3];
 8005230:	f993 7005 	ldrsb.w	r7, [r3, #5]
            sum0 += cols_8b[1]*ksrc[6];
 8005234:	f994 2005 	ldrsb.w	r2, [r4, #5]
            sum1 += cols_8b[2]*ksrc[5];
 8005238:	f994 5006 	ldrsb.w	r5, [r4, #6]
            sum1 += cols_8b[5]*ksrc[3];
 800523c:	fb1b 1707 	smlabb	r7, fp, r7, r1
            sum0 += cols_8b[1]*ksrc[6];
 8005240:	fb12 6209 	smlabb	r2, r2, r9, r6
            sum1 += cols_8b[6]*ksrc[4];
 8005244:	f993 b006 	ldrsb.w	fp, [r3, #6]
            sum0 += cols_8b[2]*ksrc[7];
 8005248:	f91c 6c12 	ldrsb.w	r6, [ip, #-18]
            sum1 += cols_8b[3]*ksrc[6];
 800524c:	f994 8007 	ldrsb.w	r8, [r4, #7]
            sum1 += cols_8b[6]*ksrc[4];
 8005250:	fb1e 7b0b 	smlabb	fp, lr, fp, r7
            sum0 += cols_8b[3]*ksrc[8];
 8005254:	f91c 1c11 	ldrsb.w	r1, [ip, #-17]
            sum0 += cols_8b[2]*ksrc[7];
 8005258:	fb15 2206 	smlabb	r2, r5, r6, r2
            sum1 += cols_8b[4]*ksrc[7];
 800525c:	f994 3008 	ldrsb.w	r3, [r4, #8]
            sum1 += cols_8b[2]*ksrc[5];
 8005260:	fb1a ba05 	smlabb	sl, sl, r5, fp
            sum0 += cols_8b[3]*ksrc[8];
 8005264:	fb18 2201 	smlabb	r2, r8, r1, r2
            sum0 += cols_8b[4]*ksrc[9];
 8005268:	f91c ec10 	ldrsb.w	lr, [ip, #-16]
            sum0 += cols_8b[3]*ksrc[8];
 800526c:	9102      	str	r1, [sp, #8]
            sum1 += cols_8b[4]*ksrc[7];
 800526e:	4621      	mov	r1, r4
            sum0 += cols_8b[0]*ksrc[10];
 8005270:	f91c 7c0f 	ldrsb.w	r7, [ip, #-15]
            sum1 += cols_8b[3]*ksrc[6];
 8005274:	fb19 aa08 	smlabb	sl, r9, r8, sl
            sum0 += cols_8b[0]*ksrc[10];
 8005278:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[4]*ksrc[9];
 800527a:	fb13 220e 	smlabb	r2, r3, lr, r2
            sum1 += cols_8b[5]*ksrc[8];
 800527e:	f991 8009 	ldrsb.w	r8, [r1, #9]
            sum1 += cols_8b[4]*ksrc[7];
 8005282:	fb16 a603 	smlabb	r6, r6, r3, sl
            sum0 += cols_8b[0]*ksrc[10];
 8005286:	f994 5008 	ldrsb.w	r5, [r4, #8]
 800528a:	4608      	mov	r0, r1
            sum0 += cols_8b[1]*ksrc[11];
 800528c:	f994 b009 	ldrsb.w	fp, [r4, #9]
            sum0 += cols_8b[0]*ksrc[10];
 8005290:	fb15 2207 	smlabb	r2, r5, r7, r2
            sum1 += cols_8b[5]*ksrc[8];
 8005294:	9b02      	ldr	r3, [sp, #8]
            sum0 += cols_8b[1]*ksrc[11];
 8005296:	f91c 5c0e 	ldrsb.w	r5, [ip, #-14]
 800529a:	3004      	adds	r0, #4
            sum1 += cols_8b[2]*ksrc[10];
 800529c:	f994 a00a 	ldrsb.w	sl, [r4, #10]
            sum1 += cols_8b[5]*ksrc[8];
 80052a0:	fb13 6608 	smlabb	r6, r3, r8, r6
            sum0 += cols_8b[1]*ksrc[11];
 80052a4:	fb1b 2205 	smlabb	r2, fp, r5, r2
            sum0 += cols_8b[2]*ksrc[12];
 80052a8:	f91c 8c0d 	ldrsb.w	r8, [ip, #-13]
            sum1 += cols_8b[6]*ksrc[9];
 80052ac:	f991 b00a 	ldrsb.w	fp, [r1, #10]
            sum1 += cols_8b[3]*ksrc[11];
 80052b0:	f994 900b 	ldrsb.w	r9, [r4, #11]
            sum0 += cols_8b[2]*ksrc[12];
 80052b4:	fb1a 2208 	smlabb	r2, sl, r8, r2
            sum1 += cols_8b[6]*ksrc[9];
 80052b8:	fb1e 6e0b 	smlabb	lr, lr, fp, r6
            sum0 += cols_8b[3]*ksrc[13];
 80052bc:	f91c 3c0c 	ldrsb.w	r3, [ip, #-12]
            sum1 += cols_8b[4]*ksrc[12];
 80052c0:	f994 600c 	ldrsb.w	r6, [r4, #12]
            sum1 += cols_8b[2]*ksrc[10];
 80052c4:	fb17 e70a 	smlabb	r7, r7, sl, lr
 80052c8:	9005      	str	r0, [sp, #20]
            sum0 += cols_8b[4]*ksrc[14];
 80052ca:	f91c ac0b 	ldrsb.w	sl, [ip, #-11]
            sum0 += cols_8b[3]*ksrc[13];
 80052ce:	fb19 2203 	smlabb	r2, r9, r3, r2
            sum0 = (float) sum0 * *scales;
 80052d2:	9831      	ldr	r0, [sp, #196]	; 0xc4
            sum1 += cols_8b[3]*ksrc[11];
 80052d4:	fb15 7509 	smlabb	r5, r5, r9, r7
            sum0 += cols_8b[0]*ksrc[15];
 80052d8:	9900      	ldr	r1, [sp, #0]
            sum0 += cols_8b[4]*ksrc[14];
 80052da:	fb16 220a 	smlabb	r2, r6, sl, r2
            sum0 += cols_8b[0]*ksrc[15];
 80052de:	f91c 9c0a 	ldrsb.w	r9, [ip, #-10]
            sum1 += cols_8b[4]*ksrc[12];
 80052e2:	fb18 5506 	smlabb	r5, r8, r6, r5
            sum0 = (float) sum0 * *scales;
 80052e6:	ed10 7a01 	vldr	s14, [r0, #-4]
            sum0 += cols_8b[0]*ksrc[15];
 80052ea:	f991 100c 	ldrsb.w	r1, [r1, #12]
            sum0 += cols_8b[1]*ksrc[16];
 80052ee:	9800      	ldr	r0, [sp, #0]
 80052f0:	f91c ec09 	ldrsb.w	lr, [ip, #-9]
            sum0 += cols_8b[0]*ksrc[15];
 80052f4:	fb11 2209 	smlabb	r2, r1, r9, r2
            sum0 += cols_8b[1]*ksrc[16];
 80052f8:	f990 600d 	ldrsb.w	r6, [r0, #13]
            sum1 += cols_8b[2]*ksrc[15];
 80052fc:	4601      	mov	r1, r0
 80052fe:	f990 800e 	ldrsb.w	r8, [r0, #14]
 8005302:	1d20      	adds	r0, r4, #4
            sum1 += cols_8b[5]*ksrc[13];
 8005304:	f994 b00d 	ldrsb.w	fp, [r4, #13]
            sum0 += cols_8b[1]*ksrc[16];
 8005308:	fb16 220e 	smlabb	r2, r6, lr, r2
            sum0 += cols_8b[2]*ksrc[17];
 800530c:	f91c 6c08 	ldrsb.w	r6, [ip, #-8]
            sum1 += cols_8b[3]*ksrc[16];
 8005310:	f991 700f 	ldrsb.w	r7, [r1, #15]
            sum1 += cols_8b[5]*ksrc[13];
 8005314:	fb13 530b 	smlabb	r3, r3, fp, r5
            sum0 += cols_8b[3]*ksrc[18];
 8005318:	f91c 1c07 	ldrsb.w	r1, [ip, #-7]
            sum0 += cols_8b[2]*ksrc[17];
 800531c:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum1 += cols_8b[6]*ksrc[14];
 8005320:	f994 b00e 	ldrsb.w	fp, [r4, #14]
 8005324:	9001      	str	r0, [sp, #4]
            sum0 += cols_8b[3]*ksrc[18];
 8005326:	fb17 2201 	smlabb	r2, r7, r1, r2
            sum1 += cols_8b[4]*ksrc[17];
 800532a:	9800      	ldr	r0, [sp, #0]
            sum1 += cols_8b[6]*ksrc[14];
 800532c:	fb1a 330b 	smlabb	r3, sl, fp, r3
            sum1 += cols_8b[4]*ksrc[17];
 8005330:	f990 5010 	ldrsb.w	r5, [r0, #16]
            sum1 += cols_8b[2]*ksrc[15];
 8005334:	fb19 3808 	smlabb	r8, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[19];
 8005338:	f91c bc06 	ldrsb.w	fp, [ip, #-6]
            sum0 += cols_8b[0]*ksrc[20];
 800533c:	9803      	ldr	r0, [sp, #12]
            sum1 += cols_8b[3]*ksrc[16];
 800533e:	fb1e 8807 	smlabb	r8, lr, r7, r8
            sum0 += cols_8b[0]*ksrc[20];
 8005342:	f91c ac05 	ldrsb.w	sl, [ip, #-5]
            sum0 += cols_8b[4]*ksrc[19];
 8005346:	fb15 220b 	smlabb	r2, r5, fp, r2
            sum0 += cols_8b[0]*ksrc[20];
 800534a:	f990 3010 	ldrsb.w	r3, [r0, #16]
            sum1 += cols_8b[4]*ksrc[17];
 800534e:	fb16 8805 	smlabb	r8, r6, r5, r8
            sum0 += cols_8b[1]*ksrc[21];
 8005352:	f990 9011 	ldrsb.w	r9, [r0, #17]
 8005356:	3004      	adds	r0, #4
            sum1 += cols_8b[5]*ksrc[18];
 8005358:	9c00      	ldr	r4, [sp, #0]
            sum0 += cols_8b[0]*ksrc[20];
 800535a:	fb13 230a 	smlabb	r3, r3, sl, r2
            sum0 += cols_8b[1]*ksrc[21];
 800535e:	f91c 2c04 	ldrsb.w	r2, [ip, #-4]
            sum1 += cols_8b[2]*ksrc[20];
 8005362:	f990 e00e 	ldrsb.w	lr, [r0, #14]
            sum1 += cols_8b[5]*ksrc[18];
 8005366:	f994 5011 	ldrsb.w	r5, [r4, #17]
            sum0 += cols_8b[1]*ksrc[21];
 800536a:	fb19 3302 	smlabb	r3, r9, r2, r3
            sum0 += cols_8b[2]*ksrc[22];
 800536e:	f91c 9c03 	ldrsb.w	r9, [ip, #-3]
            sum1 += cols_8b[3]*ksrc[21];
 8005372:	f990 700f 	ldrsb.w	r7, [r0, #15]
            sum1 += cols_8b[5]*ksrc[18];
 8005376:	fb11 8805 	smlabb	r8, r1, r5, r8
            sum0 += cols_8b[3]*ksrc[23];
 800537a:	f91c 6c02 	ldrsb.w	r6, [ip, #-2]
            sum0 += cols_8b[2]*ksrc[22];
 800537e:	fb1e 3309 	smlabb	r3, lr, r9, r3
            sum1 += cols_8b[6]*ksrc[19];
 8005382:	9900      	ldr	r1, [sp, #0]
            sum0 += cols_8b[4]*ksrc[24];
 8005384:	f91c 4c01 	ldrsb.w	r4, [ip, #-1]
            sum0 += cols_8b[3]*ksrc[23];
 8005388:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum1 += cols_8b[6]*ksrc[19];
 800538c:	f991 5012 	ldrsb.w	r5, [r1, #18]
            sum1 += cols_8b[4]*ksrc[22];
 8005390:	f990 1010 	ldrsb.w	r1, [r0, #16]
            sum1 += cols_8b[6]*ksrc[19];
 8005394:	fb1b 8805 	smlabb	r8, fp, r5, r8
            sum1 += cols_8b[5]*ksrc[23];
 8005398:	f990 b011 	ldrsb.w	fp, [r0, #17]
            sum0 += cols_8b[4]*ksrc[24];
 800539c:	fb11 3304 	smlabb	r3, r1, r4, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80053a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
            sum1 += cols_8b[2]*ksrc[20];
 80053a2:	fb1a 880e 	smlabb	r8, sl, lr, r8
            sum0 += cols_8b[4]*ksrc[24];
 80053a6:	ee07 3a90 	vmov	s15, r3
            sum1 += cols_8b[6]*ksrc[24];
 80053aa:	f990 3012 	ldrsb.w	r3, [r0, #18]
            sum1 += cols_8b[3]*ksrc[21];
 80053ae:	fb12 8807 	smlabb	r8, r2, r7, r8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80053b2:	9a04      	ldr	r2, [sp, #16]
            sum0 = (float) sum0 * *scales;
 80053b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b8:	9003      	str	r0, [sp, #12]
            sum1 += cols_8b[4]*ksrc[22];
 80053ba:	fb19 8801 	smlabb	r8, r9, r1, r8
            sum0 += output_offset;
 80053be:	9932      	ldr	r1, [sp, #200]	; 0xc8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80053c0:	1b55      	subs	r5, r2, r5
            sum0 = (float) sum0 * *scales;
 80053c2:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[5]*ksrc[23];
 80053c6:	fb16 880b 	smlabb	r8, r6, fp, r8
            sum1 += cols_8b[6]*ksrc[24];
 80053ca:	fb14 8803 	smlabb	r8, r4, r3, r8
            sum0 = (float) sum0 * *scales;
 80053ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            sum0 += output_offset;
 80053d2:	ee17 3a90 	vmov	r3, s15
            sum1 = (float) sum1 * *scales;
 80053d6:	ee07 8a90 	vmov	s15, r8
            sum0 += output_offset;
 80053da:	440b      	add	r3, r1
            sum0 = MAX(sum0, activation_min);
 80053dc:	9934      	ldr	r1, [sp, #208]	; 0xd0
            sum1 = (float) sum1 * *scales;
 80053de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = MAX(sum0, activation_min);
 80053e2:	428b      	cmp	r3, r1
 80053e4:	bfb8      	it	lt
 80053e6:	460b      	movlt	r3, r1
            sum0 = MIN(sum0, activation_max);
 80053e8:	9935      	ldr	r1, [sp, #212]	; 0xd4
 80053ea:	428b      	cmp	r3, r1
 80053ec:	bfa8      	it	ge
 80053ee:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80053f0:	9908      	ldr	r1, [sp, #32]
 80053f2:	546b      	strb	r3, [r5, r1]
            sum1 = (float) sum1 * *scales;
 80053f4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
            sum1 += output_offset;
 80053f6:	9932      	ldr	r1, [sp, #200]	; 0xc8
            sum1 = (float) sum1 * *scales;
 80053f8:	ed13 7a01 	vldr	s14, [r3, #-4]
 80053fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005404:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8005408:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 800540a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800540c:	428b      	cmp	r3, r1
 800540e:	bfb8      	it	lt
 8005410:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8005412:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8005414:	428b      	cmp	r3, r1
 8005416:	bfa8      	it	ge
 8005418:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800541a:	7013      	strb	r3, [r2, #0]
 800541c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541e:	18d3      	adds	r3, r2, r3
 8005420:	9304      	str	r3, [sp, #16]
        for (j = 0; j < output_x / 2; j++) {
 8005422:	9b07      	ldr	r3, [sp, #28]
 8005424:	4298      	cmp	r0, r3
 8005426:	f47f aec8 	bne.w	80051ba <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x1de>
 800542a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800542c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800542e:	4413      	add	r3, r2
 8005430:	930c      	str	r3, [sp, #48]	; 0x30
 8005432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (output_x & 1) {
 8005434:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005436:	3301      	adds	r3, #1
 8005438:	930d      	str	r3, [sp, #52]	; 0x34
 800543a:	2a00      	cmp	r2, #0
 800543c:	f000 80da 	beq.w	80055f4 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x618>
            q31_t sum = bias[0] + biasR[0];
 8005440:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            cols_8b += column_x + 4;
 8005442:	9e0c      	ldr	r6, [sp, #48]	; 0x30
            q31_t sum = bias[0] + biasR[0];
 8005444:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8005448:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800544a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800544c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8005450:	9c12      	ldr	r4, [sp, #72]	; 0x48
            sum += cols_8b[0]*ksrc[0];
 8005452:	f91c 5c19 	ldrsb.w	r5, [ip, #-25]
            q31_t sum = bias[0] + biasR[0];
 8005456:	4413      	add	r3, r2
 8005458:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 800545a:	f996 4000 	ldrsb.w	r4, [r6]
            sum += cols_8b[1]*ksrc[1];
 800545e:	f996 2001 	ldrsb.w	r2, [r6, #1]
            sum += cols_8b[0]*ksrc[0];
 8005462:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8005466:	f91c 5c18 	ldrsb.w	r5, [ip, #-24]
            sum += cols_8b[2]*ksrc[2];
 800546a:	f996 4002 	ldrsb.w	r4, [r6, #2]
            sum += cols_8b[1]*ksrc[1];
 800546e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8005472:	f91c 5c17 	ldrsb.w	r5, [ip, #-23]
            sum += cols_8b[3]*ksrc[3];
 8005476:	f996 2003 	ldrsb.w	r2, [r6, #3]
            sum += cols_8b[2]*ksrc[2];
 800547a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 800547e:	f91c 5c16 	ldrsb.w	r5, [ip, #-22]
            cols_8b += column_x + 4;
 8005482:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
            sum += cols_8b[4]*ksrc[4];
 8005484:	f996 4004 	ldrsb.w	r4, [r6, #4]
            sum += cols_8b[3]*ksrc[3];
 8005488:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 800548c:	f91c 5c15 	ldrsb.w	r5, [ip, #-21]
            cols_8b += column_x + 4;
 8005490:	19f0      	adds	r0, r6, r7
            sum += cols_8b[0]*ksrc[5];
 8005492:	57f2      	ldrsb	r2, [r6, r7]
            sum += cols_8b[4]*ksrc[4];
 8005494:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[5];
 8005498:	f91c 5c14 	ldrsb.w	r5, [ip, #-20]
            sum += cols_8b[1]*ksrc[6];
 800549c:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[5];
 80054a0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[6];
 80054a4:	f91c 5c13 	ldrsb.w	r5, [ip, #-19]
            sum += cols_8b[2]*ksrc[7];
 80054a8:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[6];
 80054ac:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[7];
 80054b0:	f91c 5c12 	ldrsb.w	r5, [ip, #-18]
            sum += cols_8b[3]*ksrc[8];
 80054b4:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[7];
 80054b8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[8];
 80054bc:	f91c 5c11 	ldrsb.w	r5, [ip, #-17]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 80054c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
            sum += cols_8b[4]*ksrc[9];
 80054c2:	f990 e004 	ldrsb.w	lr, [r0, #4]
            sum += cols_8b[3]*ksrc[8];
 80054c6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[10];
 80054ca:	f916 4017 	ldrsb.w	r4, [r6, r7, lsl #1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 80054ce:	4416      	add	r6, r2
            sum += cols_8b[4]*ksrc[9];
 80054d0:	f91c 5c10 	ldrsb.w	r5, [ip, #-16]
 80054d4:	910e      	str	r1, [sp, #56]	; 0x38
            cols_8b += column_x + 4;
 80054d6:	19c1      	adds	r1, r0, r7
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 80054d8:	960c      	str	r6, [sp, #48]	; 0x30
            sum += cols_8b[4]*ksrc[9];
 80054da:	fb1e 3305 	smlabb	r3, lr, r5, r3
            sum += cols_8b[0]*ksrc[10];
 80054de:	f91c 5c0f 	ldrsb.w	r5, [ip, #-15]
            sum += cols_8b[1]*ksrc[11];
 80054e2:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[10];
 80054e6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[11];
 80054ea:	f91c 5c0e 	ldrsb.w	r5, [ip, #-14]
            sum += cols_8b[2]*ksrc[12];
 80054ee:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[11];
 80054f2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[12];
 80054f6:	f91c 2c0d 	ldrsb.w	r2, [ip, #-13]
            sum += cols_8b[3]*ksrc[13];
 80054fa:	f991 6003 	ldrsb.w	r6, [r1, #3]
            sum += cols_8b[2]*ksrc[12];
 80054fe:	fb14 3302 	smlabb	r3, r4, r2, r3
            sum += cols_8b[3]*ksrc[13];
 8005502:	f91c 2c0c 	ldrsb.w	r2, [ip, #-12]
            sum += cols_8b[4]*ksrc[14];
 8005506:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[13];
 800550a:	fb16 3602 	smlabb	r6, r6, r2, r3
            sum += cols_8b[4]*ksrc[14];
 800550e:	f91c 2c0b 	ldrsb.w	r2, [ip, #-11]
            cols_8b += column_x + 4;
 8005512:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[15];
 8005514:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[4]*ksrc[14];
 8005518:	fb14 6202 	smlabb	r2, r4, r2, r6
            sum += cols_8b[0]*ksrc[15];
 800551c:	f91c 4c0a 	ldrsb.w	r4, [ip, #-10]
            sum += cols_8b[1]*ksrc[16];
 8005520:	f993 5001 	ldrsb.w	r5, [r3, #1]
            sum += cols_8b[0]*ksrc[15];
 8005524:	fb10 2204 	smlabb	r2, r0, r4, r2
            sum += cols_8b[1]*ksrc[16];
 8005528:	f91c 0c09 	ldrsb.w	r0, [ip, #-9]
            sum += cols_8b[2]*ksrc[17];
 800552c:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[16];
 8005530:	fb15 2200 	smlabb	r2, r5, r0, r2
            sum += cols_8b[2]*ksrc[17];
 8005534:	f91c 5c08 	ldrsb.w	r5, [ip, #-8]
            sum += cols_8b[3]*ksrc[18];
 8005538:	f993 6003 	ldrsb.w	r6, [r3, #3]
            sum += cols_8b[2]*ksrc[17];
 800553c:	fb14 2505 	smlabb	r5, r4, r5, r2
            sum += cols_8b[3]*ksrc[18];
 8005540:	f91c 2c07 	ldrsb.w	r2, [ip, #-7]
            sum += cols_8b[4]*ksrc[19];
 8005544:	f993 0004 	ldrsb.w	r0, [r3, #4]
            cols_8b += column_x + 4;
 8005548:	443b      	add	r3, r7
            sum += cols_8b[3]*ksrc[18];
 800554a:	fb16 5402 	smlabb	r4, r6, r2, r5
            sum += cols_8b[4]*ksrc[19];
 800554e:	f91c 2c06 	ldrsb.w	r2, [ip, #-6]
            sum += cols_8b[0]*ksrc[20];
 8005552:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            sum += cols_8b[4]*ksrc[19];
 8005556:	fb10 4202 	smlabb	r2, r0, r2, r4
            sum += cols_8b[0]*ksrc[20];
 800555a:	f91c 4c05 	ldrsb.w	r4, [ip, #-5]
            sum += cols_8b[1]*ksrc[21];
 800555e:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[20];
 8005562:	fb15 2204 	smlabb	r2, r5, r4, r2
            sum += cols_8b[1]*ksrc[21];
 8005566:	f91c 5c04 	ldrsb.w	r5, [ip, #-4]
            sum += cols_8b[2]*ksrc[22];
 800556a:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[21];
 800556e:	fb10 2205 	smlabb	r2, r0, r5, r2
 8005572:	9f15      	ldr	r7, [sp, #84]	; 0x54
            sum += cols_8b[2]*ksrc[22];
 8005574:	f91c 5c03 	ldrsb.w	r5, [ip, #-3]
            sum += cols_8b[3]*ksrc[23];
 8005578:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[22];
 800557c:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[23];
 8005580:	f91c 5c02 	ldrsb.w	r5, [ip, #-2]
            sum += cols_8b[4]*ksrc[24];
 8005584:	f993 3004 	ldrsb.w	r3, [r3, #4]
            sum += cols_8b[3]*ksrc[23];
 8005588:	fb10 2205 	smlabb	r2, r0, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800558c:	e9dd 610f 	ldrd	r6, r1, [sp, #60]	; 0x3c
 8005590:	1a71      	subs	r1, r6, r1
 8005592:	443e      	add	r6, r7
 8005594:	960f      	str	r6, [sp, #60]	; 0x3c
            sum += cols_8b[4]*ksrc[24];
 8005596:	f91c 5c01 	ldrsb.w	r5, [ip, #-1]
            sum = (float) sum * *scales;
 800559a:	9831      	ldr	r0, [sp, #196]	; 0xc4
            sum += cols_8b[4]*ksrc[24];
 800559c:	fb13 2205 	smlabb	r2, r3, r5, r2
            sum = (float) sum * *scales;
 80055a0:	ed10 7a01 	vldr	s14, [r0, #-4]
 80055a4:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 80055a8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
            sum = (float) sum * *scales;
 80055aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055b6:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 80055ba:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 80055bc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80055be:	4293      	cmp	r3, r2
 80055c0:	bfb8      	it	lt
 80055c2:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 80055c4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bfa8      	it	ge
 80055ca:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80055cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80055ce:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 80055d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d4:	429a      	cmp	r2, r3
 80055d6:	f47f add5 	bne.w	8005184 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x1a8>
        input++;
 80055da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80055dc:	f10c 0c19 	add.w	ip, ip, #25
    for (c = 0; c < input_ch; c++){
 80055e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
        input++;
 80055e2:	3301      	adds	r3, #1
 80055e4:	931a      	str	r3, [sp, #104]	; 0x68
    for (c = 0; c < input_ch; c++){
 80055e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80055e8:	4293      	cmp	r3, r2
 80055ea:	f47f ad92 	bne.w	8005112 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x136>
}
 80055ee:	b025      	add	sp, #148	; 0x94
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 80055f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80055f8:	4413      	add	r3, r2
 80055fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055fc:	930c      	str	r3, [sp, #48]	; 0x30
 80055fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005600:	4413      	add	r3, r2
 8005602:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005604:	930f      	str	r3, [sp, #60]	; 0x3c
 8005606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005608:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 800560a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800560c:	930e      	str	r3, [sp, #56]	; 0x38
 800560e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005610:	4293      	cmp	r3, r2
 8005612:	f47f adb7 	bne.w	8005184 <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x1a8>
 8005616:	e7e0      	b.n	80055da <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x5fe>
 8005618:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 800561a:	2200      	movs	r2, #0
 800561c:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 800561e:	f806 3c02 	strb.w	r3, [r6, #-2]
        *cols_8b++ = PAD8;
 8005622:	f806 3c01 	strb.w	r3, [r6, #-1]
 8005626:	3602      	adds	r6, #2
    for(i = 0; i < input_x + 4; i++){
 8005628:	b292      	uxth	r2, r2
 800562a:	4297      	cmp	r7, r2
 800562c:	daf6      	bge.n	800561c <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0x640>
 800562e:	e52e      	b.n	800508e <depthwise_kernel5x5_stride2_inplace_CHW_fpreq+0xb2>

08005630 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	b09b      	sub	sp, #108	; 0x6c
 8005636:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 800563a:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800563e:	9112      	str	r1, [sp, #72]	; 0x48
 8005640:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8005644:	9011      	str	r0, [sp, #68]	; 0x44
{
 8005646:	9204      	str	r2, [sp, #16]
    for (i = 0; i < output_y; i++) {
 8005648:	2800      	cmp	r0, #0
 800564a:	f000 839d 	beq.w	8005d88 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x758>
        for (j = 0; j < output_x / 2; j++) {
 800564e:	0848      	lsrs	r0, r1, #1
 8005650:	1e4b      	subs	r3, r1, #1
 8005652:	0054      	lsls	r4, r2, #1
 8005654:	2500      	movs	r5, #0
 8005656:	0046      	lsls	r6, r0, #1
 8005658:	9014      	str	r0, [sp, #80]	; 0x50
 800565a:	9405      	str	r4, [sp, #20]
 800565c:	9618      	str	r6, [sp, #96]	; 0x60
 800565e:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8005660:	950e      	str	r5, [sp, #56]	; 0x38
 8005662:	fb06 f303 	mul.w	r3, r6, r3
    for (i = 0; i < output_y; i++) {
 8005666:	950d      	str	r5, [sp, #52]	; 0x34
 8005668:	9319      	str	r3, [sp, #100]	; 0x64
 800566a:	1903      	adds	r3, r0, r4
 800566c:	f001 0001 	and.w	r0, r1, #1
 8005670:	fb06 f101 	mul.w	r1, r6, r1
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	9013      	str	r0, [sp, #76]	; 0x4c
 8005678:	9316      	str	r3, [sp, #88]	; 0x58
 800567a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800567c:	9115      	str	r1, [sp, #84]	; 0x54
 800567e:	4433      	add	r3, r6
 8005680:	930f      	str	r3, [sp, #60]	; 0x3c
 8005682:	0093      	lsls	r3, r2, #2
 8005684:	9317      	str	r3, [sp, #92]	; 0x5c
 8005686:	4253      	negs	r3, r2
 8005688:	930c      	str	r3, [sp, #48]	; 0x30
 800568a:	0073      	lsls	r3, r6, #1
 800568c:	930b      	str	r3, [sp, #44]	; 0x2c
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            sum += cols_8b[5]*ksrc[5];
            sum += cols_8b[6]*ksrc[6];
            cols_8b += column_x + 6;
 800568e:	1d93      	adds	r3, r2, #6
 8005690:	9310      	str	r3, [sp, #64]	; 0x40
        for (j = 0; j < output_x / 2; j++) {
 8005692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8206 	beq.w	8005aa6 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x476>
 800569a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800569c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800569e:	9904      	ldr	r1, [sp, #16]
 80056a0:	fb02 3303 	mla	r3, r2, r3, r3
 80056a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80056a6:	eb02 0e01 	add.w	lr, r2, r1
 80056aa:	9905      	ldr	r1, [sp, #20]
 80056ac:	9308      	str	r3, [sp, #32]
 80056ae:	440a      	add	r2, r1
 80056b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80056b2:	9201      	str	r2, [sp, #4]
 80056b4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80056b6:	eb02 0c01 	add.w	ip, r2, r1
 80056ba:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80056c0:	9307      	str	r3, [sp, #28]
 80056c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80056c4:	4413      	add	r3, r2
 80056c6:	9306      	str	r3, [sp, #24]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80056c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ca:	9302      	str	r3, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 80056cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	eb0e 0006 	add.w	r0, lr, r6
            sum0 += cols_8b[0]*ksrc[0];
 80056da:	f99b 5000 	ldrsb.w	r5, [fp]
 80056de:	9f01      	ldr	r7, [sp, #4]
            q31_t sum0 = bias[0] + biasR[0];
 80056e0:	4419      	add	r1, r3
 80056e2:	9a04      	ldr	r2, [sp, #16]
            sum0 += cols_8b[0]*ksrc[0];
 80056e4:	f91e 3006 	ldrsb.w	r3, [lr, r6]
 80056e8:	f10e 0e02 	add.w	lr, lr, #2
 80056ec:	18bc      	adds	r4, r7, r2
            sum0 += cols_8b[1]*ksrc[1];
 80056ee:	f99b 6001 	ldrsb.w	r6, [fp, #1]
            sum1 += cols_8b[1]*ksrc[0];
 80056f2:	f990 7001 	ldrsb.w	r7, [r0, #1]
            sum0 += cols_8b[0]*ksrc[0];
 80056f6:	fb13 1305 	smlabb	r3, r3, r5, r1
            sum1 += cols_8b[2]*ksrc[1];
 80056fa:	f990 8002 	ldrsb.w	r8, [r0, #2]
 80056fe:	4462      	add	r2, ip
            sum1 += cols_8b[1]*ksrc[0];
 8005700:	fb15 1107 	smlabb	r1, r5, r7, r1
            sum1 += cols_8b[3]*ksrc[2];
 8005704:	f990 9003 	ldrsb.w	r9, [r0, #3]
            sum0 += cols_8b[1]*ksrc[1];
 8005708:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[2];
 800570c:	f99b 7002 	ldrsb.w	r7, [fp, #2]
            sum1 += cols_8b[2]*ksrc[1];
 8005710:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[3];
 8005714:	f990 a004 	ldrsb.w	sl, [r0, #4]
            sum0 += cols_8b[2]*ksrc[2];
 8005718:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[3];
 800571c:	f99b 8003 	ldrsb.w	r8, [fp, #3]
            sum1 += cols_8b[3]*ksrc[2];
 8005720:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum1 += cols_8b[5]*ksrc[4];
 8005724:	f990 5005 	ldrsb.w	r5, [r0, #5]
            sum0 += cols_8b[3]*ksrc[3];
 8005728:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[4];
 800572c:	f99b 9004 	ldrsb.w	r9, [fp, #4]
            sum1 += cols_8b[4]*ksrc[3];
 8005730:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum1 += cols_8b[6]*ksrc[5];
 8005734:	f990 6006 	ldrsb.w	r6, [r0, #6]
            sum0 += cols_8b[4]*ksrc[4];
 8005738:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum0 += cols_8b[5]*ksrc[5];
 800573c:	f99b a005 	ldrsb.w	sl, [fp, #5]
            sum1 += cols_8b[5]*ksrc[4];
 8005740:	fb19 1105 	smlabb	r1, r9, r5, r1
            sum1 += cols_8b[1]*ksrc[7];
 8005744:	f99e 7005 	ldrsb.w	r7, [lr, #5]
            sum0 += cols_8b[5]*ksrc[5];
 8005748:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum0 += cols_8b[6]*ksrc[6];
 800574c:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[5];
 8005750:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum1 += cols_8b[7]*ksrc[6];
 8005754:	f990 a007 	ldrsb.w	sl, [r0, #7]
            sum0 += cols_8b[6]*ksrc[6];
 8005758:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum0 += cols_8b[0]*ksrc[7];
 800575c:	f99b 0007 	ldrsb.w	r0, [fp, #7]
 8005760:	f99e 6004 	ldrsb.w	r6, [lr, #4]
            sum1 += cols_8b[7]*ksrc[6];
 8005764:	fb15 110a 	smlabb	r1, r5, sl, r1
            sum1 += cols_8b[2]*ksrc[8];
 8005768:	f99e 8006 	ldrsb.w	r8, [lr, #6]
            sum0 += cols_8b[0]*ksrc[7];
 800576c:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[8];
 8005770:	f99b 6008 	ldrsb.w	r6, [fp, #8]
            sum1 += cols_8b[1]*ksrc[7];
 8005774:	fb10 1107 	smlabb	r1, r0, r7, r1
            sum1 += cols_8b[3]*ksrc[9];
 8005778:	f99e 9007 	ldrsb.w	r9, [lr, #7]
            sum0 += cols_8b[1]*ksrc[8];
 800577c:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[9];
 8005780:	f99b 7009 	ldrsb.w	r7, [fp, #9]
            sum1 += cols_8b[2]*ksrc[8];
 8005784:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[10];
 8005788:	f99e 5008 	ldrsb.w	r5, [lr, #8]
            sum0 += cols_8b[2]*ksrc[9];
 800578c:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[10];
 8005790:	f99b 800a 	ldrsb.w	r8, [fp, #10]
            sum1 += cols_8b[3]*ksrc[9];
 8005794:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum0 += cols_8b[3]*ksrc[10];
 8005798:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[11];
 800579c:	f99b 900b 	ldrsb.w	r9, [fp, #11]
            sum1 += cols_8b[4]*ksrc[10];
 80057a0:	fb18 1105 	smlabb	r1, r8, r5, r1
            sum1 += cols_8b[5]*ksrc[11];
 80057a4:	f99e a009 	ldrsb.w	sl, [lr, #9]
            sum0 += cols_8b[4]*ksrc[11];
 80057a8:	fb15 3309 	smlabb	r3, r5, r9, r3
            sum0 += cols_8b[5]*ksrc[12];
 80057ac:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum0 += cols_8b[0]*ksrc[14];
 80057b0:	9f01      	ldr	r7, [sp, #4]
            sum1 += cols_8b[5]*ksrc[11];
 80057b2:	fb19 110a 	smlabb	r1, r9, sl, r1
            sum1 += cols_8b[6]*ksrc[12];
 80057b6:	f99e 000a 	ldrsb.w	r0, [lr, #10]
            sum0 += cols_8b[5]*ksrc[12];
 80057ba:	fb1a 3305 	smlabb	r3, sl, r5, r3
            sum0 += cols_8b[6]*ksrc[13];
 80057be:	f99b a00d 	ldrsb.w	sl, [fp, #13]
            sum0 += cols_8b[0]*ksrc[14];
 80057c2:	f997 600c 	ldrsb.w	r6, [r7, #12]
            sum1 += cols_8b[6]*ksrc[12];
 80057c6:	fb15 1100 	smlabb	r1, r5, r0, r1
            sum0 += cols_8b[6]*ksrc[13];
 80057ca:	fb10 330a 	smlabb	r3, r0, sl, r3
            sum1 += cols_8b[7]*ksrc[13];
 80057ce:	f99e 500b 	ldrsb.w	r5, [lr, #11]
            sum0 += cols_8b[0]*ksrc[14];
 80057d2:	f99b 000e 	ldrsb.w	r0, [fp, #14]
            sum1 += cols_8b[1]*ksrc[14];
 80057d6:	f997 800d 	ldrsb.w	r8, [r7, #13]
            sum1 += cols_8b[7]*ksrc[13];
 80057da:	fb1a 1105 	smlabb	r1, sl, r5, r1
            sum0 += cols_8b[0]*ksrc[14];
 80057de:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[15];
 80057e2:	f99b 600f 	ldrsb.w	r6, [fp, #15]
            sum1 += cols_8b[2]*ksrc[15];
 80057e6:	f997 900e 	ldrsb.w	r9, [r7, #14]
            sum1 += cols_8b[1]*ksrc[14];
 80057ea:	fb10 1108 	smlabb	r1, r0, r8, r1
            sum0 += cols_8b[1]*ksrc[15];
 80057ee:	fb18 3306 	smlabb	r3, r8, r6, r3
            sum0 += cols_8b[2]*ksrc[16];
 80057f2:	f99b 8010 	ldrsb.w	r8, [fp, #16]
            sum1 += cols_8b[3]*ksrc[16];
 80057f6:	f997 a00f 	ldrsb.w	sl, [r7, #15]
            sum1 += cols_8b[2]*ksrc[15];
 80057fa:	fb16 1109 	smlabb	r1, r6, r9, r1
            sum0 += cols_8b[2]*ksrc[16];
 80057fe:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[3]*ksrc[17];
 8005802:	f99b 9011 	ldrsb.w	r9, [fp, #17]
            sum1 += cols_8b[2]*ksrc[15];
 8005806:	4638      	mov	r0, r7
            sum1 += cols_8b[4]*ksrc[17];
 8005808:	f997 5010 	ldrsb.w	r5, [r7, #16]
            sum1 += cols_8b[3]*ksrc[16];
 800580c:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[4]*ksrc[18];
 8005810:	f99b 8012 	ldrsb.w	r8, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 8005814:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[6]*ksrc[19];
 8005818:	f990 6012 	ldrsb.w	r6, [r0, #18]
            sum1 += cols_8b[4]*ksrc[17];
 800581c:	fb19 1705 	smlabb	r7, r9, r5, r1
            sum1 += cols_8b[5]*ksrc[18];
 8005820:	f990 9011 	ldrsb.w	r9, [r0, #17]
            sum0 += cols_8b[4]*ksrc[18];
 8005824:	fb15 3308 	smlabb	r3, r5, r8, r3
            sum0 += cols_8b[5]*ksrc[19];
 8005828:	f99b 1013 	ldrsb.w	r1, [fp, #19]
            sum1 += cols_8b[5]*ksrc[18];
 800582c:	fb18 7809 	smlabb	r8, r8, r9, r7
            sum0 += cols_8b[6]*ksrc[20];
 8005830:	f99b 7014 	ldrsb.w	r7, [fp, #20]
            sum0 += cols_8b[5]*ksrc[19];
 8005834:	fb19 3501 	smlabb	r5, r9, r1, r3
            sum0 += cols_8b[0]*ksrc[21];
 8005838:	f994 3012 	ldrsb.w	r3, [r4, #18]
            sum1 += cols_8b[6]*ksrc[19];
 800583c:	fb11 8106 	smlabb	r1, r1, r6, r8
 8005840:	3002      	adds	r0, #2
            sum0 += cols_8b[6]*ksrc[20];
 8005842:	fb16 5507 	smlabb	r5, r6, r7, r5
            sum0 += cols_8b[0]*ksrc[21];
 8005846:	f99b 6015 	ldrsb.w	r6, [fp, #21]
            sum0 += cols_8b[1]*ksrc[22];
 800584a:	f99b a016 	ldrsb.w	sl, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 800584e:	fb13 5306 	smlabb	r3, r3, r6, r5
            sum1 += cols_8b[7]*ksrc[20];
 8005852:	f990 5011 	ldrsb.w	r5, [r0, #17]
            sum0 += cols_8b[0]*ksrc[21];
 8005856:	9603      	str	r6, [sp, #12]
            sum1 += cols_8b[7]*ksrc[20];
 8005858:	fb17 1505 	smlabb	r5, r7, r5, r1
            sum1 += cols_8b[1]*ksrc[21];
 800585c:	f994 6013 	ldrsb.w	r6, [r4, #19]
 8005860:	9001      	str	r0, [sp, #4]
 8005862:	9803      	ldr	r0, [sp, #12]
            sum0 += cols_8b[1]*ksrc[22];
 8005864:	fb16 330a 	smlabb	r3, r6, sl, r3
            sum1 += cols_8b[2]*ksrc[22];
 8005868:	f994 9014 	ldrsb.w	r9, [r4, #20]
            sum0 += cols_8b[2]*ksrc[23];
 800586c:	f99b 8017 	ldrsb.w	r8, [fp, #23]
            sum1 += cols_8b[1]*ksrc[21];
 8005870:	fb10 5006 	smlabb	r0, r0, r6, r5
            sum1 += cols_8b[3]*ksrc[23];
 8005874:	f994 7015 	ldrsb.w	r7, [r4, #21]
            sum0 += cols_8b[3]*ksrc[24];
 8005878:	f99b 1018 	ldrsb.w	r1, [fp, #24]
            sum0 += cols_8b[2]*ksrc[23];
 800587c:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum1 += cols_8b[2]*ksrc[22];
 8005880:	fb1a 0009 	smlabb	r0, sl, r9, r0
            sum1 += cols_8b[4]*ksrc[24];
 8005884:	f994 6016 	ldrsb.w	r6, [r4, #22]
            sum0 += cols_8b[3]*ksrc[24];
 8005888:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum0 += cols_8b[4]*ksrc[25];
 800588c:	f99b 5019 	ldrsb.w	r5, [fp, #25]
            sum1 += cols_8b[3]*ksrc[23];
 8005890:	fb18 0007 	smlabb	r0, r8, r7, r0
            sum1 += cols_8b[5]*ksrc[25];
 8005894:	f994 a017 	ldrsb.w	sl, [r4, #23]
            sum0 += cols_8b[5]*ksrc[26];
 8005898:	f99b 901a 	ldrsb.w	r9, [fp, #26]
            sum0 += cols_8b[4]*ksrc[25];
 800589c:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[4]*ksrc[24];
 80058a0:	fb11 0006 	smlabb	r0, r1, r6, r0
            sum1 += cols_8b[6]*ksrc[26];
 80058a4:	f994 8018 	ldrsb.w	r8, [r4, #24]
            sum0 += cols_8b[6]*ksrc[27];
 80058a8:	f99b 701b 	ldrsb.w	r7, [fp, #27]
            sum0 += cols_8b[5]*ksrc[26];
 80058ac:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[25];
 80058b0:	fb15 050a 	smlabb	r5, r5, sl, r0
            sum0 += cols_8b[0]*ksrc[28];
 80058b4:	f99c 1018 	ldrsb.w	r1, [ip, #24]
 80058b8:	f99b 601c 	ldrsb.w	r6, [fp, #28]
            sum0 += cols_8b[6]*ksrc[27];
 80058bc:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum1 += cols_8b[6]*ksrc[26];
 80058c0:	fb19 5508 	smlabb	r5, r9, r8, r5
            sum1 += cols_8b[7]*ksrc[27];
 80058c4:	f994 4019 	ldrsb.w	r4, [r4, #25]
            sum0 += cols_8b[1]*ksrc[29];
 80058c8:	f99b 001d 	ldrsb.w	r0, [fp, #29]
            sum0 += cols_8b[0]*ksrc[28];
 80058cc:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum1 += cols_8b[7]*ksrc[27];
 80058d0:	fb17 5404 	smlabb	r4, r7, r4, r5
            sum1 += cols_8b[1]*ksrc[28];
 80058d4:	f99c 1019 	ldrsb.w	r1, [ip, #25]
            sum1 += cols_8b[2]*ksrc[29];
 80058d8:	f99c 801a 	ldrsb.w	r8, [ip, #26]
            sum0 += cols_8b[2]*ksrc[30];
 80058dc:	f99b a01e 	ldrsb.w	sl, [fp, #30]
            sum0 += cols_8b[1]*ksrc[29];
 80058e0:	fb11 3300 	smlabb	r3, r1, r0, r3
            sum1 += cols_8b[1]*ksrc[28];
 80058e4:	fb16 4401 	smlabb	r4, r6, r1, r4
            sum0 += cols_8b[3]*ksrc[31];
 80058e8:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum1 += cols_8b[3]*ksrc[30];
 80058ec:	f99c 101b 	ldrsb.w	r1, [ip, #27]
            sum0 += cols_8b[2]*ksrc[30];
 80058f0:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum1 += cols_8b[2]*ksrc[29];
 80058f4:	fb10 4408 	smlabb	r4, r0, r8, r4
            sum1 += cols_8b[4]*ksrc[31];
 80058f8:	f99c 601c 	ldrsb.w	r6, [ip, #28]
            sum0 += cols_8b[4]*ksrc[32];
 80058fc:	f99b 0020 	ldrsb.w	r0, [fp, #32]
            sum0 += cols_8b[3]*ksrc[31];
 8005900:	fb11 3305 	smlabb	r3, r1, r5, r3
            sum1 += cols_8b[3]*ksrc[30];
 8005904:	fb1a 4101 	smlabb	r1, sl, r1, r4
            sum0 += cols_8b[5]*ksrc[33];
 8005908:	f99b 8021 	ldrsb.w	r8, [fp, #33]	; 0x21
            sum1 += cols_8b[5]*ksrc[32];
 800590c:	f99c 401d 	ldrsb.w	r4, [ip, #29]
            sum0 += cols_8b[4]*ksrc[32];
 8005910:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum1 += cols_8b[4]*ksrc[31];
 8005914:	fb15 1106 	smlabb	r1, r5, r6, r1
            sum1 += cols_8b[6]*ksrc[33];
 8005918:	f99c 501e 	ldrsb.w	r5, [ip, #30]
            sum0 += cols_8b[6]*ksrc[34];
 800591c:	f99b 6022 	ldrsb.w	r6, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 8005920:	fb14 3308 	smlabb	r3, r4, r8, r3
            sum1 += cols_8b[5]*ksrc[32];
 8005924:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[0]*ksrc[35];
 8005928:	f992 701e 	ldrsb.w	r7, [r2, #30]
 800592c:	f99b 4023 	ldrsb.w	r4, [fp, #35]	; 0x23
            sum0 += cols_8b[6]*ksrc[34];
 8005930:	fb15 3306 	smlabb	r3, r5, r6, r3
            sum1 += cols_8b[6]*ksrc[33];
 8005934:	fb18 1505 	smlabb	r5, r8, r5, r1
            sum1 += cols_8b[7]*ksrc[34];
 8005938:	f99c 801f 	ldrsb.w	r8, [ip, #31]
            sum1 += cols_8b[1]*ksrc[35];
 800593c:	f992 901f 	ldrsb.w	r9, [r2, #31]
            sum0 += cols_8b[0]*ksrc[35];
 8005940:	fb17 3304 	smlabb	r3, r7, r4, r3
            sum0 += cols_8b[1]*ksrc[36];
 8005944:	f99b 0024 	ldrsb.w	r0, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[34];
 8005948:	fb16 5808 	smlabb	r8, r6, r8, r5
            sum1 += cols_8b[2]*ksrc[36];
 800594c:	f992 7020 	ldrsb.w	r7, [r2, #32]
            sum0 += cols_8b[2]*ksrc[37];
 8005950:	f99b 1025 	ldrsb.w	r1, [fp, #37]	; 0x25
            sum1 += cols_8b[1]*ksrc[35];
 8005954:	fb14 8609 	smlabb	r6, r4, r9, r8
            sum0 += cols_8b[1]*ksrc[36];
 8005958:	fb19 3300 	smlabb	r3, r9, r0, r3
            sum1 += cols_8b[3]*ksrc[37];
 800595c:	f992 5021 	ldrsb.w	r5, [r2, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 8005960:	f99b a026 	ldrsb.w	sl, [fp, #38]	; 0x26
            sum1 += cols_8b[2]*ksrc[36];
 8005964:	fb10 6407 	smlabb	r4, r0, r7, r6
            sum0 += cols_8b[2]*ksrc[37];
 8005968:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum1 += cols_8b[4]*ksrc[38];
 800596c:	f992 9022 	ldrsb.w	r9, [r2, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 8005970:	f99b 8027 	ldrsb.w	r8, [fp, #39]	; 0x27
            sum1 += cols_8b[3]*ksrc[37];
 8005974:	fb11 4005 	smlabb	r0, r1, r5, r4
            sum0 += cols_8b[3]*ksrc[38];
 8005978:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum1 += cols_8b[5]*ksrc[39];
 800597c:	f992 7023 	ldrsb.w	r7, [r2, #35]	; 0x23
            sum1 += cols_8b[4]*ksrc[38];
 8005980:	fb1a 0109 	smlabb	r1, sl, r9, r0
            sum0 += cols_8b[5]*ksrc[40];
 8005984:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[39];
 8005988:	fb19 3308 	smlabb	r3, r9, r8, r3
 800598c:	9805      	ldr	r0, [sp, #20]
            sum1 += cols_8b[6]*ksrc[40];
 800598e:	f992 5024 	ldrsb.w	r5, [r2, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[39];
 8005992:	fb18 1107 	smlabb	r1, r8, r7, r1
 8005996:	4460      	add	r0, ip
            sum0 += cols_8b[6]*ksrc[41];
 8005998:	f99b 4029 	ldrsb.w	r4, [fp, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[40];
 800599c:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum1 += cols_8b[7]*ksrc[41];
 80059a0:	f992 9025 	ldrsb.w	r9, [r2, #37]	; 0x25
            sum0 += cols_8b[0]*ksrc[42];
 80059a4:	f990 a024 	ldrsb.w	sl, [r0, #36]	; 0x24
            sum1 += cols_8b[6]*ksrc[40];
 80059a8:	fb16 1105 	smlabb	r1, r6, r5, r1
            sum0 += cols_8b[0]*ksrc[42];
 80059ac:	f99b 202a 	ldrsb.w	r2, [fp, #42]	; 0x2a
            sum0 += cols_8b[6]*ksrc[41];
 80059b0:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[42];
 80059b4:	f990 8025 	ldrsb.w	r8, [r0, #37]	; 0x25
            sum1 += cols_8b[7]*ksrc[41];
 80059b8:	fb14 1109 	smlabb	r1, r4, r9, r1
            sum0 += cols_8b[0]*ksrc[42];
 80059bc:	fb1a 3302 	smlabb	r3, sl, r2, r3
            sum0 += cols_8b[1]*ksrc[43];
 80059c0:	f99b a02b 	ldrsb.w	sl, [fp, #43]	; 0x2b
            sum1 += cols_8b[2]*ksrc[43];
 80059c4:	f990 6026 	ldrsb.w	r6, [r0, #38]	; 0x26
            sum1 += cols_8b[1]*ksrc[42];
 80059c8:	fb12 1108 	smlabb	r1, r2, r8, r1
            sum0 += cols_8b[2]*ksrc[44];
 80059cc:	f99b 702c 	ldrsb.w	r7, [fp, #44]	; 0x2c
            sum0 += cols_8b[1]*ksrc[43];
 80059d0:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum0 = (float) sum0 * *scales;
 80059d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
            sum1 += cols_8b[2]*ksrc[43];
 80059d6:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum0 += cols_8b[3]*ksrc[45];
 80059da:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum0 += cols_8b[2]*ksrc[44];
 80059de:	fb16 3307 	smlabb	r3, r6, r7, r3
            sum0 = (float) sum0 * *scales;
 80059e2:	edd4 7a00 	vldr	s15, [r4]
 80059e6:	f10c 0c02 	add.w	ip, ip, #2
            sum1 += cols_8b[3]*ksrc[44];
 80059ea:	f990 4027 	ldrsb.w	r4, [r0, #39]	; 0x27
            sum1 += cols_8b[4]*ksrc[45];
 80059ee:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[46];
 80059f2:	f99b 902e 	ldrsb.w	r9, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 80059f6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum1 += cols_8b[5]*ksrc[46];
 80059fa:	f990 6029 	ldrsb.w	r6, [r0, #41]	; 0x29
            sum1 += cols_8b[3]*ksrc[44];
 80059fe:	fb17 1104 	smlabb	r1, r7, r4, r1
            sum0 += cols_8b[5]*ksrc[47];
 8005a02:	f99b 802f 	ldrsb.w	r8, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 8005a06:	fb12 3309 	smlabb	r3, r2, r9, r3
            sum1 += cols_8b[6]*ksrc[47];
 8005a0a:	f990 a02a 	ldrsb.w	sl, [r0, #42]	; 0x2a
            sum1 += cols_8b[4]*ksrc[45];
 8005a0e:	fb15 1102 	smlabb	r1, r5, r2, r1
            sum0 += cols_8b[6]*ksrc[48];
 8005a12:	f99b 4030 	ldrsb.w	r4, [fp, #48]	; 0x30
            sum0 += cols_8b[5]*ksrc[47];
 8005a16:	fb16 3308 	smlabb	r3, r6, r8, r3
            sum1 += cols_8b[5]*ksrc[46];
 8005a1a:	fb19 1106 	smlabb	r1, r9, r6, r1
            sum1 += cols_8b[7]*ksrc[48];
 8005a1e:	f990 002b 	ldrsb.w	r0, [r0, #43]	; 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 8005a22:	fb1a 3304 	smlabb	r3, sl, r4, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005a26:	9a02      	ldr	r2, [sp, #8]
            sum1 += cols_8b[6]*ksrc[47];
 8005a28:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[6]*ksrc[48];
 8005a2c:	ee07 3a10 	vmov	s14, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005a30:	9b08      	ldr	r3, [sp, #32]
            sum1 += cols_8b[7]*ksrc[48];
 8005a32:	fb14 1100 	smlabb	r1, r4, r0, r1
            sum0 = (float) sum0 * *scales;
 8005a36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005a3a:	1ad7      	subs	r7, r2, r3
            sum0 = (float) sum0 * *scales;
 8005a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 = (float) sum1 * *scales;
 8005a40:	ee07 1a90 	vmov	s15, r1
            sum0 += output_offset;
 8005a44:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 8005a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 8005a4a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005a4e:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8005a52:	440b      	add	r3, r1
            sum0 = MAX(sum0, activation_min);
 8005a54:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005a56:	428b      	cmp	r3, r1
 8005a58:	bfb8      	it	lt
 8005a5a:	460b      	movlt	r3, r1
            sum0 = MIN(sum0, activation_max);
 8005a5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005a5e:	428b      	cmp	r3, r1
 8005a60:	bfa8      	it	ge
 8005a62:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005a64:	9907      	ldr	r1, [sp, #28]
 8005a66:	547b      	strb	r3, [r7, r1]
            sum1 = (float) sum1 * *scales;
 8005a68:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005a6a:	ed93 7a00 	vldr	s14, [r3]
            sum1 += output_offset;
 8005a6e:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 8005a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a78:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8005a7c:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8005a7e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005a80:	428b      	cmp	r3, r1
 8005a82:	bfb8      	it	lt
 8005a84:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8005a86:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	bfa8      	it	ge
 8005a8c:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8005a8e:	7013      	strb	r3, [r2, #0]
 8005a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a92:	18d3      	adds	r3, r2, r3
 8005a94:	9302      	str	r3, [sp, #8]
        for (j = 0; j < output_x / 2; j++) {
 8005a96:	9b06      	ldr	r3, [sp, #24]
 8005a98:	4563      	cmp	r3, ip
 8005a9a:	f47f ae17 	bne.w	80056cc <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x9c>
 8005a9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005aa0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005aa2:	4413      	add	r3, r2
 8005aa4:	932a      	str	r3, [sp, #168]	; 0xa8
 8005aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (output_x & 1) {
 8005aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005aaa:	3301      	adds	r3, #1
 8005aac:	930d      	str	r3, [sp, #52]	; 0x34
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	f000 816d 	beq.w	8005d8e <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x75e>
            q31_t sum = bias[0] + biasR[0];
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            cols_8b += column_x + 6;
 8005ab6:	9e10      	ldr	r6, [sp, #64]	; 0x40
            q31_t sum = bias[0] + biasR[0];
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	990e      	ldr	r1, [sp, #56]	; 0x38
            cols_8b += column_x + 6;
 8005abc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005abe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005ac0:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 8005ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ac4:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8005ac6:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	910e      	str	r1, [sp, #56]	; 0x38
            sum += cols_8b[0]*ksrc[0];
 8005ace:	992a      	ldr	r1, [sp, #168]	; 0xa8
            q31_t sum = bias[0] + biasR[0];
 8005ad0:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8005ad2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[0]*ksrc[0];
 8005ad4:	f991 4000 	ldrsb.w	r4, [r1]
            sum += cols_8b[2]*ksrc[9];
            sum += cols_8b[3]*ksrc[10];
            sum += cols_8b[4]*ksrc[11];
            sum += cols_8b[5]*ksrc[12];
            sum += cols_8b[6]*ksrc[13];
            cols_8b += column_x + 6;
 8005ad8:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 8005ada:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 8005ade:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8005ae2:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 8005ae6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[1]*ksrc[1];
 8005ae8:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8005aec:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 8005af0:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 8005af4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 8005af6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 8005afa:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 8005afe:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 8005b02:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[3];
 8005b04:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8005b08:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 8005b0c:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 8005b10:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[4]*ksrc[4];
 8005b12:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 8005b16:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 8005b1a:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 8005b1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[5]*ksrc[5];
 8005b20:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8005b24:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[6];
 8005b26:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 8005b2a:	4617      	mov	r7, r2
            sum += cols_8b[6]*ksrc[6];
 8005b2c:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum += cols_8b[0]*ksrc[7];
 8005b30:	57ba      	ldrsb	r2, [r7, r6]
            sum += cols_8b[6]*ksrc[6];
 8005b32:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8005b36:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 8005b3a:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 8005b3e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 8005b42:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 8005b46:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 8005b4a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 8005b4e:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 8005b52:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 8005b56:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 8005b5a:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 8005b5e:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 8005b62:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 8005b66:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 8005b6a:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 8005b6e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8005b72:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 8005b76:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 8005b7a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 8005b7e:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 8005b82:	463c      	mov	r4, r7
 8005b84:	4637      	mov	r7, r6
            sum += cols_8b[6]*ksrc[13];
 8005b86:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 8005b8a:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 8005b8e:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 8005b92:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 8005b96:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 8005b9a:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 8005b9e:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 8005ba2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 8005ba6:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 8005baa:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 8005bae:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 8005bb2:	f99b 5011 	ldrsb.w	r5, [fp, #17]
            sum += cols_8b[4]*ksrc[18];
 8005bb6:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2;
 8005bba:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[17];
 8005bbc:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 8005bc0:	f99b 5012 	ldrsb.w	r5, [fp, #18]
            sum += cols_8b[5]*ksrc[19];
 8005bc4:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += 3 * 2;
 8005bc8:	3607      	adds	r6, #7
            sum += cols_8b[4]*ksrc[18];
 8005bca:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 8005bce:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 8005bd2:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[19];
 8005bd6:	fb12 3305 	smlabb	r3, r2, r5, r3
        cols_8b_iterptr += 3 * 2;
 8005bda:	962a      	str	r6, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[20];
 8005bdc:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 8005be0:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 8005be2:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 8005be6:	fb14 3506 	smlabb	r5, r4, r6, r3
            sum += cols_8b[0]*ksrc[21];
 8005bea:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 8005bee:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 8005bf2:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 8005bf6:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 8005bfa:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 8005bfe:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 8005c02:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 8005c06:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 8005c0a:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 8005c0e:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 8005c12:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 8005c16:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 8005c1a:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 8005c1e:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 8005c22:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 8005c26:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 8005c2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[6]*ksrc[27];
 8005c2c:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 8005c30:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 8005c34:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 8005c38:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 8005c3c:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 8005c3e:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 8005c42:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 8005c46:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 8005c4a:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 8005c4e:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 8005c52:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 8005c56:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 8005c5a:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 8005c5e:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 8005c62:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 8005c66:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 8005c6a:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 8005c6e:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 8005c72:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 8005c76:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 8005c7a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 8005c7e:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 8005c82:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 8005c86:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 8005c8a:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 8005c8e:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 8005c90:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 8005c94:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 8005c98:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 8005c9c:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 8005ca0:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 8005ca4:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 8005ca8:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 8005cac:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 8005cb0:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 8005cb4:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 8005cb8:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 8005cbc:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8005cc0:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8005cc4:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 8005cc8:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 8005ccc:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8005cd0:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 8005cd4:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 8005cd8:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[5]*ksrc[40];
 8005cda:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8005cde:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8005ce2:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 8005ce6:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 8005ce8:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 8005cec:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8005cf0:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8005cf4:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 8005cf8:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 8005cfc:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 8005d00:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 8005d04:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 8005d08:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 8005d0c:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 8005d10:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 8005d14:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 8005d18:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 8005d1c:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 8005d20:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 8005d24:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 8005d28:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 8005d2c:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 8005d30:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 8005d34:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 8005d38:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 8005d3c:	9825      	ldr	r0, [sp, #148]	; 0x94
            sum += cols_8b[6]*ksrc[48];
 8005d3e:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005d42:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
            sum = (float) sum * *scales;
 8005d44:	ed90 7a00 	vldr	s14, [r0]
 8005d48:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 8005d4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005d4e:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum = (float) sum * *scales;
 8005d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d54:	9f15      	ldr	r7, [sp, #84]	; 0x54
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005d56:	1a71      	subs	r1, r6, r1
 8005d58:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 8005d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d5e:	960f      	str	r6, [sp, #60]	; 0x3c
 8005d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d64:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8005d68:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8005d6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8005d72:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005d74:	4293      	cmp	r3, r2
 8005d76:	bfa8      	it	ge
 8005d78:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005d7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d7c:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 8005d7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d82:	429a      	cmp	r2, r3
 8005d84:	f47f ac85 	bne.w	8005692 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
    }
}
 8005d88:	b01b      	add	sp, #108	; 0x6c
 8005d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += 3 * 2;
 8005d8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005d90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d92:	3306      	adds	r3, #6
 8005d94:	932a      	str	r3, [sp, #168]	; 0xa8
 8005d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d98:	4413      	add	r3, r2
 8005d9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da0:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8005da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005da4:	930e      	str	r3, [sp, #56]	; 0x38
 8005da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f47f ac72 	bne.w	8005692 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
}
 8005dae:	b01b      	add	sp, #108	; 0x6c
 8005db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005db4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>:
{
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	b093      	sub	sp, #76	; 0x4c
 8005dba:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8005dbc:	f101 0e05 	add.w	lr, r1, #5
{
 8005dc0:	4615      	mov	r5, r2
 8005dc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005dc4:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8005dc8:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8005dcc:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8005dd0:	1cd8      	adds	r0, r3, #3
 8005dd2:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 8005dd6:	2100      	movs	r1, #0
{
 8005dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dda:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8005dde:	9310      	str	r3, [sp, #64]	; 0x40
 8005de0:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 8005de4:	3101      	adds	r1, #1
 8005de6:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 8005de8:	f800 3c03 	strb.w	r3, [r0, #-3]
 8005dec:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 8005dee:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8005df0:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 8005df4:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 8005df8:	4571      	cmp	r1, lr
 8005dfa:	ddf3      	ble.n	8005de4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 8005dfc:	b1cd      	cbz	r5, 8005e32 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x7e>
 8005dfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e00:	4610      	mov	r0, r2
 8005e02:	2600      	movs	r6, #0
 8005e04:	1d8f      	adds	r7, r1, #6
 8005e06:	19d1      	adds	r1, r2, r7
 8005e08:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 8005e0a:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 8005e0c:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 8005e0e:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 8005e12:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 8005e14:	f801 3c03 	strb.w	r3, [r1, #-3]
 8005e18:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 8005e1a:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 8005e1c:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 8005e20:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005e24:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 8005e26:	d8ef      	bhi.n	8005e08 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x54>
 8005e28:	1e69      	subs	r1, r5, #1
 8005e2a:	b289      	uxth	r1, r1
 8005e2c:	fb01 7707 	mla	r7, r1, r7, r7
 8005e30:	443a      	add	r2, r7
 8005e32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e34:	1e88      	subs	r0, r1, #2
 8005e36:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8005e3a:	4288      	cmp	r0, r1
 8005e3c:	f200 8092 	bhi.w	8005f64 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b0>
 8005e40:	2000      	movs	r0, #0
 8005e42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e44:	4606      	mov	r6, r0
 8005e46:	f363 0007 	bfi	r0, r3, #0, #8
 8005e4a:	f101 0c06 	add.w	ip, r1, #6
 8005e4e:	4611      	mov	r1, r2
 8005e50:	f363 200f 	bfi	r0, r3, #8, #8
 8005e54:	ea4f 079c 	mov.w	r7, ip, lsr #2
 8005e58:	f363 4017 	bfi	r0, r3, #16, #8
 8005e5c:	f363 601f 	bfi	r0, r3, #24, #8
 8005e60:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 8005e62:	6008      	str	r0, [r1, #0]
 8005e64:	6048      	str	r0, [r1, #4]
 8005e66:	310c      	adds	r1, #12
 8005e68:	42b7      	cmp	r7, r6
 8005e6a:	f841 0c04 	str.w	r0, [r1, #-4]
 8005e6e:	d8f7      	bhi.n	8005e60 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xac>
 8005e70:	f02c 0003 	bic.w	r0, ip, #3
 8005e74:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8005e78:	4560      	cmp	r0, ip
 8005e7a:	b287      	uxth	r7, r0
 8005e7c:	eb02 0106 	add.w	r1, r2, r6
 8005e80:	d010      	beq.n	8005ea4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 8005e82:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 8005e84:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 8005e86:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 8005e88:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 8005e8a:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8005e8c:	4572      	cmp	r2, lr
 8005e8e:	dc09      	bgt.n	8005ea4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
 8005e90:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 8005e92:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8005e94:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 8005e96:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8005e98:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 8005e9a:	4596      	cmp	lr, r2
 8005e9c:	db02      	blt.n	8005ea4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 8005e9e:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8005ea0:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8005ea2:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	d059      	beq.n	8005f5c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
 8005ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005eaa:	1e63      	subs	r3, r4, #1
 8005eac:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8005eae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	b2b6      	uxth	r6, r6
 8005eb6:	3214      	adds	r2, #20
 8005eb8:	3301      	adds	r3, #1
 8005eba:	1c77      	adds	r7, r6, #1
 8005ebc:	9211      	str	r2, [sp, #68]	; 0x44
 8005ebe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ec0:	3607      	adds	r6, #7
 8005ec2:	fb07 f804 	mul.w	r8, r7, r4
 8005ec6:	18d3      	adds	r3, r2, r3
 8005ec8:	960d      	str	r6, [sp, #52]	; 0x34
 8005eca:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8005ecc:	b1f5      	cbz	r5, 8005f0c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 8005ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed0:	b1e3      	cbz	r3, 8005f0c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 8005ed2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ed4:	f04f 0e00 	mov.w	lr, #0
 8005ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005eda:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005ede:	eb03 0c02 	add.w	ip, r3, r2
 8005ee2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005ee4:	eb07 000c 	add.w	r0, r7, ip
 8005ee8:	4662      	mov	r2, ip
 8005eea:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 8005eec:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8005ef0:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8005ef2:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8005ef6:	4282      	cmp	r2, r0
 8005ef8:	d1f8      	bne.n	8005eec <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x138>
 8005efa:	f10e 0e01 	add.w	lr, lr, #1
 8005efe:	44c1      	add	r9, r8
 8005f00:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 8005f02:	fa1f f38e 	uxth.w	r3, lr
 8005f06:	429d      	cmp	r5, r3
 8005f08:	d8ec      	bhi.n	8005ee4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x130>
 8005f0a:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005f0c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8005f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f10:	9604      	str	r6, [sp, #16]
 8005f12:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8005f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f16:	9603      	str	r6, [sp, #12]
 8005f18:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8005f1a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005f1c:	9601      	str	r6, [sp, #4]
 8005f1e:	f106 0904 	add.w	r9, r6, #4
 8005f22:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8005f24:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005f26:	9302      	str	r3, [sp, #8]
        input++;
 8005f28:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005f2a:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 8005f2c:	3631      	adds	r6, #49	; 0x31
        input++;
 8005f2e:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005f30:	465b      	mov	r3, fp
 8005f32:	9207      	str	r2, [sp, #28]
 8005f34:	4652      	mov	r2, sl
 8005f36:	9106      	str	r1, [sp, #24]
 8005f38:	f10b 0b04 	add.w	fp, fp, #4
 8005f3c:	9005      	str	r0, [sp, #20]
 8005f3e:	f10a 0a04 	add.w	sl, sl, #4
 8005f42:	9408      	str	r4, [sp, #32]
 8005f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f46:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 8005f48:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005f4a:	f7ff fb71 	bl	8005630 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 8005f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d002      	beq.n	8005f5c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005f56:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8005f5a:	e7b7      	b.n	8005ecc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x118>
}
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	b013      	add	sp, #76	; 0x4c
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8005f66:	2100      	movs	r1, #0
 8005f68:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 8005f6a:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 8005f6e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8005f72:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8005f74:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8005f76:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 8005f7a:	4571      	cmp	r1, lr
 8005f7c:	ddf4      	ble.n	8005f68 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b4>
 8005f7e:	e791      	b.n	8005ea4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>

08005f80 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	b09f      	sub	sp, #124	; 0x7c
 8005f86:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8005f8a:	9013      	str	r0, [sp, #76]	; 0x4c
 8005f8c:	4603      	mov	r3, r0
{
 8005f8e:	f8bd 00bc 	ldrh.w	r0, [sp, #188]	; 0xbc
 8005f92:	9114      	str	r1, [sp, #80]	; 0x50
 8005f94:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
 8005f98:	9005      	str	r0, [sp, #20]
    for (i = 0; i < output_y; i++) {
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 83c5 	beq.w	800672a <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7aa>
 8005fa0:	f000 0301 	and.w	r3, r0, #1
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	1d86      	adds	r6, r0, #6
        for (j = 0; j < output_x / 2; j++) {
 8005fa8:	0849      	lsrs	r1, r1, #1
 8005faa:	f1c3 0306 	rsb	r3, r3, #6
 8005fae:	1e62      	subs	r2, r4, #1
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	9116      	str	r1, [sp, #88]	; 0x58
 8005fb4:	4433      	add	r3, r6
 8005fb6:	4401      	add	r1, r0
 8005fb8:	00ad      	lsls	r5, r5, #2
 8005fba:	2700      	movs	r7, #0
 8005fbc:	931b      	str	r3, [sp, #108]	; 0x6c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	951a      	str	r5, [sp, #104]	; 0x68
 8005fc2:	931d      	str	r3, [sp, #116]	; 0x74
 8005fc4:	f004 0301 	and.w	r3, r4, #1
 8005fc8:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8005fca:	9315      	str	r3, [sp, #84]	; 0x54
 8005fcc:	462b      	mov	r3, r5
 8005fce:	fb05 f202 	mul.w	r2, r5, r2
 8005fd2:	9612      	str	r6, [sp, #72]	; 0x48
 8005fd4:	fb03 f304 	mul.w	r3, r3, r4
 8005fd8:	921c      	str	r2, [sp, #112]	; 0x70
 8005fda:	008a      	lsls	r2, r1, #2
 8005fdc:	9317      	str	r3, [sp, #92]	; 0x5c
 8005fde:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for (j = 0; j < output_x / 2; j++) {
 8005fe0:	9710      	str	r7, [sp, #64]	; 0x40
 8005fe2:	442b      	add	r3, r5
 8005fe4:	9218      	str	r2, [sp, #96]	; 0x60
    for (i = 0; i < output_y; i++) {
 8005fe6:	970f      	str	r7, [sp, #60]	; 0x3c
 8005fe8:	9311      	str	r3, [sp, #68]	; 0x44
 8005fea:	0043      	lsls	r3, r0, #1
 8005fec:	9307      	str	r3, [sp, #28]
 8005fee:	4243      	negs	r3, r0
 8005ff0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ff2:	0083      	lsls	r3, r0, #2
 8005ff4:	9319      	str	r3, [sp, #100]	; 0x64
 8005ff6:	006b      	lsls	r3, r5, #1
 8005ff8:	930d      	str	r3, [sp, #52]	; 0x34
        for (j = 0; j < output_x / 2; j++) {
 8005ffa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8221 	beq.w	8006444 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x4c4>
 8006002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006004:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8006006:	9905      	ldr	r1, [sp, #20]
 8006008:	fb02 3303 	mla	r3, r2, r3, r3
 800600c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800600e:	440a      	add	r2, r1
 8006010:	9907      	ldr	r1, [sp, #28]
 8006012:	930a      	str	r3, [sp, #40]	; 0x28
 8006014:	9202      	str	r2, [sp, #8]
 8006016:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8006018:	440a      	add	r2, r1
 800601a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800601c:	9203      	str	r2, [sp, #12]
 800601e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8006020:	440a      	add	r2, r1
 8006022:	9201      	str	r2, [sp, #4]
 8006024:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800602a:	9309      	str	r3, [sp, #36]	; 0x24
 800602c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800602e:	4413      	add	r3, r2
 8006030:	9308      	str	r3, [sp, #32]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8006032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006034:	9306      	str	r3, [sp, #24]
            q31_t sum0 = bias[0] + biasR[0];
 8006036:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800603a:	9c02      	ldr	r4, [sp, #8]
 800603c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800603e:	6808      	ldr	r0, [r1, #0]
 8006040:	9e05      	ldr	r6, [sp, #20]
 8006042:	1962      	adds	r2, r4, r5
 8006044:	9903      	ldr	r1, [sp, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	198f      	adds	r7, r1, r6
            sum0 += cols_8b[0]*ksrc[0];
 800604a:	f99b e000 	ldrsb.w	lr, [fp]
 800604e:	4621      	mov	r1, r4
            q31_t sum0 = bias[0] + biasR[0];
 8006050:	4403      	add	r3, r0
            sum0 += cols_8b[0]*ksrc[0];
 8006052:	5764      	ldrsb	r4, [r4, r5]
            sum0 += cols_8b[1]*ksrc[1];
 8006054:	f992 0001 	ldrsb.w	r0, [r2, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8006058:	fb14 340e 	smlabb	r4, r4, lr, r3
 800605c:	9704      	str	r7, [sp, #16]
            sum0 += cols_8b[1]*ksrc[1];
 800605e:	f99b 7001 	ldrsb.w	r7, [fp, #1]
            sum1 += cols_8b[2]*ksrc[0];
 8006062:	f992 c002 	ldrsb.w	ip, [r2, #2]
            sum0 += cols_8b[2]*ksrc[2];
 8006066:	f99b 6002 	ldrsb.w	r6, [fp, #2]
            sum0 += cols_8b[1]*ksrc[1];
 800606a:	fb10 4407 	smlabb	r4, r0, r7, r4
            sum1 += cols_8b[3]*ksrc[1];
 800606e:	f992 5003 	ldrsb.w	r5, [r2, #3]
            sum1 += cols_8b[2]*ksrc[0];
 8006072:	fb1e 330c 	smlabb	r3, lr, ip, r3
            sum0 += cols_8b[2]*ksrc[2];
 8006076:	fb1c 4406 	smlabb	r4, ip, r6, r4
            sum0 += cols_8b[3]*ksrc[3];
 800607a:	f99b e003 	ldrsb.w	lr, [fp, #3]
            sum1 += cols_8b[4]*ksrc[2];
 800607e:	f992 0004 	ldrsb.w	r0, [r2, #4]
            sum1 += cols_8b[3]*ksrc[1];
 8006082:	fb17 3305 	smlabb	r3, r7, r5, r3
            sum0 += cols_8b[3]*ksrc[3];
 8006086:	fb15 440e 	smlabb	r4, r5, lr, r4
            sum0 += cols_8b[4]*ksrc[4];
 800608a:	f99b 7004 	ldrsb.w	r7, [fp, #4]
            sum1 += cols_8b[5]*ksrc[3];
 800608e:	f992 5005 	ldrsb.w	r5, [r2, #5]
            sum1 += cols_8b[4]*ksrc[2];
 8006092:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[5]*ksrc[5];
 8006096:	f99b 8005 	ldrsb.w	r8, [fp, #5]
            sum0 += cols_8b[4]*ksrc[4];
 800609a:	fb10 4407 	smlabb	r4, r0, r7, r4
            sum1 += cols_8b[5]*ksrc[3];
 800609e:	fb1e 3305 	smlabb	r3, lr, r5, r3
            sum1 += cols_8b[6]*ksrc[4];
 80060a2:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum0 += cols_8b[5]*ksrc[5];
 80060a6:	fb15 4408 	smlabb	r4, r5, r8, r4
            sum0 += cols_8b[6]*ksrc[6];
 80060aa:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[4];
 80060ae:	fb17 3e00 	smlabb	lr, r7, r0, r3
            sum0 += cols_8b[0]*ksrc[7];
 80060b2:	f99b 6007 	ldrsb.w	r6, [fp, #7]
 80060b6:	f991 3006 	ldrsb.w	r3, [r1, #6]
            sum0 += cols_8b[6]*ksrc[6];
 80060ba:	fb10 4005 	smlabb	r0, r0, r5, r4
            sum0 += cols_8b[1]*ksrc[8];
 80060be:	f99b 4008 	ldrsb.w	r4, [fp, #8]
            sum0 += cols_8b[0]*ksrc[7];
 80060c2:	fb13 0006 	smlabb	r0, r3, r6, r0
            sum0 += cols_8b[1]*ksrc[8];
 80060c6:	f991 3007 	ldrsb.w	r3, [r1, #7]
            sum1 += cols_8b[2]*ksrc[7];
 80060ca:	f991 7008 	ldrsb.w	r7, [r1, #8]
            sum0 += cols_8b[1]*ksrc[8];
 80060ce:	fb13 0004 	smlabb	r0, r3, r4, r0
            sum1 += cols_8b[7]*ksrc[5];
 80060d2:	f992 3007 	ldrsb.w	r3, [r2, #7]
            sum1 += cols_8b[3]*ksrc[8];
 80060d6:	f991 c009 	ldrsb.w	ip, [r1, #9]
            sum0 += cols_8b[2]*ksrc[9];
 80060da:	f99b 9009 	ldrsb.w	r9, [fp, #9]
            sum1 += cols_8b[7]*ksrc[5];
 80060de:	fb18 e303 	smlabb	r3, r8, r3, lr
            sum0 += cols_8b[3]*ksrc[10];
 80060e2:	f99b e00a 	ldrsb.w	lr, [fp, #10]
            sum1 += cols_8b[8]*ksrc[6];
 80060e6:	f992 2008 	ldrsb.w	r2, [r2, #8]
            sum0 += cols_8b[2]*ksrc[9];
 80060ea:	fb17 0009 	smlabb	r0, r7, r9, r0
            sum1 += cols_8b[4]*ksrc[9];
 80060ee:	f991 800a 	ldrsb.w	r8, [r1, #10]
            sum1 += cols_8b[8]*ksrc[6];
 80060f2:	fb15 3202 	smlabb	r2, r5, r2, r3
            sum0 += cols_8b[4]*ksrc[11];
 80060f6:	f99b 300b 	ldrsb.w	r3, [fp, #11]
            sum0 += cols_8b[3]*ksrc[10];
 80060fa:	fb1c 000e 	smlabb	r0, ip, lr, r0
            sum1 += cols_8b[5]*ksrc[10];
 80060fe:	f991 500b 	ldrsb.w	r5, [r1, #11]
            sum1 += cols_8b[2]*ksrc[7];
 8006102:	fb16 2607 	smlabb	r6, r6, r7, r2
            sum0 += cols_8b[5]*ksrc[12];
 8006106:	f99b 200c 	ldrsb.w	r2, [fp, #12]
            sum0 += cols_8b[4]*ksrc[11];
 800610a:	fb18 0003 	smlabb	r0, r8, r3, r0
            sum1 += cols_8b[6]*ksrc[11];
 800610e:	f991 700c 	ldrsb.w	r7, [r1, #12]
            sum1 += cols_8b[3]*ksrc[8];
 8006112:	fb14 640c 	smlabb	r4, r4, ip, r6
            sum1 += cols_8b[7]*ksrc[12];
 8006116:	f991 c00d 	ldrsb.w	ip, [r1, #13]
            sum0 += cols_8b[5]*ksrc[12];
 800611a:	fb15 0002 	smlabb	r0, r5, r2, r0
            sum0 += cols_8b[0]*ksrc[14];
 800611e:	9903      	ldr	r1, [sp, #12]
            sum0 += cols_8b[6]*ksrc[13];
 8006120:	f99b 600d 	ldrsb.w	r6, [fp, #13]
            sum1 += cols_8b[4]*ksrc[9];
 8006124:	fb19 4808 	smlabb	r8, r9, r8, r4
            sum0 += cols_8b[0]*ksrc[14];
 8006128:	f99b 900e 	ldrsb.w	r9, [fp, #14]
            sum0 += cols_8b[6]*ksrc[13];
 800612c:	fb17 0a06 	smlabb	sl, r7, r6, r0
            sum0 += cols_8b[0]*ksrc[14];
 8006130:	f991 000c 	ldrsb.w	r0, [r1, #12]
            sum1 += cols_8b[5]*ksrc[10];
 8006134:	fb1e 8805 	smlabb	r8, lr, r5, r8
            sum1 += cols_8b[8]*ksrc[13];
 8006138:	9c02      	ldr	r4, [sp, #8]
            sum0 += cols_8b[1]*ksrc[15];
 800613a:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum0 += cols_8b[0]*ksrc[14];
 800613e:	fb10 a009 	smlabb	r0, r0, r9, sl
            sum0 += cols_8b[1]*ksrc[15];
 8006142:	f991 e00d 	ldrsb.w	lr, [r1, #13]
            sum1 += cols_8b[6]*ksrc[11];
 8006146:	fb13 8307 	smlabb	r3, r3, r7, r8
            sum1 += cols_8b[2]*ksrc[14];
 800614a:	f991 700e 	ldrsb.w	r7, [r1, #14]
 800614e:	3404      	adds	r4, #4
            sum1 += cols_8b[3]*ksrc[15];
 8006150:	9903      	ldr	r1, [sp, #12]
            sum0 += cols_8b[1]*ksrc[15];
 8006152:	fb1e 0005 	smlabb	r0, lr, r5, r0
            sum1 += cols_8b[7]*ksrc[12];
 8006156:	fb12 320c 	smlabb	r2, r2, ip, r3
            sum0 += cols_8b[2]*ksrc[16];
 800615a:	f99b e010 	ldrsb.w	lr, [fp, #16]
            sum1 += cols_8b[8]*ksrc[13];
 800615e:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8006162:	3104      	adds	r1, #4
            sum1 += cols_8b[3]*ksrc[15];
 8006164:	f991 800b 	ldrsb.w	r8, [r1, #11]
            sum0 += cols_8b[2]*ksrc[16];
 8006168:	fb17 000e 	smlabb	r0, r7, lr, r0
            sum0 += cols_8b[3]*ksrc[17];
 800616c:	f99b c011 	ldrsb.w	ip, [fp, #17]
            sum1 += cols_8b[8]*ksrc[13];
 8006170:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum1 += cols_8b[4]*ksrc[16];
 8006174:	f991 300c 	ldrsb.w	r3, [r1, #12]
            sum0 += cols_8b[4]*ksrc[18];
 8006178:	f99b 6012 	ldrsb.w	r6, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 800617c:	fb18 000c 	smlabb	r0, r8, ip, r0
            sum1 += cols_8b[2]*ksrc[14];
 8006180:	fb19 2207 	smlabb	r2, r9, r7, r2
 8006184:	9402      	str	r4, [sp, #8]
            sum1 += cols_8b[5]*ksrc[17];
 8006186:	f991 700d 	ldrsb.w	r7, [r1, #13]
            sum0 += cols_8b[4]*ksrc[18];
 800618a:	fb13 0006 	smlabb	r0, r3, r6, r0
            sum0 += cols_8b[5]*ksrc[19];
 800618e:	f99b 4013 	ldrsb.w	r4, [fp, #19]
            sum1 += cols_8b[3]*ksrc[15];
 8006192:	fb15 2208 	smlabb	r2, r5, r8, r2
            sum0 += cols_8b[6]*ksrc[20];
 8006196:	f99b a014 	ldrsb.w	sl, [fp, #20]
            sum1 += cols_8b[6]*ksrc[18];
 800619a:	f991 500e 	ldrsb.w	r5, [r1, #14]
            sum0 += cols_8b[5]*ksrc[19];
 800619e:	fb17 0804 	smlabb	r8, r7, r4, r0
            sum1 += cols_8b[4]*ksrc[16];
 80061a2:	fb1e 2303 	smlabb	r3, lr, r3, r2
            sum0 += cols_8b[0]*ksrc[21];
 80061a6:	9804      	ldr	r0, [sp, #16]
            sum0 += cols_8b[6]*ksrc[20];
 80061a8:	fb15 820a 	smlabb	r2, r5, sl, r8
            sum0 += cols_8b[0]*ksrc[21];
 80061ac:	f99b e015 	ldrsb.w	lr, [fp, #21]
 80061b0:	f990 9012 	ldrsb.w	r9, [r0, #18]
            sum1 += cols_8b[5]*ksrc[17];
 80061b4:	fb1c 3307 	smlabb	r3, ip, r7, r3
            sum0 += cols_8b[1]*ksrc[22];
 80061b8:	f990 c013 	ldrsb.w	ip, [r0, #19]
 80061bc:	f99b 7016 	ldrsb.w	r7, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 80061c0:	fb19 220e 	smlabb	r2, r9, lr, r2
            sum1 += cols_8b[2]*ksrc[21];
 80061c4:	f990 8014 	ldrsb.w	r8, [r0, #20]
            sum1 += cols_8b[6]*ksrc[18];
 80061c8:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[7]*ksrc[19];
 80061cc:	f991 900f 	ldrsb.w	r9, [r1, #15]
            sum0 += cols_8b[1]*ksrc[22];
 80061d0:	fb1c 2207 	smlabb	r2, ip, r7, r2
            sum0 += cols_8b[2]*ksrc[23];
 80061d4:	f99b 6017 	ldrsb.w	r6, [fp, #23]
            sum1 += cols_8b[7]*ksrc[19];
 80061d8:	fb14 3309 	smlabb	r3, r4, r9, r3
            sum1 += cols_8b[8]*ksrc[20];
 80061dc:	f991 4010 	ldrsb.w	r4, [r1, #16]
            sum1 += cols_8b[3]*ksrc[22];
 80061e0:	f990 c015 	ldrsb.w	ip, [r0, #21]
            sum0 += cols_8b[2]*ksrc[23];
 80061e4:	fb18 2206 	smlabb	r2, r8, r6, r2
            sum1 += cols_8b[8]*ksrc[20];
 80061e8:	fb1a 3304 	smlabb	r3, sl, r4, r3
            sum0 += cols_8b[3]*ksrc[24];
 80061ec:	f99b 5018 	ldrsb.w	r5, [fp, #24]
            sum1 += cols_8b[4]*ksrc[23];
 80061f0:	f990 9016 	ldrsb.w	r9, [r0, #22]
            sum1 += cols_8b[2]*ksrc[21];
 80061f4:	fb1e 3308 	smlabb	r3, lr, r8, r3
            sum0 += cols_8b[4]*ksrc[25];
 80061f8:	f99b a019 	ldrsb.w	sl, [fp, #25]
            sum0 += cols_8b[3]*ksrc[24];
 80061fc:	fb1c 2205 	smlabb	r2, ip, r5, r2
            sum0 += cols_8b[5]*ksrc[26];
 8006200:	f99b 801a 	ldrsb.w	r8, [fp, #26]
            sum1 += cols_8b[3]*ksrc[22];
 8006204:	fb17 330c 	smlabb	r3, r7, ip, r3
 8006208:	9103      	str	r1, [sp, #12]
            sum0 += cols_8b[4]*ksrc[25];
 800620a:	fb19 220a 	smlabb	r2, r9, sl, r2
            sum1 += cols_8b[4]*ksrc[23];
 800620e:	4601      	mov	r1, r0
 8006210:	fb16 3609 	smlabb	r6, r6, r9, r3
            sum1 += cols_8b[5]*ksrc[24];
 8006214:	f990 0017 	ldrsb.w	r0, [r0, #23]
            sum1 += cols_8b[6]*ksrc[25];
 8006218:	f991 4018 	ldrsb.w	r4, [r1, #24]
            sum0 += cols_8b[6]*ksrc[27];
 800621c:	f99b e01b 	ldrsb.w	lr, [fp, #27]
            sum1 += cols_8b[5]*ksrc[24];
 8006220:	fb15 6600 	smlabb	r6, r5, r0, r6
            sum0 += cols_8b[5]*ksrc[26];
 8006224:	fb10 2208 	smlabb	r2, r0, r8, r2
            sum0 += cols_8b[0]*ksrc[28];
 8006228:	9b01      	ldr	r3, [sp, #4]
            sum0 += cols_8b[1]*ksrc[29];
 800622a:	9d01      	ldr	r5, [sp, #4]
            sum1 += cols_8b[7]*ksrc[26];
 800622c:	f991 c019 	ldrsb.w	ip, [r1, #25]
            sum0 += cols_8b[6]*ksrc[27];
 8006230:	fb14 220e 	smlabb	r2, r4, lr, r2
            sum1 += cols_8b[8]*ksrc[27];
 8006234:	f991 701a 	ldrsb.w	r7, [r1, #26]
            sum1 += cols_8b[6]*ksrc[25];
 8006238:	fb1a 6404 	smlabb	r4, sl, r4, r6
            sum0 += cols_8b[0]*ksrc[28];
 800623c:	f99b 101c 	ldrsb.w	r1, [fp, #28]
 8006240:	f993 3018 	ldrsb.w	r3, [r3, #24]
            sum1 += cols_8b[7]*ksrc[26];
 8006244:	fb18 440c 	smlabb	r4, r8, ip, r4
            sum0 += cols_8b[1]*ksrc[29];
 8006248:	f995 9019 	ldrsb.w	r9, [r5, #25]
            sum0 += cols_8b[0]*ksrc[28];
 800624c:	fb13 2301 	smlabb	r3, r3, r1, r2
            sum0 += cols_8b[1]*ksrc[29];
 8006250:	f99b 201d 	ldrsb.w	r2, [fp, #29]
            sum1 += cols_8b[2]*ksrc[28];
 8006254:	f995 a01a 	ldrsb.w	sl, [r5, #26]
            sum1 += cols_8b[8]*ksrc[27];
 8006258:	fb1e 4407 	smlabb	r4, lr, r7, r4
            sum0 += cols_8b[1]*ksrc[29];
 800625c:	fb19 3302 	smlabb	r3, r9, r2, r3
            sum0 += cols_8b[2]*ksrc[30];
 8006260:	f99b 601e 	ldrsb.w	r6, [fp, #30]
            sum1 += cols_8b[3]*ksrc[29];
 8006264:	f995 001b 	ldrsb.w	r0, [r5, #27]
            sum1 += cols_8b[2]*ksrc[28];
 8006268:	fb11 440a 	smlabb	r4, r1, sl, r4
            sum0 += cols_8b[2]*ksrc[30];
 800626c:	fb1a 3806 	smlabb	r8, sl, r6, r3
            sum0 += cols_8b[3]*ksrc[31];
 8006270:	f99b 301f 	ldrsb.w	r3, [fp, #31]
            sum1 += cols_8b[4]*ksrc[30];
 8006274:	462f      	mov	r7, r5
            sum0 += cols_8b[4]*ksrc[32];
 8006276:	f99b 9020 	ldrsb.w	r9, [fp, #32]
            sum1 += cols_8b[4]*ksrc[30];
 800627a:	f995 501c 	ldrsb.w	r5, [r5, #28]
            sum0 += cols_8b[3]*ksrc[31];
 800627e:	fb10 8803 	smlabb	r8, r0, r3, r8
            sum1 += cols_8b[3]*ksrc[29];
 8006282:	fb12 4400 	smlabb	r4, r2, r0, r4
            sum1 += cols_8b[5]*ksrc[31];
 8006286:	f997 a01d 	ldrsb.w	sl, [r7, #29]
            sum0 += cols_8b[5]*ksrc[33];
 800628a:	f99b e021 	ldrsb.w	lr, [fp, #33]	; 0x21
            sum0 += cols_8b[4]*ksrc[32];
 800628e:	fb15 8809 	smlabb	r8, r5, r9, r8
            sum1 += cols_8b[4]*ksrc[30];
 8006292:	fb16 4405 	smlabb	r4, r6, r5, r4
            sum0 += cols_8b[6]*ksrc[34];
 8006296:	f99b c022 	ldrsb.w	ip, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 800629a:	fb1a 880e 	smlabb	r8, sl, lr, r8
            sum1 += cols_8b[5]*ksrc[31];
 800629e:	4639      	mov	r1, r7
 80062a0:	fb13 440a 	smlabb	r4, r3, sl, r4
            sum1 += cols_8b[6]*ksrc[32];
 80062a4:	f997 701e 	ldrsb.w	r7, [r7, #30]
 80062a8:	9a05      	ldr	r2, [sp, #20]
            sum0 += cols_8b[6]*ksrc[34];
 80062aa:	fb17 880c 	smlabb	r8, r7, ip, r8
            sum0 += cols_8b[0]*ksrc[35];
 80062ae:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum1 += cols_8b[6]*ksrc[32];
 80062b2:	fb19 4407 	smlabb	r4, r9, r7, r4
            sum1 += cols_8b[7]*ksrc[33];
 80062b6:	9f01      	ldr	r7, [sp, #4]
 80062b8:	4411      	add	r1, r2
            sum0 += cols_8b[1]*ksrc[36];
 80062ba:	f99b 5024 	ldrsb.w	r5, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[33];
 80062be:	f997 701f 	ldrsb.w	r7, [r7, #31]
            sum0 += cols_8b[0]*ksrc[35];
 80062c2:	f991 201e 	ldrsb.w	r2, [r1, #30]
            sum1 += cols_8b[7]*ksrc[33];
 80062c6:	fb1e 4707 	smlabb	r7, lr, r7, r4
            sum1 += cols_8b[8]*ksrc[34];
 80062ca:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[0]*ksrc[35];
 80062cc:	fb12 8200 	smlabb	r2, r2, r0, r8
            sum0 += cols_8b[1]*ksrc[36];
 80062d0:	f991 801f 	ldrsb.w	r8, [r1, #31]
            sum1 += cols_8b[8]*ksrc[34];
 80062d4:	f994 4020 	ldrsb.w	r4, [r4, #32]
            sum1 += cols_8b[2]*ksrc[35];
 80062d8:	f991 6020 	ldrsb.w	r6, [r1, #32]
            sum0 += cols_8b[1]*ksrc[36];
 80062dc:	fb18 2205 	smlabb	r2, r8, r5, r2
            sum0 += cols_8b[2]*ksrc[37];
 80062e0:	f99b 3025 	ldrsb.w	r3, [fp, #37]	; 0x25
            sum1 += cols_8b[8]*ksrc[34];
 80062e4:	fb1c 7404 	smlabb	r4, ip, r4, r7
            sum1 += cols_8b[3]*ksrc[36];
 80062e8:	f991 9021 	ldrsb.w	r9, [r1, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 80062ec:	f99b 8026 	ldrsb.w	r8, [fp, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[37];
 80062f0:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum1 += cols_8b[2]*ksrc[35];
 80062f4:	fb10 4406 	smlabb	r4, r0, r6, r4
            sum1 += cols_8b[4]*ksrc[37];
 80062f8:	f991 a022 	ldrsb.w	sl, [r1, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 80062fc:	f99b c027 	ldrsb.w	ip, [fp, #39]	; 0x27
            sum0 += cols_8b[3]*ksrc[38];
 8006300:	fb19 2208 	smlabb	r2, r9, r8, r2
            sum1 += cols_8b[3]*ksrc[36];
 8006304:	fb15 4009 	smlabb	r0, r5, r9, r4
            sum1 += cols_8b[5]*ksrc[38];
 8006308:	f991 e023 	ldrsb.w	lr, [r1, #35]	; 0x23
            sum0 += cols_8b[4]*ksrc[39];
 800630c:	fb1a 220c 	smlabb	r2, sl, ip, r2
            sum0 += cols_8b[5]*ksrc[40];
 8006310:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum1 += cols_8b[4]*ksrc[37];
 8006314:	fb13 030a 	smlabb	r3, r3, sl, r0
 8006318:	9c01      	ldr	r4, [sp, #4]
 800631a:	9d07      	ldr	r5, [sp, #28]
            sum0 += cols_8b[5]*ksrc[40];
 800631c:	fb1e 2206 	smlabb	r2, lr, r6, r2
            sum1 += cols_8b[6]*ksrc[39];
 8006320:	f991 7024 	ldrsb.w	r7, [r1, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[38];
 8006324:	fb18 3e0e 	smlabb	lr, r8, lr, r3
 8006328:	442c      	add	r4, r5
            sum0 = (float) sum0 * *scales;
 800632a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
            sum0 += cols_8b[6]*ksrc[41];
 800632c:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            sum1 += cols_8b[7]*ksrc[40];
 8006330:	f991 9025 	ldrsb.w	r9, [r1, #37]	; 0x25
            sum1 += cols_8b[8]*ksrc[41];
 8006334:	f991 0026 	ldrsb.w	r0, [r1, #38]	; 0x26
            sum0 += cols_8b[6]*ksrc[41];
 8006338:	fb17 2105 	smlabb	r1, r7, r5, r2
            sum0 += cols_8b[0]*ksrc[42];
 800633c:	f99b a02a 	ldrsb.w	sl, [fp, #42]	; 0x2a
            sum0 = (float) sum0 * *scales;
 8006340:	ed93 7a00 	vldr	s14, [r3]
            sum0 += cols_8b[0]*ksrc[42];
 8006344:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
 8006348:	9b01      	ldr	r3, [sp, #4]
 800634a:	fb12 120a 	smlabb	r2, r2, sl, r1
            sum0 += cols_8b[1]*ksrc[43];
 800634e:	f99b 802b 	ldrsb.w	r8, [fp, #43]	; 0x2b
 8006352:	f994 1025 	ldrsb.w	r1, [r4, #37]	; 0x25
 8006356:	3304      	adds	r3, #4
 8006358:	fb11 2208 	smlabb	r2, r1, r8, r2
 800635c:	9301      	str	r3, [sp, #4]
            sum1 += cols_8b[6]*ksrc[39];
 800635e:	fb1c e307 	smlabb	r3, ip, r7, lr
            sum1 += cols_8b[2]*ksrc[42];
 8006362:	f994 c026 	ldrsb.w	ip, [r4, #38]	; 0x26
            sum0 += cols_8b[2]*ksrc[44];
 8006366:	f99b e02c 	ldrsb.w	lr, [fp, #44]	; 0x2c
            sum1 += cols_8b[7]*ksrc[40];
 800636a:	fb16 3309 	smlabb	r3, r6, r9, r3
            sum1 += cols_8b[3]*ksrc[43];
 800636e:	f994 6027 	ldrsb.w	r6, [r4, #39]	; 0x27
            sum0 += cols_8b[2]*ksrc[44];
 8006372:	fb1c 220e 	smlabb	r2, ip, lr, r2
            sum0 += cols_8b[3]*ksrc[45];
 8006376:	f99b 702d 	ldrsb.w	r7, [fp, #45]	; 0x2d
            sum1 += cols_8b[4]*ksrc[44];
 800637a:	f994 9028 	ldrsb.w	r9, [r4, #40]	; 0x28
            sum1 += cols_8b[8]*ksrc[41];
 800637e:	fb15 3300 	smlabb	r3, r5, r0, r3
            sum0 += cols_8b[4]*ksrc[46];
 8006382:	f99b 102e 	ldrsb.w	r1, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 8006386:	fb16 2207 	smlabb	r2, r6, r7, r2
            sum1 += cols_8b[2]*ksrc[42];
 800638a:	fb1a 330c 	smlabb	r3, sl, ip, r3
            sum1 += cols_8b[5]*ksrc[45];
 800638e:	f994 a029 	ldrsb.w	sl, [r4, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[47];
 8006392:	f99b c02f 	ldrsb.w	ip, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 8006396:	fb19 2201 	smlabb	r2, r9, r1, r2
            sum1 += cols_8b[6]*ksrc[46];
 800639a:	f994 502a 	ldrsb.w	r5, [r4, #42]	; 0x2a
            sum1 += cols_8b[3]*ksrc[43];
 800639e:	fb18 3806 	smlabb	r8, r8, r6, r3
            sum0 += cols_8b[5]*ksrc[47];
 80063a2:	fb1a 230c 	smlabb	r3, sl, ip, r2
            sum0 += cols_8b[6]*ksrc[48];
 80063a6:	f99b 2030 	ldrsb.w	r2, [fp, #48]	; 0x30
            sum1 += cols_8b[4]*ksrc[44];
 80063aa:	fb1e 8809 	smlabb	r8, lr, r9, r8
            sum0 += cols_8b[6]*ksrc[48];
 80063ae:	fb15 3002 	smlabb	r0, r5, r2, r3
            sum1 += cols_8b[5]*ksrc[45];
 80063b2:	fb17 880a 	smlabb	r8, r7, sl, r8
            sum0 += cols_8b[6]*ksrc[48];
 80063b6:	ee07 0a90 	vmov	s15, r0
            sum1 += cols_8b[7]*ksrc[47];
 80063ba:	f994 002b 	ldrsb.w	r0, [r4, #43]	; 0x2b
            sum1 += cols_8b[6]*ksrc[46];
 80063be:	fb11 8805 	smlabb	r8, r1, r5, r8
            sum1 += cols_8b[8]*ksrc[48];
 80063c2:	f994 402c 	ldrsb.w	r4, [r4, #44]	; 0x2c
            sum0 = (float) sum0 * *scales;
 80063c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80063ca:	9906      	ldr	r1, [sp, #24]
            sum1 += cols_8b[7]*ksrc[47];
 80063cc:	fb1c 8800 	smlabb	r8, ip, r0, r8
            sum0 += output_offset;
 80063d0:	982b      	ldr	r0, [sp, #172]	; 0xac
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80063d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            sum0 = (float) sum0 * *scales;
 80063d4:	ee67 7a87 	vmul.f32	s15, s15, s14
            sum1 += cols_8b[8]*ksrc[48];
 80063d8:	fb12 8804 	smlabb	r8, r2, r4, r8
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80063dc:	1b4b      	subs	r3, r1, r5
            sum0 = (float) sum0 * *scales;
 80063de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063e2:	ee17 2a90 	vmov	r2, s15
            sum1 = (float) sum1 * *scales;
 80063e6:	ee07 8a90 	vmov	s15, r8
            sum0 += output_offset;
 80063ea:	4402      	add	r2, r0
            sum0 = MAX(sum0, activation_min);
 80063ec:	982c      	ldr	r0, [sp, #176]	; 0xb0
            sum1 = (float) sum1 * *scales;
 80063ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = MAX(sum0, activation_min);
 80063f2:	4282      	cmp	r2, r0
 80063f4:	bfb8      	it	lt
 80063f6:	4602      	movlt	r2, r0
            sum0 = MIN(sum0, activation_max);
 80063f8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80063fa:	4282      	cmp	r2, r0
 80063fc:	bfa8      	it	ge
 80063fe:	4602      	movge	r2, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8006400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006402:	541a      	strb	r2, [r3, r0]
            sum1 = (float) sum1 * *scales;
 8006404:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006406:	ed92 7a00 	vldr	s14, [r2]
            sum1 += output_offset;
 800640a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            sum1 = (float) sum1 * *scales;
 800640c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006414:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8006418:	4413      	add	r3, r2
            sum1 = MAX(sum1, activation_min);
 800641a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800641c:	4293      	cmp	r3, r2
 800641e:	bfb8      	it	lt
 8006420:	4613      	movlt	r3, r2
            sum1 = MIN(sum1, activation_max);
 8006422:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8006424:	4293      	cmp	r3, r2
 8006426:	bfa8      	it	ge
 8006428:	4613      	movge	r3, r2
 800642a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800642c:	188a      	adds	r2, r1, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800642e:	700b      	strb	r3, [r1, #0]
        for (j = 0; j < output_x / 2; j++) {
 8006430:	9b01      	ldr	r3, [sp, #4]
 8006432:	9206      	str	r2, [sp, #24]
 8006434:	9a08      	ldr	r2, [sp, #32]
 8006436:	429a      	cmp	r2, r3
 8006438:	f47f adfd 	bne.w	8006036 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0xb6>
 800643c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800643e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006440:	4413      	add	r3, r2
 8006442:	932e      	str	r3, [sp, #184]	; 0xb8
 8006444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        if (output_x & 1) {
 8006446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006448:	3301      	adds	r3, #1
 800644a:	930f      	str	r3, [sp, #60]	; 0x3c
 800644c:	2a00      	cmp	r2, #0
 800644e:	f000 816f 	beq.w	8006730 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7b0>
            q31_t sum = bias[0] + biasR[0];
 8006452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            cols_8b += column_x + 6;
 8006454:	9e12      	ldr	r6, [sp, #72]	; 0x48
            q31_t sum = bias[0] + biasR[0];
 8006456:	6813      	ldr	r3, [r2, #0]
 8006458:	9910      	ldr	r1, [sp, #64]	; 0x40
            sum += cols_8b[0]*ksrc[7];
 800645a:	4637      	mov	r7, r6
            cols_8b += column_x + 6;
 800645c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800645e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8006460:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 8006462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006464:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8006466:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	9110      	str	r1, [sp, #64]	; 0x40
            sum += cols_8b[0]*ksrc[0];
 800646e:	992e      	ldr	r1, [sp, #184]	; 0xb8
            q31_t sum = bias[0] + biasR[0];
 8006470:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8006472:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[0]*ksrc[0];
 8006474:	f991 4000 	ldrsb.w	r4, [r1]
            cols_8b += column_x + 6;
 8006478:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 800647a:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 800647e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8006482:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 8006486:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[1]*ksrc[1];
 8006488:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 800648c:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 8006490:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 8006494:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[2]*ksrc[2];
 8006496:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 800649a:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 800649e:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 80064a2:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[3]*ksrc[3];
 80064a4:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 80064a8:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 80064ac:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 80064b0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[4]*ksrc[4];
 80064b2:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 80064b6:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 80064ba:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 80064be:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[5]*ksrc[5];
 80064c0:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[6];
 80064c4:	f99b 5006 	ldrsb.w	r5, [fp, #6]
 80064c8:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 80064cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
            sum += cols_8b[6]*ksrc[6];
 80064ce:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 80064d2:	5792      	ldrsb	r2, [r2, r6]
 80064d4:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 80064d8:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 80064dc:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 80064e0:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 80064e4:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 80064e8:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 80064ec:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 80064f0:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 80064f4:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 80064f8:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 80064fc:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 8006500:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 8006504:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 8006508:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 800650c:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8006510:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 8006514:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 8006518:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 800651c:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 8006520:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
            sum += cols_8b[6]*ksrc[13];
 8006522:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 8006526:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 800652a:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 800652e:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 8006532:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 8006536:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 800653a:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 800653e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 8006542:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 8006546:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 800654a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 800654e:	f99b 5011 	ldrsb.w	r5, [fp, #17]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8006552:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
            sum += cols_8b[4]*ksrc[18];
 8006554:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[17];
 8006558:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 800655c:	f99b 5012 	ldrsb.w	r5, [fp, #18]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8006560:	46b4      	mov	ip, r6
            sum += cols_8b[5]*ksrc[19];
 8006562:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8006566:	9e1d      	ldr	r6, [sp, #116]	; 0x74
            sum += cols_8b[4]*ksrc[18];
 8006568:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 800656c:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 8006570:	f991 4006 	ldrsb.w	r4, [r1, #6]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8006574:	44b4      	add	ip, r6
            sum += cols_8b[5]*ksrc[19];
 8006576:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[6]*ksrc[20];
 800657a:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 800657e:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 8006580:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 8006584:	fb14 3506 	smlabb	r5, r4, r6, r3
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8006588:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
            sum += cols_8b[0]*ksrc[21];
 800658c:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 8006590:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 8006594:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 8006598:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 800659c:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 80065a0:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 80065a4:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 80065a8:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 80065ac:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 80065b0:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 80065b4:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 80065b8:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 80065bc:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 80065c0:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 80065c4:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 80065c8:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 80065cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
            sum += cols_8b[6]*ksrc[27];
 80065ce:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 80065d2:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 80065d6:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 80065da:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 80065de:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 80065e0:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 80065e4:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 80065e8:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 80065ec:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 80065f0:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 80065f4:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 80065f8:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 80065fc:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 8006600:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 8006604:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 8006608:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 800660c:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 8006610:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 8006614:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 8006618:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 800661c:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 8006620:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 8006624:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 8006628:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 800662c:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 8006630:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 8006632:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 8006636:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 800663a:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 800663e:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 8006642:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 8006646:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 800664a:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 800664e:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 8006652:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 8006656:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 800665a:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 800665e:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8006662:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8006666:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 800666a:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 800666e:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8006672:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 8006676:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 800667a:	9f12      	ldr	r7, [sp, #72]	; 0x48
            sum += cols_8b[5]*ksrc[40];
 800667c:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8006680:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8006684:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 8006688:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 800668a:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 800668e:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8006692:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8006696:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 800669a:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 800669e:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 80066a2:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 80066a6:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 80066aa:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 80066ae:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 80066b2:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 80066b6:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 80066ba:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 80066be:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 80066c2:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 80066c6:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 80066ca:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 80066ce:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 80066d2:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 80066d6:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 80066da:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 80066de:	9829      	ldr	r0, [sp, #164]	; 0xa4
            sum += cols_8b[6]*ksrc[48];
 80066e0:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80066e4:	9e11      	ldr	r6, [sp, #68]	; 0x44
            sum = (float) sum * *scales;
 80066e6:	ed90 7a00 	vldr	s14, [r0]
 80066ea:	ee07 2a90 	vmov	s15, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80066ee:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80066f0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
            sum = (float) sum * *scales;
 80066f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80066f6:	1a71      	subs	r1, r6, r1
            sum += output_offset;
 80066f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80066fa:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 80066fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006700:	9611      	str	r6, [sp, #68]	; 0x44
 8006702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006706:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 800670a:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 800670c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800670e:	4293      	cmp	r3, r2
 8006710:	bfb8      	it	lt
 8006712:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8006714:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8006716:	4293      	cmp	r3, r2
 8006718:	bfa8      	it	ge
 800671a:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800671c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800671e:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 8006720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006724:	429a      	cmp	r2, r3
 8006726:	f47f ac68 	bne.w	8005ffa <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7a>
    }
}
 800672a:	b01f      	add	sp, #124	; 0x7c
 800672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8006730:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8006732:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006734:	4413      	add	r3, r2
 8006736:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006738:	932e      	str	r3, [sp, #184]	; 0xb8
 800673a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800673c:	4413      	add	r3, r2
 800673e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006740:	9311      	str	r3, [sp, #68]	; 0x44
 8006742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006744:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8006746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006748:	9310      	str	r3, [sp, #64]	; 0x40
 800674a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800674c:	4293      	cmp	r3, r2
 800674e:	f47f ac54 	bne.w	8005ffa <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq+0x7a>
}
 8006752:	b01f      	add	sp, #124	; 0x7c
 8006754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006758 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>:
{
 8006758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	b093      	sub	sp, #76	; 0x4c
 800675e:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8006760:	f101 0e05 	add.w	lr, r1, #5
{
 8006764:	4615      	mov	r5, r2
 8006766:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006768:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800676c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8006770:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8006774:	1cd8      	adds	r0, r3, #3
 8006776:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 800677a:	2100      	movs	r1, #0
{
 800677c:	930f      	str	r3, [sp, #60]	; 0x3c
 800677e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8006782:	9310      	str	r3, [sp, #64]	; 0x40
 8006784:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 8006788:	3101      	adds	r1, #1
 800678a:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 800678c:	f800 3c03 	strb.w	r3, [r0, #-3]
 8006790:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 8006792:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8006794:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 8006798:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 800679c:	4571      	cmp	r1, lr
 800679e:	ddf3      	ble.n	8006788 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 80067a0:	b1cd      	cbz	r5, 80067d6 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x7e>
 80067a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067a4:	4610      	mov	r0, r2
 80067a6:	2600      	movs	r6, #0
 80067a8:	1d8f      	adds	r7, r1, #6
 80067aa:	19d1      	adds	r1, r2, r7
 80067ac:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 80067ae:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 80067b0:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 80067b2:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 80067b6:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 80067b8:	f801 3c03 	strb.w	r3, [r1, #-3]
 80067bc:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 80067be:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 80067c0:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 80067c4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80067c8:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 80067ca:	d8ef      	bhi.n	80067ac <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x54>
 80067cc:	1e69      	subs	r1, r5, #1
 80067ce:	b289      	uxth	r1, r1
 80067d0:	fb01 7707 	mla	r7, r1, r7, r7
 80067d4:	443a      	add	r2, r7
 80067d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067d8:	1e88      	subs	r0, r1, #2
 80067da:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 80067de:	4288      	cmp	r0, r1
 80067e0:	f200 8092 	bhi.w	8006908 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1b0>
 80067e4:	2000      	movs	r0, #0
 80067e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067e8:	4606      	mov	r6, r0
 80067ea:	f363 0007 	bfi	r0, r3, #0, #8
 80067ee:	f101 0c06 	add.w	ip, r1, #6
 80067f2:	4611      	mov	r1, r2
 80067f4:	f363 200f 	bfi	r0, r3, #8, #8
 80067f8:	ea4f 079c 	mov.w	r7, ip, lsr #2
 80067fc:	f363 4017 	bfi	r0, r3, #16, #8
 8006800:	f363 601f 	bfi	r0, r3, #24, #8
 8006804:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 8006806:	6008      	str	r0, [r1, #0]
 8006808:	6048      	str	r0, [r1, #4]
 800680a:	310c      	adds	r1, #12
 800680c:	42b7      	cmp	r7, r6
 800680e:	f841 0c04 	str.w	r0, [r1, #-4]
 8006812:	d8f7      	bhi.n	8006804 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xac>
 8006814:	f02c 0003 	bic.w	r0, ip, #3
 8006818:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 800681c:	4560      	cmp	r0, ip
 800681e:	b287      	uxth	r7, r0
 8006820:	eb02 0106 	add.w	r1, r2, r6
 8006824:	d010      	beq.n	8006848 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 8006826:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 8006828:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 800682a:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 800682c:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 800682e:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8006830:	4572      	cmp	r2, lr
 8006832:	dc09      	bgt.n	8006848 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
 8006834:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 8006836:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8006838:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 800683a:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 800683c:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 800683e:	4596      	cmp	lr, r2
 8006840:	db02      	blt.n	8006848 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 8006842:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8006844:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8006846:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8006848:	2c00      	cmp	r4, #0
 800684a:	d059      	beq.n	8006900 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1a8>
 800684c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800684e:	1e63      	subs	r3, r4, #1
 8006850:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8006852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006856:	b29b      	uxth	r3, r3
 8006858:	b2b6      	uxth	r6, r6
 800685a:	3214      	adds	r2, #20
 800685c:	3301      	adds	r3, #1
 800685e:	1c77      	adds	r7, r6, #1
 8006860:	9211      	str	r2, [sp, #68]	; 0x44
 8006862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006864:	3607      	adds	r6, #7
 8006866:	fb07 f804 	mul.w	r8, r7, r4
 800686a:	18d3      	adds	r3, r2, r3
 800686c:	960d      	str	r6, [sp, #52]	; 0x34
 800686e:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8006870:	b1f5      	cbz	r5, 80068b0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x158>
 8006872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006874:	b1e3      	cbz	r3, 80068b0 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x158>
 8006876:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006878:	f04f 0e00 	mov.w	lr, #0
 800687c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800687e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006882:	eb03 0c02 	add.w	ip, r3, r2
 8006886:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006888:	eb07 000c 	add.w	r0, r7, ip
 800688c:	4662      	mov	r2, ip
 800688e:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 8006890:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8006894:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8006896:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 800689a:	4282      	cmp	r2, r0
 800689c:	d1f8      	bne.n	8006890 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x138>
 800689e:	f10e 0e01 	add.w	lr, lr, #1
 80068a2:	44c1      	add	r9, r8
 80068a4:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 80068a6:	fa1f f38e 	uxth.w	r3, lr
 80068aa:	429d      	cmp	r5, r3
 80068ac:	d8ec      	bhi.n	8006888 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x130>
 80068ae:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80068b0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80068b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b4:	9604      	str	r6, [sp, #16]
 80068b6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80068b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068ba:	9603      	str	r6, [sp, #12]
 80068bc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80068be:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80068c0:	9601      	str	r6, [sp, #4]
 80068c2:	f106 0904 	add.w	r9, r6, #4
 80068c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80068c8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80068ca:	9302      	str	r3, [sp, #8]
        input++;
 80068cc:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80068ce:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 80068d0:	3631      	adds	r6, #49	; 0x31
        input++;
 80068d2:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80068d4:	465b      	mov	r3, fp
 80068d6:	9207      	str	r2, [sp, #28]
 80068d8:	4652      	mov	r2, sl
 80068da:	9106      	str	r1, [sp, #24]
 80068dc:	f10b 0b04 	add.w	fp, fp, #4
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	f10a 0a04 	add.w	sl, sl, #4
 80068e6:	9408      	str	r4, [sp, #32]
 80068e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068ea:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 80068ec:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80068ee:	f7ff fb47 	bl	8005f80 <depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d002      	beq.n	8006900 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80068fa:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 80068fe:	e7b7      	b.n	8006870 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x118>
}
 8006900:	2000      	movs	r0, #0
 8006902:	b013      	add	sp, #76	; 0x4c
 8006904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006908:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 800690a:	2100      	movs	r1, #0
 800690c:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 800690e:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 8006912:	f802 3c02 	strb.w	r3, [r2, #-2]
 8006916:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8006918:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 800691a:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 800691e:	4571      	cmp	r1, lr
 8006920:	ddf4      	ble.n	800690c <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0x1b4>
 8006922:	e791      	b.n	8006848 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq+0xf0>

08006924 <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
    return &buffer0[25600];
}
 8006924:	4800      	ldr	r0, [pc, #0]	; (8006928 <getInput+0x4>)
 8006926:	4770      	bx	lr
 8006928:	200070f8 	.word	0x200070f8

0800692c <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 800692c:	4800      	ldr	r0, [pc, #0]	; (8006930 <getOutput+0x4>)
 800692e:	4770      	bx	lr
 8006930:	20000d98 	.word	0x20000d98

08006934 <invoke>:
void end2endinference(q7_t* img){
    invoke(NULL);
}
void invoke(float* labels){
 8006934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8006938:	4fdf      	ldr	r7, [pc, #892]	; (8006cb8 <invoke+0x384>)
 800693a:	2601      	movs	r6, #1
 800693c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 8006940:	f04f 0b28 	mov.w	fp, #40	; 0x28
 8006944:	f5a7 45c8 	sub.w	r5, r7, #25600	; 0x6400
 8006948:	f04f 0a10 	mov.w	sl, #16
 800694c:	f507 437a 	add.w	r3, r7, #64000	; 0xfa00
 8006950:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006954:	2250      	movs	r2, #80	; 0x50
 8006956:	f8df e384 	ldr.w	lr, [pc, #900]	; 8006cdc <invoke+0x3a8>
 800695a:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8006ce0 <invoke+0x3ac>
 800695e:	4638      	mov	r0, r7
 8006960:	f8df 9380 	ldr.w	r9, [pc, #896]	; 8006ce4 <invoke+0x3b0>
 8006964:	4611      	mov	r1, r2
void invoke(float* labels){
 8006966:	ed2d 8b04 	vpush	{d8-d9}
 800696a:	b095      	sub	sp, #84	; 0x54
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
/* layer 8:CONV_2D */
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,scales8,8,128,-128,127,&buffer0[25600],20,20,16,sbuf);
/* layer 9:ADD */
add_fpreq(6400, &buffer0[25600],0.07699620723724365,8,&buffer0[19200],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[32000]);
 800696c:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 8006cbc <invoke+0x388>
/* layer 18:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
/* layer 19:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,scales17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
/* layer 20:ADD */
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 8006970:	eddf 8ad3 	vldr	s17, [pc, #844]	; 8006cc0 <invoke+0x38c>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8006974:	9710      	str	r7, [sp, #64]	; 0x40
 8006976:	277f      	movs	r7, #127	; 0x7f
 8006978:	9604      	str	r6, [sp, #16]
 800697a:	4ed2      	ldr	r6, [pc, #840]	; (8006cc4 <invoke+0x390>)
 800697c:	930f      	str	r3, [sp, #60]	; 0x3c
 800697e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006980:	2303      	movs	r3, #3
 8006982:	9507      	str	r5, [sp, #28]
 8006984:	f8cd b020 	str.w	fp, [sp, #32]
 8006988:	9403      	str	r4, [sp, #12]
 800698a:	f8cd 9008 	str.w	r9, [sp, #8]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 800698e:	f04f 090a 	mov.w	r9, #10
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 8006992:	f8cd e004 	str.w	lr, [sp, #4]
 8006996:	9600      	str	r6, [sp, #0]
/* layer 43:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
/* layer 44:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
/* layer 45:ADD */
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 8006998:	ed9f 8acb 	vldr	s16, [pc, #812]	; 8006cc8 <invoke+0x394>
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[25600],80,80,3,(const q7_t*) weight0,bias0,scales0,-128,1,-128,127,&buffer0[0],40,40,16,sbuf,kbuf,-1);
 800699c:	e9cd 8c0c 	strd	r8, ip, [sp, #48]	; 0x30
 80069a0:	e9cd ba09 	strd	fp, sl, [sp, #36]	; 0x24
 80069a4:	e9cd 4705 	strd	r4, r7, [sp, #20]
 80069a8:	f001 fc92 	bl	80082d0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],40,40,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],40,40,16,sbuf,-128);
 80069ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80069ae:	f8df e338 	ldr.w	lr, [pc, #824]	; 8006ce8 <invoke+0x3b4>
 80069b2:	4653      	mov	r3, sl
 80069b4:	f8df c334 	ldr.w	ip, [pc, #820]	; 8006cec <invoke+0x3b8>
 80069b8:	465a      	mov	r2, fp
 80069ba:	960c      	str	r6, [sp, #48]	; 0x30
 80069bc:	2680      	movs	r6, #128	; 0x80
 80069be:	9508      	str	r5, [sp, #32]
 80069c0:	4659      	mov	r1, fp
 80069c2:	940d      	str	r4, [sp, #52]	; 0x34
 80069c4:	4628      	mov	r0, r5
 80069c6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[0],40,40,48,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 80069ca:	f04f 0814 	mov.w	r8, #20
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],40,40,16,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-128,128,-128,127,&buffer0[0],40,40,16,sbuf,-128);
 80069ce:	9404      	str	r4, [sp, #16]
 80069d0:	9605      	str	r6, [sp, #20]
 80069d2:	e9cd ce02 	strd	ip, lr, [sp, #8]
 80069d6:	f8df e318 	ldr.w	lr, [pc, #792]	; 8006cf0 <invoke+0x3bc>
 80069da:	f8df c318 	ldr.w	ip, [pc, #792]	; 8006cf4 <invoke+0x3c0>
 80069de:	e9cd ba0a 	strd	fp, sl, [sp, #40]	; 0x28
 80069e2:	e9cd 4706 	strd	r4, r7, [sp, #24]
 80069e6:	e9cd ce00 	strd	ip, lr, [sp]
 80069ea:	f7fd f9ef 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[0],40,40,16,(const q7_t*) weight2,bias2,scales2,-4,128,-128,127,&buffer0[76800],40,40,8,sbuf);
 80069ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80069f0:	f8df c304 	ldr.w	ip, [pc, #772]	; 8006cf8 <invoke+0x3c4>
 80069f4:	4653      	mov	r3, sl
 80069f6:	960b      	str	r6, [sp, #44]	; 0x2c
 80069f8:	2680      	movs	r6, #128	; 0x80
 80069fa:	f8df e300 	ldr.w	lr, [pc, #768]	; 8006cfc <invoke+0x3c8>
 80069fe:	465a      	mov	r2, fp
 8006a00:	9604      	str	r6, [sp, #16]
 8006a02:	f505 3696 	add.w	r6, r5, #76800	; 0x12c00
 8006a06:	f8cd c004 	str.w	ip, [sp, #4]
 8006a0a:	4659      	mov	r1, fp
 8006a0c:	9607      	str	r6, [sp, #28]
 8006a0e:	2608      	movs	r6, #8
 8006a10:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8006d00 <invoke+0x3cc>
 8006a14:	4628      	mov	r0, r5
 8006a16:	960a      	str	r6, [sp, #40]	; 0x28
 8006a18:	f06f 0603 	mvn.w	r6, #3
 8006a1c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006a20:	f8cd b020 	str.w	fp, [sp, #32]
 8006a24:	f8cd c000 	str.w	ip, [sp]
 8006a28:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006a2c:	e9cd e602 	strd	lr, r6, [sp, #8]
 8006a30:	f000 ffea 	bl	8007a08 <convolve_1x1_s8_ch16_fpreq>
convolve_1x1_s8_ch8_fpreq(&buffer0[76800],40,40,8,(const q7_t*) weight3,bias3,scales3,-128,4,-128,127,&buffer0[0],40,40,48,sbuf);
 8006a34:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006a36:	f04f 0e04 	mov.w	lr, #4
 8006a3a:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8006d04 <invoke+0x3d0>
 8006a3e:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a40:	2630      	movs	r6, #48	; 0x30
 8006a42:	f8cd e010 	str.w	lr, [sp, #16]
 8006a46:	465a      	mov	r2, fp
 8006a48:	f8cd c008 	str.w	ip, [sp, #8]
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8006d08 <invoke+0x3d4>
 8006a52:	f505 3096 	add.w	r0, r5, #76800	; 0x12c00
 8006a56:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8006d0c <invoke+0x3d8>
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	9507      	str	r5, [sp, #28]
 8006a5e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006a62:	f8cd b020 	str.w	fp, [sp, #32]
 8006a66:	9403      	str	r4, [sp, #12]
 8006a68:	960a      	str	r6, [sp, #40]	; 0x28
 8006a6a:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006a6e:	e9cd ce00 	strd	ip, lr, [sp]
 8006a72:	f001 fa69 	bl	8007f48 <convolve_1x1_s8_ch8_fpreq>
depthwise_kernel3x3_stride2_inplace_CHW_fpreq(&buffer0[0],40,40,48,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,scales4,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8006a76:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006a78:	f8df e294 	ldr.w	lr, [pc, #660]	; 8006d10 <invoke+0x3dc>
 8006a7c:	2330      	movs	r3, #48	; 0x30
 8006a7e:	f8df c294 	ldr.w	ip, [pc, #660]	; 8006d14 <invoke+0x3e0>
 8006a82:	465a      	mov	r2, fp
 8006a84:	960c      	str	r6, [sp, #48]	; 0x30
 8006a86:	2680      	movs	r6, #128	; 0x80
 8006a88:	9508      	str	r5, [sp, #32]
 8006a8a:	4659      	mov	r1, fp
 8006a8c:	940d      	str	r4, [sp, #52]	; 0x34
 8006a8e:	4628      	mov	r0, r5
 8006a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a92:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8006a96:	f8df e280 	ldr.w	lr, [pc, #640]	; 8006d18 <invoke+0x3e4>
 8006a9a:	f8df c280 	ldr.w	ip, [pc, #640]	; 8006d1c <invoke+0x3e8>
 8006a9e:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8006aa2:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8006aa6:	e9cd ce00 	strd	ip, lr, [sp]
 8006aaa:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8006aae:	f7fd fc83 	bl	80043b8 <depthwise_kernel3x3_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight5,bias5,scales5,-22,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 8006ab2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006ab4:	f06f 0e15 	mvn.w	lr, #21
 8006ab8:	f8df c264 	ldr.w	ip, [pc, #612]	; 8006d20 <invoke+0x3ec>
 8006abc:	960b      	str	r6, [sp, #44]	; 0x2c
 8006abe:	2680      	movs	r6, #128	; 0x80
 8006ac0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	9604      	str	r6, [sp, #16]
 8006ac8:	f505 4696 	add.w	r6, r5, #19200	; 0x4b00
 8006acc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	f8cd 8020 	str.w	r8, [sp, #32]
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	9607      	str	r6, [sp, #28]
 8006ada:	2330      	movs	r3, #48	; 0x30
 8006adc:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8006ae0:	f8df e240 	ldr.w	lr, [pc, #576]	; 8006d24 <invoke+0x3f0>
 8006ae4:	f8df c240 	ldr.w	ip, [pc, #576]	; 8006d28 <invoke+0x3f4>
 8006ae8:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006aec:	e9cd ce00 	strd	ip, lr, [sp]
 8006af0:	f001 f94a 	bl	8007d88 <convolve_1x1_s8_ch48_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[19200],20,20,16,(const q7_t*) weight6,bias6,scales6,-128,22,-128,127,&buffer0[0],20,20,48,sbuf);
 8006af4:	f04f 0e16 	mov.w	lr, #22
 8006af8:	f8df c230 	ldr.w	ip, [pc, #560]	; 8006d2c <invoke+0x3f8>
 8006afc:	4630      	mov	r0, r6
 8006afe:	2130      	movs	r1, #48	; 0x30
 8006b00:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006b02:	f8cd c008 	str.w	ip, [sp, #8]
 8006b06:	4653      	mov	r3, sl
 8006b08:	f8df c224 	ldr.w	ip, [pc, #548]	; 8006d30 <invoke+0x3fc>
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b10:	9507      	str	r5, [sp, #28]
 8006b12:	910a      	str	r1, [sp, #40]	; 0x28
 8006b14:	4641      	mov	r1, r8
 8006b16:	e9cd 4e03 	strd	r4, lr, [sp, #12]
 8006b1a:	f8df e218 	ldr.w	lr, [pc, #536]	; 8006d34 <invoke+0x400>
 8006b1e:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006b22:	e9cd ce00 	strd	ip, lr, [sp]
 8006b26:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8006b2a:	f000 ff6d 	bl	8007a08 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8006b2e:	f8df e208 	ldr.w	lr, [pc, #520]	; 8006d38 <invoke+0x404>
 8006b32:	f8df c208 	ldr.w	ip, [pc, #520]	; 8006d3c <invoke+0x408>
 8006b36:	2330      	movs	r3, #48	; 0x30
 8006b38:	960f      	str	r6, [sp, #60]	; 0x3c
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	960c      	str	r6, [sp, #48]	; 0x30
 8006b3e:	2680      	movs	r6, #128	; 0x80
 8006b40:	9508      	str	r5, [sp, #32]
 8006b42:	4641      	mov	r1, r8
 8006b44:	940d      	str	r4, [sp, #52]	; 0x34
 8006b46:	4628      	mov	r0, r5
 8006b48:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8006b4c:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8006b50:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8006d40 <invoke+0x40c>
 8006b54:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8006d44 <invoke+0x410>
 8006b58:	e9cd 830a 	strd	r8, r3, [sp, #40]	; 0x28
 8006b5c:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8006b60:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8006b64:	e9cd ce00 	strd	ip, lr, [sp]
 8006b68:	f7fd f930 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,scales8,8,128,-128,127,&buffer0[25600],20,20,16,sbuf);
 8006b6c:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8006d48 <invoke+0x414>
 8006b70:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006b72:	217f      	movs	r1, #127	; 0x7f
 8006b74:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8006d4c <invoke+0x418>
 8006b78:	4642      	mov	r2, r8
 8006b7a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	9707      	str	r7, [sp, #28]
 8006b80:	2780      	movs	r7, #128	; 0x80
 8006b82:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b84:	2330      	movs	r3, #48	; 0x30
 8006b86:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006b8a:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8006b8e:	e9cd 4105 	strd	r4, r1, [sp, #20]
 8006b92:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8006d50 <invoke+0x41c>
 8006b96:	2108      	movs	r1, #8
 8006b98:	f8cd c000 	str.w	ip, [sp]
 8006b9c:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8006ba0:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8006ba4:	4641      	mov	r1, r8
convolve_1x1_s8_ch16_fpreq(&buffer0[32000],20,20,16,(const q7_t*) weight9,bias9,scales9,-128,20,-128,127,&buffer0[0],20,20,48,sbuf);
 8006ba6:	277f      	movs	r7, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,scales8,8,128,-128,127,&buffer0[25600],20,20,16,sbuf);
 8006ba8:	f001 f8ee 	bl	8007d88 <convolve_1x1_s8_ch48_fpreq>
add_fpreq(6400, &buffer0[25600],0.07699620723724365,8,&buffer0[19200],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[32000]);
 8006bac:	f505 4296 	add.w	r2, r5, #19200	; 0x4b00
 8006bb0:	eeb0 2a49 	vmov.f32	s4, s18
 8006bb4:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8006ccc <invoke+0x398>
 8006bb8:	eefb 2a04 	vmov.f32	s5, #180	; 0xc1a00000 -20.0
 8006bbc:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8006cd0 <invoke+0x39c>
 8006bc0:	eefb 1a06 	vmov.f32	s3, #182	; 0xc1b00000 -22.0
 8006bc4:	f502 5348 	add.w	r3, r2, #12800	; 0x3200
 8006bc8:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8006bcc:	f502 51c8 	add.w	r1, r2, #6400	; 0x1900
 8006bd0:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8006bd4:	f000 feca 	bl	800796c <add_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[32000],20,20,16,(const q7_t*) weight9,bias9,scales9,-128,20,-128,127,&buffer0[0],20,20,48,sbuf);
 8006bd8:	f8df e178 	ldr.w	lr, [pc, #376]	; 8006d54 <invoke+0x420>
 8006bdc:	f8df c178 	ldr.w	ip, [pc, #376]	; 8006d58 <invoke+0x424>
 8006be0:	2130      	movs	r1, #48	; 0x30
 8006be2:	960b      	str	r6, [sp, #44]	; 0x2c
 8006be4:	4653      	mov	r3, sl
 8006be6:	9507      	str	r5, [sp, #28]
 8006be8:	4642      	mov	r2, r8
 8006bea:	910a      	str	r1, [sp, #40]	; 0x28
 8006bec:	f505 40fa 	add.w	r0, r5, #32000	; 0x7d00
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8006bf6:	f8df c164 	ldr.w	ip, [pc, #356]	; 8006d5c <invoke+0x428>
 8006bfa:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006bfe:	e9cd 4803 	strd	r4, r8, [sp, #12]
 8006c02:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8006c06:	f8cd c000 	str.w	ip, [sp]
 8006c0a:	f000 fefd 	bl	8007a08 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8006c0e:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006d60 <invoke+0x42c>
 8006c12:	f8df e150 	ldr.w	lr, [pc, #336]	; 8006d64 <invoke+0x430>
 8006c16:	2330      	movs	r3, #48	; 0x30
 8006c18:	f8cd c00c 	str.w	ip, [sp, #12]
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	f8df c148 	ldr.w	ip, [pc, #328]	; 8006d68 <invoke+0x434>
 8006c22:	4641      	mov	r1, r8
 8006c24:	960f      	str	r6, [sp, #60]	; 0x3c
 8006c26:	4628      	mov	r0, r5
 8006c28:	960c      	str	r6, [sp, #48]	; 0x30
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,scales11,-4,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 8006c2a:	f505 4696 	add.w	r6, r5, #19200	; 0x4b00
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,scales10,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8006c2e:	9508      	str	r5, [sp, #32]
 8006c30:	940d      	str	r4, [sp, #52]	; 0x34
 8006c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c34:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8006c38:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8006c3c:	2780      	movs	r7, #128	; 0x80
 8006c3e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8006d6c <invoke+0x438>
 8006c42:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8006c46:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8006c4a:	f8cd c000 	str.w	ip, [sp]
 8006c4e:	f7fd f8bd 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,scales11,-4,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 8006c52:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8006d70 <invoke+0x43c>
 8006c56:	9607      	str	r6, [sp, #28]
 8006c58:	267f      	movs	r6, #127	; 0x7f
 8006c5a:	f8df c118 	ldr.w	ip, [pc, #280]	; 8006d74 <invoke+0x440>
 8006c5e:	f06f 0303 	mvn.w	r3, #3
 8006c62:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006c64:	4642      	mov	r2, r8
 8006c66:	9303      	str	r3, [sp, #12]
 8006c68:	4641      	mov	r1, r8
 8006c6a:	970b      	str	r7, [sp, #44]	; 0x2c
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006c72:	2330      	movs	r3, #48	; 0x30
 8006c74:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8006c78:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8006c7c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8006d78 <invoke+0x444>
 8006c80:	2680      	movs	r6, #128	; 0x80
 8006c82:	e9cd 8a09 	strd	r8, sl, [sp, #36]	; 0x24
 8006c86:	f8cd c000 	str.w	ip, [sp]
 8006c8a:	9604      	str	r6, [sp, #16]
convolve_1x1_s8_ch16_fpreq(&buffer0[25600],20,20,16,(const q7_t*) weight12,bias12,scales12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 8006c8c:	267f      	movs	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,scales11,-4,128,-128,127,&buffer0[19200],20,20,16,sbuf);
 8006c8e:	f001 f87b 	bl	8007d88 <convolve_1x1_s8_ch48_fpreq>
add_fpreq(6400, &buffer0[19200],0.024848325178027153,-4,&buffer0[32000],0.10197763890028,-20,0.10464993864297867,-15,&buffer0[25600]);
 8006c92:	f505 43c8 	add.w	r3, r5, #25600	; 0x6400
 8006c96:	eeb0 1a49 	vmov.f32	s2, s18
 8006c9a:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8006cd4 <invoke+0x3a0>
 8006c9e:	f503 52c8 	add.w	r2, r3, #6400	; 0x1900
 8006ca2:	eefa 2a0e 	vmov.f32	s5, #174	; 0xc1700000 -15.0
 8006ca6:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 8006caa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8006cd8 <invoke+0x3a4>
 8006cae:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8006cb2:	f5a2 5148 	sub.w	r1, r2, #12800	; 0x3200
 8006cb6:	e061      	b.n	8006d7c <invoke+0x448>
 8006cb8:	200070f8 	.word	0x200070f8
 8006cbc:	3dd0d9a7 	.word	0x3dd0d9a7
 8006cc0:	3d8fd9c1 	.word	0x3d8fd9c1
 8006cc4:	0802e93c 	.word	0x0802e93c
 8006cc8:	3d20b771 	.word	0x3d20b771
 8006ccc:	3db016c1 	.word	0x3db016c1
 8006cd0:	3d9db030 	.word	0x3d9db030
 8006cd4:	3dd652b5 	.word	0x3dd652b5
 8006cd8:	3ccb8eb7 	.word	0x3ccb8eb7
 8006cdc:	0802004c 	.word	0x0802004c
 8006ce0:	200178c0 	.word	0x200178c0
 8006ce4:	080289b4 	.word	0x080289b4
 8006ce8:	080289f4 	.word	0x080289f4
 8006cec:	08025fd4 	.word	0x08025fd4
 8006cf0:	080235f4 	.word	0x080235f4
 8006cf4:	08011b14 	.word	0x08011b14
 8006cf8:	0802066c 	.word	0x0802066c
 8006cfc:	080295b4 	.word	0x080295b4
 8006d00:	08031bac 	.word	0x08031bac
 8006d04:	0802abb4 	.word	0x0802abb4
 8006d08:	080212ac 	.word	0x080212ac
 8006d0c:	0803e8ec 	.word	0x0803e8ec
 8006d10:	0802d2b4 	.word	0x0802d2b4
 8006d14:	08027db4 	.word	0x08027db4
 8006d18:	080253d4 	.word	0x080253d4
 8006d1c:	0801b84c 	.word	0x0801b84c
 8006d20:	0802e67c 	.word	0x0802e67c
 8006d24:	080233f4 	.word	0x080233f4
 8006d28:	080862ac 	.word	0x080862ac
 8006d2c:	0802e6bc 	.word	0x0802e6bc
 8006d30:	080865ac 	.word	0x080865ac
 8006d34:	08023434 	.word	0x08023434
 8006d38:	0802e77c 	.word	0x0802e77c
 8006d3c:	080288f4 	.word	0x080288f4
 8006d40:	08025f14 	.word	0x08025f14
 8006d44:	0801fe9c 	.word	0x0801fe9c
 8006d48:	0802e83c 	.word	0x0802e83c
 8006d4c:	080234f4 	.word	0x080234f4
 8006d50:	080868ac 	.word	0x080868ac
 8006d54:	0802e87c 	.word	0x0802e87c
 8006d58:	08023534 	.word	0x08023534
 8006d5c:	08086bac 	.word	0x08086bac
 8006d60:	08028a34 	.word	0x08028a34
 8006d64:	08026014 	.word	0x08026014
 8006d68:	08023634 	.word	0x08023634
 8006d6c:	08011ba4 	.word	0x08011ba4
 8006d70:	08028af4 	.word	0x08028af4
 8006d74:	0802008c 	.word	0x0802008c
 8006d78:	0802eaec 	.word	0x0802eaec
 8006d7c:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8006d80:	f000 fdf4 	bl	800796c <add_fpreq>
convolve_1x1_s8_ch16_fpreq(&buffer0[25600],20,20,16,(const q7_t*) weight12,bias12,scales12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 8006d84:	f8df e3b8 	ldr.w	lr, [pc, #952]	; 8007140 <invoke+0x80c>
 8006d88:	f8df c3b8 	ldr.w	ip, [pc, #952]	; 8007144 <invoke+0x810>
 8006d8c:	2030      	movs	r0, #48	; 0x30
 8006d8e:	4653      	mov	r3, sl
 8006d90:	4642      	mov	r2, r8
 8006d92:	970b      	str	r7, [sp, #44]	; 0x2c
 8006d94:	4641      	mov	r1, r8
 8006d96:	900a      	str	r0, [sp, #40]	; 0x28
 8006d98:	f505 40c8 	add.w	r0, r5, #25600	; 0x6400
 8006d9c:	9507      	str	r5, [sp, #28]
 8006d9e:	9403      	str	r4, [sp, #12]
 8006da0:	f8cd c000 	str.w	ip, [sp]
 8006da4:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8006da8:	260f      	movs	r6, #15
 8006daa:	9604      	str	r6, [sp, #16]
 8006dac:	4ed8      	ldr	r6, [pc, #864]	; (8007110 <invoke+0x7dc>)
 8006dae:	e9cd e601 	strd	lr, r6, [sp, #4]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8006db2:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch16_fpreq(&buffer0[25600],20,20,16,(const q7_t*) weight12,bias12,scales12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 8006db4:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8006db8:	f000 fe26 	bl	8007a08 <convolve_1x1_s8_ch16_fpreq>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8006dbc:	9605      	str	r6, [sp, #20]
 8006dbe:	267f      	movs	r6, #127	; 0x7f
 8006dc0:	f8df e384 	ldr.w	lr, [pc, #900]	; 8007148 <invoke+0x814>
 8006dc4:	2330      	movs	r3, #48	; 0x30
 8006dc6:	f8df c384 	ldr.w	ip, [pc, #900]	; 800714c <invoke+0x818>
 8006dca:	4642      	mov	r2, r8
 8006dcc:	4641      	mov	r1, r8
 8006dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	970c      	str	r7, [sp, #48]	; 0x30
 8006dd4:	9508      	str	r5, [sp, #32]
 8006dd6:	940d      	str	r4, [sp, #52]	; 0x34
 8006dd8:	9404      	str	r4, [sp, #16]
 8006dda:	f8cd c000 	str.w	ip, [sp]
convolve_1x1_s8_ch48_fpreq(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,scales14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8006dde:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8007150 <invoke+0x81c>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8006de2:	e9cd 4606 	strd	r4, r6, [sp, #24]
 8006de6:	4ecb      	ldr	r6, [pc, #812]	; (8007114 <invoke+0x7e0>)
 8006de8:	9603      	str	r6, [sp, #12]
 8006dea:	4ecb      	ldr	r6, [pc, #812]	; (8007118 <invoke+0x7e4>)
 8006dec:	e9cd e601 	strd	lr, r6, [sp, #4]
convolve_1x1_s8_ch48_fpreq(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,scales14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8006df0:	2680      	movs	r6, #128	; 0x80
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,scales13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8006df2:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8006df6:	f7ff fcaf 	bl	8006758 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,scales14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8006dfa:	9604      	str	r6, [sp, #16]
 8006dfc:	970f      	str	r7, [sp, #60]	; 0x3c
 8006dfe:	267f      	movs	r6, #127	; 0x7f
 8006e00:	970b      	str	r7, [sp, #44]	; 0x2c
 8006e02:	2718      	movs	r7, #24
 8006e04:	f06f 0c0f 	mvn.w	ip, #15
 8006e08:	f8df e348 	ldr.w	lr, [pc, #840]	; 8007154 <invoke+0x820>
 8006e0c:	970a      	str	r7, [sp, #40]	; 0x28
 8006e0e:	464a      	mov	r2, r9
 8006e10:	4fc2      	ldr	r7, [pc, #776]	; (800711c <invoke+0x7e8>)
 8006e12:	4649      	mov	r1, r9
 8006e14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e1e:	2330      	movs	r3, #48	; 0x30
 8006e20:	f8cd e004 	str.w	lr, [sp, #4]
 8006e24:	9700      	str	r7, [sp, #0]
 8006e26:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8006e2a:	f505 5661 	add.w	r6, r5, #14400	; 0x3840
 8006e2e:	e9cd 8c02 	strd	r8, ip, [sp, #8]
 8006e32:	9607      	str	r6, [sp, #28]
 8006e34:	f000 ffa8 	bl	8007d88 <convolve_1x1_s8_ch48_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[14400],10,10,24,(const q7_t*) weight15,bias15,scales15,-128,16,-128,127,&buffer0[0],10,10,144,sbuf);
 8006e38:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006e3a:	f8df e31c 	ldr.w	lr, [pc, #796]	; 8007158 <invoke+0x824>
 8006e3e:	464a      	mov	r2, r9
 8006e40:	970b      	str	r7, [sp, #44]	; 0x2c
 8006e42:	277f      	movs	r7, #127	; 0x7f
 8006e44:	f8df c314 	ldr.w	ip, [pc, #788]	; 800715c <invoke+0x828>
 8006e48:	4649      	mov	r1, r9
 8006e4a:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8007160 <invoke+0x82c>
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e54:	2318      	movs	r3, #24
 8006e56:	f8cd 9020 	str.w	r9, [sp, #32]
 8006e5a:	9507      	str	r5, [sp, #28]
 8006e5c:	f8cd c000 	str.w	ip, [sp]
 8006e60:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006e64:	2790      	movs	r7, #144	; 0x90
 8006e66:	e9cd 4a03 	strd	r4, sl, [sp, #12]
 8006e6a:	e9cd e801 	strd	lr, r8, [sp, #4]
 8006e6e:	970a      	str	r7, [sp, #40]	; 0x28
 8006e70:	f000 feaa 	bl	8007bc8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
 8006e74:	463b      	mov	r3, r7
 8006e76:	970b      	str	r7, [sp, #44]	; 0x2c
 8006e78:	2780      	movs	r7, #128	; 0x80
 8006e7a:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 8007164 <invoke+0x830>
 8006e7e:	464a      	mov	r2, r9
 8006e80:	9705      	str	r7, [sp, #20]
 8006e82:	4649      	mov	r1, r9
 8006e84:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006e86:	4628      	mov	r0, r5
 8006e88:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8007168 <invoke+0x834>
 8006e8c:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 800716c <invoke+0x838>
 8006e90:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8007170 <invoke+0x83c>
 8006e94:	9406      	str	r4, [sp, #24]
 8006e96:	9404      	str	r4, [sp, #16]
 8006e98:	9508      	str	r5, [sp, #32]
 8006e9a:	e9cd 740c 	strd	r7, r4, [sp, #48]	; 0x30
 8006e9e:	277f      	movs	r7, #127	; 0x7f
 8006ea0:	9707      	str	r7, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,scales17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
 8006ea2:	2780      	movs	r7, #128	; 0x80
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,scales16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
 8006ea4:	e9cd 8a02 	strd	r8, sl, [sp, #8]
 8006ea8:	e9cd ce00 	strd	ip, lr, [sp]
 8006eac:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
 8006eb0:	f7fc ff8c 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,scales17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
 8006eb4:	f506 6a16 	add.w	sl, r6, #2400	; 0x960
 8006eb8:	f06f 0c0d 	mvn.w	ip, #13
 8006ebc:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 8007174 <invoke+0x840>
 8006ec0:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8007178 <invoke+0x844>
 8006ec4:	2218      	movs	r2, #24
 8006ec6:	f8cd e004 	str.w	lr, [sp, #4]
 8006eca:	4649      	mov	r1, r9
 8006ecc:	920a      	str	r2, [sp, #40]	; 0x28
 8006ece:	4628      	mov	r0, r5
 8006ed0:	464a      	mov	r2, r9
 8006ed2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ed6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006eda:	2390      	movs	r3, #144	; 0x90
 8006edc:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8006ee0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006ee2:	970b      	str	r7, [sp, #44]	; 0x2c
 8006ee4:	277f      	movs	r7, #127	; 0x7f
 8006ee6:	e9cd 7a06 	strd	r7, sl, [sp, #24]
 8006eea:	4f8d      	ldr	r7, [pc, #564]	; (8007120 <invoke+0x7ec>)
 8006eec:	e9cd 8c02 	strd	r8, ip, [sp, #8]
 8006ef0:	9700      	str	r7, [sp, #0]
 8006ef2:	f001 f909 	bl	8008108 <convolve_1x1_s8_fpreq>
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 8006ef6:	eeb0 2a68 	vmov.f32	s4, s17
 8006efa:	eef8 2a08 	vmov.f32	s5, #136	; 0xc0400000 -3.0
 8006efe:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8007124 <invoke+0x7f0>
 8006f02:	eefb 1a00 	vmov.f32	s3, #176	; 0xc1800000 -16.0
 8006f06:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8007128 <invoke+0x7f4>
 8006f0a:	eefa 0a0c 	vmov.f32	s1, #172	; 0xc1600000 -14.0
 8006f0e:	4632      	mov	r2, r6
 8006f10:	4651      	mov	r1, sl
 8006f12:	f5aa 5396 	sub.w	r3, sl, #4800	; 0x12c0
 8006f16:	f44f 6016 	mov.w	r0, #2400	; 0x960
convolve_1x1_s8_ch24_fpreq(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,scales18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 8006f1a:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800717c <invoke+0x848>
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 8006f1e:	f000 fd25 	bl	800796c <add_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,scales18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 8006f22:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006f24:	f8df e258 	ldr.w	lr, [pc, #600]	; 8007180 <invoke+0x84c>
 8006f28:	464a      	mov	r2, r9
 8006f2a:	970b      	str	r7, [sp, #44]	; 0x2c
 8006f2c:	277f      	movs	r7, #127	; 0x7f
 8006f2e:	f8df c254 	ldr.w	ip, [pc, #596]	; 8007184 <invoke+0x850>
 8006f32:	4649      	mov	r1, r9
 8006f34:	9507      	str	r5, [sp, #28]
 8006f36:	2318      	movs	r3, #24
 8006f38:	9403      	str	r4, [sp, #12]
 8006f3a:	f5a6 6016 	sub.w	r0, r6, #2400	; 0x960
 8006f3e:	f8cd c000 	str.w	ip, [sp]
 8006f42:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8006f46:	2778      	movs	r7, #120	; 0x78
 8006f48:	970a      	str	r7, [sp, #40]	; 0x28
 8006f4a:	2703      	movs	r7, #3
 8006f4c:	e9cd e801 	strd	lr, r8, [sp, #4]
 8006f50:	e9cd 9908 	strd	r9, r9, [sp, #32]
 8006f54:	9704      	str	r7, [sp, #16]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8006f56:	f04f 0805 	mov.w	r8, #5
convolve_1x1_s8_ch24_fpreq(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,scales18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 8006f5a:	f000 fe35 	bl	8007bc8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel5x5_stride1_inplace_CHW_fpreq(&buffer0[0],10,10,120,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,scales19,-128,128,-128,127,&buffer0[0],10,10,120,sbuf,-128);
 8006f5e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006f60:	f8df e224 	ldr.w	lr, [pc, #548]	; 8007188 <invoke+0x854>
 8006f64:	2378      	movs	r3, #120	; 0x78
 8006f66:	970c      	str	r7, [sp, #48]	; 0x30
 8006f68:	277f      	movs	r7, #127	; 0x7f
 8006f6a:	f8df c220 	ldr.w	ip, [pc, #544]	; 800718c <invoke+0x858>
 8006f6e:	464a      	mov	r2, r9
 8006f70:	9508      	str	r5, [sp, #32]
 8006f72:	4649      	mov	r1, r9
 8006f74:	940d      	str	r4, [sp, #52]	; 0x34
 8006f76:	4628      	mov	r0, r5
 8006f78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f7c:	e9cd 4706 	strd	r4, r7, [sp, #24]
 8006f80:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8006f84:	2780      	movs	r7, #128	; 0x80
 8006f86:	f8df e208 	ldr.w	lr, [pc, #520]	; 8007190 <invoke+0x85c>
 8006f8a:	f8df c208 	ldr.w	ip, [pc, #520]	; 8007194 <invoke+0x860>
 8006f8e:	e9cd 930a 	strd	r9, r3, [sp, #40]	; 0x28
 8006f92:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8006f96:	e9cd ce00 	strd	ip, lr, [sp]
 8006f9a:	f7fd fd19 	bl	80049d0 <depthwise_kernel5x5_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,scales20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8006f9e:	9607      	str	r6, [sp, #28]
 8006fa0:	267f      	movs	r6, #127	; 0x7f
 8006fa2:	f06f 0e02 	mvn.w	lr, #2
 8006fa6:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 8007198 <invoke+0x864>
 8006faa:	2118      	movs	r1, #24
 8006fac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006fae:	464a      	mov	r2, r9
 8006fb0:	f8cd c008 	str.w	ip, [sp, #8]
 8006fb4:	2378      	movs	r3, #120	; 0x78
 8006fb6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 800719c <invoke+0x868>
 8006fba:	4628      	mov	r0, r5
 8006fbc:	970b      	str	r7, [sp, #44]	; 0x2c
 8006fbe:	910a      	str	r1, [sp, #40]	; 0x28
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8006fc6:	2680      	movs	r6, #128	; 0x80
 8006fc8:	e9cd e603 	strd	lr, r6, [sp, #12]
 8006fcc:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80071a0 <invoke+0x86c>
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8006fd0:	2601      	movs	r6, #1
convolve_1x1_s8_fpreq(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,scales20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8006fd2:	e9cd ce00 	strd	ip, lr, [sp]
 8006fd6:	e9cd 9908 	strd	r9, r9, [sp, #32]
 8006fda:	f001 f895 	bl	8008108 <convolve_1x1_s8_fpreq>
add_fpreq(2400, &buffer0[14400],0.018893597647547722,-3,&buffer0[12000],0.07023955136537552,-3,0.07366174459457397,-1,&buffer0[16800]);
 8006fde:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8006fe2:	f5aa 6116 	sub.w	r1, sl, #2400	; 0x960
 8006fe6:	eeb0 1a68 	vmov.f32	s2, s17
 8006fea:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
 8006fee:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 800712c <invoke+0x7f8>
 8006ff2:	eef0 0a61 	vmov.f32	s1, s3
 8006ff6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8007130 <invoke+0x7fc>
 8006ffa:	4653      	mov	r3, sl
 8006ffc:	f5a1 6216 	sub.w	r2, r1, #2400	; 0x960
 8007000:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8007004:	f000 fcb2 	bl	800796c <add_fpreq>
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8007008:	f8df e198 	ldr.w	lr, [pc, #408]	; 80071a4 <invoke+0x870>
 800700c:	f8df c198 	ldr.w	ip, [pc, #408]	; 80071a8 <invoke+0x874>
 8007010:	2290      	movs	r2, #144	; 0x90
 8007012:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007016:	4649      	mov	r1, r9
 8007018:	920a      	str	r2, [sp, #40]	; 0x28
 800701a:	2318      	movs	r3, #24
 800701c:	464a      	mov	r2, r9
 800701e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007022:	9403      	str	r4, [sp, #12]
 8007024:	4650      	mov	r0, sl
 8007026:	970b      	str	r7, [sp, #44]	; 0x2c
 8007028:	9507      	str	r5, [sp, #28]
 800702a:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 800702e:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80071ac <invoke+0x878>
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8007032:	e9cd 6404 	strd	r6, r4, [sp, #16]
 8007036:	267f      	movs	r6, #127	; 0x7f
 8007038:	9606      	str	r6, [sp, #24]
 800703a:	4e3e      	ldr	r6, [pc, #248]	; (8007134 <invoke+0x800>)
 800703c:	e9cd e601 	strd	lr, r6, [sp, #4]
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8007040:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch24_fpreq(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,scales21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8007042:	f000 fdc1 	bl	8007bc8 <convolve_1x1_s8_ch24_fpreq>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8007046:	f8df e168 	ldr.w	lr, [pc, #360]	; 80071b0 <invoke+0x87c>
 800704a:	2390      	movs	r3, #144	; 0x90
 800704c:	9605      	str	r6, [sp, #20]
 800704e:	267f      	movs	r6, #127	; 0x7f
 8007050:	f8df c160 	ldr.w	ip, [pc, #352]	; 80071b4 <invoke+0x880>
 8007054:	464a      	mov	r2, r9
 8007056:	9607      	str	r6, [sp, #28]
 8007058:	4649      	mov	r1, r9
 800705a:	4e37      	ldr	r6, [pc, #220]	; (8007138 <invoke+0x804>)
 800705c:	4628      	mov	r0, r5
 800705e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007060:	940d      	str	r4, [sp, #52]	; 0x34
 8007062:	9406      	str	r4, [sp, #24]
 8007064:	9404      	str	r4, [sp, #16]
 8007066:	970c      	str	r7, [sp, #48]	; 0x30
 8007068:	9508      	str	r5, [sp, #32]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,scales23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 800706a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80071b8 <invoke+0x884>
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 800706e:	e9cd a602 	strd	sl, r6, [sp, #8]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,scales23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 8007072:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_fpreq(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,scales24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 8007074:	f04f 0a0b 	mov.w	sl, #11
depthwise_kernel7x7_stride2_inplace_CHW_fpreq(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,scales22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8007078:	e9cd ce00 	strd	ip, lr, [sp]
 800707c:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8007080:	f7ff fb6a 	bl	8006758 <depthwise_kernel7x7_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,scales23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 8007084:	f8df e134 	ldr.w	lr, [pc, #308]	; 80071bc <invoke+0x888>
 8007088:	f8df c134 	ldr.w	ip, [pc, #308]	; 80071c0 <invoke+0x88c>
 800708c:	4642      	mov	r2, r8
 800708e:	970f      	str	r7, [sp, #60]	; 0x3c
 8007090:	4641      	mov	r1, r8
 8007092:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007096:	2390      	movs	r3, #144	; 0x90
 8007098:	f8cd 8020 	str.w	r8, [sp, #32]
 800709c:	4628      	mov	r0, r5
 800709e:	e9cd 6404 	strd	r6, r4, [sp, #16]
 80070a2:	267f      	movs	r6, #127	; 0x7f
 80070a4:	e9cd b70a 	strd	fp, r7, [sp, #40]	; 0x28
 80070a8:	9606      	str	r6, [sp, #24]
 80070aa:	f06f 070a 	mvn.w	r7, #10
 80070ae:	4e23      	ldr	r6, [pc, #140]	; (800713c <invoke+0x808>)
 80070b0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80070b4:	e9cd ce00 	strd	ip, lr, [sp]
 80070b8:	9607      	str	r6, [sp, #28]
 80070ba:	f001 f825 	bl	8008108 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_fpreq(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,scales24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 80070be:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80070c0:	f8df e100 	ldr.w	lr, [pc, #256]	; 80071c4 <invoke+0x890>
 80070c4:	465b      	mov	r3, fp
 80070c6:	970b      	str	r7, [sp, #44]	; 0x2c
 80070c8:	277f      	movs	r7, #127	; 0x7f
 80070ca:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80071c8 <invoke+0x894>
 80070ce:	4642      	mov	r2, r8
 80070d0:	9706      	str	r7, [sp, #24]
 80070d2:	27f0      	movs	r7, #240	; 0xf0
 80070d4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80071cc <invoke+0x898>
 80070d8:	4641      	mov	r1, r8
 80070da:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80070de:	4630      	mov	r0, r6
 80070e0:	f8cd 8020 	str.w	r8, [sp, #32]
 80070e4:	9405      	str	r4, [sp, #20]
 80070e6:	9403      	str	r4, [sp, #12]
 80070e8:	9507      	str	r5, [sp, #28]
 80070ea:	970a      	str	r7, [sp, #40]	; 0x28
 80070ec:	f8cd a010 	str.w	sl, [sp, #16]
 80070f0:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 80070f4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80071d0 <invoke+0x89c>
convolve_1x1_s8_fpreq(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,scales24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 80070f8:	e9cd e901 	strd	lr, r9, [sp, #4]
 80070fc:	f001 f804 	bl	8008108 <convolve_1x1_s8_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8007100:	463b      	mov	r3, r7
 8007102:	970b      	str	r7, [sp, #44]	; 0x2c
 8007104:	2780      	movs	r7, #128	; 0x80
 8007106:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80071d4 <invoke+0x8a0>
 800710a:	4642      	mov	r2, r8
 800710c:	9705      	str	r7, [sp, #20]
 800710e:	e063      	b.n	80071d8 <invoke+0x8a4>
 8007110:	08028b34 	.word	0x08028b34
 8007114:	08028bf4 	.word	0x08028bf4
 8007118:	080260d4 	.word	0x080260d4
 800711c:	0802f0ec 	.word	0x0802f0ec
 8007120:	080302ec 	.word	0x080302ec
 8007124:	3d813fea 	.word	0x3d813fea
 8007128:	3d845949 	.word	0x3d845949
 800712c:	3d96dbf8 	.word	0x3d96dbf8
 8007130:	3c9ac6bf 	.word	0x3c9ac6bf
 8007134:	08029634 	.word	0x08029634
 8007138:	08029874 	.word	0x08029874
 800713c:	20002468 	.word	0x20002468
 8007140:	080200cc 	.word	0x080200cc
 8007144:	0802edec 	.word	0x0802edec
 8007148:	080236f4 	.word	0x080236f4
 800714c:	08011d54 	.word	0x08011d54
 8007150:	08028cb4 	.word	0x08028cb4
 8007154:	0802018c 	.word	0x0802018c
 8007158:	080201ec 	.word	0x080201ec
 800715c:	0802f56c 	.word	0x0802f56c
 8007160:	08028d14 	.word	0x08028d14
 8007164:	080237b4 	.word	0x080237b4
 8007168:	08012684 	.word	0x08012684
 800716c:	08028f54 	.word	0x08028f54
 8007170:	08026194 	.word	0x08026194
 8007174:	0802042c 	.word	0x0802042c
 8007178:	08029194 	.word	0x08029194
 800717c:	080291f4 	.word	0x080291f4
 8007180:	0802048c 	.word	0x0802048c
 8007184:	0803106c 	.word	0x0803106c
 8007188:	080293d4 	.word	0x080293d4
 800718c:	080263d4 	.word	0x080263d4
 8007190:	080239f4 	.word	0x080239f4
 8007194:	08012b94 	.word	0x08012b94
 8007198:	080295d4 	.word	0x080295d4
 800719c:	08031c2c 	.word	0x08031c2c
 80071a0:	0802068c 	.word	0x0802068c
 80071a4:	080206ec 	.word	0x080206ec
 80071a8:	0803276c 	.word	0x0803276c
 80071ac:	080265b4 	.word	0x080265b4
 80071b0:	08023bd4 	.word	0x08023bd4
 80071b4:	0801374c 	.word	0x0801374c
 80071b8:	08029ab4 	.word	0x08029ab4
 80071bc:	0802092c 	.word	0x0802092c
 80071c0:	080334ec 	.word	0x080334ec
 80071c4:	080209cc 	.word	0x080209cc
 80071c8:	08034b6c 	.word	0x08034b6c
 80071cc:	08029b54 	.word	0x08029b54
 80071d0:	08029f14 	.word	0x08029f14
 80071d4:	080267f4 	.word	0x080267f4
 80071d8:	4641      	mov	r1, r8
 80071da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80071dc:	4628      	mov	r0, r5
 80071de:	f8df e3e4 	ldr.w	lr, [pc, #996]	; 80075c4 <invoke+0xc90>
 80071e2:	970c      	str	r7, [sp, #48]	; 0x30
 80071e4:	277f      	movs	r7, #127	; 0x7f
 80071e6:	f8df c3e0 	ldr.w	ip, [pc, #992]	; 80075c8 <invoke+0xc94>
 80071ea:	9707      	str	r7, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 80071ec:	2701      	movs	r7, #1
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 80071ee:	940d      	str	r4, [sp, #52]	; 0x34
 80071f0:	9406      	str	r4, [sp, #24]
 80071f2:	9404      	str	r4, [sp, #16]
 80071f4:	9508      	str	r5, [sp, #32]
 80071f6:	e9cd 9a02 	strd	r9, sl, [sp, #8]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 80071fa:	f04f 0980 	mov.w	r9, #128	; 0x80
 80071fe:	f506 7a7a 	add.w	sl, r6, #1000	; 0x3e8
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,scales25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8007202:	e9cd ce00 	strd	ip, lr, [sp]
 8007206:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 800720a:	f7fe fdd3 	bl	8005db4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 800720e:	f8df e3bc 	ldr.w	lr, [pc, #956]	; 80075cc <invoke+0xc98>
 8007212:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 80075d0 <invoke+0xc9c>
 8007216:	4642      	mov	r2, r8
 8007218:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800721c:	4641      	mov	r1, r8
 800721e:	f8cd c000 	str.w	ip, [sp]
 8007222:	4628      	mov	r0, r5
 8007224:	f8cd 8020 	str.w	r8, [sp, #32]
 8007228:	23f0      	movs	r3, #240	; 0xf0
 800722a:	9405      	str	r4, [sp, #20]
 800722c:	f8cd a01c 	str.w	sl, [sp, #28]
 8007230:	e9cd 7903 	strd	r7, r9, [sp, #12]
 8007234:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007236:	f04f 097f 	mov.w	r9, #127	; 0x7f
 800723a:	e9cd b70a 	strd	fp, r7, [sp, #40]	; 0x28
 800723e:	4fd3      	ldr	r7, [pc, #844]	; (800758c <invoke+0xc58>)
 8007240:	f8cd 9018 	str.w	r9, [sp, #24]
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 8007244:	f04f 09c0 	mov.w	r9, #192	; 0xc0
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 8007248:	e9cd e701 	strd	lr, r7, [sp, #4]
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 800724c:	f505 6758 	add.w	r7, r5, #3456	; 0xd80
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,scales26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 8007250:	f000 ff5a 	bl	8008108 <convolve_1x1_s8_fpreq>
add_fpreq(1000, &buffer0[7000],0.04340619966387749,1,&buffer0[6000],0.0489354208111763,-11,0.04974109306931496,-3,&buffer0[8000]);
 8007254:	eef8 2a08 	vmov.f32	s5, #136	; 0xc0400000 -3.0
 8007258:	ed9f 2acd 	vldr	s4, [pc, #820]	; 8007590 <invoke+0xc5c>
 800725c:	eefa 1a06 	vmov.f32	s3, #166	; 0xc1300000 -11.0
 8007260:	ed9f 1acc 	vldr	s2, [pc, #816]	; 8007594 <invoke+0xc60>
 8007264:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007268:	ed9f 0acb 	vldr	s0, [pc, #812]	; 8007598 <invoke+0xc64>
 800726c:	4651      	mov	r1, sl
 800726e:	f50a 737a 	add.w	r3, sl, #1000	; 0x3e8
 8007272:	4632      	mov	r2, r6
 8007274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007278:	f000 fb78 	bl	800796c <add_fpreq>
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 800727c:	9713      	str	r7, [sp, #76]	; 0x4c
convolve_1x1_s8_fpreq(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,scales27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 800727e:	2703      	movs	r7, #3
 8007280:	f8df e350 	ldr.w	lr, [pc, #848]	; 80075d4 <invoke+0xca0>
 8007284:	f8df c350 	ldr.w	ip, [pc, #848]	; 80075d8 <invoke+0xca4>
 8007288:	465b      	mov	r3, fp
 800728a:	f8df a350 	ldr.w	sl, [pc, #848]	; 80075dc <invoke+0xca8>
 800728e:	22f0      	movs	r2, #240	; 0xf0
 8007290:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
 8007294:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007298:	920a      	str	r2, [sp, #40]	; 0x28
 800729a:	4641      	mov	r1, r8
 800729c:	4642      	mov	r2, r8
 800729e:	f8cd 8020 	str.w	r8, [sp, #32]
 80072a2:	9403      	str	r4, [sp, #12]
 80072a4:	f505 50fa 	add.w	r0, r5, #8000	; 0x1f40
 80072a8:	9507      	str	r5, [sp, #28]
 80072aa:	f8cd b018 	str.w	fp, [sp, #24]
 80072ae:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 80072b2:	f8df b32c 	ldr.w	fp, [pc, #812]	; 80075e0 <invoke+0xcac>
convolve_1x1_s8_fpreq(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,scales27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 80072b6:	e9cd 7404 	strd	r7, r4, [sp, #16]
 80072ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80072bc:	970b      	str	r7, [sp, #44]	; 0x2c
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 80072be:	2780      	movs	r7, #128	; 0x80
convolve_1x1_s8_fpreq(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,scales27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 80072c0:	e9cd ea01 	strd	lr, sl, [sp, #4]
 80072c4:	f000 ff20 	bl	8008108 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,scales28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 80072c8:	9705      	str	r7, [sp, #20]
 80072ca:	277f      	movs	r7, #127	; 0x7f
 80072cc:	f8df e314 	ldr.w	lr, [pc, #788]	; 80075e4 <invoke+0xcb0>
 80072d0:	23f0      	movs	r3, #240	; 0xf0
 80072d2:	f8df c314 	ldr.w	ip, [pc, #788]	; 80075e8 <invoke+0xcb4>
 80072d6:	9707      	str	r7, [sp, #28]
 80072d8:	4642      	mov	r2, r8
 80072da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80072dc:	4641      	mov	r1, r8
 80072de:	f8df a30c 	ldr.w	sl, [pc, #780]	; 80075ec <invoke+0xcb8>
 80072e2:	4628      	mov	r0, r5
 80072e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072e6:	940d      	str	r4, [sp, #52]	; 0x34
 80072e8:	9406      	str	r4, [sp, #24]
 80072ea:	9404      	str	r4, [sp, #16]
 80072ec:	970c      	str	r7, [sp, #48]	; 0x30
 80072ee:	9508      	str	r5, [sp, #32]
 80072f0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80072f4:	e9cd ce00 	strd	ip, lr, [sp]
 80072f8:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 80072fc:	f7fc fd66 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8007300:	f04f 0b0f 	mov.w	fp, #15
 8007304:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 80075f0 <invoke+0xcbc>
 8007308:	2230      	movs	r2, #48	; 0x30
 800730a:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 80075f4 <invoke+0xcc0>
 800730e:	4641      	mov	r1, r8
 8007310:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 80075f8 <invoke+0xcc4>
 8007314:	4628      	mov	r0, r5
 8007316:	920a      	str	r2, [sp, #40]	; 0x28
 8007318:	23f0      	movs	r3, #240	; 0xf0
 800731a:	4642      	mov	r2, r8
 800731c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007320:	9405      	str	r4, [sp, #20]
 8007322:	970b      	str	r7, [sp, #44]	; 0x2c
 8007324:	f8cd c000 	str.w	ip, [sp]
 8007328:	e9cd 6807 	strd	r6, r8, [sp, #28]
 800732c:	2680      	movs	r6, #128	; 0x80
 800732e:	e9cd b603 	strd	fp, r6, [sp, #12]
 8007332:	267f      	movs	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 8007334:	f06f 0b0e 	mvn.w	fp, #14
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8007338:	e9cd ea01 	strd	lr, sl, [sp, #4]
 800733c:	9606      	str	r6, [sp, #24]
 800733e:	f000 fee3 	bl	8008108 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 8007342:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80075fc <invoke+0xcc8>
 8007346:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8007600 <invoke+0xccc>
 800734a:	4642      	mov	r2, r8
 800734c:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8007604 <invoke+0xcd0>
 8007350:	4641      	mov	r1, r8
 8007352:	9606      	str	r6, [sp, #24]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 8007354:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 8007356:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800735a:	2330      	movs	r3, #48	; 0x30
 800735c:	f8cd 8020 	str.w	r8, [sp, #32]
 8007360:	9405      	str	r4, [sp, #20]
 8007362:	9403      	str	r4, [sp, #12]
 8007364:	970b      	str	r7, [sp, #44]	; 0x2c
 8007366:	9507      	str	r5, [sp, #28]
 8007368:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800736c:	f8cd b010 	str.w	fp, [sp, #16]
 8007370:	f8cd c000 	str.w	ip, [sp]
 8007374:	4889      	ldr	r0, [pc, #548]	; (800759c <invoke+0xc68>)
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 8007376:	f8df b290 	ldr.w	fp, [pc, #656]	; 8007608 <invoke+0xcd4>
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 800737a:	e9cd ea01 	strd	lr, sl, [sp, #4]
 800737e:	f000 fd03 	bl	8007d88 <convolve_1x1_s8_ch48_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 8007382:	f8df a288 	ldr.w	sl, [pc, #648]	; 800760c <invoke+0xcd8>
 8007386:	f8df e288 	ldr.w	lr, [pc, #648]	; 8007610 <invoke+0xcdc>
 800738a:	464b      	mov	r3, r9
 800738c:	f8df c284 	ldr.w	ip, [pc, #644]	; 8007614 <invoke+0xce0>
 8007390:	4642      	mov	r2, r8
 8007392:	9605      	str	r6, [sp, #20]
 8007394:	267f      	movs	r6, #127	; 0x7f
 8007396:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800739a:	4641      	mov	r1, r8
 800739c:	940d      	str	r4, [sp, #52]	; 0x34
 800739e:	4628      	mov	r0, r5
 80073a0:	9406      	str	r4, [sp, #24]
 80073a2:	9404      	str	r4, [sp, #16]
 80073a4:	9607      	str	r6, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80073a6:	2680      	movs	r6, #128	; 0x80
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,scales31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 80073a8:	970c      	str	r7, [sp, #48]	; 0x30
 80073aa:	9508      	str	r5, [sp, #32]
 80073ac:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80073b0:	e9cd ce00 	strd	ip, lr, [sp]
 80073b4:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 80073b8:	f7fc fd08 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80073bc:	464b      	mov	r3, r9
 80073be:	f06f 090a 	mvn.w	r9, #10
 80073c2:	f8df e254 	ldr.w	lr, [pc, #596]	; 8007618 <invoke+0xce4>
 80073c6:	f8df c254 	ldr.w	ip, [pc, #596]	; 800761c <invoke+0xce8>
 80073ca:	2230      	movs	r2, #48	; 0x30
 80073cc:	f8df a250 	ldr.w	sl, [pc, #592]	; 8007620 <invoke+0xcec>
 80073d0:	4641      	mov	r1, r8
 80073d2:	920a      	str	r2, [sp, #40]	; 0x28
 80073d4:	4628      	mov	r0, r5
 80073d6:	4642      	mov	r2, r8
 80073d8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80073dc:	f8cd 8020 	str.w	r8, [sp, #32]
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 80073e0:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80073e4:	9405      	str	r4, [sp, #20]
 80073e6:	970b      	str	r7, [sp, #44]	; 0x2c
 80073e8:	f8cd a008 	str.w	sl, [sp, #8]
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 80073ec:	f06f 0a04 	mvn.w	sl, #4
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80073f0:	e9cd 9603 	strd	r9, r6, [sp, #12]
 80073f4:	267f      	movs	r6, #127	; 0x7f
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 80073f6:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8007624 <invoke+0xcf0>
convolve_1x1_s8_fpreq(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,scales32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80073fa:	9606      	str	r6, [sp, #24]
 80073fc:	f505 5696 	add.w	r6, r5, #4800	; 0x12c0
 8007400:	e9cd ce00 	strd	ip, lr, [sp]
 8007404:	9607      	str	r6, [sp, #28]
 8007406:	f000 fe7f 	bl	8008108 <convolve_1x1_s8_fpreq>
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 800740a:	4631      	mov	r1, r6
 800740c:	f506 6296 	add.w	r2, r6, #1200	; 0x4b0
 8007410:	f506 6316 	add.w	r3, r6, #2400	; 0x960
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 8007414:	267f      	movs	r6, #127	; 0x7f
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 8007416:	eef1 2a04 	vmov.f32	s5, #20	; 0x40a00000  5.0
 800741a:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80075a0 <invoke+0xc6c>
 800741e:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 8007422:	ed9f 1a60 	vldr	s2, [pc, #384]	; 80075a4 <invoke+0xc70>
 8007426:	eefa 0a06 	vmov.f32	s1, #166	; 0xc1300000 -11.0
 800742a:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80075a8 <invoke+0xc74>
 800742e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007432:	f000 fa9b 	bl	800796c <add_fpreq>
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 8007436:	9606      	str	r6, [sp, #24]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8007438:	2680      	movs	r6, #128	; 0x80
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 800743a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8007628 <invoke+0xcf4>
 800743e:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 800762c <invoke+0xcf8>
 8007442:	21f0      	movs	r1, #240	; 0xf0
 8007444:	970f      	str	r7, [sp, #60]	; 0x3c
 8007446:	4642      	mov	r2, r8
 8007448:	970b      	str	r7, [sp, #44]	; 0x2c
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 800744a:	4637      	mov	r7, r6
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 800744c:	2603      	movs	r6, #3
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 800744e:	910a      	str	r1, [sp, #40]	; 0x28
 8007450:	9405      	str	r4, [sp, #20]
 8007452:	4641      	mov	r1, r8
 8007454:	9403      	str	r4, [sp, #12]
 8007456:	f505 50e1 	add.w	r0, r5, #7200	; 0x1c20
 800745a:	9507      	str	r5, [sp, #28]
 800745c:	2330      	movs	r3, #48	; 0x30
 800745e:	f8cd a010 	str.w	sl, [sp, #16]
 8007462:	f8cd c000 	str.w	ip, [sp]
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 8007466:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8007630 <invoke+0xcfc>
convolve_1x1_s8_ch48_fpreq(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,scales33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 800746a:	e9cd e901 	strd	lr, r9, [sp, #4]
 800746e:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8007472:	f000 fc89 	bl	8007d88 <convolve_1x1_s8_ch48_fpreq>
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 8007476:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8007634 <invoke+0xd00>
 800747a:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8007638 <invoke+0xd04>
 800747e:	23f0      	movs	r3, #240	; 0xf0
 8007480:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800763c <invoke+0xd08>
 8007484:	4642      	mov	r2, r8
 8007486:	4641      	mov	r1, r8
 8007488:	f04f 087f 	mov.w	r8, #127	; 0x7f
 800748c:	930b      	str	r3, [sp, #44]	; 0x2c
 800748e:	4628      	mov	r0, r5
 8007490:	9705      	str	r7, [sp, #20]
 8007492:	940d      	str	r4, [sp, #52]	; 0x34
 8007494:	9406      	str	r4, [sp, #24]
 8007496:	9404      	str	r4, [sp, #16]
 8007498:	f8cd 801c 	str.w	r8, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 800749c:	f06f 0806 	mvn.w	r8, #6
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80074a0:	9508      	str	r5, [sp, #32]
 80074a2:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
 80074a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80074a8:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80074ac:	e9cd ce00 	strd	ip, lr, [sp]
 80074b0:	960c      	str	r6, [sp, #48]	; 0x30
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80074b2:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80074b6:	f7fd fd91 	bl	8004fdc <depthwise_kernel5x5_stride2_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80074ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80074bc:	2203      	movs	r2, #3
 80074be:	f8df e180 	ldr.w	lr, [pc, #384]	; 8007640 <invoke+0xd0c>
 80074c2:	960b      	str	r6, [sp, #44]	; 0x2c
 80074c4:	f505 5687 	add.w	r6, r5, #4320	; 0x10e0
 80074c8:	f8df c178 	ldr.w	ip, [pc, #376]	; 8007644 <invoke+0xd10>
 80074cc:	4611      	mov	r1, r2
 80074ce:	9607      	str	r6, [sp, #28]
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 80074d0:	4626      	mov	r6, r4
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80074d2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007648 <invoke+0xd14>
 80074d6:	23f0      	movs	r3, #240	; 0xf0
 80074d8:	9209      	str	r2, [sp, #36]	; 0x24
 80074da:	4628      	mov	r0, r5
 80074dc:	9208      	str	r2, [sp, #32]
 80074de:	f8cd a018 	str.w	sl, [sp, #24]
 80074e2:	f8cd 800c 	str.w	r8, [sp, #12]
depthwise_kernel5x5_stride2_inplace_CHW_fpreq(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,scales34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 80074e6:	4690      	mov	r8, r2
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80074e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80074ec:	f8cd e004 	str.w	lr, [sp, #4]
 80074f0:	f8cd c000 	str.w	ip, [sp]
 80074f4:	9712      	str	r7, [sp, #72]	; 0x48
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 80074f6:	9510      	str	r5, [sp, #64]	; 0x40
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80074f8:	e9cd 7404 	strd	r7, r4, [sp, #16]
 80074fc:	2460      	movs	r4, #96	; 0x60
 80074fe:	4657      	mov	r7, sl
 8007500:	940a      	str	r4, [sp, #40]	; 0x28
convolve_1x1_s8_fpreq(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,scales29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 8007502:	4654      	mov	r4, sl
convolve_1x1_s8_fpreq(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,scales35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8007504:	f000 fe00 	bl	8008108 <convolve_1x1_s8_fpreq>
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8007508:	9605      	str	r6, [sp, #20]
 800750a:	9603      	str	r6, [sp, #12]
 800750c:	f505 5087 	add.w	r0, r5, #4320	; 0x10e0
 8007510:	4635      	mov	r5, r6
 8007512:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007514:	f04f 0e07 	mov.w	lr, #7
 8007518:	f8df c130 	ldr.w	ip, [pc, #304]	; 800764c <invoke+0xd18>
convolve_1x1_s8_ch48_fpreq(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,scales30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 800751c:	46b1      	mov	r9, r6
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 800751e:	960b      	str	r6, [sp, #44]	; 0x2c
 8007520:	4e22      	ldr	r6, [pc, #136]	; (80075ac <invoke+0xc78>)
 8007522:	4642      	mov	r2, r8
 8007524:	9706      	str	r7, [sp, #24]
 8007526:	4641      	mov	r1, r8
 8007528:	9601      	str	r6, [sp, #4]
 800752a:	2360      	movs	r3, #96	; 0x60
 800752c:	4e20      	ldr	r6, [pc, #128]	; (80075b0 <invoke+0xc7c>)
/* layer 46:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 800752e:	f44f 7ac0 	mov.w	sl, #384	; 0x180
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8007532:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007534:	9600      	str	r6, [sp, #0]
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 8007536:	4e1f      	ldr	r6, [pc, #124]	; (80075b4 <invoke+0xc80>)
convolve_1x1_s8_fpreq(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,scales36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8007538:	f8cd e010 	str.w	lr, [sp, #16]
 800753c:	f8cd c008 	str.w	ip, [sp, #8]
 8007540:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007544:	f8cd 8020 	str.w	r8, [sp, #32]
 8007548:	9707      	str	r7, [sp, #28]
 800754a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800754e:	f000 fddb 	bl	8008108 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 8007552:	4f19      	ldr	r7, [pc, #100]	; (80075b8 <invoke+0xc84>)
 8007554:	9603      	str	r6, [sp, #12]
 8007556:	465b      	mov	r3, fp
 8007558:	4e18      	ldr	r6, [pc, #96]	; (80075bc <invoke+0xc88>)
 800755a:	4642      	mov	r2, r8
 800755c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800755e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007560:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007564:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007568:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800756c:	9105      	str	r1, [sp, #20]
 800756e:	4641      	mov	r1, r8
 8007570:	950d      	str	r5, [sp, #52]	; 0x34
 8007572:	9506      	str	r5, [sp, #24]
 8007574:	9504      	str	r5, [sp, #16]
 8007576:	9407      	str	r4, [sp, #28]
 8007578:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800757c:	9008      	str	r0, [sp, #32]
 800757e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8007582:	4e0f      	ldr	r6, [pc, #60]	; (80075c0 <invoke+0xc8c>)
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8007584:	f06f 0701 	mvn.w	r7, #1
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 8007588:	9600      	str	r6, [sp, #0]
 800758a:	e061      	b.n	8007650 <invoke+0xd1c>
 800758c:	0802a2d4 	.word	0x0802a2d4
 8007590:	3d4bbd51 	.word	0x3d4bbd51
 8007594:	3d487082 	.word	0x3d487082
 8007598:	3d31cab3 	.word	0x3d31cab3
 800759c:	20002468 	.word	0x20002468
 80075a0:	3d5a99bb 	.word	0x3d5a99bb
 80075a4:	3d354590 	.word	0x3d354590
 80075a8:	3d49a959 	.word	0x3d49a959
 80075ac:	08021c6c 	.word	0x08021c6c
 80075b0:	0804b96c 	.word	0x0804b96c
 80075b4:	0802c3b4 	.word	0x0802c3b4
 80075b8:	08027634 	.word	0x08027634
 80075bc:	08024c54 	.word	0x08024c54
 80075c0:	0801a76c 	.word	0x0801a76c
 80075c4:	08023e14 	.word	0x08023e14
 80075c8:	080152dc 	.word	0x080152dc
 80075cc:	08020d8c 	.word	0x08020d8c
 80075d0:	080370ec 	.word	0x080370ec
 80075d4:	08020e2c 	.word	0x08020e2c
 80075d8:	0803966c 	.word	0x0803966c
 80075dc:	0802a374 	.word	0x0802a374
 80075e0:	0802a734 	.word	0x0802a734
 80075e4:	080241d4 	.word	0x080241d4
 80075e8:	080180cc 	.word	0x080180cc
 80075ec:	08026bb4 	.word	0x08026bb4
 80075f0:	080211ec 	.word	0x080211ec
 80075f4:	0803bbec 	.word	0x0803bbec
 80075f8:	0802aaf4 	.word	0x0802aaf4
 80075fc:	0802ac74 	.word	0x0802ac74
 8007600:	0802136c 	.word	0x0802136c
 8007604:	0803ea6c 	.word	0x0803ea6c
 8007608:	0802af74 	.word	0x0802af74
 800760c:	08026f74 	.word	0x08026f74
 8007610:	08024594 	.word	0x08024594
 8007614:	0801893c 	.word	0x0801893c
 8007618:	0802166c 	.word	0x0802166c
 800761c:	08040e6c 	.word	0x08040e6c
 8007620:	0802b274 	.word	0x0802b274
 8007624:	0802b334 	.word	0x0802b334
 8007628:	0802172c 	.word	0x0802172c
 800762c:	0804326c 	.word	0x0804326c
 8007630:	0802b6f4 	.word	0x0802b6f4
 8007634:	08027274 	.word	0x08027274
 8007638:	08024894 	.word	0x08024894
 800763c:	08018ffc 	.word	0x08018ffc
 8007640:	08021aec 	.word	0x08021aec
 8007644:	08045f6c 	.word	0x08045f6c
 8007648:	0802bab4 	.word	0x0802bab4
 800764c:	0802bc34 	.word	0x0802bc34
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8007650:	4ea5      	ldr	r6, [pc, #660]	; (80078e8 <invoke+0xfb4>)
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,scales37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 8007652:	f7fc fbbb 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8007656:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8007920 <invoke+0xfec>
 800765a:	2260      	movs	r2, #96	; 0x60
 800765c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800765e:	465b      	mov	r3, fp
 8007660:	940f      	str	r4, [sp, #60]	; 0x3c
/* layer 48:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
/* layer 49:ADD */
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
/* layer 50:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 8007662:	f44f 7b90 	mov.w	fp, #288	; 0x120
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8007666:	9406      	str	r4, [sp, #24]
 8007668:	4ca0      	ldr	r4, [pc, #640]	; (80078ec <invoke+0xfb8>)
 800766a:	920a      	str	r2, [sp, #40]	; 0x28
 800766c:	4642      	mov	r2, r8
 800766e:	9104      	str	r1, [sp, #16]
 8007670:	4641      	mov	r1, r8
 8007672:	9505      	str	r5, [sp, #20]
 8007674:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8007678:	9407      	str	r4, [sp, #28]
 800767a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800767c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8007680:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007684:	4e9a      	ldr	r6, [pc, #616]	; (80078f0 <invoke+0xfbc>)
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8007686:	4f9b      	ldr	r7, [pc, #620]	; (80078f4 <invoke+0xfc0>)
convolve_1x1_s8_fpreq(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,scales38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8007688:	e9cd 6c00 	strd	r6, ip, [sp]
 800768c:	e9cd 8808 	strd	r8, r8, [sp, #32]
 8007690:	f000 fd3a 	bl	8008108 <convolve_1x1_s8_fpreq>
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 8007694:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007698:	eeb0 2a48 	vmov.f32	s4, s16
 800769c:	ed9f 1a96 	vldr	s2, [pc, #600]	; 80078f8 <invoke+0xfc4>
 80076a0:	eefa 2a02 	vmov.f32	s5, #162	; 0xc1100000 -9.0
 80076a4:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80078fc <invoke+0xfc8>
 80076a8:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 80076ac:	4621      	mov	r1, r4
 80076ae:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 80076b2:	f5a4 7258 	sub.w	r2, r4, #864	; 0x360
 80076b6:	464b      	mov	r3, r9
 80076b8:	f44f 7058 	mov.w	r0, #864	; 0x360
 80076bc:	f000 f956 	bl	800796c <add_fpreq>
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 80076c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80076c2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8007924 <invoke+0xff0>
 80076c6:	f04f 0e09 	mov.w	lr, #9
 80076ca:	9406      	str	r4, [sp, #24]
 80076cc:	4642      	mov	r2, r8
 80076ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80076d0:	4641      	mov	r1, r8
 80076d2:	4e8b      	ldr	r6, [pc, #556]	; (8007900 <invoke+0xfcc>)
 80076d4:	4648      	mov	r0, r9
 80076d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80076d8:	2360      	movs	r3, #96	; 0x60
 80076da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80076dc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80076e0:	f8cd 8020 	str.w	r8, [sp, #32]
 80076e4:	9505      	str	r5, [sp, #20]
 80076e6:	9503      	str	r5, [sp, #12]
 80076e8:	9407      	str	r4, [sp, #28]
 80076ea:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80076ee:	f8cd e010 	str.w	lr, [sp, #16]
 80076f2:	9600      	str	r6, [sp, #0]
 80076f4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 80076f8:	4e82      	ldr	r6, [pc, #520]	; (8007904 <invoke+0xfd0>)
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 80076fa:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8007928 <invoke+0xff4>
convolve_1x1_s8_fpreq(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,scales39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 80076fe:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8007702:	f000 fd01 	bl	8008108 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8007706:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007708:	f8df e220 	ldr.w	lr, [pc, #544]	; 800792c <invoke+0xff8>
 800770c:	4642      	mov	r2, r8
 800770e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007710:	4641      	mov	r1, r8
 8007712:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8007930 <invoke+0xffc>
 8007716:	4653      	mov	r3, sl
 8007718:	4f7b      	ldr	r7, [pc, #492]	; (8007908 <invoke+0xfd4>)
 800771a:	950d      	str	r5, [sp, #52]	; 0x34
 800771c:	9703      	str	r7, [sp, #12]
/* layer 51:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,scales43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
/* layer 52:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 800771e:	27a0      	movs	r7, #160	; 0xa0
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8007720:	9600      	str	r6, [sp, #0]
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8007722:	f06f 0605 	mvn.w	r6, #5
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,scales40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8007726:	9008      	str	r0, [sp, #32]
 8007728:	e9cd 5406 	strd	r5, r4, [sp, #24]
 800772c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800772e:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8007732:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007734:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8007738:	e9cd a40b 	strd	sl, r4, [sp, #44]	; 0x2c
 800773c:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8007740:	f7fc fb44 	bl	8003dcc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8007744:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007746:	9411      	str	r4, [sp, #68]	; 0x44
 8007748:	4653      	mov	r3, sl
 800774a:	940b      	str	r4, [sp, #44]	; 0x2c
 800774c:	f500 5487 	add.w	r4, r0, #4320	; 0x10e0
 8007750:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8007934 <invoke+0x1000>
 8007754:	f04f 0a60 	mov.w	sl, #96	; 0x60
 8007758:	9407      	str	r4, [sp, #28]
 800775a:	4642      	mov	r2, r8
 800775c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800775e:	4641      	mov	r1, r8
 8007760:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8007938 <invoke+0x1004>
 8007764:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007768:	f8cd c000 	str.w	ip, [sp]
 800776c:	9603      	str	r6, [sp, #12]
/* layer 53:AVERAGE_POOL_2D */
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 800776e:	2601      	movs	r6, #1
convolve_1x1_s8_fpreq(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,scales41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8007770:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8007774:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007776:	e9cd e901 	strd	lr, r9, [sp, #4]
 800777a:	e9cd 8808 	strd	r8, r8, [sp, #32]
 800777e:	9404      	str	r4, [sp, #16]
 8007780:	4654      	mov	r4, sl
 8007782:	f000 fcc1 	bl	8008108 <convolve_1x1_s8_fpreq>
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 8007786:	4961      	ldr	r1, [pc, #388]	; (800790c <invoke+0xfd8>)
 8007788:	eeb0 1a48 	vmov.f32	s2, s16
 800778c:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8007910 <invoke+0xfdc>
 8007790:	eefa 2a08 	vmov.f32	s5, #168	; 0xc1400000 -12.0
 8007794:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8007914 <invoke+0xfe0>
 8007798:	eefa 1a02 	vmov.f32	s3, #162	; 0xc1100000 -9.0
 800779c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800779e:	eef9 0a08 	vmov.f32	s1, #152	; 0xc0c00000 -6.0
 80077a2:	f5a1 63d8 	sub.w	r3, r1, #1728	; 0x6c0
 80077a6:	f44f 7058 	mov.w	r0, #864	; 0x360
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 80077aa:	f04f 0a0c 	mov.w	sl, #12
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 80077ae:	f000 f8dd 	bl	800796c <add_fpreq>
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 80077b2:	4623      	mov	r3, r4
 80077b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80077b6:	4642      	mov	r2, r8
 80077b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077ba:	f8df e180 	ldr.w	lr, [pc, #384]	; 800793c <invoke+0x1008>
 80077be:	f8df c180 	ldr.w	ip, [pc, #384]	; 8007940 <invoke+0x100c>
 80077c2:	9407      	str	r4, [sp, #28]
 80077c4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007944 <invoke+0x1010>
 80077c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80077ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80077cc:	4641      	mov	r1, r8
 80077ce:	9503      	str	r5, [sp, #12]
 80077d0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80077d4:	f8cd a010 	str.w	sl, [sp, #16]
 80077d8:	f8cd c000 	str.w	ip, [sp]
 80077dc:	484e      	ldr	r0, [pc, #312]	; (8007918 <invoke+0xfe4>)
 80077de:	950f      	str	r5, [sp, #60]	; 0x3c
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,scales43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
 80077e0:	f8df a164 	ldr.w	sl, [pc, #356]	; 8007948 <invoke+0x1014>
convolve_1x1_s8_fpreq(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,scales42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 80077e4:	e9cd 5405 	strd	r5, r4, [sp, #20]
 80077e8:	e9cd e901 	strd	lr, r9, [sp, #4]
 80077ec:	e9cd 8808 	strd	r8, r8, [sp, #32]
 80077f0:	f000 fc8a 	bl	8008108 <convolve_1x1_s8_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,scales43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
 80077f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077f8:	4642      	mov	r2, r8
 80077fa:	9513      	str	r5, [sp, #76]	; 0x4c
 80077fc:	4641      	mov	r1, r8
 80077fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007800:	f8df e148 	ldr.w	lr, [pc, #328]	; 800794c <invoke+0x1018>
 8007804:	f8df c148 	ldr.w	ip, [pc, #328]	; 8007950 <invoke+0x101c>
 8007808:	950d      	str	r5, [sp, #52]	; 0x34
 800780a:	940f      	str	r4, [sp, #60]	; 0x3c
 800780c:	9407      	str	r4, [sp, #28]
 800780e:	9506      	str	r5, [sp, #24]
 8007810:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007812:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007814:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8007954 <invoke+0x1020>
 8007818:	930c      	str	r3, [sp, #48]	; 0x30
 800781a:	465b      	mov	r3, fp
 800781c:	9505      	str	r5, [sp, #20]
 800781e:	9404      	str	r4, [sp, #16]
 8007820:	9008      	str	r0, [sp, #32]
 8007822:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007826:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800782a:	e9cd ce00 	strd	ip, lr, [sp]
 800782e:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 8007832:	f7fe fabf 	bl	8005db4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8007836:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007838:	9810      	ldr	r0, [sp, #64]	; 0x40
 800783a:	f04f 0a09 	mov.w	sl, #9
 800783e:	f8df e118 	ldr.w	lr, [pc, #280]	; 8007958 <invoke+0x1024>
 8007842:	465b      	mov	r3, fp
 8007844:	f8df c114 	ldr.w	ip, [pc, #276]	; 800795c <invoke+0x1028>
 8007848:	f500 6222 	add.w	r2, r0, #2592	; 0xa20
 800784c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800784e:	9406      	str	r4, [sp, #24]
 8007850:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8007960 <invoke+0x102c>
 8007854:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007856:	9207      	str	r2, [sp, #28]
 8007858:	4642      	mov	r2, r8
 800785a:	910b      	str	r1, [sp, #44]	; 0x2c
 800785c:	4641      	mov	r1, r8
 800785e:	9405      	str	r4, [sp, #20]
 8007860:	9504      	str	r5, [sp, #16]
 8007862:	f8cd a00c 	str.w	sl, [sp, #12]
/* layer 54:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,scales45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 8007866:	f04f 0a02 	mov.w	sl, #2
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 800786a:	970a      	str	r7, [sp, #40]	; 0x28
 800786c:	f8cd 9000 	str.w	r9, [sp]
convolve_1x1_s8_fpreq(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,scales45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 8007870:	f06f 0908 	mvn.w	r9, #8
convolve_1x1_s8_fpreq(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,scales44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8007874:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8007878:	e9cd 8808 	strd	r8, r8, [sp, #32]
 800787c:	f000 fc44 	bl	8008108 <convolve_1x1_s8_fpreq>
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 8007880:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007882:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007884:	4642      	mov	r2, r8
 8007886:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007888:	4641      	mov	r1, r8
 800788a:	9306      	str	r3, [sp, #24]
 800788c:	463b      	mov	r3, r7
 800788e:	9405      	str	r4, [sp, #20]
 8007890:	9504      	str	r5, [sp, #16]
 8007892:	4821      	ldr	r0, [pc, #132]	; (8007918 <invoke+0xfe4>)
 8007894:	e9cd 8800 	strd	r8, r8, [sp]
 8007898:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800789c:	f002 f838 	bl	8009910 <avg_pooling>
convolve_1x1_s8_fpreq(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,scales45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 80078a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a2:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8007964 <invoke+0x1030>
 80078a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80078aa:	eb03 0b07 	add.w	fp, r3, r7
 80078ae:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8007968 <invoke+0x1034>
 80078b2:	463b      	mov	r3, r7
 80078b4:	4f19      	ldr	r7, [pc, #100]	; (800791c <invoke+0xfe8>)
 80078b6:	4632      	mov	r2, r6
 80078b8:	9406      	str	r4, [sp, #24]
 80078ba:	9505      	str	r5, [sp, #20]
 80078bc:	f8cd b01c 	str.w	fp, [sp, #28]
 80078c0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80078c4:	9700      	str	r7, [sp, #0]
 80078c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078ca:	e9cd 6608 	strd	r6, r6, [sp, #32]
 80078ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80078d0:	4631      	mov	r1, r6
 80078d2:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80078d6:	e9cd ce01 	strd	ip, lr, [sp, #4]
 80078da:	f000 fc15 	bl	8008108 <convolve_1x1_s8_fpreq>
}
 80078de:	b015      	add	sp, #84	; 0x54
 80078e0:	ecbd 8b04 	vpop	{d8-d9}
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	0802cb34 	.word	0x0802cb34
 80078ec:	20002138 	.word	0x20002138
 80078f0:	08056d6c 	.word	0x08056d6c
 80078f4:	0802256c 	.word	0x0802256c
 80078f8:	3d2cd156 	.word	0x3d2cd156
 80078fc:	3d244ccb 	.word	0x3d244ccb
 8007900:	0806216c 	.word	0x0806216c
 8007904:	0801b9fc 	.word	0x0801b9fc
 8007908:	0802d374 	.word	0x0802d374
 800790c:	20001dd8 	.word	0x20001dd8
 8007910:	3d2bef7e 	.word	0x3d2bef7e
 8007914:	3c9e4244 	.word	0x3c9e4244
 8007918:	20001718 	.word	0x20001718
 800791c:	0808616c 	.word	0x0808616c
 8007920:	080223ec 	.word	0x080223ec
 8007924:	0802ccb4 	.word	0x0802ccb4
 8007928:	0802d974 	.word	0x0802d974
 800792c:	08027e74 	.word	0x08027e74
 8007930:	08025494 	.word	0x08025494
 8007934:	08022b6c 	.word	0x08022b6c
 8007938:	0806b16c 	.word	0x0806b16c
 800793c:	08022cec 	.word	0x08022cec
 8007940:	0807416c 	.word	0x0807416c
 8007944:	0802daf4 	.word	0x0802daf4
 8007948:	0802df74 	.word	0x0802df74
 800794c:	08025a94 	.word	0x08025a94
 8007950:	0801c77c 	.word	0x0801c77c
 8007954:	08028474 	.word	0x08028474
 8007958:	0802e3f4 	.word	0x0802e3f4
 800795c:	0802316c 	.word	0x0802316c
 8007960:	0807ad6c 	.word	0x0807ad6c
 8007964:	0802e674 	.word	0x0802e674
 8007968:	080233ec 	.word	0x080233ec

0800796c <add_fpreq>:
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
  for (int i = 0; i < size; ++i) {
 800796c:	2800      	cmp	r0, #0
 800796e:	dd49      	ble.n	8007a04 <add_fpreq+0x98>
 8007970:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			const float zero_y, int8_t* output_data) {
 8007974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007978:	ed2d 8b06 	vpush	{d8-d10}
 800797c:	eec7 aa82 	vdiv.f32	s21, s15, s4
 8007980:	460c      	mov	r4, r1
 8007982:	4690      	mov	r8, r2
 8007984:	1e5d      	subs	r5, r3, #1
 8007986:	180e      	adds	r6, r1, r0
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
      clamped_output = TN_MAX(clamped_output, -128);
 8007988:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 800798c:	eeb0 8a40 	vmov.f32	s16, s0
 8007990:	eef0 8a60 	vmov.f32	s17, s1
 8007994:	eeb0 9a41 	vmov.f32	s18, s2
 8007998:	eef0 9a61 	vmov.f32	s19, s3
 800799c:	eeb0 aa62 	vmov.f32	s20, s5
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80079a0:	f918 3b01 	ldrsb.w	r3, [r8], #1
 80079a4:	ee07 3a90 	vmov	s15, r3
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 80079a8:	f914 3b01 	ldrsb.w	r3, [r4], #1
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80079ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 80079b0:	ee07 3a10 	vmov	s14, r3
 80079b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80079b8:	ee77 7ae9 	vsub.f32	s15, s15, s19
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 80079bc:	ee37 7a68 	vsub.f32	s14, s14, s17
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 80079c0:	ee67 7a89 	vmul.f32	s15, s15, s18
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 80079c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80079c8:	eeb0 7a4a 	vmov.f32	s14, s20
 80079cc:	eea7 7aaa 	vfma.f32	s14, s15, s21
 80079d0:	ee17 0a10 	vmov	r0, s14
 80079d4:	f7f8 fdd8 	bl	8000588 <__aeabi_f2d>
 80079d8:	ec41 0b10 	vmov	d0, r0, r1
 80079dc:	f002 f820 	bl	8009a20 <round>
 80079e0:	ec51 0b10 	vmov	r0, r1, d0
 80079e4:	f7f9 f8d8 	bl	8000b98 <__aeabi_d2iz>
      clamped_output = TN_MAX(clamped_output, -128);
 80079e8:	42b8      	cmp	r0, r7
 80079ea:	bfb8      	it	lt
 80079ec:	4638      	movlt	r0, r7
      clamped_output = TN_MIN(clamped_output, 127);
 80079ee:	287f      	cmp	r0, #127	; 0x7f
 80079f0:	bfa8      	it	ge
 80079f2:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
 80079f4:	42b4      	cmp	r4, r6
      output_data[i] = (int8_t)(clamped_output);
 80079f6:	f805 0f01 	strb.w	r0, [r5, #1]!
  for (int i = 0; i < size; ++i) {
 80079fa:	d1d1      	bne.n	80079a0 <add_fpreq+0x34>
  }
}
 80079fc:	ecbd 8b06 	vpop	{d8-d10}
 8007a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop

08007a08 <convolve_1x1_s8_ch16_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	b091      	sub	sp, #68	; 0x44
 8007a0e:	469a      	mov	sl, r3
 8007a10:	4607      	mov	r7, r0
 8007a12:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8007a16:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007a1a:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8007a1e:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007a22:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8007a24:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007a28:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8007a2c:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8007a2e:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007a30:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007a32:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007a34:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8007a38:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007a3c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007a3e:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8007a42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007a46:	9307      	str	r3, [sp, #28]
 8007a48:	d055      	beq.n	8007af6 <convolve_1x1_s8_ch16_fpreq+0xee>
 8007a4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a4c:	464d      	mov	r5, r9
 8007a4e:	2600      	movs	r6, #0
 8007a50:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	9406      	str	r4, [sp, #24]
 8007a58:	9308      	str	r3, [sp, #32]
 8007a5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a5c:	b21b      	sxth	r3, r3
 8007a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a62:	b21b      	sxth	r3, r3
 8007a64:	930a      	str	r3, [sp, #40]	; 0x28
 8007a66:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8007a6a:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8007a6c:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8007a6e:	b335      	cbz	r5, 8007abe <convolve_1x1_s8_ch16_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8007a70:	4642      	mov	r2, r8
		while (cnt > 0) {
 8007a72:	46ae      	mov	lr, r5
 8007a74:	9c06      	ldr	r4, [sp, #24]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8007a76:	680b      	ldr	r3, [r1, #0]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007a78:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007a7c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007a80:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007a84:	fa93 f304 	sadd16	r3, r3, r4
 8007a88:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8007a8c:	f8c2 c000 	str.w	ip, [r2]
 8007a90:	3108      	adds	r1, #8
 8007a92:	6053      	str	r3, [r2, #4]
 8007a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007a98:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007a9c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007aa0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007aa4:	fa93 f304 	sadd16	r3, r3, r4
 8007aa8:	fa9c fc04 	sadd16	ip, ip, r4
 8007aac:	f1be 0e01 	subs.w	lr, lr, #1
 8007ab0:	f8c2 c008 	str.w	ip, [r2, #8]
 8007ab4:	60d3      	str	r3, [r2, #12]
 8007ab6:	f102 0210 	add.w	r2, r2, #16
 8007aba:	d1dc      	bne.n	8007a76 <convolve_1x1_s8_ch16_fpreq+0x6e>
 8007abc:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 8007abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ac0:	465a      	mov	r2, fp
 8007ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007ac4:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch16_fpreq(kernel,
 8007ac6:	9c08      	ldr	r4, [sp, #32]
 8007ac8:	9005      	str	r0, [sp, #20]
 8007aca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	9102      	str	r1, [sp, #8]
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ad4:	9001      	str	r0, [sp, #4]
 8007ad6:	4648      	mov	r0, r9
 8007ad8:	9400      	str	r4, [sp, #0]
 8007ada:	f8cd a00c 	str.w	sl, [sp, #12]
 8007ade:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007ae0:	f001 f992 	bl	8008e08 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	4427      	add	r7, r4
 8007ae8:	429e      	cmp	r6, r3
 8007aea:	d1bf      	bne.n	8007a6c <convolve_1x1_s8_ch16_fpreq+0x64>
 8007aec:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8007af0:	46a9      	mov	r9, r5
 8007af2:	9c06      	ldr	r4, [sp, #24]
 8007af4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8007af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af8:	461a      	mov	r2, r3
 8007afa:	07d2      	lsls	r2, r2, #31
 8007afc:	d560      	bpl.n	8007bc0 <convolve_1x1_s8_ch16_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8007afe:	3b01      	subs	r3, #1
 8007b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b02:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8007b06:	f1b9 0f00 	cmp.w	r9, #0
 8007b0a:	d013      	beq.n	8007b34 <convolve_1x1_s8_ch16_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007b10:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007b14:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007b18:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007b1c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007b20:	fa93 f304 	sadd16	r3, r3, r4
 8007b24:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8007b28:	3e01      	subs	r6, #1
 8007b2a:	6011      	str	r1, [r2, #0]
 8007b2c:	6053      	str	r3, [r2, #4]
 8007b2e:	f102 0208 	add.w	r2, r2, #8
 8007b32:	d1ed      	bne.n	8007b10 <convolve_1x1_s8_ch16_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8007b34:	f1bb 0f00 	cmp.w	fp, #0
 8007b38:	d042      	beq.n	8007bc0 <convolve_1x1_s8_ch16_fpreq+0x1b8>
 8007b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b3c:	eb00 0a0b 	add.w	sl, r0, fp
 8007b40:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8007b44:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8007b48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b4a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8007b4e:	fa1f fe8e 	uxth.w	lr, lr
 8007b52:	f1a3 0904 	sub.w	r9, r3, #4
 8007b56:	f10e 0e01 	add.w	lr, lr, #1
 8007b5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8007b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8007b60:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8007b64:	b19a      	cbz	r2, 8007b8e <convolve_1x1_s8_ch16_fpreq+0x186>
 8007b66:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8007b6a:	4644      	mov	r4, r8
 8007b6c:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8007b70:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8007b72:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007b76:	fa2f f282 	sxtb16	r2, r2
 8007b7a:	fa2f f181 	sxtb16	r1, r1

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b7e:	fb22 3306 	smlad	r3, r2, r6, r3
 8007b82:	6862      	ldr	r2, [r4, #4]
 8007b84:	3408      	adds	r4, #8
 8007b86:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8007b8a:	42bd      	cmp	r5, r7
 8007b8c:	d1ee      	bne.n	8007b6c <convolve_1x1_s8_ch16_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8007b8e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8007b92:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8007b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b98:	ecfc 7a01 	vldmia	ip!, {s15}
 8007b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba4:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8007ba8:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8007baa:	4293      	cmp	r3, r2
 8007bac:	bfb8      	it	lt
 8007bae:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8007bb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	bfa8      	it	ge
 8007bb6:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8007bb8:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8007bbc:	4550      	cmp	r0, sl
 8007bbe:	d1ce      	bne.n	8007b5e <convolve_1x1_s8_ch16_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	b011      	add	sp, #68	; 0x44
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bc8 <convolve_1x1_s8_ch24_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	b091      	sub	sp, #68	; 0x44
 8007bce:	469a      	mov	sl, r3
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8007bd6:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007bda:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8007bde:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007be2:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8007be4:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007be8:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8007bec:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8007bee:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007bf0:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007bf2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007bf4:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8007bf8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007bfc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007bfe:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8007c02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	d055      	beq.n	8007cb6 <convolve_1x1_s8_ch24_fpreq+0xee>
 8007c0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c0c:	464d      	mov	r5, r9
 8007c0e:	2600      	movs	r6, #0
 8007c10:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	9406      	str	r4, [sp, #24]
 8007c18:	9308      	str	r3, [sp, #32]
 8007c1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c1c:	b21b      	sxth	r3, r3
 8007c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c22:	b21b      	sxth	r3, r3
 8007c24:	930a      	str	r3, [sp, #40]	; 0x28
 8007c26:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8007c2a:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8007c2c:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8007c2e:	b335      	cbz	r5, 8007c7e <convolve_1x1_s8_ch24_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8007c30:	4642      	mov	r2, r8
		while (cnt > 0) {
 8007c32:	46ae      	mov	lr, r5
 8007c34:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 8007c36:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007c38:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007c3c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007c40:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007c44:	fa93 f304 	sadd16	r3, r3, r4
 8007c48:	fa9c fc04 	sadd16	ip, ip, r4
 8007c4c:	f8c2 c000 	str.w	ip, [r2]
 8007c50:	3108      	adds	r1, #8
 8007c52:	6053      	str	r3, [r2, #4]
 8007c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007c58:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007c5c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007c60:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007c64:	fa93 f304 	sadd16	r3, r3, r4
 8007c68:	fa9c fc04 	sadd16	ip, ip, r4
 8007c6c:	f1be 0e01 	subs.w	lr, lr, #1
 8007c70:	f8c2 c008 	str.w	ip, [r2, #8]
 8007c74:	60d3      	str	r3, [r2, #12]
 8007c76:	f102 0210 	add.w	r2, r2, #16
 8007c7a:	d1dc      	bne.n	8007c36 <convolve_1x1_s8_ch24_fpreq+0x6e>
 8007c7c:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 8007c7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c80:	465a      	mov	r2, fp
 8007c82:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007c84:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch24_fpreq(kernel,
 8007c86:	9c08      	ldr	r4, [sp, #32]
 8007c88:	9005      	str	r0, [sp, #20]
 8007c8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	9102      	str	r1, [sp, #8]
 8007c90:	4641      	mov	r1, r8
 8007c92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007c94:	9001      	str	r0, [sp, #4]
 8007c96:	4648      	mov	r0, r9
 8007c98:	9400      	str	r4, [sp, #0]
 8007c9a:	f8cd a00c 	str.w	sl, [sp, #12]
 8007c9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007ca0:	f001 f9f0 	bl	8009084 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	4427      	add	r7, r4
 8007ca8:	429e      	cmp	r6, r3
 8007caa:	d1bf      	bne.n	8007c2c <convolve_1x1_s8_ch24_fpreq+0x64>
 8007cac:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8007cb0:	46a9      	mov	r9, r5
 8007cb2:	9c06      	ldr	r4, [sp, #24]
 8007cb4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8007cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb8:	461a      	mov	r2, r3
 8007cba:	07d2      	lsls	r2, r2, #31
 8007cbc:	d560      	bpl.n	8007d80 <convolve_1x1_s8_ch24_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cc2:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8007cc6:	f1b9 0f00 	cmp.w	r9, #0
 8007cca:	d013      	beq.n	8007cf4 <convolve_1x1_s8_ch24_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8007ccc:	4642      	mov	r2, r8
 8007cce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007cd0:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007cd4:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007cd8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007cdc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007ce0:	fa93 f304 	sadd16	r3, r3, r4
 8007ce4:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8007ce8:	3e01      	subs	r6, #1
 8007cea:	6011      	str	r1, [r2, #0]
 8007cec:	6053      	str	r3, [r2, #4]
 8007cee:	f102 0208 	add.w	r2, r2, #8
 8007cf2:	d1ed      	bne.n	8007cd0 <convolve_1x1_s8_ch24_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8007cf4:	f1bb 0f00 	cmp.w	fp, #0
 8007cf8:	d042      	beq.n	8007d80 <convolve_1x1_s8_ch24_fpreq+0x1b8>
 8007cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cfc:	eb00 0a0b 	add.w	sl, r0, fp
 8007d00:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8007d04:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8007d08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d0a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8007d0e:	fa1f fe8e 	uxth.w	lr, lr
 8007d12:	f1a3 0904 	sub.w	r9, r3, #4
 8007d16:	f10e 0e01 	add.w	lr, lr, #1
 8007d1a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8007d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8007d20:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8007d24:	b19a      	cbz	r2, 8007d4e <convolve_1x1_s8_ch24_fpreq+0x186>
 8007d26:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8007d2a:	4644      	mov	r4, r8
 8007d2c:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8007d30:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8007d32:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007d36:	fa2f f282 	sxtb16	r2, r2
 8007d3a:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007d3e:	fb22 3306 	smlad	r3, r2, r6, r3
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	3408      	adds	r4, #8
 8007d46:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8007d4a:	42bd      	cmp	r5, r7
 8007d4c:	d1ee      	bne.n	8007d2c <convolve_1x1_s8_ch24_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8007d4e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8007d52:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8007d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d58:	ecfc 7a01 	vldmia	ip!, {s15}
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d64:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8007d68:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfb8      	it	lt
 8007d6e:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8007d70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d72:	4293      	cmp	r3, r2
 8007d74:	bfa8      	it	ge
 8007d76:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8007d78:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8007d7c:	4550      	cmp	r0, sl
 8007d7e:	d1ce      	bne.n	8007d1e <convolve_1x1_s8_ch24_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8007d80:	2000      	movs	r0, #0
 8007d82:	b011      	add	sp, #68	; 0x44
 8007d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d88 <convolve_1x1_s8_ch48_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	b091      	sub	sp, #68	; 0x44
 8007d8e:	469a      	mov	sl, r3
 8007d90:	4607      	mov	r7, r0
 8007d92:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8007d96:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007d9a:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8007d9e:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007da2:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8007da4:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007da8:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8007dac:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8007dae:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007db0:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007db2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007db4:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8007db8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007dbc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007dbe:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8007dc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007dc6:	9307      	str	r3, [sp, #28]
 8007dc8:	d055      	beq.n	8007e76 <convolve_1x1_s8_ch48_fpreq+0xee>
 8007dca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dcc:	464d      	mov	r5, r9
 8007dce:	2600      	movs	r6, #0
 8007dd0:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	9406      	str	r4, [sp, #24]
 8007dd8:	9308      	str	r3, [sp, #32]
 8007dda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8007de0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007de2:	b21b      	sxth	r3, r3
 8007de4:	930a      	str	r3, [sp, #40]	; 0x28
 8007de6:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8007dea:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8007dec:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8007dee:	b335      	cbz	r5, 8007e3e <convolve_1x1_s8_ch48_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8007df0:	4642      	mov	r2, r8
		while (cnt > 0) {
 8007df2:	46ae      	mov	lr, r5
 8007df4:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 8007df6:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007df8:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007dfc:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e00:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007e04:	fa93 f304 	sadd16	r3, r3, r4
 8007e08:	fa9c fc04 	sadd16	ip, ip, r4
 8007e0c:	f8c2 c000 	str.w	ip, [r2]
 8007e10:	3108      	adds	r1, #8
 8007e12:	6053      	str	r3, [r2, #4]
 8007e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e18:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007e1c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e20:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007e24:	fa93 f304 	sadd16	r3, r3, r4
 8007e28:	fa9c fc04 	sadd16	ip, ip, r4
 8007e2c:	f1be 0e01 	subs.w	lr, lr, #1
 8007e30:	f8c2 c008 	str.w	ip, [r2, #8]
 8007e34:	60d3      	str	r3, [r2, #12]
 8007e36:	f102 0210 	add.w	r2, r2, #16
 8007e3a:	d1dc      	bne.n	8007df6 <convolve_1x1_s8_ch48_fpreq+0x6e>
 8007e3c:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 8007e3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e40:	465a      	mov	r2, fp
 8007e42:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007e44:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_ch48_fpreq(kernel,
 8007e46:	9c08      	ldr	r4, [sp, #32]
 8007e48:	9005      	str	r0, [sp, #20]
 8007e4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	9102      	str	r1, [sp, #8]
 8007e50:	4641      	mov	r1, r8
 8007e52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007e54:	9001      	str	r0, [sp, #4]
 8007e56:	4648      	mov	r0, r9
 8007e58:	9400      	str	r4, [sp, #0]
 8007e5a:	f8cd a00c 	str.w	sl, [sp, #12]
 8007e5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007e60:	f000 fd66 	bl	8008930 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	4427      	add	r7, r4
 8007e68:	429e      	cmp	r6, r3
 8007e6a:	d1bf      	bne.n	8007dec <convolve_1x1_s8_ch48_fpreq+0x64>
 8007e6c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8007e70:	46a9      	mov	r9, r5
 8007e72:	9c06      	ldr	r4, [sp, #24]
 8007e74:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_min, out_activation_max,
				input_ch * DIM_KER_Y * DIM_KER_X, bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8007e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e78:	461a      	mov	r2, r3
 8007e7a:	07d2      	lsls	r2, r2, #31
 8007e7c:	d560      	bpl.n	8007f40 <convolve_1x1_s8_ch48_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e82:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8007e86:	f1b9 0f00 	cmp.w	r9, #0
 8007e8a:	d013      	beq.n	8007eb4 <convolve_1x1_s8_ch48_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8007e90:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e94:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007e98:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e9c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007ea0:	fa93 f304 	sadd16	r3, r3, r4
 8007ea4:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8007ea8:	3e01      	subs	r6, #1
 8007eaa:	6011      	str	r1, [r2, #0]
 8007eac:	6053      	str	r3, [r2, #4]
 8007eae:	f102 0208 	add.w	r2, r2, #8
 8007eb2:	d1ed      	bne.n	8007e90 <convolve_1x1_s8_ch48_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8007eb4:	f1bb 0f00 	cmp.w	fp, #0
 8007eb8:	d042      	beq.n	8007f40 <convolve_1x1_s8_ch48_fpreq+0x1b8>
 8007eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ebc:	eb00 0a0b 	add.w	sl, r0, fp
 8007ec0:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8007ec4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8007ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eca:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8007ece:	fa1f fe8e 	uxth.w	lr, lr
 8007ed2:	f1a3 0904 	sub.w	r9, r3, #4
 8007ed6:	f10e 0e01 	add.w	lr, lr, #1
 8007eda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8007ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8007ee0:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 8007ee4:	b19a      	cbz	r2, 8007f0e <convolve_1x1_s8_ch48_fpreq+0x186>
 8007ee6:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 8007eea:	4644      	mov	r4, r8
 8007eec:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8007ef0:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8007ef2:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007ef6:	fa2f f282 	sxtb16	r2, r2
 8007efa:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007efe:	fb22 3306 	smlad	r3, r2, r6, r3
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	3408      	adds	r4, #8
 8007f06:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8007f0a:	42bd      	cmp	r5, r7
 8007f0c:	d1ee      	bne.n	8007eec <convolve_1x1_s8_ch48_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 8007f0e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8007f12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 8007f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f18:	ecfc 7a01 	vldmia	ip!, {s15}
 8007f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f24:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8007f28:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	bfb8      	it	lt
 8007f2e:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8007f30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f32:	4293      	cmp	r3, r2
 8007f34:	bfa8      	it	ge
 8007f36:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8007f38:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8007f3c:	4550      	cmp	r0, sl
 8007f3e:	d1ce      	bne.n	8007ede <convolve_1x1_s8_ch48_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8007f40:	2000      	movs	r0, #0
 8007f42:	b011      	add	sp, #68	; 0x44
 8007f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f48 <convolve_1x1_s8_ch8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	b091      	sub	sp, #68	; 0x44
 8007f4e:	469a      	mov	sl, r3
 8007f50:	4607      	mov	r7, r0
 8007f52:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 8007f56:	ea4f 019a 	mov.w	r1, sl, lsr #2
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007f5a:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
	const int channel_div4 = (input_ch >> 2);
 8007f5e:	fa1f f981 	uxth.w	r9, r1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007f62:	900e      	str	r0, [sp, #56]	; 0x38
	const int32_t num_elements = output_x * output_y;
 8007f64:	fb02 f303 	mul.w	r3, r2, r3

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007f68:	f9bd 4078 	ldrsh.w	r4, [sp, #120]	; 0x78
	const int channel_div4 = (input_ch >> 2);
 8007f6c:	910c      	str	r1, [sp, #48]	; 0x30
	const int32_t num_elements = output_x * output_y;
 8007f6e:	930d      	str	r3, [sp, #52]	; 0x34

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007f70:	105b      	asrs	r3, r3, #1
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007f72:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8007f74:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	const int channel_div4 = (input_ch >> 2);
 8007f78:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
		const uint16_t output_ch, q15_t *runtime_buf) {
 8007f7c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8007f7e:	f8bd b090 	ldrh.w	fp, [sp, #144]	; 0x90
 8007f82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8007f86:	9307      	str	r3, [sp, #28]
 8007f88:	d055      	beq.n	8008036 <convolve_1x1_s8_ch8_fpreq+0xee>
 8007f8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f8c:	464d      	mov	r5, r9
 8007f8e:	2600      	movs	r6, #0
 8007f90:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	9406      	str	r4, [sp, #24]
 8007f98:	9308      	str	r3, [sp, #32]
 8007f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f9c:	b21b      	sxth	r3, r3
 8007f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007fa2:	b21b      	sxth	r3, r3
 8007fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa6:	ea4f 034a 	mov.w	r3, sl, lsl #1
 8007faa:	9309      	str	r3, [sp, #36]	; 0x24
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8007fac:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8007fae:	b335      	cbz	r5, 8007ffe <convolve_1x1_s8_ch8_fpreq+0xb6>
		q15_t *dst = two_column_buffer;
 8007fb0:	4642      	mov	r2, r8
		while (cnt > 0) {
 8007fb2:	46ae      	mov	lr, r5
 8007fb4:	9c06      	ldr	r4, [sp, #24]
    memcpy(&val, *in_q7, 4);
 8007fb6:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007fb8:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007fbc:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007fc0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007fc4:	fa93 f304 	sadd16	r3, r3, r4
 8007fc8:	fa9c fc04 	sadd16	ip, ip, r4
 8007fcc:	f8c2 c000 	str.w	ip, [r2]
 8007fd0:	3108      	adds	r1, #8
 8007fd2:	6053      	str	r3, [r2, #4]
 8007fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007fd8:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8007fdc:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007fe0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8007fe4:	fa93 f304 	sadd16	r3, r3, r4
 8007fe8:	fa9c fc04 	sadd16	ip, ip, r4
 8007fec:	f1be 0e01 	subs.w	lr, lr, #1
 8007ff0:	f8c2 c008 	str.w	ip, [r2, #8]
 8007ff4:	60d3      	str	r3, [r2, #12]
 8007ff6:	f102 0210 	add.w	r2, r2, #16
 8007ffa:	d1dc      	bne.n	8007fb6 <convolve_1x1_s8_ch8_fpreq+0x6e>
 8007ffc:	9406      	str	r4, [sp, #24]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8007ffe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008000:	465a      	mov	r2, fp
 8008002:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8008004:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8008006:	9c08      	ldr	r4, [sp, #32]
 8008008:	9005      	str	r0, [sp, #20]
 800800a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	9102      	str	r1, [sp, #8]
 8008010:	4641      	mov	r1, r8
 8008012:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008014:	9001      	str	r0, [sp, #4]
 8008016:	4648      	mov	r0, r9
 8008018:	9400      	str	r4, [sp, #0]
 800801a:	f8cd a00c 	str.w	sl, [sp, #12]
 800801e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008020:	f001 f9ba 	bl	8009398 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	4427      	add	r7, r4
 8008028:	429e      	cmp	r6, r3
 800802a:	d1bf      	bne.n	8007fac <convolve_1x1_s8_ch8_fpreq+0x64>
 800802c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 8008030:	46a9      	mov	r9, r5
 8008032:	9c06      	ldr	r4, [sp, #24]
 8008034:	9d1a      	ldr	r5, [sp, #104]	; 0x68
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8008036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008038:	461a      	mov	r2, r3
 800803a:	07d2      	lsls	r2, r2, #31
 800803c:	d560      	bpl.n	8008100 <convolve_1x1_s8_ch8_fpreq+0x1b8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 800803e:	3b01      	subs	r3, #1
 8008040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008042:	fb0a 2a03 	mla	sl, sl, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8008046:	f1b9 0f00 	cmp.w	r9, #0
 800804a:	d013      	beq.n	8008074 <convolve_1x1_s8_ch8_fpreq+0x12c>
		q15_t *dst = two_column_buffer;
 800804c:	4642      	mov	r2, r8
 800804e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8008050:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008054:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8008058:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800805c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008060:	fa93 f304 	sadd16	r3, r3, r4
 8008064:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8008068:	3e01      	subs	r6, #1
 800806a:	6011      	str	r1, [r2, #0]
 800806c:	6053      	str	r3, [r2, #4]
 800806e:	f102 0208 	add.w	r2, r2, #8
 8008072:	d1ed      	bne.n	8008050 <convolve_1x1_s8_ch8_fpreq+0x108>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8008074:	f1bb 0f00 	cmp.w	fp, #0
 8008078:	d042      	beq.n	8008100 <convolve_1x1_s8_ch8_fpreq+0x1b8>
 800807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800807c:	eb00 0a0b 	add.w	sl, r0, fp
 8008080:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8008084:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8008088:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800808a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800808e:	fa1f fe8e 	uxth.w	lr, lr
 8008092:	f1a3 0904 	sub.w	r9, r3, #4
 8008096:	f10e 0e01 	add.w	lr, lr, #1
 800809a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 800809e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 80080a0:	f859 3f04 	ldr.w	r3, [r9, #4]!
			while (col_count) {
 80080a4:	b19a      	cbz	r2, 80080ce <convolve_1x1_s8_ch8_fpreq+0x186>
 80080a6:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 80080aa:	4644      	mov	r4, r8
 80080ac:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 80080b0:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80080b2:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80080b6:	fa2f f282 	sxtb16	r2, r2
 80080ba:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80080be:	fb22 3306 	smlad	r3, r2, r6, r3
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	3408      	adds	r4, #8
 80080c6:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 80080ca:	42bd      	cmp	r5, r7
 80080cc:	d1ee      	bne.n	80080ac <convolve_1x1_s8_ch8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (float) sum * scales[i_ch_out];
 80080ce:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 80080d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (float) sum * scales[i_ch_out];
 80080d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080d8:	ecfc 7a01 	vldmia	ip!, {s15}
 80080dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080e4:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 80080e8:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 80080ea:	4293      	cmp	r3, r2
 80080ec:	bfb8      	it	lt
 80080ee:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 80080f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080f2:	4293      	cmp	r3, r2
 80080f4:	bfa8      	it	ge
 80080f6:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 80080f8:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80080fc:	4550      	cmp	r0, sl
 80080fe:	d1ce      	bne.n	800809e <convolve_1x1_s8_ch8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8008100:	2000      	movs	r0, #0
 8008102:	b011      	add	sp, #68	; 0x44
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008108 <convolve_1x1_s8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 800810c:	f013 0603 	ands.w	r6, r3, #3
		const uint16_t output_ch, q15_t *runtime_buf) {
 8008110:	b091      	sub	sp, #68	; 0x44
 8008112:	4604      	mov	r4, r0
 8008114:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008116:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008118:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800811c:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8008120:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8008124:	f040 80cf 	bne.w	80082c6 <convolve_1x1_s8_fpreq+0x1be>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 8008128:	fb01 f202 	mul.w	r2, r1, r2
 800812c:	4698      	mov	r8, r3
	const int channel_div4 = (input_ch >> 2);
 800812e:	089b      	lsrs	r3, r3, #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8008130:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008132:	4627      	mov	r7, r4
 8008134:	940f      	str	r4, [sp, #60]	; 0x3c
	const int channel_div4 = (input_ch >> 2);
 8008136:	fa1f f983 	uxth.w	r9, r3
 800813a:	930c      	str	r3, [sp, #48]	; 0x30

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800813c:	1053      	asrs	r3, r2, #1
	const int32_t num_elements = output_x * output_y;
 800813e:	920d      	str	r2, [sp, #52]	; 0x34
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8008140:	b20c      	sxth	r4, r1
	const int channel_div4 = (input_ch >> 2);
 8008142:	46cb      	mov	fp, r9
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8008144:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8008148:	9308      	str	r3, [sp, #32]
 800814a:	d054      	beq.n	80081f6 <convolve_1x1_s8_fpreq+0xee>
 800814c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800814e:	46ab      	mov	fp, r5
 8008150:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008154:	464d      	mov	r5, r9
 8008156:	b25b      	sxtb	r3, r3
 8008158:	9407      	str	r4, [sp, #28]
 800815a:	9309      	str	r3, [sp, #36]	; 0x24
 800815c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800815e:	b21b      	sxth	r3, r3
 8008160:	930b      	str	r3, [sp, #44]	; 0x2c
 8008162:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008164:	b21b      	sxth	r3, r3
 8008166:	930a      	str	r3, [sp, #40]	; 0x28
 8008168:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800816c:	4699      	mov	r9, r3
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 800816e:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 8008170:	b335      	cbz	r5, 80081c0 <convolve_1x1_s8_fpreq+0xb8>
		q15_t *dst = two_column_buffer;
 8008172:	9a25      	ldr	r2, [sp, #148]	; 0x94
		while (cnt > 0) {
 8008174:	46ae      	mov	lr, r5
 8008176:	9c07      	ldr	r4, [sp, #28]
    memcpy(&val, *in_q7, 4);
 8008178:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800817a:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800817e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008182:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008186:	fa93 f304 	sadd16	r3, r3, r4
 800818a:	fa9c fc04 	sadd16	ip, ip, r4
 800818e:	f8c2 c000 	str.w	ip, [r2]
 8008192:	3108      	adds	r1, #8
 8008194:	6053      	str	r3, [r2, #4]
 8008196:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800819a:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800819e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80081a2:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80081a6:	fa93 f304 	sadd16	r3, r3, r4
 80081aa:	fa9c fc04 	sadd16	ip, ip, r4
 80081ae:	f1be 0e01 	subs.w	lr, lr, #1
 80081b2:	f8c2 c008 	str.w	ip, [r2, #8]
 80081b6:	60d3      	str	r3, [r2, #12]
 80081b8:	f102 0210 	add.w	r2, r2, #16
 80081bc:	d1dc      	bne.n	8008178 <convolve_1x1_s8_fpreq+0x70>
 80081be:	9407      	str	r4, [sp, #28]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 80081c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081c2:	4652      	mov	r2, sl
 80081c4:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80081c6:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 80081c8:	9005      	str	r0, [sp, #20]
 80081ca:	444f      	add	r7, r9
 80081cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80081ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80081d0:	9304      	str	r3, [sp, #16]
 80081d2:	9102      	str	r1, [sp, #8]
 80081d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	4658      	mov	r0, fp
 80081da:	f8cd 800c 	str.w	r8, [sp, #12]
 80081de:	9925      	ldr	r1, [sp, #148]	; 0x94
 80081e0:	9400      	str	r4, [sp, #0]
 80081e2:	f001 f8d9 	bl	8009398 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80081e6:	9b08      	ldr	r3, [sp, #32]
 80081e8:	429e      	cmp	r6, r3
 80081ea:	d1c0      	bne.n	800816e <convolve_1x1_s8_fpreq+0x66>
 80081ec:	46a9      	mov	r9, r5
 80081ee:	9c07      	ldr	r4, [sp, #28]
 80081f0:	465d      	mov	r5, fp
 80081f2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80081f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f8:	07da      	lsls	r2, r3, #31
 80081fa:	d560      	bpl.n	80082be <convolve_1x1_s8_fpreq+0x1b6>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80081fc:	3b01      	subs	r3, #1
 80081fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008200:	fb08 2803 	mla	r8, r8, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8008204:	f1b9 0f00 	cmp.w	r9, #0
 8008208:	d013      	beq.n	8008232 <convolve_1x1_s8_fpreq+0x12a>
		q15_t *dst = two_column_buffer;
 800820a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800820c:	f858 3b04 	ldr.w	r3, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008210:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8008214:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008218:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800821c:	fa93 f304 	sadd16	r3, r3, r4
 8008220:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8008224:	f1bb 0b01 	subs.w	fp, fp, #1
 8008228:	6011      	str	r1, [r2, #0]
 800822a:	6053      	str	r3, [r2, #4]
 800822c:	f102 0208 	add.w	r2, r2, #8
 8008230:	d1ec      	bne.n	800820c <convolve_1x1_s8_fpreq+0x104>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8008232:	f1ba 0f00 	cmp.w	sl, #0
 8008236:	d042      	beq.n	80082be <convolve_1x1_s8_fpreq+0x1b6>
 8008238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800823a:	4482      	add	sl, r0
 800823c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8008240:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8008244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008246:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800824a:	fa1f fe8e 	uxth.w	lr, lr
 800824e:	f1a3 0804 	sub.w	r8, r3, #4
 8008252:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 8008256:	f10e 0e01 	add.w	lr, lr, #1
 800825a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 800825e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 8008260:	f858 3f04 	ldr.w	r3, [r8, #4]!
			while (col_count) {
 8008264:	b19a      	cbz	r2, 800828e <convolve_1x1_s8_fpreq+0x186>
 8008266:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 800826a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800826c:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 8008270:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008272:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008276:	fa2f f282 	sxtb16	r2, r2
 800827a:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800827e:	fb22 3306 	smlad	r3, r2, r6, r3
 8008282:	6862      	ldr	r2, [r4, #4]
 8008284:	3408      	adds	r4, #8
 8008286:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 800828a:	42bd      	cmp	r5, r7
 800828c:	d1ee      	bne.n	800826c <convolve_1x1_s8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 800828e:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 8008292:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8008294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008298:	ecfc 7a01 	vldmia	ip!, {s15}
 800829c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082a4:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 80082a8:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 80082aa:	4293      	cmp	r3, r2
 80082ac:	bfb8      	it	lt
 80082ae:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 80082b0:	454b      	cmp	r3, r9
 80082b2:	bfa8      	it	ge
 80082b4:	464b      	movge	r3, r9
			*out++ = (q7_t) sum;
 80082b6:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80082ba:	4550      	cmp	r0, sl
 80082bc:	d1cf      	bne.n	800825e <convolve_1x1_s8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 80082be:	2000      	movs	r0, #0
}
 80082c0:	b011      	add	sp, #68	; 0x44
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 80082c6:	2001      	movs	r0, #1
}
 80082c8:	b011      	add	sp, #68	; 0x44
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ce:	bf00      	nop

080082d0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>:
		const float *scales, const int32_t output_offset,
		const int32_t input_offset, const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf,
		q7_t pad_value) {
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	b09b      	sub	sp, #108	; 0x6c
 80082d6:	468c      	mov	ip, r1
 80082d8:	461f      	mov	r7, r3
 80082da:	4686      	mov	lr, r0
	q15_t *two_column_buf = runtime_buf;
	q7_t *out = output;

	q15_t pad16 = pad_value;
	const int16_t inoff16 = input_offset;
	q15_t pad_out = pad16 + inoff16;
 80082dc:	9928      	ldr	r1, [sp, #160]	; 0xa0
		q7_t pad_value) {
 80082de:	f99d 20c4 	ldrsb.w	r2, [sp, #196]	; 0xc4
	q15_t pad_out = pad16 + inoff16;
 80082e2:	fa1f fa81 	uxth.w	sl, r1
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80082e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
		q7_t pad_value) {
 80082e8:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
	q15_t pad_out = pad16 + inoff16;
 80082ec:	4452      	add	r2, sl
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80082ee:	b21c      	sxth	r4, r3
		q7_t pad_value) {
 80082f0:	9115      	str	r1, [sp, #84]	; 0x54
	q15_t pad_out = pad16 + inoff16;
 80082f2:	fa0f f882 	sxth.w	r8, r2
		q7_t pad_value) {
 80082f6:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 80082fa:	eac8 4308 	pkhbt	r3, r8, r8, lsl #16
 80082fe:	469b      	mov	fp, r3
		q7_t pad_value) {
 8008300:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8008304:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		q7_t pad_value) {
 8008308:	9309      	str	r3, [sp, #36]	; 0x24
 800830a:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 800830e:	9314      	str	r3, [sp, #80]	; 0x50

	const q7_t *ip_a0 = kernel;

	for (int i = 0; i < output_ch; i += 2) {
 8008310:	2900      	cmp	r1, #0
 8008312:	f000 80bc 	beq.w	800848e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1be>
 8008316:	3901      	subs	r1, #1
 8008318:	2036      	movs	r0, #54	; 0x36
 800831a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
	const q7_t *ip_a0 = kernel;
 800831c:	464a      	mov	r2, r9
 800831e:	0849      	lsrs	r1, r1, #1
 8008320:	fb01 0000 	mla	r0, r1, r0, r0
 8008324:	eb09 0500 	add.w	r5, r9, r0
    memcpy(&val, *in_q7, 4);
 8008328:	6811      	ldr	r1, [r2, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800832a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800832e:	fa2f f181 	sxtb16	r1, r1
    q31_t inA = arm_nn_read_q7x4_ia(&source);
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
    q31_t inAbuf2 = __SXTB16(inA);

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008332:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008336:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 800833a:	e9c3 1600 	strd	r1, r6, [r3]
    memcpy(&val, *in_q7, 4);
 800833e:	f8d2 101b 	ldr.w	r1, [r2, #27]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8008342:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008346:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800834a:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800834e:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008352:	f8c3 603a 	str.w	r6, [r3, #58]	; 0x3a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008356:	f8c3 1036 	str.w	r1, [r3, #54]	; 0x36
    memcpy(&val, *in_q7, 4);
 800835a:	6851      	ldr	r1, [r2, #4]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800835c:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008360:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008364:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008368:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 800836c:	e9c3 1602 	strd	r1, r6, [r3, #8]
    memcpy(&val, *in_q7, 4);
 8008370:	f8d2 101f 	ldr.w	r1, [r2, #31]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8008374:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008378:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800837c:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008380:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008384:	f8c3 6042 	str.w	r6, [r3, #66]	; 0x42
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008388:	f8c3 103e 	str.w	r1, [r3, #62]	; 0x3e
    memcpy(&val, *in_q7, 4);
 800838c:	6891      	ldr	r1, [r2, #8]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800838e:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008392:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008396:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800839a:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 800839e:	e9c3 1604 	strd	r1, r6, [r3, #16]
    memcpy(&val, *in_q7, 4);
 80083a2:	f8d2 1023 	ldr.w	r1, [r2, #35]	; 0x23
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80083a6:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083aa:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80083ae:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80083b2:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80083b6:	f8c3 604a 	str.w	r6, [r3, #74]	; 0x4a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80083ba:	f8c3 1046 	str.w	r1, [r3, #70]	; 0x46
    memcpy(&val, *in_q7, 4);
 80083be:	68d1      	ldr	r1, [r2, #12]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80083c0:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083c4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80083c8:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80083cc:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 80083d0:	e9c3 1606 	strd	r1, r6, [r3, #24]
    memcpy(&val, *in_q7, 4);
 80083d4:	f8d2 1027 	ldr.w	r1, [r2, #39]	; 0x27
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80083d8:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083dc:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80083e0:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80083e4:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80083e8:	f8c3 6052 	str.w	r6, [r3, #82]	; 0x52
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80083ec:	f8c3 104e 	str.w	r1, [r3, #78]	; 0x4e
    memcpy(&val, *in_q7, 4);
 80083f0:	6911      	ldr	r1, [r2, #16]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80083f2:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083f6:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80083fa:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80083fe:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8008402:	e9c3 1608 	strd	r1, r6, [r3, #32]
    memcpy(&val, *in_q7, 4);
 8008406:	f8d2 102b 	ldr.w	r1, [r2, #43]	; 0x2b
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800840a:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800840e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008412:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008416:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800841a:	f8c3 605a 	str.w	r6, [r3, #90]	; 0x5a
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800841e:	f8c3 1056 	str.w	r1, [r3, #86]	; 0x56
    memcpy(&val, *in_q7, 4);
 8008422:	6951      	ldr	r1, [r2, #20]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8008424:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008428:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800842c:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008430:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
 8008434:	e9c3 160a 	strd	r1, r6, [r3, #40]	; 0x28
    memcpy(&val, *in_q7, 4);
 8008438:	f8d2 102f 	ldr.w	r1, [r2, #47]	; 0x2f
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800843c:	fa2f f091 	sxtb16	r0, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008440:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8008444:	eac0 4621 	pkhtb	r6, r0, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008448:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800844c:	f8c3 6062 	str.w	r6, [r3, #98]	; 0x62
 8008450:	3236      	adds	r2, #54	; 0x36
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8008452:	f8c3 105e 	str.w	r1, [r3, #94]	; 0x5e
 8008456:	336c      	adds	r3, #108	; 0x6c
		dst1_31 += 2;
		dst2_31 += 2;
		//25, 26, 27
		dst1 = dst1_31;
		dst2 = dst2_31;
		dst1[0] = *ip_a0++;
 8008458:	f912 1c1e 	ldrsb.w	r1, [r2, #-30]
 800845c:	f823 1c3c 	strh.w	r1, [r3, #-60]
		dst1[1] = *ip_a0++;
 8008460:	f912 1c1d 	ldrsb.w	r1, [r2, #-29]
 8008464:	f823 1c3a 	strh.w	r1, [r3, #-58]
		dst1[2] = *ip_a0++;
 8008468:	f912 1c1c 	ldrsb.w	r1, [r2, #-28]
 800846c:	f823 1c38 	strh.w	r1, [r3, #-56]
		dst2[0] = *ip_a1++;
 8008470:	f912 1c03 	ldrsb.w	r1, [r2, #-3]
 8008474:	f823 1c06 	strh.w	r1, [r3, #-6]
		dst2[1] = *ip_a1++;
 8008478:	f912 1c02 	ldrsb.w	r1, [r2, #-2]
 800847c:	f823 1c04 	strh.w	r1, [r3, #-4]
		dst2[2] = *ip_a1++;
 8008480:	f912 1c01 	ldrsb.w	r1, [r2, #-1]
	for (int i = 0; i < output_ch; i += 2) {
 8008484:	42aa      	cmp	r2, r5
		dst2[2] = *ip_a1++;
 8008486:	f823 1c02 	strh.w	r1, [r3, #-2]
	for (int i = 0; i < output_ch; i += 2) {
 800848a:	f47f af4d 	bne.w	8008328 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x58>

		/* skip row */
		ip_a0 += 27;
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 800848e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8152 	beq.w	800873a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>
 8008496:	4639      	mov	r1, r7

			two_column_buf += 27;
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 27) {

				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8008498:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800849c:	970d      	str	r7, [sp, #52]	; 0x34
			int input_row_offset = 3 * input_x;
 800849e:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80084a2:	00ca      	lsls	r2, r1, #3
 80084a4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80084a6:	900f      	str	r0, [sp, #60]	; 0x3c
					src3 = src2 + input_row_offset;
 80084a8:	4670      	mov	r0, lr
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80084aa:	9219      	str	r2, [sp, #100]	; 0x64
 80084ac:	440a      	add	r2, r1
					src3 = src2 + input_row_offset;
 80084ae:	4438      	add	r0, r7
 80084b0:	465e      	mov	r6, fp
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80084b2:	9216      	str	r2, [sp, #88]	; 0x58
 80084b4:	461a      	mov	r2, r3
					src3 = src2 + input_row_offset;
 80084b6:	9018      	str	r0, [sp, #96]	; 0x60
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 80084b8:	2000      	movs	r0, #0
 80084ba:	326c      	adds	r2, #108	; 0x6c
 80084bc:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80084c0:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 80084c4:	9010      	str	r0, [sp, #64]	; 0x40
 80084c6:	920a      	str	r2, [sp, #40]	; 0x28
 80084c8:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80084cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	f000 80b2 	beq.w	8008638 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x368>
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 80084d4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80084d8:	2500      	movs	r5, #0
					src = input + (base_idx_y * input_x) * input_ch;
 80084da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084dc:	970b      	str	r7, [sp, #44]	; 0x2c
 80084de:	fb02 f209 	mul.w	r2, r2, r9
 80084e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084e6:	920e      	str	r2, [sp, #56]	; 0x38
 80084e8:	fb01 0202 	mla	r2, r1, r2, r0
 80084ec:	9211      	str	r2, [sp, #68]	; 0x44
					src2 = src + input_row_offset;
 80084ee:	443a      	add	r2, r7
 80084f0:	9212      	str	r2, [sp, #72]	; 0x48
					src3 = src2 + input_row_offset;
 80084f2:	443a      	add	r2, r7
 80084f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80084f6:	b2ad      	uxth	r5, r5
			if (base_idx_y != -1) {
 80084f8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80084fc:	ea4f 0245 	mov.w	r2, r5, lsl #1
 8008500:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008504:	b212      	sxth	r2, r2
 8008506:	f000 811c 	beq.w	8008742 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x472>
				if (base_idx_x != -1) { //load all for now and unroll all
 800850a:	1c50      	adds	r0, r2, #1
 800850c:	f000 8155 	beq.w	80087ba <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x4ea>
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8008510:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008512:	440a      	add	r2, r1
 8008514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008518:	fb01 0202 	mla	r2, r1, r2, r0
					src2 = src + input_row_offset;
 800851c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 800851e:	f8d2 c000 	ldr.w	ip, [r2]
 8008522:	1850      	adds	r0, r2, r1
 8008524:	fa2f fb8c 	sxtb16	fp, ip
					src3 = src2 + input_row_offset;
 8008528:	1841      	adds	r1, r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 800852a:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800852e:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src, dst)
 8008532:	eacc 4e2b 	pkhtb	lr, ip, fp, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008536:	fa9e fe04 	sadd16	lr, lr, r4
 800853a:	eacb 4c0c 	pkhbt	ip, fp, ip, lsl #16
 800853e:	fa9c fc04 	sadd16	ip, ip, r4
 8008542:	f8c3 e004 	str.w	lr, [r3, #4]
 8008546:	f8c3 c000 	str.w	ip, [r3]
 800854a:	f8d2 c004 	ldr.w	ip, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800854e:	fa2f fe8c 	sxtb16	lr, ip
  return (op1 >> op2) | (op1 << (32U - op2));
 8008552:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008556:	fa2f fc8c 	sxtb16	ip, ip
					q7_q15_offset_ele(src, dst)
 800855a:	eacc 4b2e 	pkhtb	fp, ip, lr, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800855e:	fa9b fb04 	sadd16	fp, fp, r4
 8008562:	eace 4c0c 	pkhbt	ip, lr, ip, lsl #16
 8008566:	fa9c fc04 	sadd16	ip, ip, r4
 800856a:	f8c3 c008 	str.w	ip, [r3, #8]
 800856e:	f8c3 b00c 	str.w	fp, [r3, #12]
					*dst++ = *src++ + input_offset;
 8008572:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8008576:	4452      	add	r2, sl
 8008578:	821a      	strh	r2, [r3, #16]
 800857a:	6802      	ldr	r2, [r0, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800857c:	fa2f fc82 	sxtb16	ip, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8008580:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008584:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8008588:	eac2 4e2c 	pkhtb	lr, r2, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800858c:	fa9e fe04 	sadd16	lr, lr, r4
 8008590:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
 8008594:	fa92 f204 	sadd16	r2, r2, r4
 8008598:	f8c3 e016 	str.w	lr, [r3, #22]
 800859c:	f8c3 2012 	str.w	r2, [r3, #18]
 80085a0:	6842      	ldr	r2, [r0, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80085a2:	fa2f fc82 	sxtb16	ip, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80085a6:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80085aa:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 80085ae:	eac2 4e2c 	pkhtb	lr, r2, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80085b2:	fa9e fe04 	sadd16	lr, lr, r4
 80085b6:	eacc 4202 	pkhbt	r2, ip, r2, lsl #16
 80085ba:	fa92 f204 	sadd16	r2, r2, r4
 80085be:	f8c3 201a 	str.w	r2, [r3, #26]
 80085c2:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 80085c6:	f990 2008 	ldrsb.w	r2, [r0, #8]
					*dst2++ = *src2++ + input_offset;
 80085ca:	4452      	add	r2, sl
 80085cc:	845a      	strh	r2, [r3, #34]	; 0x22
 80085ce:	680a      	ldr	r2, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80085d0:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80085d4:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80085d8:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 80085dc:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80085e0:	fa9c fc04 	sadd16	ip, ip, r4
 80085e4:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 80085e8:	fa92 f204 	sadd16	r2, r2, r4
 80085ec:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24
 80085f2:	684a      	ldr	r2, [r1, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80085f4:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80085f8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80085fc:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8008600:	eac2 4c20 	pkhtb	ip, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8008604:	fa9c fc04 	sadd16	ip, ip, r4
 8008608:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 800860c:	fa92 f204 	sadd16	r2, r2, r4
 8008610:	62da      	str	r2, [r3, #44]	; 0x2c
			two_column_buf += 27;
 8008612:	3336      	adds	r3, #54	; 0x36
 8008614:	f843 cc06 	str.w	ip, [r3, #-6]
					*dst3++ = *src3++ + input_offset;
 8008618:	f991 2008 	ldrsb.w	r2, [r1, #8]
 800861c:	4452      	add	r2, sl
 800861e:	f823 2c02 	strh.w	r2, [r3, #-2]
			if (two_column_buf == runtime_buf + 2 * 27) {
 8008622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008624:	4293      	cmp	r3, r2
 8008626:	f000 8133 	beq.w	8008890 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5c0>
 800862a:	3501      	adds	r5, #1
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800862c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800862e:	b22d      	sxth	r5, r5
 8008630:	4295      	cmp	r5, r2
 8008632:	f6ff af60 	blt.w	80084f6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x226>
 8008636:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8008638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800863a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800863c:	3202      	adds	r2, #2
 800863e:	3101      	adds	r1, #1
 8008640:	b292      	uxth	r2, r2
 8008642:	b209      	sxth	r1, r1
 8008644:	920f      	str	r2, [sp, #60]	; 0x3c
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8008646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008648:	9110      	str	r1, [sp, #64]	; 0x40
 800864a:	4291      	cmp	r1, r2
 800864c:	f6ff af3e 	blt.w	80084cc <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x1fc>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buf != runtime_buf) {
 8008650:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8008652:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8008656:	4293      	cmp	r3, r2
 8008658:	d06f      	beq.n	800873a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++) {
 800865a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865c:	2b00      	cmp	r3, #0
 800865e:	d06c      	beq.n	800873a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x46a>

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 8008660:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008662:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008664:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8008666:	440a      	add	r2, r1
 8008668:	4617      	mov	r7, r2
 800866a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800866c:	f3c7 088f 	ubfx	r8, r7, #2, #16
 8008670:	f1a2 0c04 	sub.w	ip, r2, #4
 8008674:	9a2b      	ldr	r2, [sp, #172]	; 0xac
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 8008676:	f007 0703 	and.w	r7, r7, #3
 800867a:	f108 3eff 	add.w	lr, r8, #4294967295	; 0xffffffff
 800867e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8008682:	4413      	add	r3, r2
 8008684:	fa1f fe8e 	uxth.w	lr, lr
 8008688:	469b      	mov	fp, r3
 800868a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800868c:	f10e 0e01 	add.w	lr, lr, #1
 8008690:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 8008694:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8008698:	46f0      	mov	r8, lr
 800869a:	4696      	mov	lr, r2
			while (col_count) {
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			q31_t sum = bias[i];
 800869e:	f85c 1f04 	ldr.w	r1, [ip, #4]!
			while (col_count) {
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 813e 	beq.w	8008924 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x654>
 80086a8:	eb09 050a 	add.w	r5, r9, sl
 80086ac:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80086ae:	f859 3b04 	ldr.w	r3, [r9], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80086b2:	fa2f f293 	sxtb16	r2, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80086b6:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80086ba:	eac2 4423 	pkhtb	r4, r2, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80086be:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
    memcpy(&val, *in_q15, 4);
 80086c2:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80086c4:	fb23 1102 	smlad	r1, r3, r2, r1
 80086c8:	6843      	ldr	r3, [r0, #4]
 80086ca:	3008      	adds	r0, #8
 80086cc:	fb24 1103 	smlad	r1, r4, r3, r1
 80086d0:	45a9      	cmp	r9, r5
 80086d2:	d1ec      	bne.n	80086ae <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3de>
    *in_q15 += 2;
 80086d4:	4643      	mov	r3, r8
			while (col_count) {
 80086d6:	b1b7      	cbz	r7, 8008706 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
				q7_t ker_a1 = *ker_a++;
				q15_t ip_b1 = *ip_as_col++;
				sum += ker_a1 * ip_b1;
 80086d8:	f999 2000 	ldrsb.w	r2, [r9]
			while (col_count) {
 80086dc:	2f01      	cmp	r7, #1
				sum += ker_a1 * ip_b1;
 80086de:	8818      	ldrh	r0, [r3, #0]
 80086e0:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 80086e4:	f000 811b 	beq.w	800891e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x64e>
				sum += ker_a1 * ip_b1;
 80086e8:	f999 2001 	ldrsb.w	r2, [r9, #1]
			while (col_count) {
 80086ec:	2f02      	cmp	r7, #2
				sum += ker_a1 * ip_b1;
 80086ee:	8858      	ldrh	r0, [r3, #2]
 80086f0:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 80086f4:	f000 8118 	beq.w	8008928 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x658>
				sum += ker_a1 * ip_b1;
 80086f8:	889a      	ldrh	r2, [r3, #4]
				q7_t ker_a1 = *ker_a++;
 80086fa:	f109 0903 	add.w	r9, r9, #3
				sum += ker_a1 * ip_b1;
 80086fe:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 8008702:	fb12 1103 	smlabb	r1, r2, r3, r1
				col_count--;
			}

			sum = (float) sum * scales[i];
 8008706:	ee07 1a90 	vmov	s15, r1
			sum += output_offset;
 800870a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
			sum = (float) sum * scales[i];
 800870c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008710:	ecf6 7a01 	vldmia	r6!, {s15}
 8008714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800871c:	ee17 3a90 	vmov	r3, s15
			sum += output_offset;
 8008720:	4413      	add	r3, r2
			sum = MAX(sum, output_activation_min);
 8008722:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8008724:	4293      	cmp	r3, r2
 8008726:	bfb8      	it	lt
 8008728:	4613      	movlt	r3, r2
			sum = MIN(sum, output_activation_max);
 800872a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800872c:	4293      	cmp	r3, r2
 800872e:	bfa8      	it	ge
 8008730:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8008732:	f80e 3b01 	strb.w	r3, [lr], #1
		for (i = 0; i < output_ch; i++) {
 8008736:	45de      	cmp	lr, fp
 8008738:	d1b0      	bne.n	800869c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x3cc>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 800873a:	2000      	movs	r0, #0
 800873c:	b01b      	add	sp, #108	; 0x6c
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (base_idx_x != -1) {	//load all for now and unroll all
 8008742:	1c51      	adds	r1, r2, #1
				*dst++ = pad_out;
 8008744:	f8a3 8000 	strh.w	r8, [r3]
				*dst_31++ = pad_out_q15x2;
 8008748:	f8c3 6002 	str.w	r6, [r3, #2]
				*dst_31++ = pad_out_q15x2;
 800874c:	f8c3 6006 	str.w	r6, [r3, #6]
				*dst_31++ = pad_out_q15x2;
 8008750:	f8c3 600a 	str.w	r6, [r3, #10]
				*dst_31++ = pad_out_q15x2;
 8008754:	f8c3 600e 	str.w	r6, [r3, #14]
				if (base_idx_x != -1) {	//load all for now and unroll all
 8008758:	f000 80b6 	beq.w	80088c8 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5f8>
					src2 = input + (base_idx_x) * input_ch;
 800875c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008760:	fb01 0202 	mla	r2, r1, r2, r0
					src3 = src2 + input_row_offset;
 8008764:	990b      	ldr	r1, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8008766:	6810      	ldr	r0, [r2, #0]
 8008768:	1851      	adds	r1, r2, r1
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800876a:	fa2f fc80 	sxtb16	ip, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 800876e:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008772:	fa2f f080 	sxtb16	r0, r0
					q7_q15_offset_ele(src2, dst2)
 8008776:	eac0 4e2c 	pkhtb	lr, r0, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800877a:	fa9e fe04 	sadd16	lr, lr, r4
 800877e:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 8008782:	fa90 f004 	sadd16	r0, r0, r4
 8008786:	f8c3 e016 	str.w	lr, [r3, #22]
 800878a:	f8c3 0012 	str.w	r0, [r3, #18]
 800878e:	6850      	ldr	r0, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008790:	fa2f fc80 	sxtb16	ip, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 8008794:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008798:	fa2f f080 	sxtb16	r0, r0
					q7_q15_offset_ele(src2, dst2)
 800879c:	eac0 4e2c 	pkhtb	lr, r0, ip, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80087a0:	fa9e fe04 	sadd16	lr, lr, r4
 80087a4:	eacc 4000 	pkhbt	r0, ip, r0, lsl #16
 80087a8:	fa90 f004 	sadd16	r0, r0, r4
 80087ac:	f8c3 001a 	str.w	r0, [r3, #26]
 80087b0:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 80087b4:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80087b8:	e707      	b.n	80085ca <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2fa>
 80087ba:	9f11      	ldr	r7, [sp, #68]	; 0x44
					*dst++ = pad_out;
 80087bc:	f8a3 8000 	strh.w	r8, [r3]
					*dst++ = pad_out;
 80087c0:	f8a3 8002 	strh.w	r8, [r3, #2]
					*dst++ = pad_out;
 80087c4:	f8a3 8004 	strh.w	r8, [r3, #4]
					*dst2++ = pad_out;
 80087c8:	f8a3 8012 	strh.w	r8, [r3, #18]
					*dst2++ = pad_out;
 80087cc:	f8a3 8014 	strh.w	r8, [r3, #20]
					*dst2++ = pad_out;
 80087d0:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 80087d4:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 80087d8:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 80087dc:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
 80087e0:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80087e2:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80087e6:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80087ea:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 80087ee:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80087f2:	fa90 f004 	sadd16	r0, r0, r4
 80087f6:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 80087fa:	fa92 f204 	sadd16	r2, r2, r4
 80087fe:	f8c3 000a 	str.w	r0, [r3, #10]
 8008802:	f8c3 2006 	str.w	r2, [r3, #6]
					*dst++ = *src++ + input_offset;
 8008806:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800880a:	4452      	add	r2, sl
 800880c:	81da      	strh	r2, [r3, #14]
					*dst++ = *src++ + input_offset;
 800880e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8008812:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008814:	4452      	add	r2, sl
 8008816:	821a      	strh	r2, [r3, #16]
 8008818:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800881a:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800881e:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008822:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8008826:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800882a:	fa90 f004 	sadd16	r0, r0, r4
 800882e:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8008832:	fa92 f204 	sadd16	r2, r2, r4
 8008836:	619a      	str	r2, [r3, #24]
 8008838:	61d8      	str	r0, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 800883a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800883e:	4452      	add	r2, sl
 8008840:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8008842:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8008846:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8008848:	4452      	add	r2, sl
 800884a:	845a      	strh	r2, [r3, #34]	; 0x22
 800884c:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800884e:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8008852:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008856:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 800885a:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800885e:	fa90 f004 	sadd16	r0, r0, r4
 8008862:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8008866:	fa92 f204 	sadd16	r2, r2, r4
 800886a:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
			two_column_buf += 27;
 800886e:	3336      	adds	r3, #54	; 0x36
 8008870:	f843 0c08 	str.w	r0, [r3, #-8]
					*dst3++ = *src3++ + input_offset;
 8008874:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8008878:	4452      	add	r2, sl
 800887a:	f823 2c04 	strh.w	r2, [r3, #-4]
					*dst3++ = *src3++ + input_offset;
 800887e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8008882:	4452      	add	r2, sl
 8008884:	f823 2c02 	strh.w	r2, [r3, #-2]
			if (two_column_buf == runtime_buf + 2 * 27) {
 8008888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800888a:	4293      	cmp	r3, r2
 800888c:	f47f aecd 	bne.w	800862a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x35a>
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8008890:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8008892:	3501      	adds	r5, #1
 8008894:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008896:	9702      	str	r7, [sp, #8]
 8008898:	b22d      	sxth	r5, r5
 800889a:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800889c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800889e:	9925      	ldr	r1, [sp, #148]	; 0x94
 80088a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80088a2:	9701      	str	r7, [sp, #4]
 80088a4:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 80088a6:	9306      	str	r3, [sp, #24]
 80088a8:	9205      	str	r2, [sp, #20]
 80088aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088ac:	9104      	str	r1, [sp, #16]
 80088ae:	9003      	str	r0, [sp, #12]
 80088b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088b2:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80088b4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80088b6:	9700      	str	r7, [sp, #0]
 80088b8:	f000 fec0 	bl	800963c <mat_mult_kernel3_input3_s8_s16_fpreq>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80088be:	902b      	str	r0, [sp, #172]	; 0xac
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80088c0:	429d      	cmp	r5, r3
 80088c2:	da29      	bge.n	8008918 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x648>
 80088c4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80088c6:	e616      	b.n	80084f6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x226>
 80088c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
					*dst2++ = pad_out;
 80088ca:	f8a3 8012 	strh.w	r8, [r3, #18]
					*dst2++ = pad_out;
 80088ce:	f8a3 8014 	strh.w	r8, [r3, #20]
					*dst2++ = pad_out;
 80088d2:	f8a3 8016 	strh.w	r8, [r3, #22]
					*dst3++ = pad_out;
 80088d6:	f8a3 8024 	strh.w	r8, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 80088da:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 80088de:	f8a3 8028 	strh.w	r8, [r3, #40]	; 0x28
 80088e2:	683a      	ldr	r2, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80088e4:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80088e8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80088ec:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 80088f0:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80088f4:	fa90 f004 	sadd16	r0, r0, r4
 80088f8:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 80088fc:	fa92 f204 	sadd16	r2, r2, r4
 8008900:	619a      	str	r2, [r3, #24]
 8008902:	61d8      	str	r0, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8008904:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8008908:	4452      	add	r2, sl
 800890a:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 800890c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8008910:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008912:	4452      	add	r2, sl
 8008914:	845a      	strh	r2, [r3, #34]	; 0x22
 8008916:	e799      	b.n	800884c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x57c>
 8008918:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 800891a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800891c:	e68c      	b.n	8008638 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x368>
				q7_t ker_a1 = *ker_a++;
 800891e:	f109 0901 	add.w	r9, r9, #1
 8008922:	e6f0      	b.n	8008706 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
			while (col_count) {
 8008924:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008926:	e6d6      	b.n	80086d6 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x406>
				q7_t ker_a1 = *ker_a++;
 8008928:	f109 0902 	add.w	r9, r9, #2
 800892c:	e6eb      	b.n	8008706 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x436>
 800892e:	bf00      	nop

08008930 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch48_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8008936:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 8008938:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 800893c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 800893e:	9505      	str	r5, [sp, #20]
 8008940:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8008944:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8008946:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 800894a:	920a      	str	r2, [sp, #40]	; 0x28
 800894c:	9506      	str	r5, [sp, #24]
 800894e:	9707      	str	r7, [sp, #28]
 8008950:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 8008952:	f000 8254 	beq.w	8008dfe <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x4ce>
 8008956:	3308      	adds	r3, #8
 8008958:	3402      	adds	r4, #2
 800895a:	3e01      	subs	r6, #1
 800895c:	f105 0210 	add.w	r2, r5, #16
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	f105 0308 	add.w	r3, r5, #8
 8008966:	9403      	str	r4, [sp, #12]
 8008968:	b2b4      	uxth	r4, r6
 800896a:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 800896c:	eb01 0e47 	add.w	lr, r1, r7, lsl #1
 8008970:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008972:	940b      	str	r4, [sp, #44]	; 0x2c
 8008974:	3302      	adds	r3, #2
 8008976:	9304      	str	r3, [sp, #16]
 8008978:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 800897c:	9308      	str	r3, [sp, #32]
 800897e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008982:	9309      	str	r3, [sp, #36]	; 0x24
 8008984:	6805      	ldr	r5, [r0, #0]
 8008986:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008988:	fa2f f885 	sxtb16	r8, r5
 800898c:	18c6      	adds	r6, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800898e:	ea4f 2535 	mov.w	r5, r5, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 8008992:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008994:	fa2f fb85 	sxtb16	fp, r5
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8008998:	9d01      	ldr	r5, [sp, #4]
		const float scale_0 = scales[0];
 800899a:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 800899e:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 80089a2:	680f      	ldr	r7, [r1, #0]
 80089a4:	f8de c000 	ldr.w	ip, [lr]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80089a8:	f855 9c08 	ldr.w	r9, [r5, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089ac:	fb28 9307 	smlad	r3, r8, r7, r9
    memcpy(&val, *in_q7, 4);
 80089b0:	6834      	ldr	r4, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80089b2:	fa2f f284 	sxtb16	r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 80089b6:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80089ba:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089be:	fb28 980c 	smlad	r8, r8, ip, r9
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 80089c2:	f855 9c04 	ldr.w	r9, [r5, #-4]
 80089c6:	fb22 9707 	smlad	r7, r2, r7, r9
    memcpy(&val, *in_q15, 4);
 80089ca:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80089ce:	fb22 920c 	smlad	r2, r2, ip, r9
 80089d2:	f8de c004 	ldr.w	ip, [lr, #4]
 80089d6:	fb2b 330a 	smlad	r3, fp, sl, r3
 80089da:	fb2b 850c 	smlad	r5, fp, ip, r8
 80089de:	fb24 770a 	smlad	r7, r4, sl, r7
 80089e2:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80089e6:	fb24 240c 	smlad	r4, r4, ip, r2
    memcpy(&val, *in_q7, 4);
 80089ea:	f8d0 9004 	ldr.w	r9, [r0, #4]
    memcpy(&val, *in_q15, 4);
 80089ee:	f8de 8008 	ldr.w	r8, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 80089f2:	ea4f 2c39 	mov.w	ip, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80089f6:	fa2f f989 	sxtb16	r9, r9
 80089fa:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089fe:	fb29 330a 	smlad	r3, r9, sl, r3
    memcpy(&val, *in_q7, 4);
 8008a02:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a04:	fa2f fb82 	sxtb16	fp, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8008a08:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a0c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a10:	fb29 5508 	smlad	r5, r9, r8, r5
 8008a14:	fb2b 770a 	smlad	r7, fp, sl, r7
    memcpy(&val, *in_q15, 4);
 8008a18:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8008a1c:	fb2b 4b08 	smlad	fp, fp, r8, r4
 8008a20:	f8de 400c 	ldr.w	r4, [lr, #12]
 8008a24:	fb2c 330a 	smlad	r3, ip, sl, r3
 8008a28:	fb2c 5904 	smlad	r9, ip, r4, r5
 8008a2c:	fb22 770a 	smlad	r7, r2, sl, r7
 8008a30:	f8d1 a010 	ldr.w	sl, [r1, #16]
 8008a34:	fb22 b204 	smlad	r2, r2, r4, fp
    memcpy(&val, *in_q7, 4);
 8008a38:	6884      	ldr	r4, [r0, #8]
    memcpy(&val, *in_q15, 4);
 8008a3a:	f8de c010 	ldr.w	ip, [lr, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008a3e:	ea4f 2b34 	mov.w	fp, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a42:	fa2f f484 	sxtb16	r4, r4
 8008a46:	fa2f fb8b 	sxtb16	fp, fp
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a4a:	fb24 330a 	smlad	r3, r4, sl, r3
    memcpy(&val, *in_q7, 4);
 8008a4e:	68b5      	ldr	r5, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a50:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008a54:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a58:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a5c:	fb24 940c 	smlad	r4, r4, ip, r9
 8008a60:	fb28 770a 	smlad	r7, r8, sl, r7
    memcpy(&val, *in_q15, 4);
 8008a64:	f8d1 a014 	ldr.w	sl, [r1, #20]
 8008a68:	fb28 220c 	smlad	r2, r8, ip, r2
 8008a6c:	f8de 9014 	ldr.w	r9, [lr, #20]
 8008a70:	fb2b 330a 	smlad	r3, fp, sl, r3
 8008a74:	fb2b 4c09 	smlad	ip, fp, r9, r4
 8008a78:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8008a7c:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8008a80:	fb25 2509 	smlad	r5, r5, r9, r2
    memcpy(&val, *in_q7, 4);
 8008a84:	68c4      	ldr	r4, [r0, #12]
    memcpy(&val, *in_q15, 4);
 8008a86:	f8de b018 	ldr.w	fp, [lr, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008a8a:	ea4f 2934 	mov.w	r9, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a8e:	fa2f f484 	sxtb16	r4, r4
 8008a92:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a96:	fb24 3208 	smlad	r2, r4, r8, r3
    memcpy(&val, *in_q7, 4);
 8008a9a:	68f7      	ldr	r7, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a9c:	fa2f f387 	sxtb16	r3, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8008aa0:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008aa4:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008aa8:	fb24 c40b 	smlad	r4, r4, fp, ip
 8008aac:	fb23 a808 	smlad	r8, r3, r8, sl
    memcpy(&val, *in_q15, 4);
 8008ab0:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8008ab4:	fb23 550b 	smlad	r5, r3, fp, r5
 8008ab8:	f8de b01c 	ldr.w	fp, [lr, #28]
 8008abc:	fb29 220a 	smlad	r2, r9, sl, r2
 8008ac0:	fb29 440b 	smlad	r4, r9, fp, r4
 8008ac4:	fb27 8a0a 	smlad	sl, r7, sl, r8
 8008ac8:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8008acc:	fb27 5b0b 	smlad	fp, r7, fp, r5
    memcpy(&val, *in_q7, 4);
 8008ad0:	6903      	ldr	r3, [r0, #16]
    memcpy(&val, *in_q15, 4);
 8008ad2:	f8de 8020 	ldr.w	r8, [lr, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008ad6:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ada:	fa2f f383 	sxtb16	r3, r3
 8008ade:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ae2:	fb23 220c 	smlad	r2, r3, ip, r2
    memcpy(&val, *in_q7, 4);
 8008ae6:	6937      	ldr	r7, [r6, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ae8:	fa2f f587 	sxtb16	r5, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8008aec:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008af0:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008af4:	fb23 4408 	smlad	r4, r3, r8, r4
 8008af8:	fb25 ac0c 	smlad	ip, r5, ip, sl
    memcpy(&val, *in_q15, 4);
 8008afc:	f8d1 a024 	ldr.w	sl, [r1, #36]	; 0x24
 8008b00:	fb25 bb08 	smlad	fp, r5, r8, fp
 8008b04:	f8de 8024 	ldr.w	r8, [lr, #36]	; 0x24
 8008b08:	fb29 220a 	smlad	r2, r9, sl, r2
 8008b0c:	fb29 4908 	smlad	r9, r9, r8, r4
 8008b10:	fb27 ca0a 	smlad	sl, r7, sl, ip
 8008b14:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008b16:	fb27 bb08 	smlad	fp, r7, r8, fp
    memcpy(&val, *in_q7, 4);
 8008b1a:	6944      	ldr	r4, [r0, #20]
    memcpy(&val, *in_q15, 4);
 8008b1c:	f8de 7028 	ldr.w	r7, [lr, #40]	; 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 8008b20:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b24:	fa2f f484 	sxtb16	r4, r4
 8008b28:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b2c:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 8008b30:	6975      	ldr	r5, [r6, #20]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b32:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008b36:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b3a:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b3e:	fb24 9407 	smlad	r4, r4, r7, r9
 8008b42:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 8008b46:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 8008b4a:	fb28 bb07 	smlad	fp, r8, r7, fp
 8008b4e:	f8de 702c 	ldr.w	r7, [lr, #44]	; 0x2c
 8008b52:	fb2c 220a 	smlad	r2, ip, sl, r2
 8008b56:	fb2c 4407 	smlad	r4, ip, r7, r4
 8008b5a:	fb25 3a0a 	smlad	sl, r5, sl, r3
 8008b5e:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
 8008b62:	fb25 b707 	smlad	r7, r5, r7, fp
    memcpy(&val, *in_q7, 4);
 8008b66:	6983      	ldr	r3, [r0, #24]
    memcpy(&val, *in_q15, 4);
 8008b68:	f8de 8030 	ldr.w	r8, [lr, #48]	; 0x30
  return (op1 >> op2) | (op1 << (32U - op2));
 8008b6c:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b70:	fa2f f383 	sxtb16	r3, r3
 8008b74:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b78:	fb23 2209 	smlad	r2, r3, r9, r2
    memcpy(&val, *in_q7, 4);
 8008b7c:	69b5      	ldr	r5, [r6, #24]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b7e:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008b82:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008b86:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b8a:	fb23 4408 	smlad	r4, r3, r8, r4
 8008b8e:	fb2b a909 	smlad	r9, fp, r9, sl
    memcpy(&val, *in_q15, 4);
 8008b92:	f8d1 a034 	ldr.w	sl, [r1, #52]	; 0x34
 8008b96:	fb2b 7708 	smlad	r7, fp, r8, r7
 8008b9a:	f8de 8034 	ldr.w	r8, [lr, #52]	; 0x34
 8008b9e:	fb2c 220a 	smlad	r2, ip, sl, r2
 8008ba2:	fb2c 4c08 	smlad	ip, ip, r8, r4
 8008ba6:	fb25 9a0a 	smlad	sl, r5, sl, r9
 8008baa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008bac:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 8008bb0:	69c4      	ldr	r4, [r0, #28]
    memcpy(&val, *in_q15, 4);
 8008bb2:	f8de b038 	ldr.w	fp, [lr, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 8008bb6:	ea4f 2934 	mov.w	r9, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008bba:	fa2f f484 	sxtb16	r4, r4
 8008bbe:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008bc2:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 8008bc6:	69f5      	ldr	r5, [r6, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008bc8:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008bcc:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008bd0:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008bd4:	fb24 c40b 	smlad	r4, r4, fp, ip
 8008bd8:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 8008bdc:	f8d1 a03c 	ldr.w	sl, [r1, #60]	; 0x3c
 8008be0:	fb28 770b 	smlad	r7, r8, fp, r7
 8008be4:	f8de b03c 	ldr.w	fp, [lr, #60]	; 0x3c
 8008be8:	fb29 220a 	smlad	r2, r9, sl, r2
 8008bec:	fb29 440b 	smlad	r4, r9, fp, r4
 8008bf0:	fb25 3a0a 	smlad	sl, r5, sl, r3
 8008bf4:	f8d1 c040 	ldr.w	ip, [r1, #64]	; 0x40
 8008bf8:	fb25 770b 	smlad	r7, r5, fp, r7
    memcpy(&val, *in_q7, 4);
 8008bfc:	6a03      	ldr	r3, [r0, #32]
    memcpy(&val, *in_q15, 4);
 8008bfe:	f8de 8040 	ldr.w	r8, [lr, #64]	; 0x40
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c02:	ea4f 2933 	mov.w	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c06:	fa2f f383 	sxtb16	r3, r3
 8008c0a:	fa2f f989 	sxtb16	r9, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008c0e:	fb23 220c 	smlad	r2, r3, ip, r2
    memcpy(&val, *in_q7, 4);
 8008c12:	6a35      	ldr	r5, [r6, #32]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c14:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c18:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c1c:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008c20:	fb23 4408 	smlad	r4, r3, r8, r4
 8008c24:	fb2b ac0c 	smlad	ip, fp, ip, sl
    memcpy(&val, *in_q15, 4);
 8008c28:	f8d1 a044 	ldr.w	sl, [r1, #68]	; 0x44
 8008c2c:	fb2b 7708 	smlad	r7, fp, r8, r7
 8008c30:	f8de 8044 	ldr.w	r8, [lr, #68]	; 0x44
 8008c34:	fb29 220a 	smlad	r2, r9, sl, r2
 8008c38:	fb29 4908 	smlad	r9, r9, r8, r4
 8008c3c:	fb25 ca0a 	smlad	sl, r5, sl, ip
 8008c40:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8008c42:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 8008c46:	6a44      	ldr	r4, [r0, #36]	; 0x24
    memcpy(&val, *in_q15, 4);
 8008c48:	f8de b048 	ldr.w	fp, [lr, #72]	; 0x48
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c4c:	ea4f 2c34 	mov.w	ip, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c50:	fa2f f484 	sxtb16	r4, r4
 8008c54:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008c58:	fb24 2203 	smlad	r2, r4, r3, r2
    memcpy(&val, *in_q7, 4);
 8008c5c:	6a75      	ldr	r5, [r6, #36]	; 0x24
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c5e:	fa2f f885 	sxtb16	r8, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c62:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c66:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008c6a:	fb24 940b 	smlad	r4, r4, fp, r9
 8008c6e:	fb28 a303 	smlad	r3, r8, r3, sl
    memcpy(&val, *in_q15, 4);
 8008c72:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 8008c76:	fb28 770b 	smlad	r7, r8, fp, r7
 8008c7a:	f8de b04c 	ldr.w	fp, [lr, #76]	; 0x4c
 8008c7e:	fb2c 220a 	smlad	r2, ip, sl, r2
 8008c82:	fb2c 440b 	smlad	r4, ip, fp, r4
 8008c86:	fb25 3a0a 	smlad	sl, r5, sl, r3
 8008c8a:	f8d1 9050 	ldr.w	r9, [r1, #80]	; 0x50
 8008c8e:	fb25 770b 	smlad	r7, r5, fp, r7
    memcpy(&val, *in_q7, 4);
 8008c92:	6a83      	ldr	r3, [r0, #40]	; 0x28
    memcpy(&val, *in_q15, 4);
 8008c94:	f8de 8050 	ldr.w	r8, [lr, #80]	; 0x50
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c98:	ea4f 2c33 	mov.w	ip, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c9c:	fa2f f383 	sxtb16	r3, r3
 8008ca0:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ca4:	fb23 2209 	smlad	r2, r3, r9, r2
    memcpy(&val, *in_q7, 4);
 8008ca8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008caa:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008cae:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008cb2:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008cb6:	fb23 4408 	smlad	r4, r3, r8, r4
 8008cba:	fb2b a909 	smlad	r9, fp, r9, sl
    memcpy(&val, *in_q15, 4);
 8008cbe:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
 8008cc2:	fb2b 7708 	smlad	r7, fp, r8, r7
 8008cc6:	f8de 8054 	ldr.w	r8, [lr, #84]	; 0x54
 8008cca:	fb2c 220a 	smlad	r2, ip, sl, r2
 8008cce:	fb2c 4408 	smlad	r4, ip, r8, r4
 8008cd2:	fb25 9a0a 	smlad	sl, r5, sl, r9
 8008cd6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8008cd8:	fb25 7708 	smlad	r7, r5, r8, r7
    memcpy(&val, *in_q7, 4);
 8008cdc:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    memcpy(&val, *in_q15, 4);
 8008ce0:	f8de 9058 	ldr.w	r9, [lr, #88]	; 0x58
  return (op1 >> op2) | (op1 << (32U - op2));
 8008ce4:	ea4f 2c38 	mov.w	ip, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ce8:	fa2f f888 	sxtb16	r8, r8
 8008cec:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008cf0:	fb28 2203 	smlad	r2, r8, r3, r2
    memcpy(&val, *in_q7, 4);
 8008cf4:	6af6      	ldr	r6, [r6, #44]	; 0x2c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008cf6:	fa2f f586 	sxtb16	r5, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 8008cfa:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008cfe:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d02:	fb28 4409 	smlad	r4, r8, r9, r4
 8008d06:	fb25 aa03 	smlad	sl, r5, r3, sl
    memcpy(&val, *in_q15, 4);
 8008d0a:	f8d1 b05c 	ldr.w	fp, [r1, #92]	; 0x5c
 8008d0e:	fb25 7709 	smlad	r7, r5, r9, r7
 8008d12:	f8de 505c 	ldr.w	r5, [lr, #92]	; 0x5c
 8008d16:	fb2c 220b 	smlad	r2, ip, fp, r2
 8008d1a:	fb2c 4405 	smlad	r4, ip, r5, r4
 8008d1e:	fb26 aa0b 	smlad	sl, r6, fp, sl
 8008d22:	fb26 7705 	smlad	r7, r6, r5, r7
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008d26:	ee07 2a10 	vmov	s14, r2
 8008d2a:	9d01      	ldr	r5, [sp, #4]
		ch_0_out_0 += out_offset;
 8008d2c:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008d2e:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008d32:	ee07 4a10 	vmov	s14, r4
 8008d36:	3508      	adds	r5, #8
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008d3e:	ee07 aa10 	vmov	s14, sl
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008d42:	ee25 5a26 	vmul.f32	s10, s10, s13
 8008d46:	9501      	str	r5, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008d48:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008d4c:	ee07 7a10 	vmov	s14, r7
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008d50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8008d54:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008d56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 8008d5a:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008d5c:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8008d60:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008d64:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008d68:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 8008d6c:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008d72:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008d76:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8008d7a:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008d7c:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008d80:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008d84:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8008d88:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8008d8c:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 8008d8e:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008d90:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8008d94:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8008d96:	9e05      	ldr	r6, [sp, #20]
 8008d98:	42b5      	cmp	r5, r6
 8008d9a:	bfb8      	it	lt
 8008d9c:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8008d9e:	42b4      	cmp	r4, r6
 8008da0:	bfb8      	it	lt
 8008da2:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8008da4:	42b2      	cmp	r2, r6
 8008da6:	bfb8      	it	lt
 8008da8:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8008daa:	42bd      	cmp	r5, r7
 8008dac:	bfa8      	it	ge
 8008dae:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8008db0:	45b4      	cmp	ip, r6
 8008db2:	bfb8      	it	lt
 8008db4:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8008db6:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8008db8:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8008dba:	bfa8      	it	ge
 8008dbc:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8008dbe:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8008dc0:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8008dc4:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8008dc6:	bfa8      	it	ge
 8008dc8:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8008dca:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 8008dcc:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8008dce:	bfa8      	it	ge
 8008dd0:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 8008dd2:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8008dd6:	f806 2c01 	strb.w	r2, [r6, #-1]
 8008dda:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8008ddc:	f805 3c01 	strb.w	r3, [r5, #-1]
 8008de0:	1cab      	adds	r3, r5, #2
	while (row_count) {
 8008de2:	9d01      	ldr	r5, [sp, #4]
 8008de4:	9303      	str	r3, [sp, #12]
 8008de6:	9b08      	ldr	r3, [sp, #32]
 8008de8:	9204      	str	r2, [sp, #16]
 8008dea:	42ab      	cmp	r3, r5
 8008dec:	f47f adca 	bne.w	8008984 <mat_mult_kernel_s8_s16_reordered_ch48_fpreq+0x54>
 8008df0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df4:	3401      	adds	r4, #1
 8008df6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8008dfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dfc:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8008dfe:	4620      	mov	r0, r4
 8008e00:	b00d      	add	sp, #52	; 0x34
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	bf00      	nop

08008e08 <mat_mult_kernel_s8_s16_reordered_ch16_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8008e0e:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 8008e10:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 8008e14:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 8008e16:	9505      	str	r5, [sp, #20]
 8008e18:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8008e1c:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8008e1e:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 8008e22:	920a      	str	r2, [sp, #40]	; 0x28
 8008e24:	9506      	str	r5, [sp, #24]
 8008e26:	9707      	str	r7, [sp, #28]
 8008e28:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 8008e2a:	f000 8127 	beq.w	800907c <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x274>
 8008e2e:	3308      	adds	r3, #8
 8008e30:	3402      	adds	r4, #2
 8008e32:	3e01      	subs	r6, #1
 8008e34:	f105 0210 	add.w	r2, r5, #16
 8008e38:	9302      	str	r3, [sp, #8]
 8008e3a:	f105 0308 	add.w	r3, r5, #8
 8008e3e:	9403      	str	r4, [sp, #12]
 8008e40:	b2b4      	uxth	r4, r6
 8008e42:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8008e44:	eb01 0a47 	add.w	sl, r1, r7, lsl #1
 8008e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e4a:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8008e54:	9308      	str	r3, [sp, #32]
 8008e56:	f107 0310 	add.w	r3, r7, #16
 8008e5a:	9309      	str	r3, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 8008e5c:	6806      	ldr	r6, [r0, #0]
 8008e5e:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e60:	fa2f f886 	sxtb16	r8, r6
 8008e64:	18c7      	adds	r7, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8008e66:	ea4f 2636 	mov.w	r6, r6, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 8008e6a:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e6c:	fa2f fb86 	sxtb16	fp, r6
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8008e70:	9e01      	ldr	r6, [sp, #4]
		const float scale_0 = scales[0];
 8008e72:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8008e76:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 8008e7a:	f8d1 c000 	ldr.w	ip, [r1]
 8008e7e:	f8da 2000 	ldr.w	r2, [sl]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8008e82:	f856 ec08 	ldr.w	lr, [r6, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008e86:	fb28 e30c 	smlad	r3, r8, ip, lr
    memcpy(&val, *in_q7, 4);
 8008e8a:	683d      	ldr	r5, [r7, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e8c:	fa2f f485 	sxtb16	r4, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008e90:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e94:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008e98:	fb28 e802 	smlad	r8, r8, r2, lr
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8008e9c:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8008ea0:	fb24 ec0c 	smlad	ip, r4, ip, lr
    memcpy(&val, *in_q15, 4);
 8008ea4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008ea8:	fb24 e402 	smlad	r4, r4, r2, lr
 8008eac:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008eb0:	fb2b 3309 	smlad	r3, fp, r9, r3
 8008eb4:	fb2b 8602 	smlad	r6, fp, r2, r8
 8008eb8:	fb25 cc09 	smlad	ip, r5, r9, ip
 8008ebc:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8008ec0:	fb25 4502 	smlad	r5, r5, r2, r4
    memcpy(&val, *in_q7, 4);
 8008ec4:	f8d0 e004 	ldr.w	lr, [r0, #4]
    memcpy(&val, *in_q15, 4);
 8008ec8:	f8da b008 	ldr.w	fp, [sl, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008ecc:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ed0:	fa2f fe8e 	sxtb16	lr, lr
 8008ed4:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ed8:	fb2e 3309 	smlad	r3, lr, r9, r3
    memcpy(&val, *in_q7, 4);
 8008edc:	687c      	ldr	r4, [r7, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ede:	fa2f f884 	sxtb16	r8, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 8008ee2:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008ee6:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008eea:	fb2e 660b 	smlad	r6, lr, fp, r6
 8008eee:	fb28 cc09 	smlad	ip, r8, r9, ip
    memcpy(&val, *in_q15, 4);
 8008ef2:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008ef6:	fb28 550b 	smlad	r5, r8, fp, r5
 8008efa:	f8da 800c 	ldr.w	r8, [sl, #12]
 8008efe:	fb22 3309 	smlad	r3, r2, r9, r3
 8008f02:	fb22 6608 	smlad	r6, r2, r8, r6
 8008f06:	fb24 c909 	smlad	r9, r4, r9, ip
 8008f0a:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8008f0e:	fb24 5408 	smlad	r4, r4, r8, r5
    memcpy(&val, *in_q7, 4);
 8008f12:	6882      	ldr	r2, [r0, #8]
    memcpy(&val, *in_q15, 4);
 8008f14:	f8da b010 	ldr.w	fp, [sl, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f18:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f1c:	fa2f f282 	sxtb16	r2, r2
 8008f20:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008f24:	fb22 330e 	smlad	r3, r2, lr, r3
    memcpy(&val, *in_q7, 4);
 8008f28:	68bd      	ldr	r5, [r7, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f2a:	fa2f fc85 	sxtb16	ip, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f2e:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f32:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008f36:	fb22 660b 	smlad	r6, r2, fp, r6
 8008f3a:	fb2c 9e0e 	smlad	lr, ip, lr, r9
    memcpy(&val, *in_q15, 4);
 8008f3e:	f8d1 9014 	ldr.w	r9, [r1, #20]
 8008f42:	fb2c 440b 	smlad	r4, ip, fp, r4
 8008f46:	f8da b014 	ldr.w	fp, [sl, #20]
 8008f4a:	fb28 3309 	smlad	r3, r8, r9, r3
 8008f4e:	fb28 660b 	smlad	r6, r8, fp, r6
 8008f52:	fb25 ee09 	smlad	lr, r5, r9, lr
 8008f56:	698a      	ldr	r2, [r1, #24]
 8008f58:	fb25 4b0b 	smlad	fp, r5, fp, r4
    memcpy(&val, *in_q7, 4);
 8008f5c:	f8d0 900c 	ldr.w	r9, [r0, #12]
    memcpy(&val, *in_q15, 4);
 8008f60:	f8da c018 	ldr.w	ip, [sl, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f64:	ea4f 2839 	mov.w	r8, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f68:	fa2f f989 	sxtb16	r9, r9
 8008f6c:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008f70:	fb29 3302 	smlad	r3, r9, r2, r3
    memcpy(&val, *in_q7, 4);
 8008f74:	68ff      	ldr	r7, [r7, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f76:	fa2f f487 	sxtb16	r4, r7
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f7a:	ea4f 2737 	mov.w	r7, r7, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f7e:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008f82:	fb29 660c 	smlad	r6, r9, ip, r6
 8008f86:	fb24 ee02 	smlad	lr, r4, r2, lr
    memcpy(&val, *in_q15, 4);
 8008f8a:	69cd      	ldr	r5, [r1, #28]
 8008f8c:	fb24 bb0c 	smlad	fp, r4, ip, fp
 8008f90:	f8da 401c 	ldr.w	r4, [sl, #28]
 8008f94:	fb28 3305 	smlad	r3, r8, r5, r3
 8008f98:	fb28 6604 	smlad	r6, r8, r4, r6
 8008f9c:	fb27 ee05 	smlad	lr, r7, r5, lr
 8008fa0:	fb27 bb04 	smlad	fp, r7, r4, fp
		ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008fa4:	ee07 3a10 	vmov	s14, r3
 8008fa8:	9c01      	ldr	r4, [sp, #4]
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008fb0:	ee07 6a10 	vmov	s14, r6
 8008fb4:	3408      	adds	r4, #8
		ch_0_out_0 += out_offset;
 8008fb6:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008fb8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008fbc:	ee07 ea10 	vmov	s14, lr
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008fc0:	ee25 5a26 	vmul.f32	s10, s10, s13
 8008fc4:	9401      	str	r4, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008fc6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008fca:	ee07 ba10 	vmov	s14, fp
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008fce:	ee66 6a26 	vmul.f32	s13, s12, s13
 8008fd2:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 8008fd8:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8008fda:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8008fde:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 8008fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008fe6:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 8008fea:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8008ff0:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008ff4:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8008ff8:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8008ffa:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8008ffe:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8009002:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8009006:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800900a:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 800900c:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 800900e:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8009012:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8009014:	9e05      	ldr	r6, [sp, #20]
 8009016:	42b5      	cmp	r5, r6
 8009018:	bfb8      	it	lt
 800901a:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800901c:	42b4      	cmp	r4, r6
 800901e:	bfb8      	it	lt
 8009020:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8009022:	42b2      	cmp	r2, r6
 8009024:	bfb8      	it	lt
 8009026:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8009028:	42bd      	cmp	r5, r7
 800902a:	bfa8      	it	ge
 800902c:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800902e:	45b4      	cmp	ip, r6
 8009030:	bfb8      	it	lt
 8009032:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8009034:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8009036:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8009038:	bfa8      	it	ge
 800903a:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800903c:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 800903e:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8009042:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8009044:	bfa8      	it	ge
 8009046:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8009048:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 800904a:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 800904c:	bfa8      	it	ge
 800904e:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 8009050:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8009054:	f806 2c01 	strb.w	r2, [r6, #-1]
 8009058:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 800905a:	f805 3c01 	strb.w	r3, [r5, #-1]
 800905e:	1cab      	adds	r3, r5, #2
	while (row_count) {
 8009060:	9c01      	ldr	r4, [sp, #4]
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	9b08      	ldr	r3, [sp, #32]
 8009066:	9204      	str	r2, [sp, #16]
 8009068:	42a3      	cmp	r3, r4
 800906a:	f47f aef7 	bne.w	8008e5c <mat_mult_kernel_s8_s16_reordered_ch16_fpreq+0x54>
 800906e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009072:	3401      	adds	r4, #1
 8009074:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8009078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800907a:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 800907c:	4620      	mov	r0, r4
 800907e:	b00d      	add	sp, #52	; 0x34
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009084 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_ch24_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	b08d      	sub	sp, #52	; 0x34
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 800908a:	0856      	lsrs	r6, r2, #1
		const int32_t *const output_bias, q7_t *out_0) {
 800908c:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
	q7_t *out_1 = out_0 + output_ch;
 8009090:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
		const int32_t *const output_bias, q7_t *out_0) {
 8009092:	9505      	str	r5, [sp, #20]
 8009094:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
	q7_t *out_1 = out_0 + output_ch;
 8009098:	4414      	add	r4, r2
		const int32_t *const output_bias, q7_t *out_0) {
 800909a:	f9bd 5060 	ldrsh.w	r5, [sp, #96]	; 0x60
 800909e:	920a      	str	r2, [sp, #40]	; 0x28
 80090a0:	9506      	str	r5, [sp, #24]
 80090a2:	9707      	str	r7, [sp, #28]
 80090a4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	while (row_count) {
 80090a6:	f000 8173 	beq.w	8009390 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x30c>
 80090aa:	3308      	adds	r3, #8
 80090ac:	3402      	adds	r4, #2
 80090ae:	3e01      	subs	r6, #1
 80090b0:	f105 0210 	add.w	r2, r5, #16
 80090b4:	9302      	str	r3, [sp, #8]
 80090b6:	f105 0308 	add.w	r3, r5, #8
 80090ba:	9403      	str	r4, [sp, #12]
 80090bc:	b2b4      	uxth	r4, r6
 80090be:	9301      	str	r3, [sp, #4]
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80090c0:	eb01 0e47 	add.w	lr, r1, r7, lsl #1
 80090c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80090c8:	3302      	adds	r3, #2
 80090ca:	9304      	str	r3, [sp, #16]
 80090cc:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 80090d0:	9308      	str	r3, [sp, #32]
 80090d2:	f107 0318 	add.w	r3, r7, #24
 80090d6:	9309      	str	r3, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 80090d8:	6805      	ldr	r5, [r0, #0]
 80090da:	9b07      	ldr	r3, [sp, #28]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80090dc:	fa2f f885 	sxtb16	r8, r5
 80090e0:	18c6      	adds	r6, r0, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80090e2:	ea4f 2535 	mov.w	r5, r5, ror #8

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
		const float scale_0 = scales[0];
 80090e6:	9b02      	ldr	r3, [sp, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80090e8:	fa2f fb85 	sxtb16	fp, r5
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		//4
		ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);

		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80090ec:	9d01      	ldr	r5, [sp, #4]
		const float scale_0 = scales[0];
 80090ee:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 80090f2:	ed53 7a01 	vldr	s15, [r3, #-4]
    memcpy(&val, *in_q15, 4);
 80090f6:	f8d1 c000 	ldr.w	ip, [r1]
 80090fa:	f8de 7000 	ldr.w	r7, [lr]
		ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 80090fe:	f855 9c08 	ldr.w	r9, [r5, #-8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009102:	fb28 930c 	smlad	r3, r8, ip, r9
    memcpy(&val, *in_q7, 4);
 8009106:	6834      	ldr	r4, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009108:	fa2f f284 	sxtb16	r2, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 800910c:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009110:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009114:	fb28 9807 	smlad	r8, r8, r7, r9
		ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
		ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8009118:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800911c:	fb22 ac0c 	smlad	ip, r2, ip, sl
    memcpy(&val, *in_q15, 4);
 8009120:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8009124:	fb22 a207 	smlad	r2, r2, r7, sl
 8009128:	f8de 7004 	ldr.w	r7, [lr, #4]
 800912c:	fb2b 3309 	smlad	r3, fp, r9, r3
 8009130:	fb2b 8507 	smlad	r5, fp, r7, r8
 8009134:	fb24 cc09 	smlad	ip, r4, r9, ip
 8009138:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800913c:	fb24 2407 	smlad	r4, r4, r7, r2
    memcpy(&val, *in_q7, 4);
 8009140:	f8d0 a004 	ldr.w	sl, [r0, #4]
    memcpy(&val, *in_q15, 4);
 8009144:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8009148:	ea4f 273a 	mov.w	r7, sl, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800914c:	fa2f fa8a 	sxtb16	sl, sl
 8009150:	fa2f f787 	sxtb16	r7, r7
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009154:	fb2a 3309 	smlad	r3, sl, r9, r3
    memcpy(&val, *in_q7, 4);
 8009158:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800915a:	fa2f f882 	sxtb16	r8, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800915e:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009162:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009166:	fb2a 550b 	smlad	r5, sl, fp, r5
 800916a:	fb28 cc09 	smlad	ip, r8, r9, ip
    memcpy(&val, *in_q15, 4);
 800916e:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8009172:	fb28 440b 	smlad	r4, r8, fp, r4
 8009176:	f8de 800c 	ldr.w	r8, [lr, #12]
 800917a:	fb27 3309 	smlad	r3, r7, r9, r3
 800917e:	fb27 5a08 	smlad	sl, r7, r8, r5
 8009182:	fb22 cc09 	smlad	ip, r2, r9, ip
 8009186:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800918a:	fb22 4208 	smlad	r2, r2, r8, r4
    memcpy(&val, *in_q7, 4);
 800918e:	6885      	ldr	r5, [r0, #8]
    memcpy(&val, *in_q15, 4);
 8009190:	f8de 7010 	ldr.w	r7, [lr, #16]
  return (op1 >> op2) | (op1 << (32U - op2));
 8009194:	ea4f 2435 	mov.w	r4, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009198:	fa2f f585 	sxtb16	r5, r5
 800919c:	fa2f f484 	sxtb16	r4, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80091a0:	fb25 3309 	smlad	r3, r5, r9, r3
    memcpy(&val, *in_q7, 4);
 80091a4:	f8d6 8008 	ldr.w	r8, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80091a8:	fa2f fb88 	sxtb16	fp, r8
  return (op1 >> op2) | (op1 << (32U - op2));
 80091ac:	ea4f 2838 	mov.w	r8, r8, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80091b0:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80091b4:	fb25 a507 	smlad	r5, r5, r7, sl
 80091b8:	fb2b cc09 	smlad	ip, fp, r9, ip
    memcpy(&val, *in_q15, 4);
 80091bc:	f8d1 9014 	ldr.w	r9, [r1, #20]
 80091c0:	fb2b 2207 	smlad	r2, fp, r7, r2
 80091c4:	f8de a014 	ldr.w	sl, [lr, #20]
 80091c8:	fb24 3309 	smlad	r3, r4, r9, r3
 80091cc:	fb24 570a 	smlad	r7, r4, sl, r5
 80091d0:	fb28 c909 	smlad	r9, r8, r9, ip
 80091d4:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80091d8:	fb28 220a 	smlad	r2, r8, sl, r2
    memcpy(&val, *in_q7, 4);
 80091dc:	68c4      	ldr	r4, [r0, #12]
    memcpy(&val, *in_q15, 4);
 80091de:	f8de a018 	ldr.w	sl, [lr, #24]
  return (op1 >> op2) | (op1 << (32U - op2));
 80091e2:	ea4f 2834 	mov.w	r8, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80091e6:	fa2f f484 	sxtb16	r4, r4
 80091ea:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80091ee:	fb24 330c 	smlad	r3, r4, ip, r3
    memcpy(&val, *in_q7, 4);
 80091f2:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80091f4:	fa2f fb85 	sxtb16	fp, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 80091f8:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80091fc:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009200:	fb24 740a 	smlad	r4, r4, sl, r7
 8009204:	fb2b 9c0c 	smlad	ip, fp, ip, r9
    memcpy(&val, *in_q15, 4);
 8009208:	f8d1 901c 	ldr.w	r9, [r1, #28]
 800920c:	fb2b 220a 	smlad	r2, fp, sl, r2
 8009210:	f8de a01c 	ldr.w	sl, [lr, #28]
 8009214:	fb28 3309 	smlad	r3, r8, r9, r3
 8009218:	fb28 440a 	smlad	r4, r8, sl, r4
 800921c:	fb25 c909 	smlad	r9, r5, r9, ip
 8009220:	6a0f      	ldr	r7, [r1, #32]
 8009222:	fb25 2a0a 	smlad	sl, r5, sl, r2
    memcpy(&val, *in_q7, 4);
 8009226:	6902      	ldr	r2, [r0, #16]
    memcpy(&val, *in_q15, 4);
 8009228:	f8de b020 	ldr.w	fp, [lr, #32]
  return (op1 >> op2) | (op1 << (32U - op2));
 800922c:	ea4f 2832 	mov.w	r8, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009230:	fa2f f282 	sxtb16	r2, r2
 8009234:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009238:	fb22 3307 	smlad	r3, r2, r7, r3
    memcpy(&val, *in_q7, 4);
 800923c:	6935      	ldr	r5, [r6, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800923e:	fa2f fc85 	sxtb16	ip, r5
  return (op1 >> op2) | (op1 << (32U - op2));
 8009242:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009246:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800924a:	fb22 440b 	smlad	r4, r2, fp, r4
 800924e:	fb2c 9707 	smlad	r7, ip, r7, r9
    memcpy(&val, *in_q15, 4);
 8009252:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8009256:	fb2c aa0b 	smlad	sl, ip, fp, sl
 800925a:	f8de b024 	ldr.w	fp, [lr, #36]	; 0x24
 800925e:	fb28 3309 	smlad	r3, r8, r9, r3
 8009262:	fb28 440b 	smlad	r4, r8, fp, r4
 8009266:	fb25 7709 	smlad	r7, r5, r9, r7
 800926a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800926c:	fb25 aa0b 	smlad	sl, r5, fp, sl
    memcpy(&val, *in_q7, 4);
 8009270:	f8d0 9014 	ldr.w	r9, [r0, #20]
    memcpy(&val, *in_q15, 4);
 8009274:	f8de c028 	ldr.w	ip, [lr, #40]	; 0x28
  return (op1 >> op2) | (op1 << (32U - op2));
 8009278:	ea4f 2839 	mov.w	r8, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800927c:	fa2f f989 	sxtb16	r9, r9
 8009280:	fa2f f888 	sxtb16	r8, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009284:	fb29 3302 	smlad	r3, r9, r2, r3
    memcpy(&val, *in_q7, 4);
 8009288:	6976      	ldr	r6, [r6, #20]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800928a:	fa2f fb86 	sxtb16	fp, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 800928e:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009292:	fa2f f686 	sxtb16	r6, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009296:	fb29 440c 	smlad	r4, r9, ip, r4
 800929a:	fb2b 7702 	smlad	r7, fp, r2, r7
    memcpy(&val, *in_q15, 4);
 800929e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80092a0:	fb2b aa0c 	smlad	sl, fp, ip, sl
 80092a4:	f8de b02c 	ldr.w	fp, [lr, #44]	; 0x2c
 80092a8:	fb28 3305 	smlad	r3, r8, r5, r3
 80092ac:	fb28 440b 	smlad	r4, r8, fp, r4
 80092b0:	fb26 7705 	smlad	r7, r6, r5, r7
 80092b4:	fb26 aa0b 	smlad	sl, r6, fp, sl
		ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80092b8:	ee07 3a10 	vmov	s14, r3
 80092bc:	9d01      	ldr	r5, [sp, #4]
		ch_0_out_0 += out_offset;
 80092be:	9e16      	ldr	r6, [sp, #88]	; 0x58
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80092c0:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80092c4:	ee07 4a10 	vmov	s14, r4
 80092c8:	3508      	adds	r5, #8
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80092d0:	ee07 7a10 	vmov	s14, r7
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80092d4:	ee25 5a26 	vmul.f32	s10, s10, s13
 80092d8:	9501      	str	r5, [sp, #4]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80092da:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80092de:	ee07 aa10 	vmov	s14, sl
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80092e2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80092e6:	3308      	adds	r3, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80092e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_1 += out_offset;
 80092ec:	9f16      	ldr	r7, [sp, #88]	; 0x58
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80092ee:	ee25 6aa7 	vmul.f32	s12, s11, s15
 80092f2:	9302      	str	r3, [sp, #8]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		/* skip row */
		ip_a0 += num_col_a;
 80092f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80092f6:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80092fa:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ip_a0 += num_col_a;
 80092fe:	4418      	add	r0, r3
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8009300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8009304:	ee17 5a10 	vmov	r5, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8009308:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 800930c:	4435      	add	r5, r6
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 800930e:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8009312:	ee17 4a10 	vmov	r4, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8009316:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 800931a:	eb03 0c07 	add.w	ip, r3, r7
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800931e:	9f06      	ldr	r7, [sp, #24]
		ch_0_out_1 += out_offset;
 8009320:	4434      	add	r4, r6
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8009322:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8009326:	4432      	add	r2, r6
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8009328:	9e05      	ldr	r6, [sp, #20]
 800932a:	42b5      	cmp	r5, r6
 800932c:	bfb8      	it	lt
 800932e:	4635      	movlt	r5, r6
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8009330:	42b4      	cmp	r4, r6
 8009332:	bfb8      	it	lt
 8009334:	4634      	movlt	r4, r6
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8009336:	42b2      	cmp	r2, r6
 8009338:	bfb8      	it	lt
 800933a:	4632      	movlt	r2, r6
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800933c:	42bd      	cmp	r5, r7
 800933e:	bfa8      	it	ge
 8009340:	463d      	movge	r5, r7
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8009342:	45b4      	cmp	ip, r6
 8009344:	bfb8      	it	lt
 8009346:	46b4      	movlt	ip, r6
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8009348:	42bc      	cmp	r4, r7
		*out_0++ = (q7_t) ch_0_out_0;
 800934a:	9e04      	ldr	r6, [sp, #16]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800934c:	bfa8      	it	ge
 800934e:	463c      	movge	r4, r7
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8009350:	42ba      	cmp	r2, r7
		*out_0++ = (q7_t) ch_0_out_0;
 8009352:	f806 5c02 	strb.w	r5, [r6, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8009356:	4663      	mov	r3, ip
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8009358:	bfa8      	it	ge
 800935a:	463a      	movge	r2, r7
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 800935c:	45bc      	cmp	ip, r7
		*out_1++ = (q7_t) ch_0_out_1;
 800935e:	9d03      	ldr	r5, [sp, #12]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8009360:	bfa8      	it	ge
 8009362:	463b      	movge	r3, r7
		*out_1++ = (q7_t) ch_0_out_1;
 8009364:	f805 4c02 	strb.w	r4, [r5, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8009368:	f806 2c01 	strb.w	r2, [r6, #-1]
 800936c:	1cb2      	adds	r2, r6, #2
		*out_1++ = (q7_t) ch_1_out_1;
 800936e:	f805 3c01 	strb.w	r3, [r5, #-1]
 8009372:	1cab      	adds	r3, r5, #2
	while (row_count) {
 8009374:	9d01      	ldr	r5, [sp, #4]
 8009376:	9303      	str	r3, [sp, #12]
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	9204      	str	r2, [sp, #16]
 800937c:	42ab      	cmp	r3, r5
 800937e:	f47f aeab 	bne.w	80090d8 <mat_mult_kernel_s8_s16_reordered_ch24_fpreq+0x54>
 8009382:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009386:	3401      	adds	r4, #1
 8009388:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800938c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800938e:	441c      	add	r4, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8009390:	4620      	mov	r0, r4
 8009392:	b00d      	add	sp, #52	; 0x34
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009398 <mat_mult_kernel_s8_s16_reordered_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	b093      	sub	sp, #76	; 0x4c
 800939e:	4683      	mov	fp, r0
 80093a0:	460e      	mov	r6, r1
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 80093a2:	9821      	ldr	r0, [sp, #132]	; 0x84
		const int32_t *const output_bias, q7_t *out_0) {
 80093a4:	910b      	str	r1, [sp, #44]	; 0x2c
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 80093a6:	0851      	lsrs	r1, r2, #1
	q7_t *out_1 = out_0 + output_ch;
 80093a8:	eb00 0402 	add.w	r4, r0, r2
		const int32_t *const output_bias, q7_t *out_0) {
 80093ac:	f9bd 0074 	ldrsh.w	r0, [sp, #116]	; 0x74
 80093b0:	9210      	str	r2, [sp, #64]	; 0x40
 80093b2:	9007      	str	r0, [sp, #28]
 80093b4:	f9bd 0078 	ldrsh.w	r0, [sp, #120]	; 0x78
 80093b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ba:	9008      	str	r0, [sp, #32]
 80093bc:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
	q7_t *out_1 = out_0 + output_ch;
 80093c0:	940e      	str	r4, [sp, #56]	; 0x38
		const int32_t *const output_bias, q7_t *out_0) {
 80093c2:	9006      	str	r0, [sp, #24]
	while (row_count) {
 80093c4:	f000 80d8 	beq.w	8009578 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1e0>
		q31_t ch_0_out_0 = *bias;
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		uint16_t col_count = num_col_a / 4;
 80093c8:	0885      	lsrs	r5, r0, #2
 80093ca:	3901      	subs	r1, #1
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80093cc:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 80093d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093d2:	461f      	mov	r7, r3
 80093d4:	b289      	uxth	r1, r1
 80093d6:	900c      	str	r0, [sp, #48]	; 0x30
 80093d8:	3210      	adds	r2, #16
 80093da:	9820      	ldr	r0, [sp, #128]	; 0x80
 80093dc:	1e6b      	subs	r3, r5, #1
 80093de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		uint16_t col_count = num_col_a / 4;
 80093e2:	950a      	str	r5, [sp, #40]	; 0x28
 80093e4:	3008      	adds	r0, #8
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	9209      	str	r2, [sp, #36]	; 0x24
 80093ea:	463a      	mov	r2, r7
 80093ec:	9003      	str	r0, [sp, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80093f2:	3208      	adds	r2, #8
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	9111      	str	r1, [sp, #68]	; 0x44
 80093f8:	3002      	adds	r0, #2
 80093fa:	9202      	str	r2, [sp, #8]
 80093fc:	930d      	str	r3, [sp, #52]	; 0x34
 80093fe:	9005      	str	r0, [sp, #20]
 8009400:	1ca0      	adds	r0, r4, #2
 8009402:	9004      	str	r0, [sp, #16]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8009404:	9b06      	ldr	r3, [sp, #24]
 8009406:	eb0b 0903 	add.w	r9, fp, r3
		const float scale_0 = scales[0];
 800940a:	9b02      	ldr	r3, [sp, #8]
 800940c:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8009410:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	f853 cc08 	ldr.w	ip, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 800941a:	f853 0c04 	ldr.w	r0, [r3, #-4]
		/* accumulate over the vector */
		while (col_count) {
 800941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 8107 	beq.w	8009634 <mat_mult_kernel_s8_s16_reordered_fpreq+0x29c>
 8009426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		q31_t ch_1_out_1 = *bias++;
 8009428:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 800942a:	4665      	mov	r5, ip
 800942c:	46ca      	mov	sl, r9
 800942e:	445b      	add	r3, fp
		const q15_t *ip_b0 = input_b;
 8009430:	e9dd e80b 	ldrd	lr, r8, [sp, #44]	; 0x2c
 8009434:	9301      	str	r3, [sp, #4]
    memcpy(&val, *in_q7, 4);
 8009436:	f85b 2b04 	ldr.w	r2, [fp], #4
    memcpy(&val, *in_q15, 4);
 800943a:	f8de 7000 	ldr.w	r7, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
 800943e:	ea4f 2632 	mov.w	r6, r2, ror #8
 8009442:	f8d8 9000 	ldr.w	r9, [r8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009446:	fa2f f686 	sxtb16	r6, r6
 800944a:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800944e:	fb22 cc07 	smlad	ip, r2, r7, ip
    memcpy(&val, *in_q7, 4);
 8009452:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009456:	fa2f f483 	sxtb16	r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800945a:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800945e:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8009462:	fb22 5209 	smlad	r2, r2, r9, r5
 8009466:	fb24 0007 	smlad	r0, r4, r7, r0
    memcpy(&val, *in_q15, 4);
 800946a:	f8de 7004 	ldr.w	r7, [lr, #4]
 800946e:	f10e 0e08 	add.w	lr, lr, #8
 8009472:	fb24 1109 	smlad	r1, r4, r9, r1
 8009476:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800947a:	f108 0808 	add.w	r8, r8, #8
 800947e:	fb26 cc07 	smlad	ip, r6, r7, ip
 8009482:	fb26 2504 	smlad	r5, r6, r4, r2
 8009486:	fb23 0007 	smlad	r0, r3, r7, r0
 800948a:	fb23 1104 	smlad	r1, r3, r4, r1
		while (col_count) {
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	459b      	cmp	fp, r3
 8009492:	d1d0      	bne.n	8009436 <mat_mult_kernel_s8_s16_reordered_fpreq+0x9e>
 8009494:	9b06      	ldr	r3, [sp, #24]
 8009496:	449b      	add	fp, r3
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8009498:	ee07 ca10 	vmov	s14, ip
		ch_0_out_0 += out_offset;
 800949c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800949e:	9b02      	ldr	r3, [sp, #8]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80094a0:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80094a4:	ee07 5a10 	vmov	s14, r5
 80094a8:	3308      	adds	r3, #8
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
		ch_1_out_1 += out_offset;
 80094aa:	9d1c      	ldr	r5, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80094ac:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80094b0:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80094b4:	ee25 5a26 	vmul.f32	s10, s10, s13
 80094b8:	9302      	str	r3, [sp, #8]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80094ba:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80094be:	ee07 1a10 	vmov	s14, r1
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80094c2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80094c6:	9f03      	ldr	r7, [sp, #12]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80094c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80094cc:	ee25 6aa7 	vmul.f32	s12, s11, s15
 80094d0:	3708      	adds	r7, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d6:	9703      	str	r7, [sp, #12]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80094d8:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80094dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80094e0:	ee17 0a10 	vmov	r0, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80094e4:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 80094e8:	4420      	add	r0, r4
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80094ea:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80094ee:	ee17 1a10 	vmov	r1, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80094f2:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 80094f6:	442b      	add	r3, r5
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80094f8:	9d08      	ldr	r5, [sp, #32]
		ch_0_out_1 += out_offset;
 80094fa:	4421      	add	r1, r4
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80094fc:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8009500:	4422      	add	r2, r4
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8009502:	9c07      	ldr	r4, [sp, #28]
 8009504:	42a0      	cmp	r0, r4
 8009506:	bfb8      	it	lt
 8009508:	4620      	movlt	r0, r4
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800950a:	42a1      	cmp	r1, r4
 800950c:	bfb8      	it	lt
 800950e:	4621      	movlt	r1, r4
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8009510:	42a2      	cmp	r2, r4
 8009512:	bfb8      	it	lt
 8009514:	4622      	movlt	r2, r4
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8009516:	42a8      	cmp	r0, r5
 8009518:	bfa8      	it	ge
 800951a:	4628      	movge	r0, r5
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800951c:	42a3      	cmp	r3, r4
 800951e:	bfb8      	it	lt
 8009520:	4623      	movlt	r3, r4
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8009522:	42a9      	cmp	r1, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8009524:	9c05      	ldr	r4, [sp, #20]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8009526:	bfa8      	it	ge
 8009528:	4629      	movge	r1, r5
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800952a:	42aa      	cmp	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 800952c:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8009530:	bfa8      	it	ge
 8009532:	462a      	movge	r2, r5
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8009534:	42ab      	cmp	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 8009536:	9804      	ldr	r0, [sp, #16]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8009538:	bfa8      	it	ge
 800953a:	462b      	movge	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 800953c:	f800 1c02 	strb.w	r1, [r0, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8009540:	f804 2c01 	strb.w	r2, [r4, #-1]
 8009544:	1ca2      	adds	r2, r4, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8009546:	f800 3c01 	strb.w	r3, [r0, #-1]
 800954a:	1c83      	adds	r3, r0, #2
 800954c:	9205      	str	r2, [sp, #20]
 800954e:	9304      	str	r3, [sp, #16]
	while (row_count) {
 8009550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009552:	42bb      	cmp	r3, r7
 8009554:	f47f af56 	bne.w	8009404 <mat_mult_kernel_s8_s16_reordered_fpreq+0x6c>
 8009558:	9911      	ldr	r1, [sp, #68]	; 0x44
 800955a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800955c:	3101      	adds	r1, #1
 800955e:	00cb      	lsls	r3, r1, #3
 8009560:	0049      	lsls	r1, r1, #1
 8009562:	441a      	add	r2, r3
 8009564:	920f      	str	r2, [sp, #60]	; 0x3c
 8009566:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009568:	441a      	add	r2, r3
 800956a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800956c:	440b      	add	r3, r1
 800956e:	9220      	str	r2, [sp, #128]	; 0x80
 8009570:	9321      	str	r3, [sp, #132]	; 0x84
 8009572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009574:	440b      	add	r3, r1
 8009576:	930e      	str	r3, [sp, #56]	; 0x38
		/* skip row */
		ip_a0 += num_col_a;
		row_count--;
	}

	if (output_ch & 1) {
 8009578:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800957a:	07da      	lsls	r2, r3, #31
 800957c:	d554      	bpl.n	8009628 <mat_mult_kernel_s8_s16_reordered_fpreq+0x290>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;

		/* Init accumulator with bias for channel N + 1 */
		q31_t ch_0_out_0 = *bias;
 800957e:	9b20      	ldr	r3, [sp, #128]	; 0x80
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8009580:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		q31_t ch_0_out_0 = *bias;
 8009582:	6819      	ldr	r1, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8009584:	9b06      	ldr	r3, [sp, #24]
		q31_t ch_0_out_1 = ch_0_out_0;
 8009586:	460a      	mov	r2, r1

		int32_t col_count = num_col_a / 4;
		while (col_count) {
 8009588:	089d      	lsrs	r5, r3, #2
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 800958a:	eb06 0443 	add.w	r4, r6, r3, lsl #1
		while (col_count) {
 800958e:	d018      	beq.n	80095c2 <mat_mult_kernel_s8_s16_reordered_fpreq+0x22a>
    memcpy(&val, *in_q7, 4);
 8009590:	f85b 3b04 	ldr.w	r3, [fp], #4
    memcpy(&val, *in_q15, 4);
 8009594:	6837      	ldr	r7, [r6, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8009596:	ea4f 2033 	mov.w	r0, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800959a:	fa2f f383 	sxtb16	r3, r3
 800959e:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80095a2:	fb23 1107 	smlad	r1, r3, r7, r1
 80095a6:	6827      	ldr	r7, [r4, #0]
 80095a8:	fb23 2207 	smlad	r2, r3, r7, r2
 80095ac:	6877      	ldr	r7, [r6, #4]
 80095ae:	3408      	adds	r4, #8
 80095b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80095b4:	3608      	adds	r6, #8
 80095b6:	fb20 1107 	smlad	r1, r0, r7, r1
 80095ba:	fb20 2203 	smlad	r2, r0, r3, r2
 80095be:	3d01      	subs	r5, #1
 80095c0:	d1e6      	bne.n	8009590 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1f8>
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 80095c2:	ee07 1a90 	vmov	s15, r1
 80095c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 80095c8:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 += out_offset;
 80095cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 80095ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095d2:	edd1 6a00 	vldr	s13, [r1]
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80095d6:	9808      	ldr	r0, [sp, #32]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 80095d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		*out_0++ = (q7_t) ch_0_out_0;
 80095dc:	9c21      	ldr	r4, [sp, #132]	; 0x84
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 80095de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095e6:	ee17 3a90 	vmov	r3, s15
		ch_0_out_0 += out_offset;
 80095ea:	4413      	add	r3, r2
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80095ec:	9a07      	ldr	r2, [sp, #28]
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bfb8      	it	lt
 80095f2:	4613      	movlt	r3, r2
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80095f4:	4283      	cmp	r3, r0
 80095f6:	bfa8      	it	ge
 80095f8:	4603      	movge	r3, r0
		*out_0++ = (q7_t) ch_0_out_0;
 80095fa:	7023      	strb	r3, [r4, #0]
 80095fc:	4623      	mov	r3, r4
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 80095fe:	edd1 7a00 	vldr	s15, [r1]
		*out_0++ = (q7_t) ch_0_out_0;
 8009602:	3301      	adds	r3, #1
		ch_0_out_1 += out_offset;
 8009604:	991c      	ldr	r1, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8009606:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_0_out_0;
 800960a:	9321      	str	r3, [sp, #132]	; 0x84
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 800960c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009610:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 += out_offset;
 8009614:	440b      	add	r3, r1
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8009616:	4293      	cmp	r3, r2
 8009618:	bfb8      	it	lt
 800961a:	4613      	movlt	r3, r2
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;
 800961c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800961e:	4283      	cmp	r3, r0
 8009620:	bfa8      	it	ge
 8009622:	4603      	movge	r3, r0
		*out_1++ = (q7_t) ch_0_out_1;
 8009624:	7013      	strb	r3, [r2, #0]
 8009626:	9b10      	ldr	r3, [sp, #64]	; 0x40

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8009628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800962a:	4413      	add	r3, r2
 800962c:	4618      	mov	r0, r3
 800962e:	b013      	add	sp, #76	; 0x4c
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (col_count) {
 8009634:	46cb      	mov	fp, r9
		q31_t ch_1_out_1 = *bias++;
 8009636:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8009638:	4665      	mov	r5, ip
 800963a:	e72d      	b.n	8009498 <mat_mult_kernel_s8_s16_reordered_fpreq+0x100>

0800963c <mat_mult_kernel3_input3_s8_s16_fpreq>:

q7_t* mat_mult_kernel3_input3_s8_s16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	b087      	sub	sp, #28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8009642:	9815      	ldr	r0, [sp, #84]	; 0x54
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8009644:	9204      	str	r2, [sp, #16]
	q7_t *out_1 = out_0 + output_ch;
 8009646:	4410      	add	r0, r2
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q15_t *ksrc = &kbuf[0];
	/* this loop over rows in A */
	while (row_count) {
 8009648:	0852      	lsrs	r2, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 800964a:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 800964e:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8009652:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
 8009656:	9d14      	ldr	r5, [sp, #80]	; 0x50
	while (row_count) {
 8009658:	f000 8157 	beq.w	800990a <mat_mult_kernel3_input3_s8_s16_fpreq+0x2ce>
 800965c:	3308      	adds	r3, #8
 800965e:	3a01      	subs	r2, #1
 8009660:	f105 0410 	add.w	r4, r5, #16
 8009664:	3002      	adds	r0, #2
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	b292      	uxth	r2, r2
 800966a:	9b15      	ldr	r3, [sp, #84]	; 0x54
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 800966c:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8009670:	f105 0908 	add.w	r9, r5, #8
 8009674:	9001      	str	r0, [sp, #4]
 8009676:	3302      	adds	r3, #2
 8009678:	9205      	str	r2, [sp, #20]
 800967a:	9302      	str	r3, [sp, #8]
 800967c:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009684:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
		const q31_t *ip31_b0 = ip_b0;
		const q31_t *ip31_b1 = ip_b1;
		const float scale_0 = scales[0];
 8009688:	9b00      	ldr	r3, [sp, #0]
 800968a:	6808      	ldr	r0, [r1, #0]
 800968c:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8009690:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009694:	f8d8 2000 	ldr.w	r2, [r8]
		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 8009698:	f85e 4c6c 	ldr.w	r4, [lr, #-108]
 800969c:	f859 5c08 	ldr.w	r5, [r9, #-8]
 80096a0:	fb24 5300 	smlad	r3, r4, r0, r5
 80096a4:	fb24 5402 	smlad	r4, r4, r2, r5
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 80096a8:	f85e 7c36 	ldr.w	r7, [lr, #-54]
 80096ac:	f859 6c04 	ldr.w	r6, [r9, #-4]
 80096b0:	fb27 6000 	smlad	r0, r7, r0, r6
 80096b4:	fb27 6202 	smlad	r2, r7, r2, r6
 80096b8:	684d      	ldr	r5, [r1, #4]
 80096ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 80096be:	f85e 6c68 	ldr.w	r6, [lr, #-104]
 80096c2:	fb26 3305 	smlad	r3, r6, r5, r3
 80096c6:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 80096ca:	f85e 6c32 	ldr.w	r6, [lr, #-50]
 80096ce:	fb26 0005 	smlad	r0, r6, r5, r0
 80096d2:	fb26 2707 	smlad	r7, r6, r7, r2
 80096d6:	688a      	ldr	r2, [r1, #8]
 80096d8:	f8d8 c008 	ldr.w	ip, [r8, #8]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 80096dc:	f85e 5c64 	ldr.w	r5, [lr, #-100]
 80096e0:	fb25 3302 	smlad	r3, r5, r2, r3
 80096e4:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 80096e8:	f85e 6c2e 	ldr.w	r6, [lr, #-46]
 80096ec:	fb26 0002 	smlad	r0, r6, r2, r0
 80096f0:	fb26 760c 	smlad	r6, r6, ip, r7
 80096f4:	68ca      	ldr	r2, [r1, #12]
 80096f6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 80096fa:	f85e 5c60 	ldr.w	r5, [lr, #-96]
 80096fe:	fb25 3302 	smlad	r3, r5, r2, r3
 8009702:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 8009706:	f85e 5c2a 	ldr.w	r5, [lr, #-42]
 800970a:	fb25 0002 	smlad	r0, r5, r2, r0
 800970e:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8009712:	690e      	ldr	r6, [r1, #16]
 8009714:	f8d8 5010 	ldr.w	r5, [r8, #16]

		//------------------12
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[4], b0, ch_0_out_0);
 8009718:	f85e 2c5c 	ldr.w	r2, [lr, #-92]
 800971c:	fb22 3306 	smlad	r3, r2, r6, r3
 8009720:	fb22 4405 	smlad	r4, r2, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[4], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[4], b0, ch_1_out_0);
 8009724:	f85e 2c26 	ldr.w	r2, [lr, #-38]
 8009728:	fb22 0006 	smlad	r0, r2, r6, r0
 800972c:	fb22 c505 	smlad	r5, r2, r5, ip
 8009730:	694e      	ldr	r6, [r1, #20]
 8009732:	f8d8 2014 	ldr.w	r2, [r8, #20]
		ch_1_out_1 = __SMLAD(ksrc2_31[4], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[5], b0, ch_0_out_0);
 8009736:	f85e 7c58 	ldr.w	r7, [lr, #-88]
 800973a:	fb27 3306 	smlad	r3, r7, r6, r3
 800973e:	fb27 4402 	smlad	r4, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[5], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[5], b0, ch_1_out_0);
 8009742:	f85e 7c22 	ldr.w	r7, [lr, #-34]
 8009746:	fb27 0006 	smlad	r0, r7, r6, r0
 800974a:	fb27 5202 	smlad	r2, r7, r2, r5
 800974e:	698d      	ldr	r5, [r1, #24]
 8009750:	f8d8 7018 	ldr.w	r7, [r8, #24]
		ch_1_out_1 = __SMLAD(ksrc2_31[5], b1, ch_1_out_1);

		//------------------16
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[6], b0, ch_0_out_0);
 8009754:	f85e 6c54 	ldr.w	r6, [lr, #-84]
 8009758:	fb26 3305 	smlad	r3, r6, r5, r3
 800975c:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[6], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[6], b0, ch_1_out_0);
 8009760:	f85e 6c1e 	ldr.w	r6, [lr, #-30]
 8009764:	fb26 0005 	smlad	r0, r6, r5, r0
 8009768:	fb26 2707 	smlad	r7, r6, r7, r2
 800976c:	69ca      	ldr	r2, [r1, #28]
 800976e:	f8d8 c01c 	ldr.w	ip, [r8, #28]
		ch_1_out_1 = __SMLAD(ksrc2_31[6], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[7], b0, ch_0_out_0);
 8009772:	f85e 5c50 	ldr.w	r5, [lr, #-80]
 8009776:	fb25 3302 	smlad	r3, r5, r2, r3
 800977a:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[7], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[7], b0, ch_1_out_0);
 800977e:	f85e 6c1a 	ldr.w	r6, [lr, #-26]
 8009782:	fb26 0002 	smlad	r0, r6, r2, r0
 8009786:	fb26 760c 	smlad	r6, r6, ip, r7
 800978a:	6a0a      	ldr	r2, [r1, #32]
 800978c:	f8d8 c020 	ldr.w	ip, [r8, #32]
		ch_1_out_1 = __SMLAD(ksrc2_31[7], b1, ch_1_out_1);

		//------------------20
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[8], b0, ch_0_out_0);
 8009790:	f85e 7c4c 	ldr.w	r7, [lr, #-76]
 8009794:	fb27 3302 	smlad	r3, r7, r2, r3
 8009798:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[8], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[8], b0, ch_1_out_0);
 800979c:	f85e 5c16 	ldr.w	r5, [lr, #-22]
 80097a0:	fb25 0002 	smlad	r0, r5, r2, r0
 80097a4:	fb25 6c0c 	smlad	ip, r5, ip, r6
 80097a8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80097aa:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
		ch_1_out_1 = __SMLAD(ksrc2_31[8], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[9], b0, ch_0_out_0);
 80097ae:	f85e 7c48 	ldr.w	r7, [lr, #-72]
 80097b2:	fb27 3306 	smlad	r3, r7, r6, r3
 80097b6:	fb27 4405 	smlad	r4, r7, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[9], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[9], b0, ch_1_out_0);
 80097ba:	f85e 2c12 	ldr.w	r2, [lr, #-18]
 80097be:	fb22 0006 	smlad	r0, r2, r6, r0
 80097c2:	fb22 c505 	smlad	r5, r2, r5, ip
 80097c6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80097c8:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
		ch_1_out_1 = __SMLAD(ksrc2_31[9], b1, ch_1_out_1);

		//------------------24
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[10], b0, ch_0_out_0);
 80097cc:	f85e 7c44 	ldr.w	r7, [lr, #-68]
 80097d0:	fb27 3306 	smlad	r3, r7, r6, r3
 80097d4:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[10], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[10], b0, ch_1_out_0);
 80097d8:	f85e 2c0e 	ldr.w	r2, [lr, #-14]
 80097dc:	fb22 0006 	smlad	r0, r2, r6, r0
 80097e0:	fb22 520c 	smlad	r2, r2, ip, r5
 80097e4:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80097e6:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
		ch_1_out_1 = __SMLAD(ksrc2_31[10], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[11], b0, ch_0_out_0);
 80097ea:	f85e 7c40 	ldr.w	r7, [lr, #-64]
 80097ee:	fb27 3306 	smlad	r3, r7, r6, r3
 80097f2:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[11], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[11], b0, ch_1_out_0);
 80097f6:	f85e 5c0a 	ldr.w	r5, [lr, #-10]
 80097fa:	fb25 0006 	smlad	r0, r5, r6, r0
 80097fe:	fb25 2c0c 	smlad	ip, r5, ip, r2
 8009802:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8009804:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
		ch_1_out_1 = __SMLAD(ksrc2_31[11], b1, ch_1_out_1);

		//------------------25,26,27
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[12], b0, ch_0_out_0);
 8009808:	f85e 7c3c 	ldr.w	r7, [lr, #-60]
 800980c:	fb27 3306 	smlad	r3, r7, r6, r3
 8009810:	fb27 4702 	smlad	r7, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
 8009814:	f85e 5c06 	ldr.w	r5, [lr, #-6]
 8009818:	fb25 0606 	smlad	r6, r5, r6, r0
 800981c:	fb25 c502 	smlad	r5, r5, r2, ip
 8009820:	9a00      	ldr	r2, [sp, #0]
 8009822:	f109 0908 	add.w	r9, r9, #8
		ch_1_out_1 = __SMLAD(ksrc2_31[12], b1, ch_1_out_1);
		q15_t _b0 = *ip_b0++;
		q15_t _b1 = *ip_b1++;

		ch_0_out_0 += ksrc[26] * _b0;
 8009826:	f93e 4c38 	ldrsh.w	r4, [lr, #-56]
 800982a:	f10e 0e6c 	add.w	lr, lr, #108	; 0x6c
		q15_t _b0 = *ip_b0++;
 800982e:	f9b1 0034 	ldrsh.w	r0, [r1, #52]	; 0x34
 8009832:	3208      	adds	r2, #8
		q15_t _b1 = *ip_b1++;
 8009834:	f9b8 c034 	ldrsh.w	ip, [r8, #52]	; 0x34
		ch_0_out_0 += ksrc[26] * _b0;
 8009838:	fb04 3300 	mla	r3, r4, r0, r3
 800983c:	9200      	str	r2, [sp, #0]
		ch_0_out_1 += ksrc[26] * _b1;
 800983e:	fb04 740c 	mla	r4, r4, ip, r7
		ch_1_out_0 += ksrc2[26] * _b0;
 8009842:	f93e 2c6e 	ldrsh.w	r2, [lr, #-110]
		ch_0_out_0 += ksrc[26] * _b0;
 8009846:	ee05 3a10 	vmov	s10, r3
		ch_1_out_0 += ksrc2[26] * _b0;
 800984a:	fb00 6002 	mla	r0, r0, r2, r6
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 800984e:	ee07 4a10 	vmov	s14, r4
		ch_1_out_1 += ksrc2[26] * _b1;
 8009852:	fb0c 5202 	mla	r2, ip, r2, r5
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8009856:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 800985a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 800985e:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 += out_offset;
 8009862:	9d10      	ldr	r5, [sp, #64]	; 0x40
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8009864:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8009868:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 800986c:	ee25 5a26 	vmul.f32	s10, s10, s13
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8009870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8009874:	ee66 6a26 	vmul.f32	s13, s12, s13
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8009878:	ee25 6aa7 	vmul.f32	s12, s11, s15
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 800987c:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8009880:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8009884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8009888:	ee17 4a10 	vmov	r4, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 800988c:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8009890:	442c      	add	r4, r5
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8009892:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8009896:	ee17 0a10 	vmov	r0, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 800989a:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800989e:	4554      	cmp	r4, sl
		ch_1_out_1 += out_offset;
 80098a0:	442b      	add	r3, r5
		ch_0_out_1 += out_offset;
 80098a2:	4428      	add	r0, r5
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80098a4:	ee17 2a10 	vmov	r2, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80098a8:	bfb8      	it	lt
 80098aa:	4654      	movlt	r4, sl
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80098ac:	4550      	cmp	r0, sl
		ch_1_out_0 += out_offset;
 80098ae:	442a      	add	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 80098b0:	9d02      	ldr	r5, [sp, #8]
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80098b2:	bfb8      	it	lt
 80098b4:	4650      	movlt	r0, sl
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80098b6:	4552      	cmp	r2, sl
 80098b8:	bfb8      	it	lt
 80098ba:	4652      	movlt	r2, sl
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80098bc:	455c      	cmp	r4, fp
 80098be:	bfa8      	it	ge
 80098c0:	465c      	movge	r4, fp
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 80098c2:	4553      	cmp	r3, sl
 80098c4:	bfb8      	it	lt
 80098c6:	4653      	movlt	r3, sl
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80098c8:	4558      	cmp	r0, fp
		*out_0++ = (q7_t) ch_0_out_0;
 80098ca:	f805 4c02 	strb.w	r4, [r5, #-2]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80098ce:	bfa8      	it	ge
 80098d0:	4658      	movge	r0, fp
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80098d2:	455a      	cmp	r2, fp
		*out_1++ = (q7_t) ch_0_out_1;
 80098d4:	9c01      	ldr	r4, [sp, #4]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80098d6:	bfa8      	it	ge
 80098d8:	465a      	movge	r2, fp
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80098da:	455b      	cmp	r3, fp
		*out_1++ = (q7_t) ch_0_out_1;
 80098dc:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80098e0:	bfa8      	it	ge
 80098e2:	465b      	movge	r3, fp
		*out_0++ = (q7_t) ch_1_out_0;
 80098e4:	f805 2c01 	strb.w	r2, [r5, #-1]
 80098e8:	1caa      	adds	r2, r5, #2
		*out_1++ = (q7_t) ch_1_out_1;
 80098ea:	f804 3c01 	strb.w	r3, [r4, #-1]
 80098ee:	1ca3      	adds	r3, r4, #2
 80098f0:	9202      	str	r2, [sp, #8]
 80098f2:	9301      	str	r3, [sp, #4]
	while (row_count) {
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	454b      	cmp	r3, r9
 80098f8:	f47f aec6 	bne.w	8009688 <mat_mult_kernel3_input3_s8_s16_fpreq+0x4c>
 80098fc:	9805      	ldr	r0, [sp, #20]
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	3001      	adds	r0, #1
 8009902:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8009906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009908:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 800990a:	b007      	add	sp, #28
 800990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009910 <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	b089      	sub	sp, #36	; 0x24
 8009916:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
 800991a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800991e:	9006      	str	r0, [sp, #24]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 8009920:	fb05 f00c 	mul.w	r0, r5, ip
{
 8009924:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8009928:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
	const int divider_half = ((sample_h * sample_w) / 2);
 800992c:	9001      	str	r0, [sp, #4]
 800992e:	1040      	asrs	r0, r0, #1
{
 8009930:	9107      	str	r1, [sp, #28]
	const int divider_half = ((sample_h * sample_w) / 2);
 8009932:	9003      	str	r0, [sp, #12]
	for(c = 0; c < input_c; c++){
 8009934:	2b00      	cmp	r3, #0
 8009936:	d053      	beq.n	80099e0 <avg_pooling+0xd0>
 8009938:	2900      	cmp	r1, #0
 800993a:	d051      	beq.n	80099e0 <avg_pooling+0xd0>
 800993c:	f1bb 0f00 	cmp.w	fp, #0
 8009940:	d04e      	beq.n	80099e0 <avg_pooling+0xd0>
 8009942:	fb02 fe03 	mul.w	lr, r2, r3
 8009946:	2200      	movs	r2, #0
 8009948:	9205      	str	r2, [sp, #20]
 800994a:	fb03 f205 	mul.w	r2, r3, r5
 800994e:	9202      	str	r2, [sp, #8]
		for(h = 0; h < output_h; h++){
 8009950:	2200      	movs	r2, #0
 8009952:	9204      	str	r2, [sp, #16]
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
				out = TN_MAX(out, out_activation_min);
				out = TN_MIN(out, out_activation_max);
				output[(w + h * output_w) * input_c + c] = out;
 8009954:	fb02 f80b 	mul.w	r8, r2, fp
			for(w = 0; w < output_w; w++){
 8009958:	f04f 0a00 	mov.w	sl, #0
					int height = sh + h * sample_h;
 800995c:	fb02 f90c 	mul.w	r9, r2, ip
 8009960:	9a05      	ldr	r2, [sp, #20]
 8009962:	fb03 2808 	mla	r8, r3, r8, r2
 8009966:	fb0e 2909 	mla	r9, lr, r9, r2
 800996a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800996c:	4490      	add	r8, r2
 800996e:	9a06      	ldr	r2, [sp, #24]
 8009970:	4491      	add	r9, r2
				for(sh = 0; sh < sample_h; sh++){
 8009972:	f1bc 0f00 	cmp.w	ip, #0
 8009976:	d036      	beq.n	80099e6 <avg_pooling+0xd6>
				int avg = 0;
 8009978:	2000      	movs	r0, #0
				for(sh = 0; sh < sample_h; sh++){
 800997a:	464f      	mov	r7, r9
 800997c:	4606      	mov	r6, r0
					for(sw = 0; sw < sample_w; sw++){
 800997e:	b145      	cbz	r5, 8009992 <avg_pooling+0x82>
 8009980:	4639      	mov	r1, r7
 8009982:	2200      	movs	r2, #0
 8009984:	3201      	adds	r2, #1
						avg += input[(width + height * input_w) * input_c + c];
 8009986:	f991 4000 	ldrsb.w	r4, [r1]
 800998a:	4419      	add	r1, r3
					for(sw = 0; sw < sample_w; sw++){
 800998c:	4295      	cmp	r5, r2
						avg += input[(width + height * input_w) * input_c + c];
 800998e:	4420      	add	r0, r4
					for(sw = 0; sw < sample_w; sw++){
 8009990:	d1f8      	bne.n	8009984 <avg_pooling+0x74>
				for(sh = 0; sh < sample_h; sh++){
 8009992:	3601      	adds	r6, #1
 8009994:	4477      	add	r7, lr
 8009996:	45b4      	cmp	ip, r6
 8009998:	d1f1      	bne.n	800997e <avg_pooling+0x6e>
				if (avg > 0)
 800999a:	2800      	cmp	r0, #0
 800999c:	dd24      	ble.n	80099e8 <avg_pooling+0xd8>
					avg += divider_half;
 800999e:	9a03      	ldr	r2, [sp, #12]
 80099a0:	4402      	add	r2, r0
 80099a2:	9902      	ldr	r1, [sp, #8]
			for(w = 0; w < output_w; w++){
 80099a4:	f10a 0a01 	add.w	sl, sl, #1
 80099a8:	4489      	add	r9, r1
				int out = avg / (sample_h * sample_w);
 80099aa:	9901      	ldr	r1, [sp, #4]
 80099ac:	fb92 f2f1 	sdiv	r2, r2, r1
				out = TN_MAX(out, out_activation_min);
 80099b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099b2:	428a      	cmp	r2, r1
 80099b4:	bfb8      	it	lt
 80099b6:	460a      	movlt	r2, r1
				out = TN_MIN(out, out_activation_max);
 80099b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80099ba:	428a      	cmp	r2, r1
 80099bc:	bfa8      	it	ge
 80099be:	460a      	movge	r2, r1
			for(w = 0; w < output_w; w++){
 80099c0:	45da      	cmp	sl, fp
				output[(w + h * output_w) * input_c + c] = out;
 80099c2:	f888 2000 	strb.w	r2, [r8]
 80099c6:	4498      	add	r8, r3
			for(w = 0; w < output_w; w++){
 80099c8:	d1d3      	bne.n	8009972 <avg_pooling+0x62>
		for(h = 0; h < output_h; h++){
 80099ca:	9a04      	ldr	r2, [sp, #16]
 80099cc:	9907      	ldr	r1, [sp, #28]
 80099ce:	3201      	adds	r2, #1
 80099d0:	428a      	cmp	r2, r1
 80099d2:	9204      	str	r2, [sp, #16]
 80099d4:	dbbe      	blt.n	8009954 <avg_pooling+0x44>
	for(c = 0; c < input_c; c++){
 80099d6:	9a05      	ldr	r2, [sp, #20]
 80099d8:	3201      	adds	r2, #1
 80099da:	429a      	cmp	r2, r3
 80099dc:	9205      	str	r2, [sp, #20]
 80099de:	d1b7      	bne.n	8009950 <avg_pooling+0x40>
			}
		}
	}
}
 80099e0:	b009      	add	sp, #36	; 0x24
 80099e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int avg = 0;
 80099e6:	4660      	mov	r0, ip
					avg -= divider_half;
 80099e8:	9a03      	ldr	r2, [sp, #12]
 80099ea:	1a82      	subs	r2, r0, r2
 80099ec:	e7d9      	b.n	80099a2 <avg_pooling+0x92>
 80099ee:	bf00      	nop

080099f0 <_ZdaPv>:
 80099f0:	f000 b800 	b.w	80099f4 <_ZdlPv>

080099f4 <_ZdlPv>:
 80099f4:	f000 b892 	b.w	8009b1c <free>

080099f8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4c08      	ldr	r4, [pc, #32]	; (8009a1c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80099fc:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8009a00:	4628      	mov	r0, r5
 8009a02:	60e5      	str	r5, [r4, #12]
 8009a04:	f000 f882 	bl	8009b0c <malloc>
 8009a08:	60a0      	str	r0, [r4, #8]
 8009a0a:	b120      	cbz	r0, 8009a16 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6060      	str	r0, [r4, #4]
 8009a10:	e9c0 5300 	strd	r5, r3, [r0]
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
 8009a16:	60e0      	str	r0, [r4, #12]
 8009a18:	6060      	str	r0, [r4, #4]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	20017c20 	.word	0x20017c20

08009a20 <round>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	ec57 6b10 	vmov	r6, r7, d0
 8009a26:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8009a2a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8009a2e:	2c13      	cmp	r4, #19
 8009a30:	463b      	mov	r3, r7
 8009a32:	463d      	mov	r5, r7
 8009a34:	dc17      	bgt.n	8009a66 <round+0x46>
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	da09      	bge.n	8009a4e <round+0x2e>
 8009a3a:	3401      	adds	r4, #1
 8009a3c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8009a40:	d103      	bne.n	8009a4a <round+0x2a>
 8009a42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009a46:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	e02c      	b.n	8009aa8 <round+0x88>
 8009a4e:	4a18      	ldr	r2, [pc, #96]	; (8009ab0 <round+0x90>)
 8009a50:	4122      	asrs	r2, r4
 8009a52:	4217      	tst	r7, r2
 8009a54:	d100      	bne.n	8009a58 <round+0x38>
 8009a56:	b19e      	cbz	r6, 8009a80 <round+0x60>
 8009a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a5c:	4123      	asrs	r3, r4
 8009a5e:	442b      	add	r3, r5
 8009a60:	ea23 0302 	bic.w	r3, r3, r2
 8009a64:	e7f1      	b.n	8009a4a <round+0x2a>
 8009a66:	2c33      	cmp	r4, #51	; 0x33
 8009a68:	dd0d      	ble.n	8009a86 <round+0x66>
 8009a6a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009a6e:	d107      	bne.n	8009a80 <round+0x60>
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	ee10 2a10 	vmov	r2, s0
 8009a78:	f7f6 fc28 	bl	80002cc <__adddf3>
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	ec47 6b10 	vmov	d0, r6, r7
 8009a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a86:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a8e:	40d0      	lsrs	r0, r2
 8009a90:	4206      	tst	r6, r0
 8009a92:	d0f5      	beq.n	8009a80 <round+0x60>
 8009a94:	2201      	movs	r2, #1
 8009a96:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009a9a:	fa02 f404 	lsl.w	r4, r2, r4
 8009a9e:	1931      	adds	r1, r6, r4
 8009aa0:	bf28      	it	cs
 8009aa2:	189b      	addcs	r3, r3, r2
 8009aa4:	ea21 0100 	bic.w	r1, r1, r0
 8009aa8:	461f      	mov	r7, r3
 8009aaa:	460e      	mov	r6, r1
 8009aac:	e7e8      	b.n	8009a80 <round+0x60>
 8009aae:	bf00      	nop
 8009ab0:	000fffff 	.word	0x000fffff

08009ab4 <__errno>:
 8009ab4:	4b01      	ldr	r3, [pc, #4]	; (8009abc <__errno+0x8>)
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	20000020 	.word	0x20000020

08009ac0 <__libc_init_array>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	4e0d      	ldr	r6, [pc, #52]	; (8009af8 <__libc_init_array+0x38>)
 8009ac4:	4c0d      	ldr	r4, [pc, #52]	; (8009afc <__libc_init_array+0x3c>)
 8009ac6:	1ba4      	subs	r4, r4, r6
 8009ac8:	10a4      	asrs	r4, r4, #2
 8009aca:	2500      	movs	r5, #0
 8009acc:	42a5      	cmp	r5, r4
 8009ace:	d109      	bne.n	8009ae4 <__libc_init_array+0x24>
 8009ad0:	4e0b      	ldr	r6, [pc, #44]	; (8009b00 <__libc_init_array+0x40>)
 8009ad2:	4c0c      	ldr	r4, [pc, #48]	; (8009b04 <__libc_init_array+0x44>)
 8009ad4:	f003 fa36 	bl	800cf44 <_init>
 8009ad8:	1ba4      	subs	r4, r4, r6
 8009ada:	10a4      	asrs	r4, r4, #2
 8009adc:	2500      	movs	r5, #0
 8009ade:	42a5      	cmp	r5, r4
 8009ae0:	d105      	bne.n	8009aee <__libc_init_array+0x2e>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ae8:	4798      	blx	r3
 8009aea:	3501      	adds	r5, #1
 8009aec:	e7ee      	b.n	8009acc <__libc_init_array+0xc>
 8009aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009af2:	4798      	blx	r3
 8009af4:	3501      	adds	r5, #1
 8009af6:	e7f2      	b.n	8009ade <__libc_init_array+0x1e>
 8009af8:	08088be0 	.word	0x08088be0
 8009afc:	08088be0 	.word	0x08088be0
 8009b00:	08088be0 	.word	0x08088be0
 8009b04:	08088bf0 	.word	0x08088bf0

08009b08 <__retarget_lock_acquire_recursive>:
 8009b08:	4770      	bx	lr

08009b0a <__retarget_lock_release_recursive>:
 8009b0a:	4770      	bx	lr

08009b0c <malloc>:
 8009b0c:	4b02      	ldr	r3, [pc, #8]	; (8009b18 <malloc+0xc>)
 8009b0e:	4601      	mov	r1, r0
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	f000 b80b 	b.w	8009b2c <_malloc_r>
 8009b16:	bf00      	nop
 8009b18:	20000020 	.word	0x20000020

08009b1c <free>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <free+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f002 bd21 	b.w	800c568 <_free_r>
 8009b26:	bf00      	nop
 8009b28:	20000020 	.word	0x20000020

08009b2c <_malloc_r>:
 8009b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	f101 050b 	add.w	r5, r1, #11
 8009b34:	2d16      	cmp	r5, #22
 8009b36:	4606      	mov	r6, r0
 8009b38:	d906      	bls.n	8009b48 <_malloc_r+0x1c>
 8009b3a:	f035 0507 	bics.w	r5, r5, #7
 8009b3e:	d504      	bpl.n	8009b4a <_malloc_r+0x1e>
 8009b40:	230c      	movs	r3, #12
 8009b42:	6033      	str	r3, [r6, #0]
 8009b44:	2400      	movs	r4, #0
 8009b46:	e1a8      	b.n	8009e9a <_malloc_r+0x36e>
 8009b48:	2510      	movs	r5, #16
 8009b4a:	428d      	cmp	r5, r1
 8009b4c:	d3f8      	bcc.n	8009b40 <_malloc_r+0x14>
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f000 fa4e 	bl	8009ff0 <__malloc_lock>
 8009b54:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009b58:	4fc0      	ldr	r7, [pc, #768]	; (8009e5c <_malloc_r+0x330>)
 8009b5a:	d238      	bcs.n	8009bce <_malloc_r+0xa2>
 8009b5c:	f105 0208 	add.w	r2, r5, #8
 8009b60:	443a      	add	r2, r7
 8009b62:	f1a2 0108 	sub.w	r1, r2, #8
 8009b66:	6854      	ldr	r4, [r2, #4]
 8009b68:	428c      	cmp	r4, r1
 8009b6a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8009b6e:	d102      	bne.n	8009b76 <_malloc_r+0x4a>
 8009b70:	68d4      	ldr	r4, [r2, #12]
 8009b72:	42a2      	cmp	r2, r4
 8009b74:	d010      	beq.n	8009b98 <_malloc_r+0x6c>
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009b7c:	f023 0303 	bic.w	r3, r3, #3
 8009b80:	60ca      	str	r2, [r1, #12]
 8009b82:	4423      	add	r3, r4
 8009b84:	6091      	str	r1, [r2, #8]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	f042 0201 	orr.w	r2, r2, #1
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f000 fa34 	bl	8009ffc <__malloc_unlock>
 8009b94:	3408      	adds	r4, #8
 8009b96:	e180      	b.n	8009e9a <_malloc_r+0x36e>
 8009b98:	3302      	adds	r3, #2
 8009b9a:	4ab1      	ldr	r2, [pc, #708]	; (8009e60 <_malloc_r+0x334>)
 8009b9c:	693c      	ldr	r4, [r7, #16]
 8009b9e:	4294      	cmp	r4, r2
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	d075      	beq.n	8009c90 <_malloc_r+0x164>
 8009ba4:	6860      	ldr	r0, [r4, #4]
 8009ba6:	f020 0c03 	bic.w	ip, r0, #3
 8009baa:	ebac 0005 	sub.w	r0, ip, r5
 8009bae:	280f      	cmp	r0, #15
 8009bb0:	dd48      	ble.n	8009c44 <_malloc_r+0x118>
 8009bb2:	1963      	adds	r3, r4, r5
 8009bb4:	f045 0501 	orr.w	r5, r5, #1
 8009bb8:	6065      	str	r5, [r4, #4]
 8009bba:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8009bbe:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8009bc2:	f040 0201 	orr.w	r2, r0, #1
 8009bc6:	605a      	str	r2, [r3, #4]
 8009bc8:	f844 000c 	str.w	r0, [r4, ip]
 8009bcc:	e7df      	b.n	8009b8e <_malloc_r+0x62>
 8009bce:	0a6b      	lsrs	r3, r5, #9
 8009bd0:	d02a      	beq.n	8009c28 <_malloc_r+0xfc>
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d812      	bhi.n	8009bfc <_malloc_r+0xd0>
 8009bd6:	09ab      	lsrs	r3, r5, #6
 8009bd8:	3338      	adds	r3, #56	; 0x38
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8009be0:	f1a2 0c08 	sub.w	ip, r2, #8
 8009be4:	6854      	ldr	r4, [r2, #4]
 8009be6:	4564      	cmp	r4, ip
 8009be8:	d006      	beq.n	8009bf8 <_malloc_r+0xcc>
 8009bea:	6862      	ldr	r2, [r4, #4]
 8009bec:	f022 0203 	bic.w	r2, r2, #3
 8009bf0:	1b50      	subs	r0, r2, r5
 8009bf2:	280f      	cmp	r0, #15
 8009bf4:	dd1c      	ble.n	8009c30 <_malloc_r+0x104>
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	e7ce      	b.n	8009b9a <_malloc_r+0x6e>
 8009bfc:	2b14      	cmp	r3, #20
 8009bfe:	d801      	bhi.n	8009c04 <_malloc_r+0xd8>
 8009c00:	335b      	adds	r3, #91	; 0x5b
 8009c02:	e7ea      	b.n	8009bda <_malloc_r+0xae>
 8009c04:	2b54      	cmp	r3, #84	; 0x54
 8009c06:	d802      	bhi.n	8009c0e <_malloc_r+0xe2>
 8009c08:	0b2b      	lsrs	r3, r5, #12
 8009c0a:	336e      	adds	r3, #110	; 0x6e
 8009c0c:	e7e5      	b.n	8009bda <_malloc_r+0xae>
 8009c0e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009c12:	d802      	bhi.n	8009c1a <_malloc_r+0xee>
 8009c14:	0beb      	lsrs	r3, r5, #15
 8009c16:	3377      	adds	r3, #119	; 0x77
 8009c18:	e7df      	b.n	8009bda <_malloc_r+0xae>
 8009c1a:	f240 5254 	movw	r2, #1364	; 0x554
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d804      	bhi.n	8009c2c <_malloc_r+0x100>
 8009c22:	0cab      	lsrs	r3, r5, #18
 8009c24:	337c      	adds	r3, #124	; 0x7c
 8009c26:	e7d8      	b.n	8009bda <_malloc_r+0xae>
 8009c28:	233f      	movs	r3, #63	; 0x3f
 8009c2a:	e7d6      	b.n	8009bda <_malloc_r+0xae>
 8009c2c:	237e      	movs	r3, #126	; 0x7e
 8009c2e:	e7d4      	b.n	8009bda <_malloc_r+0xae>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	68e1      	ldr	r1, [r4, #12]
 8009c34:	db04      	blt.n	8009c40 <_malloc_r+0x114>
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	60d9      	str	r1, [r3, #12]
 8009c3a:	608b      	str	r3, [r1, #8]
 8009c3c:	18a3      	adds	r3, r4, r2
 8009c3e:	e7a2      	b.n	8009b86 <_malloc_r+0x5a>
 8009c40:	460c      	mov	r4, r1
 8009c42:	e7d0      	b.n	8009be6 <_malloc_r+0xba>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8009c4a:	db07      	blt.n	8009c5c <_malloc_r+0x130>
 8009c4c:	44a4      	add	ip, r4
 8009c4e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	f8cc 3004 	str.w	r3, [ip, #4]
 8009c5a:	e798      	b.n	8009b8e <_malloc_r+0x62>
 8009c5c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f080 8099 	bcs.w	8009d98 <_malloc_r+0x26c>
 8009c66:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8009c6a:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f10c 0c01 	add.w	ip, ip, #1
 8009c74:	fa02 f20e 	lsl.w	r2, r2, lr
 8009c78:	4310      	orrs	r0, r2
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8009c80:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8009c84:	3a08      	subs	r2, #8
 8009c86:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8009c8a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8009c8e:	60c4      	str	r4, [r0, #12]
 8009c90:	2001      	movs	r0, #1
 8009c92:	109a      	asrs	r2, r3, #2
 8009c94:	fa00 f202 	lsl.w	r2, r0, r2
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4290      	cmp	r0, r2
 8009c9c:	d326      	bcc.n	8009cec <_malloc_r+0x1c0>
 8009c9e:	4210      	tst	r0, r2
 8009ca0:	d106      	bne.n	8009cb0 <_malloc_r+0x184>
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	0052      	lsls	r2, r2, #1
 8009ca8:	4210      	tst	r0, r2
 8009caa:	f103 0304 	add.w	r3, r3, #4
 8009cae:	d0fa      	beq.n	8009ca6 <_malloc_r+0x17a>
 8009cb0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8009cb4:	46e1      	mov	r9, ip
 8009cb6:	4698      	mov	r8, r3
 8009cb8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009cbc:	454c      	cmp	r4, r9
 8009cbe:	f040 80af 	bne.w	8009e20 <_malloc_r+0x2f4>
 8009cc2:	f108 0801 	add.w	r8, r8, #1
 8009cc6:	f018 0f03 	tst.w	r8, #3
 8009cca:	f109 0908 	add.w	r9, r9, #8
 8009cce:	d1f3      	bne.n	8009cb8 <_malloc_r+0x18c>
 8009cd0:	0798      	lsls	r0, r3, #30
 8009cd2:	f040 80e8 	bne.w	8009ea6 <_malloc_r+0x37a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	ea23 0302 	bic.w	r3, r3, r2
 8009cdc:	607b      	str	r3, [r7, #4]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	0052      	lsls	r2, r2, #1
 8009ce2:	4290      	cmp	r0, r2
 8009ce4:	d302      	bcc.n	8009cec <_malloc_r+0x1c0>
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	f040 80ec 	bne.w	8009ec4 <_malloc_r+0x398>
 8009cec:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009cf0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8009cf4:	f024 0203 	bic.w	r2, r4, #3
 8009cf8:	42aa      	cmp	r2, r5
 8009cfa:	d303      	bcc.n	8009d04 <_malloc_r+0x1d8>
 8009cfc:	1b53      	subs	r3, r2, r5
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	f300 8140 	bgt.w	8009f84 <_malloc_r+0x458>
 8009d04:	4b57      	ldr	r3, [pc, #348]	; (8009e64 <_malloc_r+0x338>)
 8009d06:	9200      	str	r2, [sp, #0]
 8009d08:	2008      	movs	r0, #8
 8009d0a:	681c      	ldr	r4, [r3, #0]
 8009d0c:	f001 fd72 	bl	800b7f4 <sysconf>
 8009d10:	4b55      	ldr	r3, [pc, #340]	; (8009e68 <_malloc_r+0x33c>)
 8009d12:	9a00      	ldr	r2, [sp, #0]
 8009d14:	6819      	ldr	r1, [r3, #0]
 8009d16:	3410      	adds	r4, #16
 8009d18:	3101      	adds	r1, #1
 8009d1a:	442c      	add	r4, r5
 8009d1c:	bf1f      	itttt	ne
 8009d1e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 8009d22:	1824      	addne	r4, r4, r0
 8009d24:	4241      	negne	r1, r0
 8009d26:	400c      	andne	r4, r1
 8009d28:	4680      	mov	r8, r0
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	e9cd 2300 	strd	r2, r3, [sp]
 8009d32:	f000 fb11 	bl	800a358 <_sbrk_r>
 8009d36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009d3a:	4683      	mov	fp, r0
 8009d3c:	f000 80fb 	beq.w	8009f36 <_malloc_r+0x40a>
 8009d40:	9a00      	ldr	r2, [sp, #0]
 8009d42:	9b01      	ldr	r3, [sp, #4]
 8009d44:	eb0a 0102 	add.w	r1, sl, r2
 8009d48:	4281      	cmp	r1, r0
 8009d4a:	d902      	bls.n	8009d52 <_malloc_r+0x226>
 8009d4c:	45ba      	cmp	sl, r7
 8009d4e:	f040 80f2 	bne.w	8009f36 <_malloc_r+0x40a>
 8009d52:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8009e74 <_malloc_r+0x348>
 8009d56:	f8d9 0000 	ldr.w	r0, [r9]
 8009d5a:	4559      	cmp	r1, fp
 8009d5c:	eb00 0e04 	add.w	lr, r0, r4
 8009d60:	f8c9 e000 	str.w	lr, [r9]
 8009d64:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8009d68:	f040 80ae 	bne.w	8009ec8 <_malloc_r+0x39c>
 8009d6c:	ea11 0f0c 	tst.w	r1, ip
 8009d70:	f040 80aa 	bne.w	8009ec8 <_malloc_r+0x39c>
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	4414      	add	r4, r2
 8009d78:	f044 0401 	orr.w	r4, r4, #1
 8009d7c:	605c      	str	r4, [r3, #4]
 8009d7e:	4a3b      	ldr	r2, [pc, #236]	; (8009e6c <_malloc_r+0x340>)
 8009d80:	f8d9 3000 	ldr.w	r3, [r9]
 8009d84:	6811      	ldr	r1, [r2, #0]
 8009d86:	428b      	cmp	r3, r1
 8009d88:	bf88      	it	hi
 8009d8a:	6013      	strhi	r3, [r2, #0]
 8009d8c:	4a38      	ldr	r2, [pc, #224]	; (8009e70 <_malloc_r+0x344>)
 8009d8e:	6811      	ldr	r1, [r2, #0]
 8009d90:	428b      	cmp	r3, r1
 8009d92:	bf88      	it	hi
 8009d94:	6013      	strhi	r3, [r2, #0]
 8009d96:	e0ce      	b.n	8009f36 <_malloc_r+0x40a>
 8009d98:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009d9c:	2a04      	cmp	r2, #4
 8009d9e:	d818      	bhi.n	8009dd2 <_malloc_r+0x2a6>
 8009da0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009da4:	3238      	adds	r2, #56	; 0x38
 8009da6:	f102 0e01 	add.w	lr, r2, #1
 8009daa:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8009dae:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8009db2:	45f0      	cmp	r8, lr
 8009db4:	d12b      	bne.n	8009e0e <_malloc_r+0x2e2>
 8009db6:	1092      	asrs	r2, r2, #2
 8009db8:	f04f 0c01 	mov.w	ip, #1
 8009dbc:	fa0c f202 	lsl.w	r2, ip, r2
 8009dc0:	4310      	orrs	r0, r2
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009dc8:	f8c8 4008 	str.w	r4, [r8, #8]
 8009dcc:	f8ce 400c 	str.w	r4, [lr, #12]
 8009dd0:	e75e      	b.n	8009c90 <_malloc_r+0x164>
 8009dd2:	2a14      	cmp	r2, #20
 8009dd4:	d801      	bhi.n	8009dda <_malloc_r+0x2ae>
 8009dd6:	325b      	adds	r2, #91	; 0x5b
 8009dd8:	e7e5      	b.n	8009da6 <_malloc_r+0x27a>
 8009dda:	2a54      	cmp	r2, #84	; 0x54
 8009ddc:	d803      	bhi.n	8009de6 <_malloc_r+0x2ba>
 8009dde:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009de2:	326e      	adds	r2, #110	; 0x6e
 8009de4:	e7df      	b.n	8009da6 <_malloc_r+0x27a>
 8009de6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009dea:	d803      	bhi.n	8009df4 <_malloc_r+0x2c8>
 8009dec:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009df0:	3277      	adds	r2, #119	; 0x77
 8009df2:	e7d8      	b.n	8009da6 <_malloc_r+0x27a>
 8009df4:	f240 5e54 	movw	lr, #1364	; 0x554
 8009df8:	4572      	cmp	r2, lr
 8009dfa:	bf9a      	itte	ls
 8009dfc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009e00:	327c      	addls	r2, #124	; 0x7c
 8009e02:	227e      	movhi	r2, #126	; 0x7e
 8009e04:	e7cf      	b.n	8009da6 <_malloc_r+0x27a>
 8009e06:	f8de e008 	ldr.w	lr, [lr, #8]
 8009e0a:	45f0      	cmp	r8, lr
 8009e0c:	d005      	beq.n	8009e1a <_malloc_r+0x2ee>
 8009e0e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009e12:	f022 0203 	bic.w	r2, r2, #3
 8009e16:	4562      	cmp	r2, ip
 8009e18:	d8f5      	bhi.n	8009e06 <_malloc_r+0x2da>
 8009e1a:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009e1e:	e7d1      	b.n	8009dc4 <_malloc_r+0x298>
 8009e20:	6860      	ldr	r0, [r4, #4]
 8009e22:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8009e26:	f020 0003 	bic.w	r0, r0, #3
 8009e2a:	eba0 0a05 	sub.w	sl, r0, r5
 8009e2e:	f1ba 0f0f 	cmp.w	sl, #15
 8009e32:	dd21      	ble.n	8009e78 <_malloc_r+0x34c>
 8009e34:	68a2      	ldr	r2, [r4, #8]
 8009e36:	1963      	adds	r3, r4, r5
 8009e38:	f045 0501 	orr.w	r5, r5, #1
 8009e3c:	6065      	str	r5, [r4, #4]
 8009e3e:	f8c2 e00c 	str.w	lr, [r2, #12]
 8009e42:	f8ce 2008 	str.w	r2, [lr, #8]
 8009e46:	f04a 0201 	orr.w	r2, sl, #1
 8009e4a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8009e4e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009e52:	605a      	str	r2, [r3, #4]
 8009e54:	f844 a000 	str.w	sl, [r4, r0]
 8009e58:	e699      	b.n	8009b8e <_malloc_r+0x62>
 8009e5a:	bf00      	nop
 8009e5c:	20000450 	.word	0x20000450
 8009e60:	20000458 	.word	0x20000458
 8009e64:	20017c60 	.word	0x20017c60
 8009e68:	20000858 	.word	0x20000858
 8009e6c:	20017c58 	.word	0x20017c58
 8009e70:	20017c5c 	.word	0x20017c5c
 8009e74:	20017c30 	.word	0x20017c30
 8009e78:	f1ba 0f00 	cmp.w	sl, #0
 8009e7c:	db11      	blt.n	8009ea2 <_malloc_r+0x376>
 8009e7e:	4420      	add	r0, r4
 8009e80:	6843      	ldr	r3, [r0, #4]
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	6043      	str	r3, [r0, #4]
 8009e88:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009e92:	f8ce 3008 	str.w	r3, [lr, #8]
 8009e96:	f000 f8b1 	bl	8009ffc <__malloc_unlock>
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	b003      	add	sp, #12
 8009e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea2:	4674      	mov	r4, lr
 8009ea4:	e70a      	b.n	8009cbc <_malloc_r+0x190>
 8009ea6:	f1ac 0008 	sub.w	r0, ip, #8
 8009eaa:	f8dc c000 	ldr.w	ip, [ip]
 8009eae:	4584      	cmp	ip, r0
 8009eb0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009eb4:	f43f af0c 	beq.w	8009cd0 <_malloc_r+0x1a4>
 8009eb8:	e711      	b.n	8009cde <_malloc_r+0x1b2>
 8009eba:	3304      	adds	r3, #4
 8009ebc:	0052      	lsls	r2, r2, #1
 8009ebe:	4210      	tst	r0, r2
 8009ec0:	d0fb      	beq.n	8009eba <_malloc_r+0x38e>
 8009ec2:	e6f5      	b.n	8009cb0 <_malloc_r+0x184>
 8009ec4:	4643      	mov	r3, r8
 8009ec6:	e7fa      	b.n	8009ebe <_malloc_r+0x392>
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	9200      	str	r2, [sp, #0]
 8009ecc:	3001      	adds	r0, #1
 8009ece:	bf1b      	ittet	ne
 8009ed0:	ebab 0101 	subne.w	r1, fp, r1
 8009ed4:	4471      	addne	r1, lr
 8009ed6:	f8c3 b000 	streq.w	fp, [r3]
 8009eda:	f8c9 1000 	strne.w	r1, [r9]
 8009ede:	f01b 0307 	ands.w	r3, fp, #7
 8009ee2:	bf1c      	itt	ne
 8009ee4:	f1c3 0308 	rsbne	r3, r3, #8
 8009ee8:	449b      	addne	fp, r3
 8009eea:	445c      	add	r4, fp
 8009eec:	4498      	add	r8, r3
 8009eee:	ea04 030c 	and.w	r3, r4, ip
 8009ef2:	eba8 0803 	sub.w	r8, r8, r3
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 fa2d 	bl	800a358 <_sbrk_r>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	bf04      	itt	eq
 8009f02:	4658      	moveq	r0, fp
 8009f04:	f04f 0800 	moveq.w	r8, #0
 8009f08:	f8d9 3000 	ldr.w	r3, [r9]
 8009f0c:	f8c7 b008 	str.w	fp, [r7, #8]
 8009f10:	eba0 000b 	sub.w	r0, r0, fp
 8009f14:	4440      	add	r0, r8
 8009f16:	4443      	add	r3, r8
 8009f18:	f040 0001 	orr.w	r0, r0, #1
 8009f1c:	45ba      	cmp	sl, r7
 8009f1e:	9a00      	ldr	r2, [sp, #0]
 8009f20:	f8c9 3000 	str.w	r3, [r9]
 8009f24:	f8cb 0004 	str.w	r0, [fp, #4]
 8009f28:	f43f af29 	beq.w	8009d7e <_malloc_r+0x252>
 8009f2c:	2a0f      	cmp	r2, #15
 8009f2e:	d810      	bhi.n	8009f52 <_malloc_r+0x426>
 8009f30:	2301      	movs	r3, #1
 8009f32:	f8cb 3004 	str.w	r3, [fp, #4]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	f022 0203 	bic.w	r2, r2, #3
 8009f3e:	42aa      	cmp	r2, r5
 8009f40:	eba2 0305 	sub.w	r3, r2, r5
 8009f44:	d301      	bcc.n	8009f4a <_malloc_r+0x41e>
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	dc1c      	bgt.n	8009f84 <_malloc_r+0x458>
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f000 f856 	bl	8009ffc <__malloc_unlock>
 8009f50:	e5f8      	b.n	8009b44 <_malloc_r+0x18>
 8009f52:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f56:	f1a2 040c 	sub.w	r4, r2, #12
 8009f5a:	f024 0407 	bic.w	r4, r4, #7
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	4323      	orrs	r3, r4
 8009f64:	f8ca 3004 	str.w	r3, [sl, #4]
 8009f68:	2205      	movs	r2, #5
 8009f6a:	eb0a 0304 	add.w	r3, sl, r4
 8009f6e:	2c0f      	cmp	r4, #15
 8009f70:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8009f74:	f67f af03 	bls.w	8009d7e <_malloc_r+0x252>
 8009f78:	f10a 0108 	add.w	r1, sl, #8
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f002 faf3 	bl	800c568 <_free_r>
 8009f82:	e6fc      	b.n	8009d7e <_malloc_r+0x252>
 8009f84:	68bc      	ldr	r4, [r7, #8]
 8009f86:	f045 0201 	orr.w	r2, r5, #1
 8009f8a:	4425      	add	r5, r4
 8009f8c:	f043 0301 	orr.w	r3, r3, #1
 8009f90:	6062      	str	r2, [r4, #4]
 8009f92:	60bd      	str	r5, [r7, #8]
 8009f94:	606b      	str	r3, [r5, #4]
 8009f96:	e5fa      	b.n	8009b8e <_malloc_r+0x62>

08009f98 <memcpy>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	1e43      	subs	r3, r0, #1
 8009f9c:	440a      	add	r2, r1
 8009f9e:	4291      	cmp	r1, r2
 8009fa0:	d100      	bne.n	8009fa4 <memcpy+0xc>
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fac:	e7f7      	b.n	8009f9e <memcpy+0x6>

08009fae <memmove>:
 8009fae:	4288      	cmp	r0, r1
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	eb01 0302 	add.w	r3, r1, r2
 8009fb6:	d807      	bhi.n	8009fc8 <memmove+0x1a>
 8009fb8:	1e42      	subs	r2, r0, #1
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	d00a      	beq.n	8009fd4 <memmove+0x26>
 8009fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009fc6:	e7f8      	b.n	8009fba <memmove+0xc>
 8009fc8:	4283      	cmp	r3, r0
 8009fca:	d9f5      	bls.n	8009fb8 <memmove+0xa>
 8009fcc:	1881      	adds	r1, r0, r2
 8009fce:	1ad2      	subs	r2, r2, r3
 8009fd0:	42d3      	cmn	r3, r2
 8009fd2:	d100      	bne.n	8009fd6 <memmove+0x28>
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fda:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009fde:	e7f7      	b.n	8009fd0 <memmove+0x22>

08009fe0 <memset>:
 8009fe0:	4402      	add	r2, r0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d100      	bne.n	8009fea <memset+0xa>
 8009fe8:	4770      	bx	lr
 8009fea:	f803 1b01 	strb.w	r1, [r3], #1
 8009fee:	e7f9      	b.n	8009fe4 <memset+0x4>

08009ff0 <__malloc_lock>:
 8009ff0:	4801      	ldr	r0, [pc, #4]	; (8009ff8 <__malloc_lock+0x8>)
 8009ff2:	f7ff bd89 	b.w	8009b08 <__retarget_lock_acquire_recursive>
 8009ff6:	bf00      	nop
 8009ff8:	20017c70 	.word	0x20017c70

08009ffc <__malloc_unlock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	; (800a004 <__malloc_unlock+0x8>)
 8009ffe:	f7ff bd84 	b.w	8009b0a <__retarget_lock_release_recursive>
 800a002:	bf00      	nop
 800a004:	20017c70 	.word	0x20017c70

0800a008 <_realloc_r>:
 800a008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	4682      	mov	sl, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	b929      	cbnz	r1, 800a01e <_realloc_r+0x16>
 800a012:	4611      	mov	r1, r2
 800a014:	b003      	add	sp, #12
 800a016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	f7ff bd87 	b.w	8009b2c <_malloc_r>
 800a01e:	9201      	str	r2, [sp, #4]
 800a020:	f7ff ffe6 	bl	8009ff0 <__malloc_lock>
 800a024:	9a01      	ldr	r2, [sp, #4]
 800a026:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a02a:	f102 080b 	add.w	r8, r2, #11
 800a02e:	f1b8 0f16 	cmp.w	r8, #22
 800a032:	f1a4 0908 	sub.w	r9, r4, #8
 800a036:	f025 0603 	bic.w	r6, r5, #3
 800a03a:	d90b      	bls.n	800a054 <_realloc_r+0x4c>
 800a03c:	f038 0807 	bics.w	r8, r8, #7
 800a040:	d50a      	bpl.n	800a058 <_realloc_r+0x50>
 800a042:	230c      	movs	r3, #12
 800a044:	f8ca 3000 	str.w	r3, [sl]
 800a048:	f04f 0b00 	mov.w	fp, #0
 800a04c:	4658      	mov	r0, fp
 800a04e:	b003      	add	sp, #12
 800a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a054:	f04f 0810 	mov.w	r8, #16
 800a058:	4590      	cmp	r8, r2
 800a05a:	d3f2      	bcc.n	800a042 <_realloc_r+0x3a>
 800a05c:	45b0      	cmp	r8, r6
 800a05e:	f340 8170 	ble.w	800a342 <_realloc_r+0x33a>
 800a062:	49a9      	ldr	r1, [pc, #676]	; (800a308 <_realloc_r+0x300>)
 800a064:	9101      	str	r1, [sp, #4]
 800a066:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800a06a:	eb09 0306 	add.w	r3, r9, r6
 800a06e:	459c      	cmp	ip, r3
 800a070:	6858      	ldr	r0, [r3, #4]
 800a072:	d005      	beq.n	800a080 <_realloc_r+0x78>
 800a074:	f020 0101 	bic.w	r1, r0, #1
 800a078:	4419      	add	r1, r3
 800a07a:	6849      	ldr	r1, [r1, #4]
 800a07c:	07cf      	lsls	r7, r1, #31
 800a07e:	d447      	bmi.n	800a110 <_realloc_r+0x108>
 800a080:	f020 0003 	bic.w	r0, r0, #3
 800a084:	459c      	cmp	ip, r3
 800a086:	eb06 0700 	add.w	r7, r6, r0
 800a08a:	d119      	bne.n	800a0c0 <_realloc_r+0xb8>
 800a08c:	f108 0110 	add.w	r1, r8, #16
 800a090:	42b9      	cmp	r1, r7
 800a092:	dc3f      	bgt.n	800a114 <_realloc_r+0x10c>
 800a094:	eb09 0308 	add.w	r3, r9, r8
 800a098:	9a01      	ldr	r2, [sp, #4]
 800a09a:	eba7 0708 	sub.w	r7, r7, r8
 800a09e:	f047 0701 	orr.w	r7, r7, #1
 800a0a2:	6093      	str	r3, [r2, #8]
 800a0a4:	605f      	str	r7, [r3, #4]
 800a0a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	ea43 0308 	orr.w	r3, r3, r8
 800a0b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0b6:	4650      	mov	r0, sl
 800a0b8:	f7ff ffa0 	bl	8009ffc <__malloc_unlock>
 800a0bc:	46a3      	mov	fp, r4
 800a0be:	e7c5      	b.n	800a04c <_realloc_r+0x44>
 800a0c0:	45b8      	cmp	r8, r7
 800a0c2:	dc27      	bgt.n	800a114 <_realloc_r+0x10c>
 800a0c4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a0c8:	60da      	str	r2, [r3, #12]
 800a0ca:	6093      	str	r3, [r2, #8]
 800a0cc:	eba7 0008 	sub.w	r0, r7, r8
 800a0d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a0d4:	280f      	cmp	r0, #15
 800a0d6:	f002 0201 	and.w	r2, r2, #1
 800a0da:	eb09 0307 	add.w	r3, r9, r7
 800a0de:	f240 8132 	bls.w	800a346 <_realloc_r+0x33e>
 800a0e2:	eb09 0108 	add.w	r1, r9, r8
 800a0e6:	ea48 0202 	orr.w	r2, r8, r2
 800a0ea:	f040 0001 	orr.w	r0, r0, #1
 800a0ee:	f8c9 2004 	str.w	r2, [r9, #4]
 800a0f2:	6048      	str	r0, [r1, #4]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	f042 0201 	orr.w	r2, r2, #1
 800a0fa:	605a      	str	r2, [r3, #4]
 800a0fc:	3108      	adds	r1, #8
 800a0fe:	4650      	mov	r0, sl
 800a100:	f002 fa32 	bl	800c568 <_free_r>
 800a104:	4650      	mov	r0, sl
 800a106:	f7ff ff79 	bl	8009ffc <__malloc_unlock>
 800a10a:	f109 0b08 	add.w	fp, r9, #8
 800a10e:	e79d      	b.n	800a04c <_realloc_r+0x44>
 800a110:	2000      	movs	r0, #0
 800a112:	4603      	mov	r3, r0
 800a114:	07e9      	lsls	r1, r5, #31
 800a116:	f100 80c6 	bmi.w	800a2a6 <_realloc_r+0x29e>
 800a11a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a11e:	eba9 0505 	sub.w	r5, r9, r5
 800a122:	6869      	ldr	r1, [r5, #4]
 800a124:	f021 0103 	bic.w	r1, r1, #3
 800a128:	eb01 0b06 	add.w	fp, r1, r6
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8086 	beq.w	800a23e <_realloc_r+0x236>
 800a132:	459c      	cmp	ip, r3
 800a134:	eb00 070b 	add.w	r7, r0, fp
 800a138:	d149      	bne.n	800a1ce <_realloc_r+0x1c6>
 800a13a:	f108 0310 	add.w	r3, r8, #16
 800a13e:	42bb      	cmp	r3, r7
 800a140:	dc7d      	bgt.n	800a23e <_realloc_r+0x236>
 800a142:	46ab      	mov	fp, r5
 800a144:	68eb      	ldr	r3, [r5, #12]
 800a146:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a14a:	60d3      	str	r3, [r2, #12]
 800a14c:	609a      	str	r2, [r3, #8]
 800a14e:	1f32      	subs	r2, r6, #4
 800a150:	2a24      	cmp	r2, #36	; 0x24
 800a152:	d837      	bhi.n	800a1c4 <_realloc_r+0x1bc>
 800a154:	2a13      	cmp	r2, #19
 800a156:	d933      	bls.n	800a1c0 <_realloc_r+0x1b8>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	60ab      	str	r3, [r5, #8]
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	60eb      	str	r3, [r5, #12]
 800a160:	2a1b      	cmp	r2, #27
 800a162:	d81b      	bhi.n	800a19c <_realloc_r+0x194>
 800a164:	3408      	adds	r4, #8
 800a166:	f105 0310 	add.w	r3, r5, #16
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	6862      	ldr	r2, [r4, #4]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	68a2      	ldr	r2, [r4, #8]
 800a174:	609a      	str	r2, [r3, #8]
 800a176:	eb05 0308 	add.w	r3, r5, r8
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	eba7 0708 	sub.w	r7, r7, r8
 800a180:	f047 0701 	orr.w	r7, r7, #1
 800a184:	6093      	str	r3, [r2, #8]
 800a186:	605f      	str	r7, [r3, #4]
 800a188:	686b      	ldr	r3, [r5, #4]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	ea43 0308 	orr.w	r3, r3, r8
 800a192:	606b      	str	r3, [r5, #4]
 800a194:	4650      	mov	r0, sl
 800a196:	f7ff ff31 	bl	8009ffc <__malloc_unlock>
 800a19a:	e757      	b.n	800a04c <_realloc_r+0x44>
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	612b      	str	r3, [r5, #16]
 800a1a0:	68e3      	ldr	r3, [r4, #12]
 800a1a2:	616b      	str	r3, [r5, #20]
 800a1a4:	2a24      	cmp	r2, #36	; 0x24
 800a1a6:	bf01      	itttt	eq
 800a1a8:	6923      	ldreq	r3, [r4, #16]
 800a1aa:	61ab      	streq	r3, [r5, #24]
 800a1ac:	6962      	ldreq	r2, [r4, #20]
 800a1ae:	61ea      	streq	r2, [r5, #28]
 800a1b0:	bf19      	ittee	ne
 800a1b2:	3410      	addne	r4, #16
 800a1b4:	f105 0318 	addne.w	r3, r5, #24
 800a1b8:	f105 0320 	addeq.w	r3, r5, #32
 800a1bc:	3418      	addeq	r4, #24
 800a1be:	e7d4      	b.n	800a16a <_realloc_r+0x162>
 800a1c0:	465b      	mov	r3, fp
 800a1c2:	e7d2      	b.n	800a16a <_realloc_r+0x162>
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f7ff fef1 	bl	8009fae <memmove>
 800a1cc:	e7d3      	b.n	800a176 <_realloc_r+0x16e>
 800a1ce:	45b8      	cmp	r8, r7
 800a1d0:	dc35      	bgt.n	800a23e <_realloc_r+0x236>
 800a1d2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	60da      	str	r2, [r3, #12]
 800a1da:	6093      	str	r3, [r2, #8]
 800a1dc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a1e0:	68eb      	ldr	r3, [r5, #12]
 800a1e2:	60d3      	str	r3, [r2, #12]
 800a1e4:	609a      	str	r2, [r3, #8]
 800a1e6:	1f32      	subs	r2, r6, #4
 800a1e8:	2a24      	cmp	r2, #36	; 0x24
 800a1ea:	d824      	bhi.n	800a236 <_realloc_r+0x22e>
 800a1ec:	2a13      	cmp	r2, #19
 800a1ee:	d908      	bls.n	800a202 <_realloc_r+0x1fa>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	60ab      	str	r3, [r5, #8]
 800a1f4:	6863      	ldr	r3, [r4, #4]
 800a1f6:	60eb      	str	r3, [r5, #12]
 800a1f8:	2a1b      	cmp	r2, #27
 800a1fa:	d80a      	bhi.n	800a212 <_realloc_r+0x20a>
 800a1fc:	3408      	adds	r4, #8
 800a1fe:	f105 0010 	add.w	r0, r5, #16
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	6863      	ldr	r3, [r4, #4]
 800a208:	6043      	str	r3, [r0, #4]
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	6083      	str	r3, [r0, #8]
 800a20e:	46a9      	mov	r9, r5
 800a210:	e75c      	b.n	800a0cc <_realloc_r+0xc4>
 800a212:	68a3      	ldr	r3, [r4, #8]
 800a214:	612b      	str	r3, [r5, #16]
 800a216:	68e3      	ldr	r3, [r4, #12]
 800a218:	616b      	str	r3, [r5, #20]
 800a21a:	2a24      	cmp	r2, #36	; 0x24
 800a21c:	bf01      	itttt	eq
 800a21e:	6923      	ldreq	r3, [r4, #16]
 800a220:	61ab      	streq	r3, [r5, #24]
 800a222:	6963      	ldreq	r3, [r4, #20]
 800a224:	61eb      	streq	r3, [r5, #28]
 800a226:	bf19      	ittee	ne
 800a228:	3410      	addne	r4, #16
 800a22a:	f105 0018 	addne.w	r0, r5, #24
 800a22e:	f105 0020 	addeq.w	r0, r5, #32
 800a232:	3418      	addeq	r4, #24
 800a234:	e7e5      	b.n	800a202 <_realloc_r+0x1fa>
 800a236:	4621      	mov	r1, r4
 800a238:	f7ff feb9 	bl	8009fae <memmove>
 800a23c:	e7e7      	b.n	800a20e <_realloc_r+0x206>
 800a23e:	45d8      	cmp	r8, fp
 800a240:	dc31      	bgt.n	800a2a6 <_realloc_r+0x29e>
 800a242:	4628      	mov	r0, r5
 800a244:	68eb      	ldr	r3, [r5, #12]
 800a246:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a24a:	60d3      	str	r3, [r2, #12]
 800a24c:	609a      	str	r2, [r3, #8]
 800a24e:	1f32      	subs	r2, r6, #4
 800a250:	2a24      	cmp	r2, #36	; 0x24
 800a252:	d824      	bhi.n	800a29e <_realloc_r+0x296>
 800a254:	2a13      	cmp	r2, #19
 800a256:	d908      	bls.n	800a26a <_realloc_r+0x262>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	60ab      	str	r3, [r5, #8]
 800a25c:	6863      	ldr	r3, [r4, #4]
 800a25e:	60eb      	str	r3, [r5, #12]
 800a260:	2a1b      	cmp	r2, #27
 800a262:	d80a      	bhi.n	800a27a <_realloc_r+0x272>
 800a264:	3408      	adds	r4, #8
 800a266:	f105 0010 	add.w	r0, r5, #16
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	6003      	str	r3, [r0, #0]
 800a26e:	6863      	ldr	r3, [r4, #4]
 800a270:	6043      	str	r3, [r0, #4]
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	6083      	str	r3, [r0, #8]
 800a276:	465f      	mov	r7, fp
 800a278:	e7c9      	b.n	800a20e <_realloc_r+0x206>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	612b      	str	r3, [r5, #16]
 800a27e:	68e3      	ldr	r3, [r4, #12]
 800a280:	616b      	str	r3, [r5, #20]
 800a282:	2a24      	cmp	r2, #36	; 0x24
 800a284:	bf01      	itttt	eq
 800a286:	6923      	ldreq	r3, [r4, #16]
 800a288:	61ab      	streq	r3, [r5, #24]
 800a28a:	6963      	ldreq	r3, [r4, #20]
 800a28c:	61eb      	streq	r3, [r5, #28]
 800a28e:	bf19      	ittee	ne
 800a290:	3410      	addne	r4, #16
 800a292:	f105 0018 	addne.w	r0, r5, #24
 800a296:	f105 0020 	addeq.w	r0, r5, #32
 800a29a:	3418      	addeq	r4, #24
 800a29c:	e7e5      	b.n	800a26a <_realloc_r+0x262>
 800a29e:	4621      	mov	r1, r4
 800a2a0:	f7ff fe85 	bl	8009fae <memmove>
 800a2a4:	e7e7      	b.n	800a276 <_realloc_r+0x26e>
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4650      	mov	r0, sl
 800a2aa:	f7ff fc3f 	bl	8009b2c <_malloc_r>
 800a2ae:	4683      	mov	fp, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f43f af6f 	beq.w	800a194 <_realloc_r+0x18c>
 800a2b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a2ba:	f023 0301 	bic.w	r3, r3, #1
 800a2be:	444b      	add	r3, r9
 800a2c0:	f1a0 0208 	sub.w	r2, r0, #8
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d105      	bne.n	800a2d4 <_realloc_r+0x2cc>
 800a2c8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a2cc:	f027 0703 	bic.w	r7, r7, #3
 800a2d0:	4437      	add	r7, r6
 800a2d2:	e6fb      	b.n	800a0cc <_realloc_r+0xc4>
 800a2d4:	1f32      	subs	r2, r6, #4
 800a2d6:	2a24      	cmp	r2, #36	; 0x24
 800a2d8:	d82f      	bhi.n	800a33a <_realloc_r+0x332>
 800a2da:	2a13      	cmp	r2, #19
 800a2dc:	d92a      	bls.n	800a334 <_realloc_r+0x32c>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	6003      	str	r3, [r0, #0]
 800a2e2:	6863      	ldr	r3, [r4, #4]
 800a2e4:	6043      	str	r3, [r0, #4]
 800a2e6:	2a1b      	cmp	r2, #27
 800a2e8:	d810      	bhi.n	800a30c <_realloc_r+0x304>
 800a2ea:	f104 0208 	add.w	r2, r4, #8
 800a2ee:	f100 0308 	add.w	r3, r0, #8
 800a2f2:	6811      	ldr	r1, [r2, #0]
 800a2f4:	6019      	str	r1, [r3, #0]
 800a2f6:	6851      	ldr	r1, [r2, #4]
 800a2f8:	6059      	str	r1, [r3, #4]
 800a2fa:	6892      	ldr	r2, [r2, #8]
 800a2fc:	609a      	str	r2, [r3, #8]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4650      	mov	r0, sl
 800a302:	f002 f931 	bl	800c568 <_free_r>
 800a306:	e745      	b.n	800a194 <_realloc_r+0x18c>
 800a308:	20000450 	.word	0x20000450
 800a30c:	68a3      	ldr	r3, [r4, #8]
 800a30e:	6083      	str	r3, [r0, #8]
 800a310:	68e3      	ldr	r3, [r4, #12]
 800a312:	60c3      	str	r3, [r0, #12]
 800a314:	2a24      	cmp	r2, #36	; 0x24
 800a316:	bf01      	itttt	eq
 800a318:	6923      	ldreq	r3, [r4, #16]
 800a31a:	6103      	streq	r3, [r0, #16]
 800a31c:	6961      	ldreq	r1, [r4, #20]
 800a31e:	6141      	streq	r1, [r0, #20]
 800a320:	bf19      	ittee	ne
 800a322:	f104 0210 	addne.w	r2, r4, #16
 800a326:	f100 0310 	addne.w	r3, r0, #16
 800a32a:	f104 0218 	addeq.w	r2, r4, #24
 800a32e:	f100 0318 	addeq.w	r3, r0, #24
 800a332:	e7de      	b.n	800a2f2 <_realloc_r+0x2ea>
 800a334:	4603      	mov	r3, r0
 800a336:	4622      	mov	r2, r4
 800a338:	e7db      	b.n	800a2f2 <_realloc_r+0x2ea>
 800a33a:	4621      	mov	r1, r4
 800a33c:	f7ff fe37 	bl	8009fae <memmove>
 800a340:	e7dd      	b.n	800a2fe <_realloc_r+0x2f6>
 800a342:	4637      	mov	r7, r6
 800a344:	e6c2      	b.n	800a0cc <_realloc_r+0xc4>
 800a346:	4317      	orrs	r7, r2
 800a348:	f8c9 7004 	str.w	r7, [r9, #4]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	f042 0201 	orr.w	r2, r2, #1
 800a352:	605a      	str	r2, [r3, #4]
 800a354:	e6d6      	b.n	800a104 <_realloc_r+0xfc>
 800a356:	bf00      	nop

0800a358 <_sbrk_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4c06      	ldr	r4, [pc, #24]	; (800a374 <_sbrk_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4605      	mov	r5, r0
 800a360:	4608      	mov	r0, r1
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	f002 fde0 	bl	800cf28 <_sbrk>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_sbrk_r+0x1a>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_sbrk_r+0x1a>
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	20017c78 	.word	0x20017c78

0800a378 <sprintf>:
 800a378:	b40e      	push	{r1, r2, r3}
 800a37a:	b500      	push	{lr}
 800a37c:	b09c      	sub	sp, #112	; 0x70
 800a37e:	ab1d      	add	r3, sp, #116	; 0x74
 800a380:	9002      	str	r0, [sp, #8]
 800a382:	9006      	str	r0, [sp, #24]
 800a384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a388:	4809      	ldr	r0, [pc, #36]	; (800a3b0 <sprintf+0x38>)
 800a38a:	9107      	str	r1, [sp, #28]
 800a38c:	9104      	str	r1, [sp, #16]
 800a38e:	4909      	ldr	r1, [pc, #36]	; (800a3b4 <sprintf+0x3c>)
 800a390:	f853 2b04 	ldr.w	r2, [r3], #4
 800a394:	9105      	str	r1, [sp, #20]
 800a396:	6800      	ldr	r0, [r0, #0]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	a902      	add	r1, sp, #8
 800a39c:	f000 f80c 	bl	800a3b8 <_svfprintf_r>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
 800a3a6:	b01c      	add	sp, #112	; 0x70
 800a3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3ac:	b003      	add	sp, #12
 800a3ae:	4770      	bx	lr
 800a3b0:	20000020 	.word	0x20000020
 800a3b4:	ffff0208 	.word	0xffff0208

0800a3b8 <_svfprintf_r>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	b0d3      	sub	sp, #332	; 0x14c
 800a3be:	4688      	mov	r8, r1
 800a3c0:	4693      	mov	fp, r2
 800a3c2:	461e      	mov	r6, r3
 800a3c4:	9003      	str	r0, [sp, #12]
 800a3c6:	f002 f98b 	bl	800c6e0 <_localeconv_r>
 800a3ca:	6803      	ldr	r3, [r0, #0]
 800a3cc:	9316      	str	r3, [sp, #88]	; 0x58
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f5 ff6e 	bl	80002b0 <strlen>
 800a3d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a3d8:	900d      	str	r0, [sp, #52]	; 0x34
 800a3da:	0618      	lsls	r0, r3, #24
 800a3dc:	d518      	bpl.n	800a410 <_svfprintf_r+0x58>
 800a3de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a3e2:	b9ab      	cbnz	r3, 800a410 <_svfprintf_r+0x58>
 800a3e4:	2140      	movs	r1, #64	; 0x40
 800a3e6:	9803      	ldr	r0, [sp, #12]
 800a3e8:	f7ff fba0 	bl	8009b2c <_malloc_r>
 800a3ec:	f8c8 0000 	str.w	r0, [r8]
 800a3f0:	f8c8 0010 	str.w	r0, [r8, #16]
 800a3f4:	b948      	cbnz	r0, 800a40a <_svfprintf_r+0x52>
 800a3f6:	9a03      	ldr	r2, [sp, #12]
 800a3f8:	230c      	movs	r3, #12
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a400:	930e      	str	r3, [sp, #56]	; 0x38
 800a402:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a404:	b053      	add	sp, #332	; 0x14c
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	2340      	movs	r3, #64	; 0x40
 800a40c:	f8c8 3014 	str.w	r3, [r8, #20]
 800a410:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 800a738 <_svfprintf_r+0x380>
 800a414:	2300      	movs	r3, #0
 800a416:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 800a41a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a41e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800a422:	ac29      	add	r4, sp, #164	; 0xa4
 800a424:	9426      	str	r4, [sp, #152]	; 0x98
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	9309      	str	r3, [sp, #36]	; 0x24
 800a42a:	9312      	str	r3, [sp, #72]	; 0x48
 800a42c:	9319      	str	r3, [sp, #100]	; 0x64
 800a42e:	930e      	str	r3, [sp, #56]	; 0x38
 800a430:	465d      	mov	r5, fp
 800a432:	462b      	mov	r3, r5
 800a434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a438:	b112      	cbz	r2, 800a440 <_svfprintf_r+0x88>
 800a43a:	2a25      	cmp	r2, #37	; 0x25
 800a43c:	f040 80e4 	bne.w	800a608 <_svfprintf_r+0x250>
 800a440:	ebb5 070b 	subs.w	r7, r5, fp
 800a444:	d00e      	beq.n	800a464 <_svfprintf_r+0xac>
 800a446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a448:	443b      	add	r3, r7
 800a44a:	9328      	str	r3, [sp, #160]	; 0xa0
 800a44c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a44e:	3301      	adds	r3, #1
 800a450:	2b07      	cmp	r3, #7
 800a452:	e9c4 b700 	strd	fp, r7, [r4]
 800a456:	9327      	str	r3, [sp, #156]	; 0x9c
 800a458:	f300 80d8 	bgt.w	800a60c <_svfprintf_r+0x254>
 800a45c:	3408      	adds	r4, #8
 800a45e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a460:	443b      	add	r3, r7
 800a462:	930e      	str	r3, [sp, #56]	; 0x38
 800a464:	782b      	ldrb	r3, [r5, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f001 81b4 	beq.w	800b7d4 <_svfprintf_r+0x141c>
 800a46c:	1c6b      	adds	r3, r5, #1
 800a46e:	930c      	str	r3, [sp, #48]	; 0x30
 800a470:	2300      	movs	r3, #0
 800a472:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800a476:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a47a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a47c:	469a      	mov	sl, r3
 800a47e:	270a      	movs	r7, #10
 800a480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	9306      	str	r3, [sp, #24]
 800a486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a488:	3301      	adds	r3, #1
 800a48a:	930c      	str	r3, [sp, #48]	; 0x30
 800a48c:	9b06      	ldr	r3, [sp, #24]
 800a48e:	3b20      	subs	r3, #32
 800a490:	2b5a      	cmp	r3, #90	; 0x5a
 800a492:	f200 8624 	bhi.w	800b0de <_svfprintf_r+0xd26>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <_svfprintf_r+0xe4>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a69f 	.word	0x0800a69f
 800a4a0:	0800b0df 	.word	0x0800b0df
 800a4a4:	0800b0df 	.word	0x0800b0df
 800a4a8:	0800a6b1 	.word	0x0800a6b1
 800a4ac:	0800b0df 	.word	0x0800b0df
 800a4b0:	0800b0df 	.word	0x0800b0df
 800a4b4:	0800b0df 	.word	0x0800b0df
 800a4b8:	0800a665 	.word	0x0800a665
 800a4bc:	0800b0df 	.word	0x0800b0df
 800a4c0:	0800b0df 	.word	0x0800b0df
 800a4c4:	0800a6b7 	.word	0x0800a6b7
 800a4c8:	0800a6cf 	.word	0x0800a6cf
 800a4cc:	0800b0df 	.word	0x0800b0df
 800a4d0:	0800a6c9 	.word	0x0800a6c9
 800a4d4:	0800a6d3 	.word	0x0800a6d3
 800a4d8:	0800b0df 	.word	0x0800b0df
 800a4dc:	0800a707 	.word	0x0800a707
 800a4e0:	0800a70d 	.word	0x0800a70d
 800a4e4:	0800a70d 	.word	0x0800a70d
 800a4e8:	0800a70d 	.word	0x0800a70d
 800a4ec:	0800a70d 	.word	0x0800a70d
 800a4f0:	0800a70d 	.word	0x0800a70d
 800a4f4:	0800a70d 	.word	0x0800a70d
 800a4f8:	0800a70d 	.word	0x0800a70d
 800a4fc:	0800a70d 	.word	0x0800a70d
 800a500:	0800a70d 	.word	0x0800a70d
 800a504:	0800b0df 	.word	0x0800b0df
 800a508:	0800b0df 	.word	0x0800b0df
 800a50c:	0800b0df 	.word	0x0800b0df
 800a510:	0800b0df 	.word	0x0800b0df
 800a514:	0800b0df 	.word	0x0800b0df
 800a518:	0800b0df 	.word	0x0800b0df
 800a51c:	0800b0df 	.word	0x0800b0df
 800a520:	0800a80f 	.word	0x0800a80f
 800a524:	0800b0df 	.word	0x0800b0df
 800a528:	0800a779 	.word	0x0800a779
 800a52c:	0800a79b 	.word	0x0800a79b
 800a530:	0800a80f 	.word	0x0800a80f
 800a534:	0800a80f 	.word	0x0800a80f
 800a538:	0800a80f 	.word	0x0800a80f
 800a53c:	0800b0df 	.word	0x0800b0df
 800a540:	0800b0df 	.word	0x0800b0df
 800a544:	0800b0df 	.word	0x0800b0df
 800a548:	0800b0df 	.word	0x0800b0df
 800a54c:	0800a72d 	.word	0x0800a72d
 800a550:	0800b0df 	.word	0x0800b0df
 800a554:	0800b0df 	.word	0x0800b0df
 800a558:	0800ace1 	.word	0x0800ace1
 800a55c:	0800b0df 	.word	0x0800b0df
 800a560:	0800b0df 	.word	0x0800b0df
 800a564:	0800b0df 	.word	0x0800b0df
 800a568:	0800ad6d 	.word	0x0800ad6d
 800a56c:	0800b0df 	.word	0x0800b0df
 800a570:	0800af4f 	.word	0x0800af4f
 800a574:	0800b0df 	.word	0x0800b0df
 800a578:	0800b0df 	.word	0x0800b0df
 800a57c:	0800a625 	.word	0x0800a625
 800a580:	0800b0df 	.word	0x0800b0df
 800a584:	0800b0df 	.word	0x0800b0df
 800a588:	0800b0df 	.word	0x0800b0df
 800a58c:	0800b0df 	.word	0x0800b0df
 800a590:	0800b0df 	.word	0x0800b0df
 800a594:	0800b0df 	.word	0x0800b0df
 800a598:	0800b0df 	.word	0x0800b0df
 800a59c:	0800b0df 	.word	0x0800b0df
 800a5a0:	0800a80f 	.word	0x0800a80f
 800a5a4:	0800b0df 	.word	0x0800b0df
 800a5a8:	0800a779 	.word	0x0800a779
 800a5ac:	0800a79f 	.word	0x0800a79f
 800a5b0:	0800a80f 	.word	0x0800a80f
 800a5b4:	0800a80f 	.word	0x0800a80f
 800a5b8:	0800a80f 	.word	0x0800a80f
 800a5bc:	0800a745 	.word	0x0800a745
 800a5c0:	0800a79f 	.word	0x0800a79f
 800a5c4:	0800a76d 	.word	0x0800a76d
 800a5c8:	0800b0df 	.word	0x0800b0df
 800a5cc:	0800a75f 	.word	0x0800a75f
 800a5d0:	0800b0df 	.word	0x0800b0df
 800a5d4:	0800ac9b 	.word	0x0800ac9b
 800a5d8:	0800ace5 	.word	0x0800ace5
 800a5dc:	0800ad4d 	.word	0x0800ad4d
 800a5e0:	0800a76d 	.word	0x0800a76d
 800a5e4:	0800b0df 	.word	0x0800b0df
 800a5e8:	0800ad6d 	.word	0x0800ad6d
 800a5ec:	0800a481 	.word	0x0800a481
 800a5f0:	0800af53 	.word	0x0800af53
 800a5f4:	0800b0df 	.word	0x0800b0df
 800a5f8:	0800b0df 	.word	0x0800b0df
 800a5fc:	0800af91 	.word	0x0800af91
 800a600:	0800b0df 	.word	0x0800b0df
 800a604:	0800a481 	.word	0x0800a481
 800a608:	461d      	mov	r5, r3
 800a60a:	e712      	b.n	800a432 <_svfprintf_r+0x7a>
 800a60c:	aa26      	add	r2, sp, #152	; 0x98
 800a60e:	4641      	mov	r1, r8
 800a610:	9803      	ldr	r0, [sp, #12]
 800a612:	f002 fb6e 	bl	800ccf2 <__ssprint_r>
 800a616:	2800      	cmp	r0, #0
 800a618:	f040 8166 	bne.w	800a8e8 <_svfprintf_r+0x530>
 800a61c:	ac29      	add	r4, sp, #164	; 0xa4
 800a61e:	e71e      	b.n	800a45e <_svfprintf_r+0xa6>
 800a620:	461e      	mov	r6, r3
 800a622:	e72d      	b.n	800a480 <_svfprintf_r+0xc8>
 800a624:	4b46      	ldr	r3, [pc, #280]	; (800a740 <_svfprintf_r+0x388>)
 800a626:	9318      	str	r3, [sp, #96]	; 0x60
 800a628:	f01a 0f20 	tst.w	sl, #32
 800a62c:	f000 84b3 	beq.w	800af96 <_svfprintf_r+0xbde>
 800a630:	3607      	adds	r6, #7
 800a632:	f026 0607 	bic.w	r6, r6, #7
 800a636:	f106 0308 	add.w	r3, r6, #8
 800a63a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800a63e:	9308      	str	r3, [sp, #32]
 800a640:	f01a 0f01 	tst.w	sl, #1
 800a644:	d00a      	beq.n	800a65c <_svfprintf_r+0x2a4>
 800a646:	ea56 0307 	orrs.w	r3, r6, r7
 800a64a:	d007      	beq.n	800a65c <_svfprintf_r+0x2a4>
 800a64c:	2330      	movs	r3, #48	; 0x30
 800a64e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800a652:	9b06      	ldr	r3, [sp, #24]
 800a654:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800a658:	f04a 0a02 	orr.w	sl, sl, #2
 800a65c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800a660:	2302      	movs	r3, #2
 800a662:	e34d      	b.n	800ad00 <_svfprintf_r+0x948>
 800a664:	9803      	ldr	r0, [sp, #12]
 800a666:	f002 f83b 	bl	800c6e0 <_localeconv_r>
 800a66a:	6843      	ldr	r3, [r0, #4]
 800a66c:	9319      	str	r3, [sp, #100]	; 0x64
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f5 fe1e 	bl	80002b0 <strlen>
 800a674:	9012      	str	r0, [sp, #72]	; 0x48
 800a676:	9803      	ldr	r0, [sp, #12]
 800a678:	f002 f832 	bl	800c6e0 <_localeconv_r>
 800a67c:	6883      	ldr	r3, [r0, #8]
 800a67e:	9309      	str	r3, [sp, #36]	; 0x24
 800a680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a682:	2b00      	cmp	r3, #0
 800a684:	f43f aefc 	beq.w	800a480 <_svfprintf_r+0xc8>
 800a688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f43f aef8 	beq.w	800a480 <_svfprintf_r+0xc8>
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f43f aef4 	beq.w	800a480 <_svfprintf_r+0xc8>
 800a698:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800a69c:	e6f0      	b.n	800a480 <_svfprintf_r+0xc8>
 800a69e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f47f aeec 	bne.w	800a480 <_svfprintf_r+0xc8>
 800a6a8:	2320      	movs	r3, #32
 800a6aa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800a6ae:	e6e7      	b.n	800a480 <_svfprintf_r+0xc8>
 800a6b0:	f04a 0a01 	orr.w	sl, sl, #1
 800a6b4:	e6e4      	b.n	800a480 <_svfprintf_r+0xc8>
 800a6b6:	6832      	ldr	r2, [r6, #0]
 800a6b8:	920f      	str	r2, [sp, #60]	; 0x3c
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	f106 0304 	add.w	r3, r6, #4
 800a6c0:	daae      	bge.n	800a620 <_svfprintf_r+0x268>
 800a6c2:	4252      	negs	r2, r2
 800a6c4:	920f      	str	r2, [sp, #60]	; 0x3c
 800a6c6:	461e      	mov	r6, r3
 800a6c8:	f04a 0a04 	orr.w	sl, sl, #4
 800a6cc:	e6d8      	b.n	800a480 <_svfprintf_r+0xc8>
 800a6ce:	232b      	movs	r3, #43	; 0x2b
 800a6d0:	e7eb      	b.n	800a6aa <_svfprintf_r+0x2f2>
 800a6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d6:	7812      	ldrb	r2, [r2, #0]
 800a6d8:	9206      	str	r2, [sp, #24]
 800a6da:	2a2a      	cmp	r2, #42	; 0x2a
 800a6dc:	f103 0301 	add.w	r3, r3, #1
 800a6e0:	d10f      	bne.n	800a702 <_svfprintf_r+0x34a>
 800a6e2:	6835      	ldr	r5, [r6, #0]
 800a6e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a6e6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800a6ea:	3604      	adds	r6, #4
 800a6ec:	e6c8      	b.n	800a480 <_svfprintf_r+0xc8>
 800a6ee:	fb07 2505 	mla	r5, r7, r5, r2
 800a6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f6:	9206      	str	r2, [sp, #24]
 800a6f8:	9a06      	ldr	r2, [sp, #24]
 800a6fa:	3a30      	subs	r2, #48	; 0x30
 800a6fc:	2a09      	cmp	r2, #9
 800a6fe:	d9f6      	bls.n	800a6ee <_svfprintf_r+0x336>
 800a700:	e6c3      	b.n	800a48a <_svfprintf_r+0xd2>
 800a702:	2500      	movs	r5, #0
 800a704:	e7f8      	b.n	800a6f8 <_svfprintf_r+0x340>
 800a706:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a70a:	e6b9      	b.n	800a480 <_svfprintf_r+0xc8>
 800a70c:	2200      	movs	r2, #0
 800a70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a710:	920f      	str	r2, [sp, #60]	; 0x3c
 800a712:	9a06      	ldr	r2, [sp, #24]
 800a714:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a716:	3a30      	subs	r2, #48	; 0x30
 800a718:	fb07 2201 	mla	r2, r7, r1, r2
 800a71c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a71e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a722:	9206      	str	r2, [sp, #24]
 800a724:	3a30      	subs	r2, #48	; 0x30
 800a726:	2a09      	cmp	r2, #9
 800a728:	d9f3      	bls.n	800a712 <_svfprintf_r+0x35a>
 800a72a:	e6ae      	b.n	800a48a <_svfprintf_r+0xd2>
 800a72c:	f04a 0a08 	orr.w	sl, sl, #8
 800a730:	e6a6      	b.n	800a480 <_svfprintf_r+0xc8>
 800a732:	bf00      	nop
 800a734:	f3af 8000 	nop.w
	...
 800a740:	08088989 	.word	0x08088989
 800a744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b68      	cmp	r3, #104	; 0x68
 800a74a:	bf01      	itttt	eq
 800a74c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800a74e:	3301      	addeq	r3, #1
 800a750:	930c      	streq	r3, [sp, #48]	; 0x30
 800a752:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800a756:	bf18      	it	ne
 800a758:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800a75c:	e690      	b.n	800a480 <_svfprintf_r+0xc8>
 800a75e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b6c      	cmp	r3, #108	; 0x6c
 800a764:	d105      	bne.n	800a772 <_svfprintf_r+0x3ba>
 800a766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a768:	3301      	adds	r3, #1
 800a76a:	930c      	str	r3, [sp, #48]	; 0x30
 800a76c:	f04a 0a20 	orr.w	sl, sl, #32
 800a770:	e686      	b.n	800a480 <_svfprintf_r+0xc8>
 800a772:	f04a 0a10 	orr.w	sl, sl, #16
 800a776:	e683      	b.n	800a480 <_svfprintf_r+0xc8>
 800a778:	1d33      	adds	r3, r6, #4
 800a77a:	9308      	str	r3, [sp, #32]
 800a77c:	2000      	movs	r0, #0
 800a77e:	6833      	ldr	r3, [r6, #0]
 800a780:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800a784:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800a788:	4681      	mov	r9, r0
 800a78a:	2501      	movs	r5, #1
 800a78c:	9010      	str	r0, [sp, #64]	; 0x40
 800a78e:	4607      	mov	r7, r0
 800a790:	9007      	str	r0, [sp, #28]
 800a792:	4606      	mov	r6, r0
 800a794:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800a798:	e301      	b.n	800ad9e <_svfprintf_r+0x9e6>
 800a79a:	f04a 0a10 	orr.w	sl, sl, #16
 800a79e:	f01a 0f20 	tst.w	sl, #32
 800a7a2:	d021      	beq.n	800a7e8 <_svfprintf_r+0x430>
 800a7a4:	3607      	adds	r6, #7
 800a7a6:	f026 0607 	bic.w	r6, r6, #7
 800a7aa:	f106 0308 	add.w	r3, r6, #8
 800a7ae:	e9d6 6700 	ldrd	r6, r7, [r6]
 800a7b2:	9308      	str	r3, [sp, #32]
 800a7b4:	2e00      	cmp	r6, #0
 800a7b6:	f177 0300 	sbcs.w	r3, r7, #0
 800a7ba:	da06      	bge.n	800a7ca <_svfprintf_r+0x412>
 800a7bc:	4276      	negs	r6, r6
 800a7be:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a7c2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a7c6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800a7ca:	1c6b      	adds	r3, r5, #1
 800a7cc:	f040 83f6 	bne.w	800afbc <_svfprintf_r+0xc04>
 800a7d0:	2f00      	cmp	r7, #0
 800a7d2:	bf08      	it	eq
 800a7d4:	2e0a      	cmpeq	r6, #10
 800a7d6:	f080 8427 	bcs.w	800b028 <_svfprintf_r+0xc70>
 800a7da:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800a7de:	3630      	adds	r6, #48	; 0x30
 800a7e0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800a7e4:	f000 bc0d 	b.w	800b002 <_svfprintf_r+0xc4a>
 800a7e8:	1d33      	adds	r3, r6, #4
 800a7ea:	f01a 0f10 	tst.w	sl, #16
 800a7ee:	9308      	str	r3, [sp, #32]
 800a7f0:	d002      	beq.n	800a7f8 <_svfprintf_r+0x440>
 800a7f2:	6836      	ldr	r6, [r6, #0]
 800a7f4:	17f7      	asrs	r7, r6, #31
 800a7f6:	e7dd      	b.n	800a7b4 <_svfprintf_r+0x3fc>
 800a7f8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800a7fc:	6836      	ldr	r6, [r6, #0]
 800a7fe:	d001      	beq.n	800a804 <_svfprintf_r+0x44c>
 800a800:	b236      	sxth	r6, r6
 800a802:	e7f7      	b.n	800a7f4 <_svfprintf_r+0x43c>
 800a804:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800a808:	bf18      	it	ne
 800a80a:	b276      	sxtbne	r6, r6
 800a80c:	e7f2      	b.n	800a7f4 <_svfprintf_r+0x43c>
 800a80e:	3607      	adds	r6, #7
 800a810:	f026 0607 	bic.w	r6, r6, #7
 800a814:	ed96 7b00 	vldr	d7, [r6]
 800a818:	f106 0308 	add.w	r3, r6, #8
 800a81c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a824:	931a      	str	r3, [sp, #104]	; 0x68
 800a826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a82c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a82e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a832:	4bb2      	ldr	r3, [pc, #712]	; (800aafc <_svfprintf_r+0x744>)
 800a834:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a838:	f7f6 f998 	bl	8000b6c <__aeabi_dcmpun>
 800a83c:	bb00      	cbnz	r0, 800a880 <_svfprintf_r+0x4c8>
 800a83e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a842:	4bae      	ldr	r3, [pc, #696]	; (800aafc <_svfprintf_r+0x744>)
 800a844:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a848:	f7f6 f972 	bl	8000b30 <__aeabi_dcmple>
 800a84c:	b9c0      	cbnz	r0, 800a880 <_svfprintf_r+0x4c8>
 800a84e:	2200      	movs	r2, #0
 800a850:	2300      	movs	r3, #0
 800a852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a856:	f7f6 f961 	bl	8000b1c <__aeabi_dcmplt>
 800a85a:	b110      	cbz	r0, 800a862 <_svfprintf_r+0x4aa>
 800a85c:	232d      	movs	r3, #45	; 0x2d
 800a85e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800a862:	4aa7      	ldr	r2, [pc, #668]	; (800ab00 <_svfprintf_r+0x748>)
 800a864:	4ba7      	ldr	r3, [pc, #668]	; (800ab04 <_svfprintf_r+0x74c>)
 800a866:	9906      	ldr	r1, [sp, #24]
 800a868:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800a86c:	2947      	cmp	r1, #71	; 0x47
 800a86e:	bfcc      	ite	gt
 800a870:	4693      	movgt	fp, r2
 800a872:	469b      	movle	fp, r3
 800a874:	f04f 0900 	mov.w	r9, #0
 800a878:	2503      	movs	r5, #3
 800a87a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800a87e:	e3c6      	b.n	800b00e <_svfprintf_r+0xc56>
 800a880:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a884:	4610      	mov	r0, r2
 800a886:	4619      	mov	r1, r3
 800a888:	f7f6 f970 	bl	8000b6c <__aeabi_dcmpun>
 800a88c:	4681      	mov	r9, r0
 800a88e:	b140      	cbz	r0, 800a8a2 <_svfprintf_r+0x4ea>
 800a890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a892:	4a9d      	ldr	r2, [pc, #628]	; (800ab08 <_svfprintf_r+0x750>)
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfbc      	itt	lt
 800a898:	232d      	movlt	r3, #45	; 0x2d
 800a89a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800a89e:	4b9b      	ldr	r3, [pc, #620]	; (800ab0c <_svfprintf_r+0x754>)
 800a8a0:	e7e1      	b.n	800a866 <_svfprintf_r+0x4ae>
 800a8a2:	9b06      	ldr	r3, [sp, #24]
 800a8a4:	f023 0320 	bic.w	r3, r3, #32
 800a8a8:	2b41      	cmp	r3, #65	; 0x41
 800a8aa:	9307      	str	r3, [sp, #28]
 800a8ac:	d125      	bne.n	800a8fa <_svfprintf_r+0x542>
 800a8ae:	2330      	movs	r3, #48	; 0x30
 800a8b0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800a8b4:	9b06      	ldr	r3, [sp, #24]
 800a8b6:	2b61      	cmp	r3, #97	; 0x61
 800a8b8:	bf14      	ite	ne
 800a8ba:	2358      	movne	r3, #88	; 0x58
 800a8bc:	2378      	moveq	r3, #120	; 0x78
 800a8be:	2d63      	cmp	r5, #99	; 0x63
 800a8c0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800a8c4:	f04a 0a02 	orr.w	sl, sl, #2
 800a8c8:	f340 8108 	ble.w	800aadc <_svfprintf_r+0x724>
 800a8cc:	1c69      	adds	r1, r5, #1
 800a8ce:	9803      	ldr	r0, [sp, #12]
 800a8d0:	f7ff f92c 	bl	8009b2c <_malloc_r>
 800a8d4:	4683      	mov	fp, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f040 8103 	bne.w	800aae2 <_svfprintf_r+0x72a>
 800a8dc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e4:	f8a8 300c 	strh.w	r3, [r8, #12]
 800a8e8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800a8ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a8f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8f2:	bf18      	it	ne
 800a8f4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800a8f8:	e582      	b.n	800a400 <_svfprintf_r+0x48>
 800a8fa:	1c69      	adds	r1, r5, #1
 800a8fc:	f000 80f3 	beq.w	800aae6 <_svfprintf_r+0x72e>
 800a900:	9b07      	ldr	r3, [sp, #28]
 800a902:	2b47      	cmp	r3, #71	; 0x47
 800a904:	d102      	bne.n	800a90c <_svfprintf_r+0x554>
 800a906:	2d00      	cmp	r5, #0
 800a908:	f000 80ef 	beq.w	800aaea <_svfprintf_r+0x732>
 800a90c:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800a910:	9310      	str	r3, [sp, #64]	; 0x40
 800a912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a914:	2b00      	cmp	r3, #0
 800a916:	f280 80eb 	bge.w	800aaf0 <_svfprintf_r+0x738>
 800a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91c:	9314      	str	r3, [sp, #80]	; 0x50
 800a91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a920:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a924:	9315      	str	r3, [sp, #84]	; 0x54
 800a926:	232d      	movs	r3, #45	; 0x2d
 800a928:	9313      	str	r3, [sp, #76]	; 0x4c
 800a92a:	9b07      	ldr	r3, [sp, #28]
 800a92c:	2b41      	cmp	r3, #65	; 0x41
 800a92e:	f040 8105 	bne.w	800ab3c <_svfprintf_r+0x784>
 800a932:	a820      	add	r0, sp, #128	; 0x80
 800a934:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800a938:	f002 f990 	bl	800cc5c <frexp>
 800a93c:	2200      	movs	r2, #0
 800a93e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a942:	ec51 0b10 	vmov	r0, r1, d0
 800a946:	f7f5 fe77 	bl	8000638 <__aeabi_dmul>
 800a94a:	2200      	movs	r2, #0
 800a94c:	2300      	movs	r3, #0
 800a94e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a952:	f7f6 f8d9 	bl	8000b08 <__aeabi_dcmpeq>
 800a956:	b108      	cbz	r0, 800a95c <_svfprintf_r+0x5a4>
 800a958:	2301      	movs	r3, #1
 800a95a:	9320      	str	r3, [sp, #128]	; 0x80
 800a95c:	4f6c      	ldr	r7, [pc, #432]	; (800ab10 <_svfprintf_r+0x758>)
 800a95e:	4b6d      	ldr	r3, [pc, #436]	; (800ab14 <_svfprintf_r+0x75c>)
 800a960:	9a06      	ldr	r2, [sp, #24]
 800a962:	2a61      	cmp	r2, #97	; 0x61
 800a964:	bf08      	it	eq
 800a966:	461f      	moveq	r7, r3
 800a968:	9711      	str	r7, [sp, #68]	; 0x44
 800a96a:	465e      	mov	r6, fp
 800a96c:	1e6f      	subs	r7, r5, #1
 800a96e:	2200      	movs	r2, #0
 800a970:	4b69      	ldr	r3, [pc, #420]	; (800ab18 <_svfprintf_r+0x760>)
 800a972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a976:	f7f5 fe5f 	bl	8000638 <__aeabi_dmul>
 800a97a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a97e:	f7f6 f90b 	bl	8000b98 <__aeabi_d2iz>
 800a982:	901c      	str	r0, [sp, #112]	; 0x70
 800a984:	f7f5 fdee 	bl	8000564 <__aeabi_i2d>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a990:	f7f5 fc9a 	bl	80002c8 <__aeabi_dsub>
 800a994:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a998:	971d      	str	r7, [sp, #116]	; 0x74
 800a99a:	5c9b      	ldrb	r3, [r3, r2]
 800a99c:	f806 3b01 	strb.w	r3, [r6], #1
 800a9a0:	1c7a      	adds	r2, r7, #1
 800a9a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9a6:	d006      	beq.n	800a9b6 <_svfprintf_r+0x5fe>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	3f01      	subs	r7, #1
 800a9ae:	f7f6 f8ab 	bl	8000b08 <__aeabi_dcmpeq>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d0db      	beq.n	800a96e <_svfprintf_r+0x5b6>
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4b58      	ldr	r3, [pc, #352]	; (800ab1c <_svfprintf_r+0x764>)
 800a9ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9be:	f7f6 f8cb 	bl	8000b58 <__aeabi_dcmpgt>
 800a9c2:	b960      	cbnz	r0, 800a9de <_svfprintf_r+0x626>
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4b55      	ldr	r3, [pc, #340]	; (800ab1c <_svfprintf_r+0x764>)
 800a9c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9cc:	f7f6 f89c 	bl	8000b08 <__aeabi_dcmpeq>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	f000 80ae 	beq.w	800ab32 <_svfprintf_r+0x77a>
 800a9d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a9d8:	07db      	lsls	r3, r3, #31
 800a9da:	f140 80aa 	bpl.w	800ab32 <_svfprintf_r+0x77a>
 800a9de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e0:	9624      	str	r6, [sp, #144]	; 0x90
 800a9e2:	7bd9      	ldrb	r1, [r3, #15]
 800a9e4:	2030      	movs	r0, #48	; 0x30
 800a9e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a9e8:	1e53      	subs	r3, r2, #1
 800a9ea:	9324      	str	r3, [sp, #144]	; 0x90
 800a9ec:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	f000 8095 	beq.w	800ab20 <_svfprintf_r+0x768>
 800a9f6:	2b39      	cmp	r3, #57	; 0x39
 800a9f8:	bf0b      	itete	eq
 800a9fa:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 800a9fc:	3301      	addne	r3, #1
 800a9fe:	7a9b      	ldrbeq	r3, [r3, #10]
 800aa00:	b2db      	uxtbne	r3, r3
 800aa02:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa06:	4633      	mov	r3, r6
 800aa08:	eba3 030b 	sub.w	r3, r3, fp
 800aa0c:	9304      	str	r3, [sp, #16]
 800aa0e:	9b07      	ldr	r3, [sp, #28]
 800aa10:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800aa12:	2b47      	cmp	r3, #71	; 0x47
 800aa14:	f040 80d7 	bne.w	800abc6 <_svfprintf_r+0x80e>
 800aa18:	1cf7      	adds	r7, r6, #3
 800aa1a:	db02      	blt.n	800aa22 <_svfprintf_r+0x66a>
 800aa1c:	42b5      	cmp	r5, r6
 800aa1e:	f280 80fd 	bge.w	800ac1c <_svfprintf_r+0x864>
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	3b02      	subs	r3, #2
 800aa26:	9306      	str	r3, [sp, #24]
 800aa28:	9906      	ldr	r1, [sp, #24]
 800aa2a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800aa2e:	f021 0120 	bic.w	r1, r1, #32
 800aa32:	2941      	cmp	r1, #65	; 0x41
 800aa34:	bf08      	it	eq
 800aa36:	320f      	addeq	r2, #15
 800aa38:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 800aa3c:	bf06      	itte	eq
 800aa3e:	b2d2      	uxtbeq	r2, r2
 800aa40:	2101      	moveq	r1, #1
 800aa42:	2100      	movne	r1, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	9320      	str	r3, [sp, #128]	; 0x80
 800aa48:	bfb8      	it	lt
 800aa4a:	f1c6 0301 	rsblt	r3, r6, #1
 800aa4e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800aa52:	bfb4      	ite	lt
 800aa54:	222d      	movlt	r2, #45	; 0x2d
 800aa56:	222b      	movge	r2, #43	; 0x2b
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800aa5e:	f340 80c9 	ble.w	800abf4 <_svfprintf_r+0x83c>
 800aa62:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800aa66:	250a      	movs	r5, #10
 800aa68:	fb93 f0f5 	sdiv	r0, r3, r5
 800aa6c:	fb05 3310 	mls	r3, r5, r0, r3
 800aa70:	3330      	adds	r3, #48	; 0x30
 800aa72:	2809      	cmp	r0, #9
 800aa74:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa78:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	f300 80b2 	bgt.w	800abe6 <_svfprintf_r+0x82e>
 800aa82:	3330      	adds	r3, #48	; 0x30
 800aa84:	f801 3c01 	strb.w	r3, [r1, #-1]
 800aa88:	3a02      	subs	r2, #2
 800aa8a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800aa8e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800aa92:	4282      	cmp	r2, r0
 800aa94:	4619      	mov	r1, r3
 800aa96:	f0c0 80a8 	bcc.w	800abea <_svfprintf_r+0x832>
 800aa9a:	9a04      	ldr	r2, [sp, #16]
 800aa9c:	ab22      	add	r3, sp, #136	; 0x88
 800aa9e:	1acb      	subs	r3, r1, r3
 800aaa0:	2a01      	cmp	r2, #1
 800aaa2:	9317      	str	r3, [sp, #92]	; 0x5c
 800aaa4:	eb03 0502 	add.w	r5, r3, r2
 800aaa8:	dc02      	bgt.n	800aab0 <_svfprintf_r+0x6f8>
 800aaaa:	f01a 0f01 	tst.w	sl, #1
 800aaae:	d001      	beq.n	800aab4 <_svfprintf_r+0x6fc>
 800aab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab2:	441d      	add	r5, r3
 800aab4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800aab8:	2700      	movs	r7, #0
 800aaba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aabe:	9310      	str	r3, [sp, #64]	; 0x40
 800aac0:	9707      	str	r7, [sp, #28]
 800aac2:	463e      	mov	r6, r7
 800aac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 8315 	beq.w	800b0f6 <_svfprintf_r+0xd3e>
 800aacc:	232d      	movs	r3, #45	; 0x2d
 800aace:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800aad2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800aad6:	2300      	movs	r3, #0
 800aad8:	9310      	str	r3, [sp, #64]	; 0x40
 800aada:	e160      	b.n	800ad9e <_svfprintf_r+0x9e6>
 800aadc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800aae0:	e714      	b.n	800a90c <_svfprintf_r+0x554>
 800aae2:	4681      	mov	r9, r0
 800aae4:	e712      	b.n	800a90c <_svfprintf_r+0x554>
 800aae6:	2506      	movs	r5, #6
 800aae8:	e710      	b.n	800a90c <_svfprintf_r+0x554>
 800aaea:	46a9      	mov	r9, r5
 800aaec:	2501      	movs	r5, #1
 800aaee:	e70d      	b.n	800a90c <_svfprintf_r+0x554>
 800aaf0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800aafa:	e715      	b.n	800a928 <_svfprintf_r+0x570>
 800aafc:	7fefffff 	.word	0x7fefffff
 800ab00:	0808896c 	.word	0x0808896c
 800ab04:	08088968 	.word	0x08088968
 800ab08:	08088974 	.word	0x08088974
 800ab0c:	08088970 	.word	0x08088970
 800ab10:	08088989 	.word	0x08088989
 800ab14:	08088978 	.word	0x08088978
 800ab18:	40300000 	.word	0x40300000
 800ab1c:	3fe00000 	.word	0x3fe00000
 800ab20:	f802 0c01 	strb.w	r0, [r2, #-1]
 800ab24:	e75f      	b.n	800a9e6 <_svfprintf_r+0x62e>
 800ab26:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2a:	1af2      	subs	r2, r6, r3
 800ab2c:	2a00      	cmp	r2, #0
 800ab2e:	dafa      	bge.n	800ab26 <_svfprintf_r+0x76e>
 800ab30:	e76a      	b.n	800aa08 <_svfprintf_r+0x650>
 800ab32:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ab34:	4633      	mov	r3, r6
 800ab36:	2130      	movs	r1, #48	; 0x30
 800ab38:	4416      	add	r6, r2
 800ab3a:	e7f6      	b.n	800ab2a <_svfprintf_r+0x772>
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	2b46      	cmp	r3, #70	; 0x46
 800ab40:	d004      	beq.n	800ab4c <_svfprintf_r+0x794>
 800ab42:	2b45      	cmp	r3, #69	; 0x45
 800ab44:	d13a      	bne.n	800abbc <_svfprintf_r+0x804>
 800ab46:	1c6e      	adds	r6, r5, #1
 800ab48:	2102      	movs	r1, #2
 800ab4a:	e001      	b.n	800ab50 <_svfprintf_r+0x798>
 800ab4c:	462e      	mov	r6, r5
 800ab4e:	2103      	movs	r1, #3
 800ab50:	ab24      	add	r3, sp, #144	; 0x90
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	ab21      	add	r3, sp, #132	; 0x84
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	4632      	mov	r2, r6
 800ab5a:	ab20      	add	r3, sp, #128	; 0x80
 800ab5c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800ab60:	9803      	ldr	r0, [sp, #12]
 800ab62:	f000 fef1 	bl	800b948 <_dtoa_r>
 800ab66:	9b07      	ldr	r3, [sp, #28]
 800ab68:	2b47      	cmp	r3, #71	; 0x47
 800ab6a:	4683      	mov	fp, r0
 800ab6c:	d102      	bne.n	800ab74 <_svfprintf_r+0x7bc>
 800ab6e:	f01a 0f01 	tst.w	sl, #1
 800ab72:	d026      	beq.n	800abc2 <_svfprintf_r+0x80a>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	2b46      	cmp	r3, #70	; 0x46
 800ab78:	eb0b 0706 	add.w	r7, fp, r6
 800ab7c:	d10f      	bne.n	800ab9e <_svfprintf_r+0x7e6>
 800ab7e:	f89b 3000 	ldrb.w	r3, [fp]
 800ab82:	2b30      	cmp	r3, #48	; 0x30
 800ab84:	d109      	bne.n	800ab9a <_svfprintf_r+0x7e2>
 800ab86:	2200      	movs	r2, #0
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800ab8e:	f7f5 ffbb 	bl	8000b08 <__aeabi_dcmpeq>
 800ab92:	b910      	cbnz	r0, 800ab9a <_svfprintf_r+0x7e2>
 800ab94:	f1c6 0601 	rsb	r6, r6, #1
 800ab98:	9620      	str	r6, [sp, #128]	; 0x80
 800ab9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab9c:	441f      	add	r7, r3
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2300      	movs	r3, #0
 800aba2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800aba6:	f7f5 ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 800abaa:	b948      	cbnz	r0, 800abc0 <_svfprintf_r+0x808>
 800abac:	2230      	movs	r2, #48	; 0x30
 800abae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800abb0:	429f      	cmp	r7, r3
 800abb2:	d906      	bls.n	800abc2 <_svfprintf_r+0x80a>
 800abb4:	1c59      	adds	r1, r3, #1
 800abb6:	9124      	str	r1, [sp, #144]	; 0x90
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e7f8      	b.n	800abae <_svfprintf_r+0x7f6>
 800abbc:	462e      	mov	r6, r5
 800abbe:	e7c3      	b.n	800ab48 <_svfprintf_r+0x790>
 800abc0:	9724      	str	r7, [sp, #144]	; 0x90
 800abc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800abc4:	e720      	b.n	800aa08 <_svfprintf_r+0x650>
 800abc6:	9b07      	ldr	r3, [sp, #28]
 800abc8:	2b46      	cmp	r3, #70	; 0x46
 800abca:	f47f af2d 	bne.w	800aa28 <_svfprintf_r+0x670>
 800abce:	2e00      	cmp	r6, #0
 800abd0:	dd1d      	ble.n	800ac0e <_svfprintf_r+0x856>
 800abd2:	b915      	cbnz	r5, 800abda <_svfprintf_r+0x822>
 800abd4:	f01a 0f01 	tst.w	sl, #1
 800abd8:	d034      	beq.n	800ac44 <_svfprintf_r+0x88c>
 800abda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abdc:	18f3      	adds	r3, r6, r3
 800abde:	441d      	add	r5, r3
 800abe0:	2366      	movs	r3, #102	; 0x66
 800abe2:	9306      	str	r3, [sp, #24]
 800abe4:	e033      	b.n	800ac4e <_svfprintf_r+0x896>
 800abe6:	460a      	mov	r2, r1
 800abe8:	e73e      	b.n	800aa68 <_svfprintf_r+0x6b0>
 800abea:	f812 1b01 	ldrb.w	r1, [r2], #1
 800abee:	f803 1b01 	strb.w	r1, [r3], #1
 800abf2:	e74e      	b.n	800aa92 <_svfprintf_r+0x6da>
 800abf4:	b941      	cbnz	r1, 800ac08 <_svfprintf_r+0x850>
 800abf6:	2230      	movs	r2, #48	; 0x30
 800abf8:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800abfc:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800ac00:	3330      	adds	r3, #48	; 0x30
 800ac02:	1c51      	adds	r1, r2, #1
 800ac04:	7013      	strb	r3, [r2, #0]
 800ac06:	e748      	b.n	800aa9a <_svfprintf_r+0x6e2>
 800ac08:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800ac0c:	e7f8      	b.n	800ac00 <_svfprintf_r+0x848>
 800ac0e:	b915      	cbnz	r5, 800ac16 <_svfprintf_r+0x85e>
 800ac10:	f01a 0f01 	tst.w	sl, #1
 800ac14:	d018      	beq.n	800ac48 <_svfprintf_r+0x890>
 800ac16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac18:	3301      	adds	r3, #1
 800ac1a:	e7e0      	b.n	800abde <_svfprintf_r+0x826>
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	42b3      	cmp	r3, r6
 800ac20:	dc06      	bgt.n	800ac30 <_svfprintf_r+0x878>
 800ac22:	f01a 0f01 	tst.w	sl, #1
 800ac26:	d025      	beq.n	800ac74 <_svfprintf_r+0x8bc>
 800ac28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac2a:	18f5      	adds	r5, r6, r3
 800ac2c:	2367      	movs	r3, #103	; 0x67
 800ac2e:	e7d8      	b.n	800abe2 <_svfprintf_r+0x82a>
 800ac30:	9b04      	ldr	r3, [sp, #16]
 800ac32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac34:	2e00      	cmp	r6, #0
 800ac36:	eb03 0502 	add.w	r5, r3, r2
 800ac3a:	dcf7      	bgt.n	800ac2c <_svfprintf_r+0x874>
 800ac3c:	f1c6 0301 	rsb	r3, r6, #1
 800ac40:	441d      	add	r5, r3
 800ac42:	e7f3      	b.n	800ac2c <_svfprintf_r+0x874>
 800ac44:	4635      	mov	r5, r6
 800ac46:	e7cb      	b.n	800abe0 <_svfprintf_r+0x828>
 800ac48:	2366      	movs	r3, #102	; 0x66
 800ac4a:	9306      	str	r3, [sp, #24]
 800ac4c:	2501      	movs	r5, #1
 800ac4e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800ac52:	9307      	str	r3, [sp, #28]
 800ac54:	d01f      	beq.n	800ac96 <_svfprintf_r+0x8de>
 800ac56:	2700      	movs	r7, #0
 800ac58:	2e00      	cmp	r6, #0
 800ac5a:	9707      	str	r7, [sp, #28]
 800ac5c:	f77f af32 	ble.w	800aac4 <_svfprintf_r+0x70c>
 800ac60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2bff      	cmp	r3, #255	; 0xff
 800ac66:	d107      	bne.n	800ac78 <_svfprintf_r+0x8c0>
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac6c:	443b      	add	r3, r7
 800ac6e:	fb02 5503 	mla	r5, r2, r3, r5
 800ac72:	e727      	b.n	800aac4 <_svfprintf_r+0x70c>
 800ac74:	4635      	mov	r5, r6
 800ac76:	e7d9      	b.n	800ac2c <_svfprintf_r+0x874>
 800ac78:	42b3      	cmp	r3, r6
 800ac7a:	daf5      	bge.n	800ac68 <_svfprintf_r+0x8b0>
 800ac7c:	1af6      	subs	r6, r6, r3
 800ac7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	b133      	cbz	r3, 800ac92 <_svfprintf_r+0x8da>
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	3301      	adds	r3, #1
 800ac88:	9307      	str	r3, [sp, #28]
 800ac8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac90:	e7e6      	b.n	800ac60 <_svfprintf_r+0x8a8>
 800ac92:	3701      	adds	r7, #1
 800ac94:	e7e4      	b.n	800ac60 <_svfprintf_r+0x8a8>
 800ac96:	9f07      	ldr	r7, [sp, #28]
 800ac98:	e714      	b.n	800aac4 <_svfprintf_r+0x70c>
 800ac9a:	4632      	mov	r2, r6
 800ac9c:	f01a 0f20 	tst.w	sl, #32
 800aca0:	f852 3b04 	ldr.w	r3, [r2], #4
 800aca4:	9208      	str	r2, [sp, #32]
 800aca6:	d009      	beq.n	800acbc <_svfprintf_r+0x904>
 800aca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acaa:	4610      	mov	r0, r2
 800acac:	17d1      	asrs	r1, r2, #31
 800acae:	e9c3 0100 	strd	r0, r1, [r3]
 800acb2:	9e08      	ldr	r6, [sp, #32]
 800acb4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800acb8:	f7ff bbba 	b.w	800a430 <_svfprintf_r+0x78>
 800acbc:	f01a 0f10 	tst.w	sl, #16
 800acc0:	d002      	beq.n	800acc8 <_svfprintf_r+0x910>
 800acc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	e7f4      	b.n	800acb2 <_svfprintf_r+0x8fa>
 800acc8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800accc:	d002      	beq.n	800acd4 <_svfprintf_r+0x91c>
 800acce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd0:	801a      	strh	r2, [r3, #0]
 800acd2:	e7ee      	b.n	800acb2 <_svfprintf_r+0x8fa>
 800acd4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800acd8:	d0f3      	beq.n	800acc2 <_svfprintf_r+0x90a>
 800acda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acdc:	701a      	strb	r2, [r3, #0]
 800acde:	e7e8      	b.n	800acb2 <_svfprintf_r+0x8fa>
 800ace0:	f04a 0a10 	orr.w	sl, sl, #16
 800ace4:	f01a 0f20 	tst.w	sl, #32
 800ace8:	d01e      	beq.n	800ad28 <_svfprintf_r+0x970>
 800acea:	3607      	adds	r6, #7
 800acec:	f026 0607 	bic.w	r6, r6, #7
 800acf0:	f106 0308 	add.w	r3, r6, #8
 800acf4:	e9d6 6700 	ldrd	r6, r7, [r6]
 800acf8:	9308      	str	r3, [sp, #32]
 800acfa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800acfe:	2300      	movs	r3, #0
 800ad00:	2200      	movs	r2, #0
 800ad02:	1c69      	adds	r1, r5, #1
 800ad04:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800ad08:	f000 815b 	beq.w	800afc2 <_svfprintf_r+0xc0a>
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	ea56 0107 	orrs.w	r1, r6, r7
 800ad12:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800ad16:	f040 8154 	bne.w	800afc2 <_svfprintf_r+0xc0a>
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	f000 81d5 	beq.w	800b0ca <_svfprintf_r+0xd12>
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	f040 8151 	bne.w	800afc8 <_svfprintf_r+0xc10>
 800ad26:	e558      	b.n	800a7da <_svfprintf_r+0x422>
 800ad28:	1d33      	adds	r3, r6, #4
 800ad2a:	f01a 0f10 	tst.w	sl, #16
 800ad2e:	9308      	str	r3, [sp, #32]
 800ad30:	d001      	beq.n	800ad36 <_svfprintf_r+0x97e>
 800ad32:	6836      	ldr	r6, [r6, #0]
 800ad34:	e003      	b.n	800ad3e <_svfprintf_r+0x986>
 800ad36:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ad3a:	d002      	beq.n	800ad42 <_svfprintf_r+0x98a>
 800ad3c:	8836      	ldrh	r6, [r6, #0]
 800ad3e:	2700      	movs	r7, #0
 800ad40:	e7db      	b.n	800acfa <_svfprintf_r+0x942>
 800ad42:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ad46:	d0f4      	beq.n	800ad32 <_svfprintf_r+0x97a>
 800ad48:	7836      	ldrb	r6, [r6, #0]
 800ad4a:	e7f8      	b.n	800ad3e <_svfprintf_r+0x986>
 800ad4c:	1d33      	adds	r3, r6, #4
 800ad4e:	9308      	str	r3, [sp, #32]
 800ad50:	f647 0330 	movw	r3, #30768	; 0x7830
 800ad54:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 800ad58:	2278      	movs	r2, #120	; 0x78
 800ad5a:	4bb0      	ldr	r3, [pc, #704]	; (800b01c <_svfprintf_r+0xc64>)
 800ad5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ad5e:	6836      	ldr	r6, [r6, #0]
 800ad60:	9206      	str	r2, [sp, #24]
 800ad62:	2700      	movs	r7, #0
 800ad64:	f04a 0a02 	orr.w	sl, sl, #2
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e7c9      	b.n	800ad00 <_svfprintf_r+0x948>
 800ad6c:	1d33      	adds	r3, r6, #4
 800ad6e:	f8d6 b000 	ldr.w	fp, [r6]
 800ad72:	9308      	str	r3, [sp, #32]
 800ad74:	2600      	movs	r6, #0
 800ad76:	1c68      	adds	r0, r5, #1
 800ad78:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800ad7c:	f000 80e1 	beq.w	800af42 <_svfprintf_r+0xb8a>
 800ad80:	462a      	mov	r2, r5
 800ad82:	4631      	mov	r1, r6
 800ad84:	4658      	mov	r0, fp
 800ad86:	f7f5 fa43 	bl	8000210 <memchr>
 800ad8a:	4681      	mov	r9, r0
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f43f ad74 	beq.w	800a87a <_svfprintf_r+0x4c2>
 800ad92:	eba0 050b 	sub.w	r5, r0, fp
 800ad96:	46b1      	mov	r9, r6
 800ad98:	9610      	str	r6, [sp, #64]	; 0x40
 800ad9a:	4637      	mov	r7, r6
 800ad9c:	9607      	str	r6, [sp, #28]
 800ad9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ada0:	42ab      	cmp	r3, r5
 800ada2:	bfb8      	it	lt
 800ada4:	462b      	movlt	r3, r5
 800ada6:	9311      	str	r3, [sp, #68]	; 0x44
 800ada8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800adac:	b113      	cbz	r3, 800adb4 <_svfprintf_r+0x9fc>
 800adae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adb0:	3301      	adds	r3, #1
 800adb2:	9311      	str	r3, [sp, #68]	; 0x44
 800adb4:	f01a 0302 	ands.w	r3, sl, #2
 800adb8:	931c      	str	r3, [sp, #112]	; 0x70
 800adba:	bf1e      	ittt	ne
 800adbc:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800adbe:	3302      	addne	r3, #2
 800adc0:	9311      	strne	r3, [sp, #68]	; 0x44
 800adc2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800adc6:	931d      	str	r3, [sp, #116]	; 0x74
 800adc8:	d122      	bne.n	800ae10 <_svfprintf_r+0xa58>
 800adca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800adce:	1a9b      	subs	r3, r3, r2
 800add0:	2b00      	cmp	r3, #0
 800add2:	9313      	str	r3, [sp, #76]	; 0x4c
 800add4:	dd1c      	ble.n	800ae10 <_svfprintf_r+0xa58>
 800add6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800add8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800addc:	2810      	cmp	r0, #16
 800adde:	4890      	ldr	r0, [pc, #576]	; (800b020 <_svfprintf_r+0xc68>)
 800ade0:	6020      	str	r0, [r4, #0]
 800ade2:	f102 0201 	add.w	r2, r2, #1
 800ade6:	f104 0108 	add.w	r1, r4, #8
 800adea:	f300 8188 	bgt.w	800b0fe <_svfprintf_r+0xd46>
 800adee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800adf0:	6060      	str	r0, [r4, #4]
 800adf2:	4403      	add	r3, r0
 800adf4:	2a07      	cmp	r2, #7
 800adf6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800adfa:	f340 8195 	ble.w	800b128 <_svfprintf_r+0xd70>
 800adfe:	aa26      	add	r2, sp, #152	; 0x98
 800ae00:	4641      	mov	r1, r8
 800ae02:	9803      	ldr	r0, [sp, #12]
 800ae04:	f001 ff75 	bl	800ccf2 <__ssprint_r>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f040 84c1 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800ae0e:	ac29      	add	r4, sp, #164	; 0xa4
 800ae10:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800ae14:	b173      	cbz	r3, 800ae34 <_svfprintf_r+0xa7c>
 800ae16:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ae22:	3301      	adds	r3, #1
 800ae24:	9328      	str	r3, [sp, #160]	; 0xa0
 800ae26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ae28:	3301      	adds	r3, #1
 800ae2a:	2b07      	cmp	r3, #7
 800ae2c:	9327      	str	r3, [sp, #156]	; 0x9c
 800ae2e:	f300 817d 	bgt.w	800b12c <_svfprintf_r+0xd74>
 800ae32:	3408      	adds	r4, #8
 800ae34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae36:	b16b      	cbz	r3, 800ae54 <_svfprintf_r+0xa9c>
 800ae38:	ab1f      	add	r3, sp, #124	; 0x7c
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	6063      	str	r3, [r4, #4]
 800ae40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ae42:	3302      	adds	r3, #2
 800ae44:	9328      	str	r3, [sp, #160]	; 0xa0
 800ae46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ae48:	3301      	adds	r3, #1
 800ae4a:	2b07      	cmp	r3, #7
 800ae4c:	9327      	str	r3, [sp, #156]	; 0x9c
 800ae4e:	f300 8177 	bgt.w	800b140 <_svfprintf_r+0xd88>
 800ae52:	3408      	adds	r4, #8
 800ae54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae56:	2b80      	cmp	r3, #128	; 0x80
 800ae58:	d122      	bne.n	800aea0 <_svfprintf_r+0xae8>
 800ae5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae64:	dd1c      	ble.n	800aea0 <_svfprintf_r+0xae8>
 800ae66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ae68:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800ae6c:	2810      	cmp	r0, #16
 800ae6e:	486d      	ldr	r0, [pc, #436]	; (800b024 <_svfprintf_r+0xc6c>)
 800ae70:	6020      	str	r0, [r4, #0]
 800ae72:	f102 0201 	add.w	r2, r2, #1
 800ae76:	f104 0108 	add.w	r1, r4, #8
 800ae7a:	f300 816b 	bgt.w	800b154 <_svfprintf_r+0xd9c>
 800ae7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ae80:	6060      	str	r0, [r4, #4]
 800ae82:	4403      	add	r3, r0
 800ae84:	2a07      	cmp	r2, #7
 800ae86:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ae8a:	f340 8178 	ble.w	800b17e <_svfprintf_r+0xdc6>
 800ae8e:	aa26      	add	r2, sp, #152	; 0x98
 800ae90:	4641      	mov	r1, r8
 800ae92:	9803      	ldr	r0, [sp, #12]
 800ae94:	f001 ff2d 	bl	800ccf2 <__ssprint_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f040 8479 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800ae9e:	ac29      	add	r4, sp, #164	; 0xa4
 800aea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aea2:	1b5b      	subs	r3, r3, r5
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	9310      	str	r3, [sp, #64]	; 0x40
 800aea8:	dd1c      	ble.n	800aee4 <_svfprintf_r+0xb2c>
 800aeaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aeac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800aeb0:	2810      	cmp	r0, #16
 800aeb2:	485c      	ldr	r0, [pc, #368]	; (800b024 <_svfprintf_r+0xc6c>)
 800aeb4:	6020      	str	r0, [r4, #0]
 800aeb6:	f102 0201 	add.w	r2, r2, #1
 800aeba:	f104 0108 	add.w	r1, r4, #8
 800aebe:	f300 8160 	bgt.w	800b182 <_svfprintf_r+0xdca>
 800aec2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aec4:	6060      	str	r0, [r4, #4]
 800aec6:	4403      	add	r3, r0
 800aec8:	2a07      	cmp	r2, #7
 800aeca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800aece:	f340 816d 	ble.w	800b1ac <_svfprintf_r+0xdf4>
 800aed2:	aa26      	add	r2, sp, #152	; 0x98
 800aed4:	4641      	mov	r1, r8
 800aed6:	9803      	ldr	r0, [sp, #12]
 800aed8:	f001 ff0b 	bl	800ccf2 <__ssprint_r>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f040 8457 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800aee2:	ac29      	add	r4, sp, #164	; 0xa4
 800aee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800aee6:	9310      	str	r3, [sp, #64]	; 0x40
 800aee8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aeec:	f040 8160 	bne.w	800b1b0 <_svfprintf_r+0xdf8>
 800aef0:	e9c4 b500 	strd	fp, r5, [r4]
 800aef4:	441d      	add	r5, r3
 800aef6:	9528      	str	r5, [sp, #160]	; 0xa0
 800aef8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800aefa:	3301      	adds	r3, #1
 800aefc:	2b07      	cmp	r3, #7
 800aefe:	9327      	str	r3, [sp, #156]	; 0x9c
 800af00:	f300 819c 	bgt.w	800b23c <_svfprintf_r+0xe84>
 800af04:	3408      	adds	r4, #8
 800af06:	f01a 0f04 	tst.w	sl, #4
 800af0a:	f040 8423 	bne.w	800b754 <_svfprintf_r+0x139c>
 800af0e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800af12:	9911      	ldr	r1, [sp, #68]	; 0x44
 800af14:	428a      	cmp	r2, r1
 800af16:	bfac      	ite	ge
 800af18:	189b      	addge	r3, r3, r2
 800af1a:	185b      	addlt	r3, r3, r1
 800af1c:	930e      	str	r3, [sp, #56]	; 0x38
 800af1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800af20:	b13b      	cbz	r3, 800af32 <_svfprintf_r+0xb7a>
 800af22:	aa26      	add	r2, sp, #152	; 0x98
 800af24:	4641      	mov	r1, r8
 800af26:	9803      	ldr	r0, [sp, #12]
 800af28:	f001 fee3 	bl	800ccf2 <__ssprint_r>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f040 842f 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800af32:	2300      	movs	r3, #0
 800af34:	9327      	str	r3, [sp, #156]	; 0x9c
 800af36:	f1b9 0f00 	cmp.w	r9, #0
 800af3a:	f040 8445 	bne.w	800b7c8 <_svfprintf_r+0x1410>
 800af3e:	ac29      	add	r4, sp, #164	; 0xa4
 800af40:	e6b7      	b.n	800acb2 <_svfprintf_r+0x8fa>
 800af42:	4658      	mov	r0, fp
 800af44:	f7f5 f9b4 	bl	80002b0 <strlen>
 800af48:	46b1      	mov	r9, r6
 800af4a:	4605      	mov	r5, r0
 800af4c:	e495      	b.n	800a87a <_svfprintf_r+0x4c2>
 800af4e:	f04a 0a10 	orr.w	sl, sl, #16
 800af52:	f01a 0f20 	tst.w	sl, #32
 800af56:	d009      	beq.n	800af6c <_svfprintf_r+0xbb4>
 800af58:	3607      	adds	r6, #7
 800af5a:	f026 0607 	bic.w	r6, r6, #7
 800af5e:	f106 0308 	add.w	r3, r6, #8
 800af62:	e9d6 6700 	ldrd	r6, r7, [r6]
 800af66:	9308      	str	r3, [sp, #32]
 800af68:	2301      	movs	r3, #1
 800af6a:	e6c9      	b.n	800ad00 <_svfprintf_r+0x948>
 800af6c:	1d33      	adds	r3, r6, #4
 800af6e:	f01a 0f10 	tst.w	sl, #16
 800af72:	9308      	str	r3, [sp, #32]
 800af74:	d001      	beq.n	800af7a <_svfprintf_r+0xbc2>
 800af76:	6836      	ldr	r6, [r6, #0]
 800af78:	e003      	b.n	800af82 <_svfprintf_r+0xbca>
 800af7a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800af7e:	d002      	beq.n	800af86 <_svfprintf_r+0xbce>
 800af80:	8836      	ldrh	r6, [r6, #0]
 800af82:	2700      	movs	r7, #0
 800af84:	e7f0      	b.n	800af68 <_svfprintf_r+0xbb0>
 800af86:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800af8a:	d0f4      	beq.n	800af76 <_svfprintf_r+0xbbe>
 800af8c:	7836      	ldrb	r6, [r6, #0]
 800af8e:	e7f8      	b.n	800af82 <_svfprintf_r+0xbca>
 800af90:	4b22      	ldr	r3, [pc, #136]	; (800b01c <_svfprintf_r+0xc64>)
 800af92:	f7ff bb48 	b.w	800a626 <_svfprintf_r+0x26e>
 800af96:	1d33      	adds	r3, r6, #4
 800af98:	f01a 0f10 	tst.w	sl, #16
 800af9c:	9308      	str	r3, [sp, #32]
 800af9e:	d001      	beq.n	800afa4 <_svfprintf_r+0xbec>
 800afa0:	6836      	ldr	r6, [r6, #0]
 800afa2:	e003      	b.n	800afac <_svfprintf_r+0xbf4>
 800afa4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800afa8:	d003      	beq.n	800afb2 <_svfprintf_r+0xbfa>
 800afaa:	8836      	ldrh	r6, [r6, #0]
 800afac:	2700      	movs	r7, #0
 800afae:	f7ff bb47 	b.w	800a640 <_svfprintf_r+0x288>
 800afb2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800afb6:	d0f3      	beq.n	800afa0 <_svfprintf_r+0xbe8>
 800afb8:	7836      	ldrb	r6, [r6, #0]
 800afba:	e7f7      	b.n	800afac <_svfprintf_r+0xbf4>
 800afbc:	4652      	mov	r2, sl
 800afbe:	2301      	movs	r3, #1
 800afc0:	e6a5      	b.n	800ad0e <_svfprintf_r+0x956>
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	f43f ac04 	beq.w	800a7d0 <_svfprintf_r+0x418>
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d06c      	beq.n	800b0a6 <_svfprintf_r+0xcee>
 800afcc:	ab52      	add	r3, sp, #328	; 0x148
 800afce:	08f1      	lsrs	r1, r6, #3
 800afd0:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800afd4:	08f8      	lsrs	r0, r7, #3
 800afd6:	f006 0207 	and.w	r2, r6, #7
 800afda:	4607      	mov	r7, r0
 800afdc:	460e      	mov	r6, r1
 800afde:	3230      	adds	r2, #48	; 0x30
 800afe0:	ea56 0107 	orrs.w	r1, r6, r7
 800afe4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800afe8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800afec:	d114      	bne.n	800b018 <_svfprintf_r+0xc60>
 800afee:	f01a 0f01 	tst.w	sl, #1
 800aff2:	d006      	beq.n	800b002 <_svfprintf_r+0xc4a>
 800aff4:	2a30      	cmp	r2, #48	; 0x30
 800aff6:	d004      	beq.n	800b002 <_svfprintf_r+0xc4a>
 800aff8:	2230      	movs	r2, #48	; 0x30
 800affa:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800affe:	f1a3 0b02 	sub.w	fp, r3, #2
 800b002:	ab52      	add	r3, sp, #328	; 0x148
 800b004:	9510      	str	r5, [sp, #64]	; 0x40
 800b006:	f04f 0900 	mov.w	r9, #0
 800b00a:	eba3 050b 	sub.w	r5, r3, fp
 800b00e:	464f      	mov	r7, r9
 800b010:	f8cd 901c 	str.w	r9, [sp, #28]
 800b014:	464e      	mov	r6, r9
 800b016:	e6c2      	b.n	800ad9e <_svfprintf_r+0x9e6>
 800b018:	465b      	mov	r3, fp
 800b01a:	e7d8      	b.n	800afce <_svfprintf_r+0xc16>
 800b01c:	08088978 	.word	0x08088978
 800b020:	0808899c 	.word	0x0808899c
 800b024:	080889ac 	.word	0x080889ac
 800b028:	2300      	movs	r3, #0
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800b030:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800b034:	9307      	str	r3, [sp, #28]
 800b036:	220a      	movs	r2, #10
 800b038:	2300      	movs	r3, #0
 800b03a:	4630      	mov	r0, r6
 800b03c:	4639      	mov	r1, r7
 800b03e:	f7f5 fdd3 	bl	8000be8 <__aeabi_uldivmod>
 800b042:	9b04      	ldr	r3, [sp, #16]
 800b044:	3301      	adds	r3, #1
 800b046:	9304      	str	r3, [sp, #16]
 800b048:	9b07      	ldr	r3, [sp, #28]
 800b04a:	3230      	adds	r2, #48	; 0x30
 800b04c:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b050:	f809 2c01 	strb.w	r2, [r9, #-1]
 800b054:	b1d3      	cbz	r3, 800b08c <_svfprintf_r+0xcd4>
 800b056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b058:	9a04      	ldr	r2, [sp, #16]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d115      	bne.n	800b08c <_svfprintf_r+0xcd4>
 800b060:	2aff      	cmp	r2, #255	; 0xff
 800b062:	d013      	beq.n	800b08c <_svfprintf_r+0xcd4>
 800b064:	2f00      	cmp	r7, #0
 800b066:	bf08      	it	eq
 800b068:	2e0a      	cmpeq	r6, #10
 800b06a:	d30f      	bcc.n	800b08c <_svfprintf_r+0xcd4>
 800b06c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b06e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b070:	ebab 0b03 	sub.w	fp, fp, r3
 800b074:	461a      	mov	r2, r3
 800b076:	4658      	mov	r0, fp
 800b078:	f001 fe26 	bl	800ccc8 <strncpy>
 800b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07e:	785b      	ldrb	r3, [r3, #1]
 800b080:	b11b      	cbz	r3, 800b08a <_svfprintf_r+0xcd2>
 800b082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b084:	3301      	adds	r3, #1
 800b086:	9309      	str	r3, [sp, #36]	; 0x24
 800b088:	2300      	movs	r3, #0
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	2300      	movs	r3, #0
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	220a      	movs	r2, #10
 800b094:	f7f5 fda8 	bl	8000be8 <__aeabi_uldivmod>
 800b098:	4606      	mov	r6, r0
 800b09a:	460f      	mov	r7, r1
 800b09c:	ea56 0307 	orrs.w	r3, r6, r7
 800b0a0:	d0af      	beq.n	800b002 <_svfprintf_r+0xc4a>
 800b0a2:	46d9      	mov	r9, fp
 800b0a4:	e7c7      	b.n	800b036 <_svfprintf_r+0xc7e>
 800b0a6:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800b0aa:	f006 030f 	and.w	r3, r6, #15
 800b0ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0b0:	5cd3      	ldrb	r3, [r2, r3]
 800b0b2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800b0b6:	0933      	lsrs	r3, r6, #4
 800b0b8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800b0bc:	093a      	lsrs	r2, r7, #4
 800b0be:	461e      	mov	r6, r3
 800b0c0:	4617      	mov	r7, r2
 800b0c2:	ea56 0307 	orrs.w	r3, r6, r7
 800b0c6:	d1f0      	bne.n	800b0aa <_svfprintf_r+0xcf2>
 800b0c8:	e79b      	b.n	800b002 <_svfprintf_r+0xc4a>
 800b0ca:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d197      	bne.n	800b002 <_svfprintf_r+0xc4a>
 800b0d2:	07d2      	lsls	r2, r2, #31
 800b0d4:	bf44      	itt	mi
 800b0d6:	2330      	movmi	r3, #48	; 0x30
 800b0d8:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 800b0dc:	e791      	b.n	800b002 <_svfprintf_r+0xc4a>
 800b0de:	9b06      	ldr	r3, [sp, #24]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 8377 	beq.w	800b7d4 <_svfprintf_r+0x141c>
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800b0ec:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800b0f0:	9608      	str	r6, [sp, #32]
 800b0f2:	f7ff bb49 	b.w	800a788 <_svfprintf_r+0x3d0>
 800b0f6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800b0fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0fc:	e4ec      	b.n	800aad8 <_svfprintf_r+0x720>
 800b0fe:	2010      	movs	r0, #16
 800b100:	4403      	add	r3, r0
 800b102:	2a07      	cmp	r2, #7
 800b104:	6060      	str	r0, [r4, #4]
 800b106:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b10a:	dd08      	ble.n	800b11e <_svfprintf_r+0xd66>
 800b10c:	aa26      	add	r2, sp, #152	; 0x98
 800b10e:	4641      	mov	r1, r8
 800b110:	9803      	ldr	r0, [sp, #12]
 800b112:	f001 fdee 	bl	800ccf2 <__ssprint_r>
 800b116:	2800      	cmp	r0, #0
 800b118:	f040 833a 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b11c:	a929      	add	r1, sp, #164	; 0xa4
 800b11e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b120:	3b10      	subs	r3, #16
 800b122:	9313      	str	r3, [sp, #76]	; 0x4c
 800b124:	460c      	mov	r4, r1
 800b126:	e656      	b.n	800add6 <_svfprintf_r+0xa1e>
 800b128:	460c      	mov	r4, r1
 800b12a:	e671      	b.n	800ae10 <_svfprintf_r+0xa58>
 800b12c:	aa26      	add	r2, sp, #152	; 0x98
 800b12e:	4641      	mov	r1, r8
 800b130:	9803      	ldr	r0, [sp, #12]
 800b132:	f001 fdde 	bl	800ccf2 <__ssprint_r>
 800b136:	2800      	cmp	r0, #0
 800b138:	f040 832a 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b13c:	ac29      	add	r4, sp, #164	; 0xa4
 800b13e:	e679      	b.n	800ae34 <_svfprintf_r+0xa7c>
 800b140:	aa26      	add	r2, sp, #152	; 0x98
 800b142:	4641      	mov	r1, r8
 800b144:	9803      	ldr	r0, [sp, #12]
 800b146:	f001 fdd4 	bl	800ccf2 <__ssprint_r>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f040 8320 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b150:	ac29      	add	r4, sp, #164	; 0xa4
 800b152:	e67f      	b.n	800ae54 <_svfprintf_r+0xa9c>
 800b154:	2010      	movs	r0, #16
 800b156:	4403      	add	r3, r0
 800b158:	2a07      	cmp	r2, #7
 800b15a:	6060      	str	r0, [r4, #4]
 800b15c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b160:	dd08      	ble.n	800b174 <_svfprintf_r+0xdbc>
 800b162:	aa26      	add	r2, sp, #152	; 0x98
 800b164:	4641      	mov	r1, r8
 800b166:	9803      	ldr	r0, [sp, #12]
 800b168:	f001 fdc3 	bl	800ccf2 <__ssprint_r>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	f040 830f 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b172:	a929      	add	r1, sp, #164	; 0xa4
 800b174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b176:	3b10      	subs	r3, #16
 800b178:	9313      	str	r3, [sp, #76]	; 0x4c
 800b17a:	460c      	mov	r4, r1
 800b17c:	e673      	b.n	800ae66 <_svfprintf_r+0xaae>
 800b17e:	460c      	mov	r4, r1
 800b180:	e68e      	b.n	800aea0 <_svfprintf_r+0xae8>
 800b182:	2010      	movs	r0, #16
 800b184:	4403      	add	r3, r0
 800b186:	2a07      	cmp	r2, #7
 800b188:	6060      	str	r0, [r4, #4]
 800b18a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b18e:	dd08      	ble.n	800b1a2 <_svfprintf_r+0xdea>
 800b190:	aa26      	add	r2, sp, #152	; 0x98
 800b192:	4641      	mov	r1, r8
 800b194:	9803      	ldr	r0, [sp, #12]
 800b196:	f001 fdac 	bl	800ccf2 <__ssprint_r>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	f040 82f8 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b1a0:	a929      	add	r1, sp, #164	; 0xa4
 800b1a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1a4:	3b10      	subs	r3, #16
 800b1a6:	9310      	str	r3, [sp, #64]	; 0x40
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	e67e      	b.n	800aeaa <_svfprintf_r+0xaf2>
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	e699      	b.n	800aee4 <_svfprintf_r+0xb2c>
 800b1b0:	9b06      	ldr	r3, [sp, #24]
 800b1b2:	2b65      	cmp	r3, #101	; 0x65
 800b1b4:	f340 8234 	ble.w	800b620 <_svfprintf_r+0x1268>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1c0:	f7f5 fca2 	bl	8000b08 <__aeabi_dcmpeq>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d069      	beq.n	800b29c <_svfprintf_r+0xee4>
 800b1c8:	4b6e      	ldr	r3, [pc, #440]	; (800b384 <_svfprintf_r+0xfcc>)
 800b1ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	441d      	add	r5, r3
 800b1d2:	6063      	str	r3, [r4, #4]
 800b1d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b1d6:	9528      	str	r5, [sp, #160]	; 0xa0
 800b1d8:	3301      	adds	r3, #1
 800b1da:	2b07      	cmp	r3, #7
 800b1dc:	9327      	str	r3, [sp, #156]	; 0x9c
 800b1de:	dc37      	bgt.n	800b250 <_svfprintf_r+0xe98>
 800b1e0:	3408      	adds	r4, #8
 800b1e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b1e4:	9a04      	ldr	r2, [sp, #16]
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	db03      	blt.n	800b1f2 <_svfprintf_r+0xe3a>
 800b1ea:	f01a 0f01 	tst.w	sl, #1
 800b1ee:	f43f ae8a 	beq.w	800af06 <_svfprintf_r+0xb4e>
 800b1f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b1fe:	4413      	add	r3, r2
 800b200:	9328      	str	r3, [sp, #160]	; 0xa0
 800b202:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b204:	3301      	adds	r3, #1
 800b206:	2b07      	cmp	r3, #7
 800b208:	9327      	str	r3, [sp, #156]	; 0x9c
 800b20a:	dc2b      	bgt.n	800b264 <_svfprintf_r+0xeac>
 800b20c:	3408      	adds	r4, #8
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	1e5d      	subs	r5, r3, #1
 800b212:	2d00      	cmp	r5, #0
 800b214:	f77f ae77 	ble.w	800af06 <_svfprintf_r+0xb4e>
 800b218:	4e5b      	ldr	r6, [pc, #364]	; (800b388 <_svfprintf_r+0xfd0>)
 800b21a:	2710      	movs	r7, #16
 800b21c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b220:	2d10      	cmp	r5, #16
 800b222:	f103 0301 	add.w	r3, r3, #1
 800b226:	f104 0108 	add.w	r1, r4, #8
 800b22a:	6026      	str	r6, [r4, #0]
 800b22c:	dc24      	bgt.n	800b278 <_svfprintf_r+0xec0>
 800b22e:	6065      	str	r5, [r4, #4]
 800b230:	2b07      	cmp	r3, #7
 800b232:	4415      	add	r5, r2
 800b234:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800b238:	f340 8289 	ble.w	800b74e <_svfprintf_r+0x1396>
 800b23c:	aa26      	add	r2, sp, #152	; 0x98
 800b23e:	4641      	mov	r1, r8
 800b240:	9803      	ldr	r0, [sp, #12]
 800b242:	f001 fd56 	bl	800ccf2 <__ssprint_r>
 800b246:	2800      	cmp	r0, #0
 800b248:	f040 82a2 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b24c:	ac29      	add	r4, sp, #164	; 0xa4
 800b24e:	e65a      	b.n	800af06 <_svfprintf_r+0xb4e>
 800b250:	aa26      	add	r2, sp, #152	; 0x98
 800b252:	4641      	mov	r1, r8
 800b254:	9803      	ldr	r0, [sp, #12]
 800b256:	f001 fd4c 	bl	800ccf2 <__ssprint_r>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f040 8298 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b260:	ac29      	add	r4, sp, #164	; 0xa4
 800b262:	e7be      	b.n	800b1e2 <_svfprintf_r+0xe2a>
 800b264:	aa26      	add	r2, sp, #152	; 0x98
 800b266:	4641      	mov	r1, r8
 800b268:	9803      	ldr	r0, [sp, #12]
 800b26a:	f001 fd42 	bl	800ccf2 <__ssprint_r>
 800b26e:	2800      	cmp	r0, #0
 800b270:	f040 828e 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b274:	ac29      	add	r4, sp, #164	; 0xa4
 800b276:	e7ca      	b.n	800b20e <_svfprintf_r+0xe56>
 800b278:	3210      	adds	r2, #16
 800b27a:	2b07      	cmp	r3, #7
 800b27c:	6067      	str	r7, [r4, #4]
 800b27e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b282:	dd08      	ble.n	800b296 <_svfprintf_r+0xede>
 800b284:	aa26      	add	r2, sp, #152	; 0x98
 800b286:	4641      	mov	r1, r8
 800b288:	9803      	ldr	r0, [sp, #12]
 800b28a:	f001 fd32 	bl	800ccf2 <__ssprint_r>
 800b28e:	2800      	cmp	r0, #0
 800b290:	f040 827e 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b294:	a929      	add	r1, sp, #164	; 0xa4
 800b296:	3d10      	subs	r5, #16
 800b298:	460c      	mov	r4, r1
 800b29a:	e7bf      	b.n	800b21c <_svfprintf_r+0xe64>
 800b29c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	dc74      	bgt.n	800b38c <_svfprintf_r+0xfd4>
 800b2a2:	4b38      	ldr	r3, [pc, #224]	; (800b384 <_svfprintf_r+0xfcc>)
 800b2a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b2a6:	6023      	str	r3, [r4, #0]
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	441d      	add	r5, r3
 800b2ac:	6063      	str	r3, [r4, #4]
 800b2ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b2b0:	9528      	str	r5, [sp, #160]	; 0xa0
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	2b07      	cmp	r3, #7
 800b2b6:	9327      	str	r3, [sp, #156]	; 0x9c
 800b2b8:	dc3e      	bgt.n	800b338 <_svfprintf_r+0xf80>
 800b2ba:	3408      	adds	r4, #8
 800b2bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b2be:	b92b      	cbnz	r3, 800b2cc <_svfprintf_r+0xf14>
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	b91b      	cbnz	r3, 800b2cc <_svfprintf_r+0xf14>
 800b2c4:	f01a 0f01 	tst.w	sl, #1
 800b2c8:	f43f ae1d 	beq.w	800af06 <_svfprintf_r+0xb4e>
 800b2cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2d2:	6063      	str	r3, [r4, #4]
 800b2d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b2d8:	4413      	add	r3, r2
 800b2da:	9328      	str	r3, [sp, #160]	; 0xa0
 800b2dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b2de:	3301      	adds	r3, #1
 800b2e0:	2b07      	cmp	r3, #7
 800b2e2:	9327      	str	r3, [sp, #156]	; 0x9c
 800b2e4:	dc32      	bgt.n	800b34c <_svfprintf_r+0xf94>
 800b2e6:	3408      	adds	r4, #8
 800b2e8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	da1b      	bge.n	800b326 <_svfprintf_r+0xf6e>
 800b2ee:	4e26      	ldr	r6, [pc, #152]	; (800b388 <_svfprintf_r+0xfd0>)
 800b2f0:	426d      	negs	r5, r5
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	2710      	movs	r7, #16
 800b2f6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800b2fa:	2d10      	cmp	r5, #16
 800b2fc:	f102 0201 	add.w	r2, r2, #1
 800b300:	f104 0408 	add.w	r4, r4, #8
 800b304:	601e      	str	r6, [r3, #0]
 800b306:	dc2b      	bgt.n	800b360 <_svfprintf_r+0xfa8>
 800b308:	605d      	str	r5, [r3, #4]
 800b30a:	2a07      	cmp	r2, #7
 800b30c:	440d      	add	r5, r1
 800b30e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800b312:	dd08      	ble.n	800b326 <_svfprintf_r+0xf6e>
 800b314:	aa26      	add	r2, sp, #152	; 0x98
 800b316:	4641      	mov	r1, r8
 800b318:	9803      	ldr	r0, [sp, #12]
 800b31a:	f001 fcea 	bl	800ccf2 <__ssprint_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	f040 8236 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b324:	ac29      	add	r4, sp, #164	; 0xa4
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	6063      	str	r3, [r4, #4]
 800b32a:	9a04      	ldr	r2, [sp, #16]
 800b32c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b32e:	f8c4 b000 	str.w	fp, [r4]
 800b332:	4413      	add	r3, r2
 800b334:	9328      	str	r3, [sp, #160]	; 0xa0
 800b336:	e5df      	b.n	800aef8 <_svfprintf_r+0xb40>
 800b338:	aa26      	add	r2, sp, #152	; 0x98
 800b33a:	4641      	mov	r1, r8
 800b33c:	9803      	ldr	r0, [sp, #12]
 800b33e:	f001 fcd8 	bl	800ccf2 <__ssprint_r>
 800b342:	2800      	cmp	r0, #0
 800b344:	f040 8224 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b348:	ac29      	add	r4, sp, #164	; 0xa4
 800b34a:	e7b7      	b.n	800b2bc <_svfprintf_r+0xf04>
 800b34c:	aa26      	add	r2, sp, #152	; 0x98
 800b34e:	4641      	mov	r1, r8
 800b350:	9803      	ldr	r0, [sp, #12]
 800b352:	f001 fcce 	bl	800ccf2 <__ssprint_r>
 800b356:	2800      	cmp	r0, #0
 800b358:	f040 821a 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b35c:	ac29      	add	r4, sp, #164	; 0xa4
 800b35e:	e7c3      	b.n	800b2e8 <_svfprintf_r+0xf30>
 800b360:	3110      	adds	r1, #16
 800b362:	2a07      	cmp	r2, #7
 800b364:	605f      	str	r7, [r3, #4]
 800b366:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800b36a:	dd08      	ble.n	800b37e <_svfprintf_r+0xfc6>
 800b36c:	aa26      	add	r2, sp, #152	; 0x98
 800b36e:	4641      	mov	r1, r8
 800b370:	9803      	ldr	r0, [sp, #12]
 800b372:	f001 fcbe 	bl	800ccf2 <__ssprint_r>
 800b376:	2800      	cmp	r0, #0
 800b378:	f040 820a 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b37c:	ac29      	add	r4, sp, #164	; 0xa4
 800b37e:	3d10      	subs	r5, #16
 800b380:	4623      	mov	r3, r4
 800b382:	e7b8      	b.n	800b2f6 <_svfprintf_r+0xf3e>
 800b384:	0808899a 	.word	0x0808899a
 800b388:	080889ac 	.word	0x080889ac
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	42b3      	cmp	r3, r6
 800b390:	bfa8      	it	ge
 800b392:	4633      	movge	r3, r6
 800b394:	2b00      	cmp	r3, #0
 800b396:	461d      	mov	r5, r3
 800b398:	dd0b      	ble.n	800b3b2 <_svfprintf_r+0xffa>
 800b39a:	e9c4 b300 	strd	fp, r3, [r4]
 800b39e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3a0:	442b      	add	r3, r5
 800b3a2:	9328      	str	r3, [sp, #160]	; 0xa0
 800b3a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	2b07      	cmp	r3, #7
 800b3aa:	9327      	str	r3, [sp, #156]	; 0x9c
 800b3ac:	f300 8086 	bgt.w	800b4bc <_svfprintf_r+0x1104>
 800b3b0:	3408      	adds	r4, #8
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	bfac      	ite	ge
 800b3b6:	1b75      	subge	r5, r6, r5
 800b3b8:	4635      	movlt	r5, r6
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	dd19      	ble.n	800b3f2 <_svfprintf_r+0x103a>
 800b3be:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b3c2:	4896      	ldr	r0, [pc, #600]	; (800b61c <_svfprintf_r+0x1264>)
 800b3c4:	6020      	str	r0, [r4, #0]
 800b3c6:	2d10      	cmp	r5, #16
 800b3c8:	f103 0301 	add.w	r3, r3, #1
 800b3cc:	f104 0108 	add.w	r1, r4, #8
 800b3d0:	dc7e      	bgt.n	800b4d0 <_svfprintf_r+0x1118>
 800b3d2:	6065      	str	r5, [r4, #4]
 800b3d4:	2b07      	cmp	r3, #7
 800b3d6:	4415      	add	r5, r2
 800b3d8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800b3dc:	f340 808b 	ble.w	800b4f6 <_svfprintf_r+0x113e>
 800b3e0:	aa26      	add	r2, sp, #152	; 0x98
 800b3e2:	4641      	mov	r1, r8
 800b3e4:	9803      	ldr	r0, [sp, #12]
 800b3e6:	f001 fc84 	bl	800ccf2 <__ssprint_r>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f040 81d0 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b3f0:	ac29      	add	r4, sp, #164	; 0xa4
 800b3f2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800b3f6:	445e      	add	r6, fp
 800b3f8:	d009      	beq.n	800b40e <_svfprintf_r+0x1056>
 800b3fa:	9b07      	ldr	r3, [sp, #28]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d17c      	bne.n	800b4fa <_svfprintf_r+0x1142>
 800b400:	2f00      	cmp	r7, #0
 800b402:	d17c      	bne.n	800b4fe <_svfprintf_r+0x1146>
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	445b      	add	r3, fp
 800b408:	429e      	cmp	r6, r3
 800b40a:	bf28      	it	cs
 800b40c:	461e      	movcs	r6, r3
 800b40e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b410:	9a04      	ldr	r2, [sp, #16]
 800b412:	4293      	cmp	r3, r2
 800b414:	db02      	blt.n	800b41c <_svfprintf_r+0x1064>
 800b416:	f01a 0f01 	tst.w	sl, #1
 800b41a:	d00e      	beq.n	800b43a <_svfprintf_r+0x1082>
 800b41c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b41e:	6023      	str	r3, [r4, #0]
 800b420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b422:	6063      	str	r3, [r4, #4]
 800b424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b428:	4413      	add	r3, r2
 800b42a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b42c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b42e:	3301      	adds	r3, #1
 800b430:	2b07      	cmp	r3, #7
 800b432:	9327      	str	r3, [sp, #156]	; 0x9c
 800b434:	f300 80dd 	bgt.w	800b5f2 <_svfprintf_r+0x123a>
 800b438:	3408      	adds	r4, #8
 800b43a:	9b04      	ldr	r3, [sp, #16]
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	eb0b 0503 	add.w	r5, fp, r3
 800b442:	1bab      	subs	r3, r5, r6
 800b444:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b446:	1b55      	subs	r5, r2, r5
 800b448:	429d      	cmp	r5, r3
 800b44a:	bfa8      	it	ge
 800b44c:	461d      	movge	r5, r3
 800b44e:	2d00      	cmp	r5, #0
 800b450:	dd0b      	ble.n	800b46a <_svfprintf_r+0x10b2>
 800b452:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b454:	442b      	add	r3, r5
 800b456:	9328      	str	r3, [sp, #160]	; 0xa0
 800b458:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b45a:	3301      	adds	r3, #1
 800b45c:	2b07      	cmp	r3, #7
 800b45e:	e9c4 6500 	strd	r6, r5, [r4]
 800b462:	9327      	str	r3, [sp, #156]	; 0x9c
 800b464:	f300 80cf 	bgt.w	800b606 <_svfprintf_r+0x124e>
 800b468:	3408      	adds	r4, #8
 800b46a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b46c:	9a04      	ldr	r2, [sp, #16]
 800b46e:	2d00      	cmp	r5, #0
 800b470:	eba2 0303 	sub.w	r3, r2, r3
 800b474:	bfac      	ite	ge
 800b476:	1b5d      	subge	r5, r3, r5
 800b478:	461d      	movlt	r5, r3
 800b47a:	2d00      	cmp	r5, #0
 800b47c:	f77f ad43 	ble.w	800af06 <_svfprintf_r+0xb4e>
 800b480:	4e66      	ldr	r6, [pc, #408]	; (800b61c <_svfprintf_r+0x1264>)
 800b482:	2710      	movs	r7, #16
 800b484:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b488:	2d10      	cmp	r5, #16
 800b48a:	f103 0301 	add.w	r3, r3, #1
 800b48e:	f104 0108 	add.w	r1, r4, #8
 800b492:	6026      	str	r6, [r4, #0]
 800b494:	f77f aecb 	ble.w	800b22e <_svfprintf_r+0xe76>
 800b498:	3210      	adds	r2, #16
 800b49a:	2b07      	cmp	r3, #7
 800b49c:	6067      	str	r7, [r4, #4]
 800b49e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b4a2:	dd08      	ble.n	800b4b6 <_svfprintf_r+0x10fe>
 800b4a4:	aa26      	add	r2, sp, #152	; 0x98
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	9803      	ldr	r0, [sp, #12]
 800b4aa:	f001 fc22 	bl	800ccf2 <__ssprint_r>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f040 816e 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b4b4:	a929      	add	r1, sp, #164	; 0xa4
 800b4b6:	3d10      	subs	r5, #16
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	e7e3      	b.n	800b484 <_svfprintf_r+0x10cc>
 800b4bc:	aa26      	add	r2, sp, #152	; 0x98
 800b4be:	4641      	mov	r1, r8
 800b4c0:	9803      	ldr	r0, [sp, #12]
 800b4c2:	f001 fc16 	bl	800ccf2 <__ssprint_r>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f040 8162 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b4cc:	ac29      	add	r4, sp, #164	; 0xa4
 800b4ce:	e770      	b.n	800b3b2 <_svfprintf_r+0xffa>
 800b4d0:	2010      	movs	r0, #16
 800b4d2:	4402      	add	r2, r0
 800b4d4:	2b07      	cmp	r3, #7
 800b4d6:	6060      	str	r0, [r4, #4]
 800b4d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b4dc:	dd08      	ble.n	800b4f0 <_svfprintf_r+0x1138>
 800b4de:	aa26      	add	r2, sp, #152	; 0x98
 800b4e0:	4641      	mov	r1, r8
 800b4e2:	9803      	ldr	r0, [sp, #12]
 800b4e4:	f001 fc05 	bl	800ccf2 <__ssprint_r>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	f040 8151 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b4ee:	a929      	add	r1, sp, #164	; 0xa4
 800b4f0:	3d10      	subs	r5, #16
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	e763      	b.n	800b3be <_svfprintf_r+0x1006>
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	e77b      	b.n	800b3f2 <_svfprintf_r+0x103a>
 800b4fa:	2f00      	cmp	r7, #0
 800b4fc:	d049      	beq.n	800b592 <_svfprintf_r+0x11da>
 800b4fe:	3f01      	subs	r7, #1
 800b500:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b506:	6063      	str	r3, [r4, #4]
 800b508:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b50a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b50c:	4413      	add	r3, r2
 800b50e:	9328      	str	r3, [sp, #160]	; 0xa0
 800b510:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b512:	3301      	adds	r3, #1
 800b514:	2b07      	cmp	r3, #7
 800b516:	9327      	str	r3, [sp, #156]	; 0x9c
 800b518:	dc42      	bgt.n	800b5a0 <_svfprintf_r+0x11e8>
 800b51a:	3408      	adds	r4, #8
 800b51c:	9b04      	ldr	r3, [sp, #16]
 800b51e:	445b      	add	r3, fp
 800b520:	1b9a      	subs	r2, r3, r6
 800b522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	4293      	cmp	r3, r2
 800b528:	bfa8      	it	ge
 800b52a:	4613      	movge	r3, r2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	461d      	mov	r5, r3
 800b530:	dd0a      	ble.n	800b548 <_svfprintf_r+0x1190>
 800b532:	e9c4 6300 	strd	r6, r3, [r4]
 800b536:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b538:	442b      	add	r3, r5
 800b53a:	9328      	str	r3, [sp, #160]	; 0xa0
 800b53c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b53e:	3301      	adds	r3, #1
 800b540:	2b07      	cmp	r3, #7
 800b542:	9327      	str	r3, [sp, #156]	; 0x9c
 800b544:	dc36      	bgt.n	800b5b4 <_svfprintf_r+0x11fc>
 800b546:	3408      	adds	r4, #8
 800b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2d00      	cmp	r5, #0
 800b54e:	bfac      	ite	ge
 800b550:	1b5d      	subge	r5, r3, r5
 800b552:	461d      	movlt	r5, r3
 800b554:	2d00      	cmp	r5, #0
 800b556:	dd18      	ble.n	800b58a <_svfprintf_r+0x11d2>
 800b558:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800b55c:	482f      	ldr	r0, [pc, #188]	; (800b61c <_svfprintf_r+0x1264>)
 800b55e:	6020      	str	r0, [r4, #0]
 800b560:	2d10      	cmp	r5, #16
 800b562:	f102 0201 	add.w	r2, r2, #1
 800b566:	f104 0108 	add.w	r1, r4, #8
 800b56a:	dc2d      	bgt.n	800b5c8 <_svfprintf_r+0x1210>
 800b56c:	442b      	add	r3, r5
 800b56e:	2a07      	cmp	r2, #7
 800b570:	6065      	str	r5, [r4, #4]
 800b572:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b576:	dd3a      	ble.n	800b5ee <_svfprintf_r+0x1236>
 800b578:	aa26      	add	r2, sp, #152	; 0x98
 800b57a:	4641      	mov	r1, r8
 800b57c:	9803      	ldr	r0, [sp, #12]
 800b57e:	f001 fbb8 	bl	800ccf2 <__ssprint_r>
 800b582:	2800      	cmp	r0, #0
 800b584:	f040 8104 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b588:	ac29      	add	r4, sp, #164	; 0xa4
 800b58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	441e      	add	r6, r3
 800b590:	e733      	b.n	800b3fa <_svfprintf_r+0x1042>
 800b592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b594:	3b01      	subs	r3, #1
 800b596:	9309      	str	r3, [sp, #36]	; 0x24
 800b598:	9b07      	ldr	r3, [sp, #28]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	9307      	str	r3, [sp, #28]
 800b59e:	e7af      	b.n	800b500 <_svfprintf_r+0x1148>
 800b5a0:	aa26      	add	r2, sp, #152	; 0x98
 800b5a2:	4641      	mov	r1, r8
 800b5a4:	9803      	ldr	r0, [sp, #12]
 800b5a6:	f001 fba4 	bl	800ccf2 <__ssprint_r>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	f040 80f0 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b5b0:	ac29      	add	r4, sp, #164	; 0xa4
 800b5b2:	e7b3      	b.n	800b51c <_svfprintf_r+0x1164>
 800b5b4:	aa26      	add	r2, sp, #152	; 0x98
 800b5b6:	4641      	mov	r1, r8
 800b5b8:	9803      	ldr	r0, [sp, #12]
 800b5ba:	f001 fb9a 	bl	800ccf2 <__ssprint_r>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f040 80e6 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b5c4:	ac29      	add	r4, sp, #164	; 0xa4
 800b5c6:	e7bf      	b.n	800b548 <_svfprintf_r+0x1190>
 800b5c8:	2010      	movs	r0, #16
 800b5ca:	4403      	add	r3, r0
 800b5cc:	2a07      	cmp	r2, #7
 800b5ce:	6060      	str	r0, [r4, #4]
 800b5d0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b5d4:	dd08      	ble.n	800b5e8 <_svfprintf_r+0x1230>
 800b5d6:	aa26      	add	r2, sp, #152	; 0x98
 800b5d8:	4641      	mov	r1, r8
 800b5da:	9803      	ldr	r0, [sp, #12]
 800b5dc:	f001 fb89 	bl	800ccf2 <__ssprint_r>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f040 80d5 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b5e6:	a929      	add	r1, sp, #164	; 0xa4
 800b5e8:	3d10      	subs	r5, #16
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	e7b4      	b.n	800b558 <_svfprintf_r+0x11a0>
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	e7cb      	b.n	800b58a <_svfprintf_r+0x11d2>
 800b5f2:	aa26      	add	r2, sp, #152	; 0x98
 800b5f4:	4641      	mov	r1, r8
 800b5f6:	9803      	ldr	r0, [sp, #12]
 800b5f8:	f001 fb7b 	bl	800ccf2 <__ssprint_r>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f040 80c7 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b602:	ac29      	add	r4, sp, #164	; 0xa4
 800b604:	e719      	b.n	800b43a <_svfprintf_r+0x1082>
 800b606:	aa26      	add	r2, sp, #152	; 0x98
 800b608:	4641      	mov	r1, r8
 800b60a:	9803      	ldr	r0, [sp, #12]
 800b60c:	f001 fb71 	bl	800ccf2 <__ssprint_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	f040 80bd 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b616:	ac29      	add	r4, sp, #164	; 0xa4
 800b618:	e727      	b.n	800b46a <_svfprintf_r+0x10b2>
 800b61a:	bf00      	nop
 800b61c:	080889ac 	.word	0x080889ac
 800b620:	9a04      	ldr	r2, [sp, #16]
 800b622:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b624:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b626:	2a01      	cmp	r2, #1
 800b628:	f105 0501 	add.w	r5, r5, #1
 800b62c:	f103 0301 	add.w	r3, r3, #1
 800b630:	f104 0608 	add.w	r6, r4, #8
 800b634:	dc02      	bgt.n	800b63c <_svfprintf_r+0x1284>
 800b636:	f01a 0f01 	tst.w	sl, #1
 800b63a:	d07d      	beq.n	800b738 <_svfprintf_r+0x1380>
 800b63c:	2201      	movs	r2, #1
 800b63e:	2b07      	cmp	r3, #7
 800b640:	f8c4 b000 	str.w	fp, [r4]
 800b644:	6062      	str	r2, [r4, #4]
 800b646:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800b64a:	dd08      	ble.n	800b65e <_svfprintf_r+0x12a6>
 800b64c:	aa26      	add	r2, sp, #152	; 0x98
 800b64e:	4641      	mov	r1, r8
 800b650:	9803      	ldr	r0, [sp, #12]
 800b652:	f001 fb4e 	bl	800ccf2 <__ssprint_r>
 800b656:	2800      	cmp	r0, #0
 800b658:	f040 809a 	bne.w	800b790 <_svfprintf_r+0x13d8>
 800b65c:	ae29      	add	r6, sp, #164	; 0xa4
 800b65e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b660:	6033      	str	r3, [r6, #0]
 800b662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b664:	6073      	str	r3, [r6, #4]
 800b666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b668:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b66a:	4413      	add	r3, r2
 800b66c:	9328      	str	r3, [sp, #160]	; 0xa0
 800b66e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b670:	3301      	adds	r3, #1
 800b672:	2b07      	cmp	r3, #7
 800b674:	9327      	str	r3, [sp, #156]	; 0x9c
 800b676:	dc31      	bgt.n	800b6dc <_svfprintf_r+0x1324>
 800b678:	3608      	adds	r6, #8
 800b67a:	9b04      	ldr	r3, [sp, #16]
 800b67c:	2200      	movs	r2, #0
 800b67e:	1e5c      	subs	r4, r3, #1
 800b680:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b684:	2300      	movs	r3, #0
 800b686:	f7f5 fa3f 	bl	8000b08 <__aeabi_dcmpeq>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d12f      	bne.n	800b6ee <_svfprintf_r+0x1336>
 800b68e:	f10b 0301 	add.w	r3, fp, #1
 800b692:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800b694:	9904      	ldr	r1, [sp, #16]
 800b696:	e9c6 3400 	strd	r3, r4, [r6]
 800b69a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b69c:	3201      	adds	r2, #1
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	440b      	add	r3, r1
 800b6a2:	2a07      	cmp	r2, #7
 800b6a4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800b6a8:	dd4f      	ble.n	800b74a <_svfprintf_r+0x1392>
 800b6aa:	aa26      	add	r2, sp, #152	; 0x98
 800b6ac:	4641      	mov	r1, r8
 800b6ae:	9803      	ldr	r0, [sp, #12]
 800b6b0:	f001 fb1f 	bl	800ccf2 <__ssprint_r>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d16b      	bne.n	800b790 <_svfprintf_r+0x13d8>
 800b6b8:	ae29      	add	r6, sp, #164	; 0xa4
 800b6ba:	ab22      	add	r3, sp, #136	; 0x88
 800b6bc:	6033      	str	r3, [r6, #0]
 800b6be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6c0:	6073      	str	r3, [r6, #4]
 800b6c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b6c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b6c6:	4413      	add	r3, r2
 800b6c8:	9328      	str	r3, [sp, #160]	; 0xa0
 800b6ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	2b07      	cmp	r3, #7
 800b6d0:	9327      	str	r3, [sp, #156]	; 0x9c
 800b6d2:	f73f adb3 	bgt.w	800b23c <_svfprintf_r+0xe84>
 800b6d6:	f106 0408 	add.w	r4, r6, #8
 800b6da:	e414      	b.n	800af06 <_svfprintf_r+0xb4e>
 800b6dc:	aa26      	add	r2, sp, #152	; 0x98
 800b6de:	4641      	mov	r1, r8
 800b6e0:	9803      	ldr	r0, [sp, #12]
 800b6e2:	f001 fb06 	bl	800ccf2 <__ssprint_r>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d152      	bne.n	800b790 <_svfprintf_r+0x13d8>
 800b6ea:	ae29      	add	r6, sp, #164	; 0xa4
 800b6ec:	e7c5      	b.n	800b67a <_svfprintf_r+0x12c2>
 800b6ee:	2c00      	cmp	r4, #0
 800b6f0:	dde3      	ble.n	800b6ba <_svfprintf_r+0x1302>
 800b6f2:	4d3e      	ldr	r5, [pc, #248]	; (800b7ec <_svfprintf_r+0x1434>)
 800b6f4:	2710      	movs	r7, #16
 800b6f6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b6fa:	2c10      	cmp	r4, #16
 800b6fc:	f103 0301 	add.w	r3, r3, #1
 800b700:	f106 0108 	add.w	r1, r6, #8
 800b704:	6035      	str	r5, [r6, #0]
 800b706:	dc07      	bgt.n	800b718 <_svfprintf_r+0x1360>
 800b708:	6074      	str	r4, [r6, #4]
 800b70a:	2b07      	cmp	r3, #7
 800b70c:	4414      	add	r4, r2
 800b70e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800b712:	dcca      	bgt.n	800b6aa <_svfprintf_r+0x12f2>
 800b714:	460e      	mov	r6, r1
 800b716:	e7d0      	b.n	800b6ba <_svfprintf_r+0x1302>
 800b718:	3210      	adds	r2, #16
 800b71a:	2b07      	cmp	r3, #7
 800b71c:	6077      	str	r7, [r6, #4]
 800b71e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b722:	dd06      	ble.n	800b732 <_svfprintf_r+0x137a>
 800b724:	aa26      	add	r2, sp, #152	; 0x98
 800b726:	4641      	mov	r1, r8
 800b728:	9803      	ldr	r0, [sp, #12]
 800b72a:	f001 fae2 	bl	800ccf2 <__ssprint_r>
 800b72e:	bb78      	cbnz	r0, 800b790 <_svfprintf_r+0x13d8>
 800b730:	a929      	add	r1, sp, #164	; 0xa4
 800b732:	3c10      	subs	r4, #16
 800b734:	460e      	mov	r6, r1
 800b736:	e7de      	b.n	800b6f6 <_svfprintf_r+0x133e>
 800b738:	2201      	movs	r2, #1
 800b73a:	2b07      	cmp	r3, #7
 800b73c:	f8c4 b000 	str.w	fp, [r4]
 800b740:	6062      	str	r2, [r4, #4]
 800b742:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800b746:	ddb8      	ble.n	800b6ba <_svfprintf_r+0x1302>
 800b748:	e7af      	b.n	800b6aa <_svfprintf_r+0x12f2>
 800b74a:	3608      	adds	r6, #8
 800b74c:	e7b5      	b.n	800b6ba <_svfprintf_r+0x1302>
 800b74e:	460c      	mov	r4, r1
 800b750:	f7ff bbd9 	b.w	800af06 <_svfprintf_r+0xb4e>
 800b754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b756:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b758:	1a9d      	subs	r5, r3, r2
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	f77f abd7 	ble.w	800af0e <_svfprintf_r+0xb56>
 800b760:	4e23      	ldr	r6, [pc, #140]	; (800b7f0 <_svfprintf_r+0x1438>)
 800b762:	2710      	movs	r7, #16
 800b764:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800b768:	2d10      	cmp	r5, #16
 800b76a:	f103 0301 	add.w	r3, r3, #1
 800b76e:	6026      	str	r6, [r4, #0]
 800b770:	dc18      	bgt.n	800b7a4 <_svfprintf_r+0x13ec>
 800b772:	6065      	str	r5, [r4, #4]
 800b774:	2b07      	cmp	r3, #7
 800b776:	4415      	add	r5, r2
 800b778:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800b77c:	f77f abc7 	ble.w	800af0e <_svfprintf_r+0xb56>
 800b780:	aa26      	add	r2, sp, #152	; 0x98
 800b782:	4641      	mov	r1, r8
 800b784:	9803      	ldr	r0, [sp, #12]
 800b786:	f001 fab4 	bl	800ccf2 <__ssprint_r>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f43f abbf 	beq.w	800af0e <_svfprintf_r+0xb56>
 800b790:	f1b9 0f00 	cmp.w	r9, #0
 800b794:	f43f a8a8 	beq.w	800a8e8 <_svfprintf_r+0x530>
 800b798:	4649      	mov	r1, r9
 800b79a:	9803      	ldr	r0, [sp, #12]
 800b79c:	f000 fee4 	bl	800c568 <_free_r>
 800b7a0:	f7ff b8a2 	b.w	800a8e8 <_svfprintf_r+0x530>
 800b7a4:	3210      	adds	r2, #16
 800b7a6:	2b07      	cmp	r3, #7
 800b7a8:	6067      	str	r7, [r4, #4]
 800b7aa:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800b7ae:	dc02      	bgt.n	800b7b6 <_svfprintf_r+0x13fe>
 800b7b0:	3408      	adds	r4, #8
 800b7b2:	3d10      	subs	r5, #16
 800b7b4:	e7d6      	b.n	800b764 <_svfprintf_r+0x13ac>
 800b7b6:	aa26      	add	r2, sp, #152	; 0x98
 800b7b8:	4641      	mov	r1, r8
 800b7ba:	9803      	ldr	r0, [sp, #12]
 800b7bc:	f001 fa99 	bl	800ccf2 <__ssprint_r>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1e5      	bne.n	800b790 <_svfprintf_r+0x13d8>
 800b7c4:	ac29      	add	r4, sp, #164	; 0xa4
 800b7c6:	e7f4      	b.n	800b7b2 <_svfprintf_r+0x13fa>
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	9803      	ldr	r0, [sp, #12]
 800b7cc:	f000 fecc 	bl	800c568 <_free_r>
 800b7d0:	f7ff bbb5 	b.w	800af3e <_svfprintf_r+0xb86>
 800b7d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f43f a886 	beq.w	800a8e8 <_svfprintf_r+0x530>
 800b7dc:	aa26      	add	r2, sp, #152	; 0x98
 800b7de:	4641      	mov	r1, r8
 800b7e0:	9803      	ldr	r0, [sp, #12]
 800b7e2:	f001 fa86 	bl	800ccf2 <__ssprint_r>
 800b7e6:	f7ff b87f 	b.w	800a8e8 <_svfprintf_r+0x530>
 800b7ea:	bf00      	nop
 800b7ec:	080889ac 	.word	0x080889ac
 800b7f0:	0808899c 	.word	0x0808899c

0800b7f4 <sysconf>:
 800b7f4:	2808      	cmp	r0, #8
 800b7f6:	b508      	push	{r3, lr}
 800b7f8:	d006      	beq.n	800b808 <sysconf+0x14>
 800b7fa:	f7fe f95b 	bl	8009ab4 <__errno>
 800b7fe:	2316      	movs	r3, #22
 800b800:	6003      	str	r3, [r0, #0]
 800b802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b806:	bd08      	pop	{r3, pc}
 800b808:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b80c:	e7fb      	b.n	800b806 <sysconf+0x12>
	...

0800b810 <register_fini>:
 800b810:	4b02      	ldr	r3, [pc, #8]	; (800b81c <register_fini+0xc>)
 800b812:	b113      	cbz	r3, 800b81a <register_fini+0xa>
 800b814:	4802      	ldr	r0, [pc, #8]	; (800b820 <register_fini+0x10>)
 800b816:	f000 b805 	b.w	800b824 <atexit>
 800b81a:	4770      	bx	lr
 800b81c:	00000000 	.word	0x00000000
 800b820:	0800c499 	.word	0x0800c499

0800b824 <atexit>:
 800b824:	2300      	movs	r3, #0
 800b826:	4601      	mov	r1, r0
 800b828:	461a      	mov	r2, r3
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 bada 	b.w	800cde4 <__register_exitproc>

0800b830 <quorem>:
 800b830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	6903      	ldr	r3, [r0, #16]
 800b836:	690c      	ldr	r4, [r1, #16]
 800b838:	42a3      	cmp	r3, r4
 800b83a:	4680      	mov	r8, r0
 800b83c:	f2c0 8082 	blt.w	800b944 <quorem+0x114>
 800b840:	3c01      	subs	r4, #1
 800b842:	f101 0714 	add.w	r7, r1, #20
 800b846:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b84a:	f100 0614 	add.w	r6, r0, #20
 800b84e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b852:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b856:	eb06 030c 	add.w	r3, r6, ip
 800b85a:	3501      	adds	r5, #1
 800b85c:	eb07 090c 	add.w	r9, r7, ip
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	fbb0 f5f5 	udiv	r5, r0, r5
 800b866:	b395      	cbz	r5, 800b8ce <quorem+0x9e>
 800b868:	f04f 0a00 	mov.w	sl, #0
 800b86c:	4638      	mov	r0, r7
 800b86e:	46b6      	mov	lr, r6
 800b870:	46d3      	mov	fp, sl
 800b872:	f850 2b04 	ldr.w	r2, [r0], #4
 800b876:	b293      	uxth	r3, r2
 800b878:	fb05 a303 	mla	r3, r5, r3, sl
 800b87c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b880:	b29b      	uxth	r3, r3
 800b882:	ebab 0303 	sub.w	r3, fp, r3
 800b886:	0c12      	lsrs	r2, r2, #16
 800b888:	f8de b000 	ldr.w	fp, [lr]
 800b88c:	fb05 a202 	mla	r2, r5, r2, sl
 800b890:	fa13 f38b 	uxtah	r3, r3, fp
 800b894:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b898:	fa1f fb82 	uxth.w	fp, r2
 800b89c:	f8de 2000 	ldr.w	r2, [lr]
 800b8a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b8a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8ae:	4581      	cmp	r9, r0
 800b8b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b8b4:	f84e 3b04 	str.w	r3, [lr], #4
 800b8b8:	d2db      	bcs.n	800b872 <quorem+0x42>
 800b8ba:	f856 300c 	ldr.w	r3, [r6, ip]
 800b8be:	b933      	cbnz	r3, 800b8ce <quorem+0x9e>
 800b8c0:	9b01      	ldr	r3, [sp, #4]
 800b8c2:	3b04      	subs	r3, #4
 800b8c4:	429e      	cmp	r6, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	d330      	bcc.n	800b92c <quorem+0xfc>
 800b8ca:	f8c8 4010 	str.w	r4, [r8, #16]
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	f001 f8fe 	bl	800cad0 <__mcmp>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	db25      	blt.n	800b924 <quorem+0xf4>
 800b8d8:	3501      	adds	r5, #1
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f04f 0c00 	mov.w	ip, #0
 800b8e0:	f857 2b04 	ldr.w	r2, [r7], #4
 800b8e4:	f8d0 e000 	ldr.w	lr, [r0]
 800b8e8:	b293      	uxth	r3, r2
 800b8ea:	ebac 0303 	sub.w	r3, ip, r3
 800b8ee:	0c12      	lsrs	r2, r2, #16
 800b8f0:	fa13 f38e 	uxtah	r3, r3, lr
 800b8f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b902:	45b9      	cmp	r9, r7
 800b904:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b908:	f840 3b04 	str.w	r3, [r0], #4
 800b90c:	d2e8      	bcs.n	800b8e0 <quorem+0xb0>
 800b90e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b912:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b916:	b92a      	cbnz	r2, 800b924 <quorem+0xf4>
 800b918:	3b04      	subs	r3, #4
 800b91a:	429e      	cmp	r6, r3
 800b91c:	461a      	mov	r2, r3
 800b91e:	d30b      	bcc.n	800b938 <quorem+0x108>
 800b920:	f8c8 4010 	str.w	r4, [r8, #16]
 800b924:	4628      	mov	r0, r5
 800b926:	b003      	add	sp, #12
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	3b04      	subs	r3, #4
 800b930:	2a00      	cmp	r2, #0
 800b932:	d1ca      	bne.n	800b8ca <quorem+0x9a>
 800b934:	3c01      	subs	r4, #1
 800b936:	e7c5      	b.n	800b8c4 <quorem+0x94>
 800b938:	6812      	ldr	r2, [r2, #0]
 800b93a:	3b04      	subs	r3, #4
 800b93c:	2a00      	cmp	r2, #0
 800b93e:	d1ef      	bne.n	800b920 <quorem+0xf0>
 800b940:	3c01      	subs	r4, #1
 800b942:	e7ea      	b.n	800b91a <quorem+0xea>
 800b944:	2000      	movs	r0, #0
 800b946:	e7ee      	b.n	800b926 <quorem+0xf6>

0800b948 <_dtoa_r>:
 800b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94c:	b097      	sub	sp, #92	; 0x5c
 800b94e:	ec57 6b10 	vmov	r6, r7, d0
 800b952:	9106      	str	r1, [sp, #24]
 800b954:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b956:	920b      	str	r2, [sp, #44]	; 0x2c
 800b958:	4604      	mov	r4, r0
 800b95a:	9312      	str	r3, [sp, #72]	; 0x48
 800b95c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b95e:	e9cd 6700 	strd	r6, r7, [sp]
 800b962:	b141      	cbz	r1, 800b976 <_dtoa_r+0x2e>
 800b964:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b966:	604a      	str	r2, [r1, #4]
 800b968:	2301      	movs	r3, #1
 800b96a:	4093      	lsls	r3, r2
 800b96c:	608b      	str	r3, [r1, #8]
 800b96e:	f000 feea 	bl	800c746 <_Bfree>
 800b972:	2300      	movs	r3, #0
 800b974:	6423      	str	r3, [r4, #64]	; 0x40
 800b976:	1e3b      	subs	r3, r7, #0
 800b978:	bfb9      	ittee	lt
 800b97a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b97e:	9301      	strlt	r3, [sp, #4]
 800b980:	2300      	movge	r3, #0
 800b982:	602b      	strge	r3, [r5, #0]
 800b984:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b988:	4baf      	ldr	r3, [pc, #700]	; (800bc48 <_dtoa_r+0x300>)
 800b98a:	bfbc      	itt	lt
 800b98c:	2201      	movlt	r2, #1
 800b98e:	602a      	strlt	r2, [r5, #0]
 800b990:	ea33 0308 	bics.w	r3, r3, r8
 800b994:	d116      	bne.n	800b9c4 <_dtoa_r+0x7c>
 800b996:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b998:	f242 730f 	movw	r3, #9999	; 0x270f
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	9b00      	ldr	r3, [sp, #0]
 800b9a0:	b923      	cbnz	r3, 800b9ac <_dtoa_r+0x64>
 800b9a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f000 8543 	beq.w	800c432 <_dtoa_r+0xaea>
 800b9ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bc5c <_dtoa_r+0x314>
 800b9b2:	b11b      	cbz	r3, 800b9bc <_dtoa_r+0x74>
 800b9b4:	f10b 0303 	add.w	r3, fp, #3
 800b9b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	4658      	mov	r0, fp
 800b9be:	b017      	add	sp, #92	; 0x5c
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c4:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	f7f5 f89a 	bl	8000b08 <__aeabi_dcmpeq>
 800b9d4:	4681      	mov	r9, r0
 800b9d6:	b160      	cbz	r0, 800b9f2 <_dtoa_r+0xaa>
 800b9d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9da:	2301      	movs	r3, #1
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 8522 	beq.w	800c42a <_dtoa_r+0xae2>
 800b9e6:	4b99      	ldr	r3, [pc, #612]	; (800bc4c <_dtoa_r+0x304>)
 800b9e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9ea:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	e7e4      	b.n	800b9bc <_dtoa_r+0x74>
 800b9f2:	aa14      	add	r2, sp, #80	; 0x50
 800b9f4:	a915      	add	r1, sp, #84	; 0x54
 800b9f6:	ec47 6b10 	vmov	d0, r6, r7
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f001 f8df 	bl	800cbbe <__d2b>
 800ba00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba04:	9004      	str	r0, [sp, #16]
 800ba06:	2d00      	cmp	r5, #0
 800ba08:	d07c      	beq.n	800bb04 <_dtoa_r+0x1bc>
 800ba0a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba0e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ba12:	46b2      	mov	sl, r6
 800ba14:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ba18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba1c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ba20:	2200      	movs	r2, #0
 800ba22:	4b8b      	ldr	r3, [pc, #556]	; (800bc50 <_dtoa_r+0x308>)
 800ba24:	4650      	mov	r0, sl
 800ba26:	4659      	mov	r1, fp
 800ba28:	f7f4 fc4e 	bl	80002c8 <__aeabi_dsub>
 800ba2c:	a380      	add	r3, pc, #512	; (adr r3, 800bc30 <_dtoa_r+0x2e8>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fe01 	bl	8000638 <__aeabi_dmul>
 800ba36:	a380      	add	r3, pc, #512	; (adr r3, 800bc38 <_dtoa_r+0x2f0>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f7f4 fc46 	bl	80002cc <__adddf3>
 800ba40:	4606      	mov	r6, r0
 800ba42:	4628      	mov	r0, r5
 800ba44:	460f      	mov	r7, r1
 800ba46:	f7f4 fd8d 	bl	8000564 <__aeabi_i2d>
 800ba4a:	a37d      	add	r3, pc, #500	; (adr r3, 800bc40 <_dtoa_r+0x2f8>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fdf2 	bl	8000638 <__aeabi_dmul>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	f7f4 fc36 	bl	80002cc <__adddf3>
 800ba60:	4606      	mov	r6, r0
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f5 f898 	bl	8000b98 <__aeabi_d2iz>
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4682      	mov	sl, r0
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f5 f853 	bl	8000b1c <__aeabi_dcmplt>
 800ba76:	b148      	cbz	r0, 800ba8c <_dtoa_r+0x144>
 800ba78:	4650      	mov	r0, sl
 800ba7a:	f7f4 fd73 	bl	8000564 <__aeabi_i2d>
 800ba7e:	4632      	mov	r2, r6
 800ba80:	463b      	mov	r3, r7
 800ba82:	f7f5 f841 	bl	8000b08 <__aeabi_dcmpeq>
 800ba86:	b908      	cbnz	r0, 800ba8c <_dtoa_r+0x144>
 800ba88:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba8c:	f1ba 0f16 	cmp.w	sl, #22
 800ba90:	d859      	bhi.n	800bb46 <_dtoa_r+0x1fe>
 800ba92:	4970      	ldr	r1, [pc, #448]	; (800bc54 <_dtoa_r+0x30c>)
 800ba94:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ba98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa0:	f7f5 f85a 	bl	8000b58 <__aeabi_dcmpgt>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d050      	beq.n	800bb4a <_dtoa_r+0x202>
 800baa8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800baac:	2300      	movs	r3, #0
 800baae:	930f      	str	r3, [sp, #60]	; 0x3c
 800bab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bab2:	1b5d      	subs	r5, r3, r5
 800bab4:	f1b5 0801 	subs.w	r8, r5, #1
 800bab8:	bf49      	itett	mi
 800baba:	f1c5 0301 	rsbmi	r3, r5, #1
 800babe:	2300      	movpl	r3, #0
 800bac0:	9305      	strmi	r3, [sp, #20]
 800bac2:	f04f 0800 	movmi.w	r8, #0
 800bac6:	bf58      	it	pl
 800bac8:	9305      	strpl	r3, [sp, #20]
 800baca:	f1ba 0f00 	cmp.w	sl, #0
 800bace:	db3e      	blt.n	800bb4e <_dtoa_r+0x206>
 800bad0:	2300      	movs	r3, #0
 800bad2:	44d0      	add	r8, sl
 800bad4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b09      	cmp	r3, #9
 800bade:	f200 808d 	bhi.w	800bbfc <_dtoa_r+0x2b4>
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	bfc4      	itt	gt
 800bae6:	3b04      	subgt	r3, #4
 800bae8:	9306      	strgt	r3, [sp, #24]
 800baea:	9b06      	ldr	r3, [sp, #24]
 800baec:	f1a3 0302 	sub.w	r3, r3, #2
 800baf0:	bfcc      	ite	gt
 800baf2:	2500      	movgt	r5, #0
 800baf4:	2501      	movle	r5, #1
 800baf6:	2b03      	cmp	r3, #3
 800baf8:	f200 808c 	bhi.w	800bc14 <_dtoa_r+0x2cc>
 800bafc:	e8df f003 	tbb	[pc, r3]
 800bb00:	6e317c7a 	.word	0x6e317c7a
 800bb04:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bb08:	441d      	add	r5, r3
 800bb0a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bb0e:	2820      	cmp	r0, #32
 800bb10:	dd13      	ble.n	800bb3a <_dtoa_r+0x1f2>
 800bb12:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bb16:	9b00      	ldr	r3, [sp, #0]
 800bb18:	fa08 f800 	lsl.w	r8, r8, r0
 800bb1c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bb20:	fa23 f000 	lsr.w	r0, r3, r0
 800bb24:	ea48 0000 	orr.w	r0, r8, r0
 800bb28:	f7f4 fd0c 	bl	8000544 <__aeabi_ui2d>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	4682      	mov	sl, r0
 800bb30:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bb34:	3d01      	subs	r5, #1
 800bb36:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb38:	e772      	b.n	800ba20 <_dtoa_r+0xd8>
 800bb3a:	9b00      	ldr	r3, [sp, #0]
 800bb3c:	f1c0 0020 	rsb	r0, r0, #32
 800bb40:	fa03 f000 	lsl.w	r0, r3, r0
 800bb44:	e7f0      	b.n	800bb28 <_dtoa_r+0x1e0>
 800bb46:	2301      	movs	r3, #1
 800bb48:	e7b1      	b.n	800baae <_dtoa_r+0x166>
 800bb4a:	900f      	str	r0, [sp, #60]	; 0x3c
 800bb4c:	e7b0      	b.n	800bab0 <_dtoa_r+0x168>
 800bb4e:	9b05      	ldr	r3, [sp, #20]
 800bb50:	eba3 030a 	sub.w	r3, r3, sl
 800bb54:	9305      	str	r3, [sp, #20]
 800bb56:	f1ca 0300 	rsb	r3, sl, #0
 800bb5a:	9307      	str	r3, [sp, #28]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	930e      	str	r3, [sp, #56]	; 0x38
 800bb60:	e7bb      	b.n	800bada <_dtoa_r+0x192>
 800bb62:	2301      	movs	r3, #1
 800bb64:	930a      	str	r3, [sp, #40]	; 0x28
 800bb66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dd56      	ble.n	800bc1a <_dtoa_r+0x2d2>
 800bb6c:	9302      	str	r3, [sp, #8]
 800bb6e:	4699      	mov	r9, r3
 800bb70:	2200      	movs	r2, #0
 800bb72:	6462      	str	r2, [r4, #68]	; 0x44
 800bb74:	2204      	movs	r2, #4
 800bb76:	f102 0014 	add.w	r0, r2, #20
 800bb7a:	4298      	cmp	r0, r3
 800bb7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bb7e:	d951      	bls.n	800bc24 <_dtoa_r+0x2dc>
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 fdbb 	bl	800c6fc <_Balloc>
 800bb86:	f1b9 0f0e 	cmp.w	r9, #14
 800bb8a:	4683      	mov	fp, r0
 800bb8c:	6420      	str	r0, [r4, #64]	; 0x40
 800bb8e:	f200 80e8 	bhi.w	800bd62 <_dtoa_r+0x41a>
 800bb92:	2d00      	cmp	r5, #0
 800bb94:	f000 80e5 	beq.w	800bd62 <_dtoa_r+0x41a>
 800bb98:	ed9d 7b00 	vldr	d7, [sp]
 800bb9c:	f1ba 0f00 	cmp.w	sl, #0
 800bba0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bba4:	dd76      	ble.n	800bc94 <_dtoa_r+0x34c>
 800bba6:	4a2b      	ldr	r2, [pc, #172]	; (800bc54 <_dtoa_r+0x30c>)
 800bba8:	f00a 030f 	and.w	r3, sl, #15
 800bbac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbb0:	ed93 7b00 	vldr	d7, [r3]
 800bbb4:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bbb8:	06f0      	lsls	r0, r6, #27
 800bbba:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bbbe:	d567      	bpl.n	800bc90 <_dtoa_r+0x348>
 800bbc0:	4b25      	ldr	r3, [pc, #148]	; (800bc58 <_dtoa_r+0x310>)
 800bbc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbca:	f7f4 fe5f 	bl	800088c <__aeabi_ddiv>
 800bbce:	e9cd 0100 	strd	r0, r1, [sp]
 800bbd2:	f006 060f 	and.w	r6, r6, #15
 800bbd6:	2503      	movs	r5, #3
 800bbd8:	4f1f      	ldr	r7, [pc, #124]	; (800bc58 <_dtoa_r+0x310>)
 800bbda:	e04e      	b.n	800bc7a <_dtoa_r+0x332>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	930a      	str	r3, [sp, #40]	; 0x28
 800bbe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbe2:	4453      	add	r3, sl
 800bbe4:	f103 0901 	add.w	r9, r3, #1
 800bbe8:	9302      	str	r3, [sp, #8]
 800bbea:	464b      	mov	r3, r9
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	bfb8      	it	lt
 800bbf0:	2301      	movlt	r3, #1
 800bbf2:	e7bd      	b.n	800bb70 <_dtoa_r+0x228>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e7b5      	b.n	800bb64 <_dtoa_r+0x21c>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e7f0      	b.n	800bbde <_dtoa_r+0x296>
 800bbfc:	2501      	movs	r5, #1
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9306      	str	r3, [sp, #24]
 800bc02:	950a      	str	r5, [sp, #40]	; 0x28
 800bc04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc08:	9302      	str	r3, [sp, #8]
 800bc0a:	4699      	mov	r9, r3
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2312      	movs	r3, #18
 800bc10:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc12:	e7ad      	b.n	800bb70 <_dtoa_r+0x228>
 800bc14:	2301      	movs	r3, #1
 800bc16:	930a      	str	r3, [sp, #40]	; 0x28
 800bc18:	e7f4      	b.n	800bc04 <_dtoa_r+0x2bc>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	9302      	str	r3, [sp, #8]
 800bc1e:	4699      	mov	r9, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	e7f5      	b.n	800bc10 <_dtoa_r+0x2c8>
 800bc24:	3101      	adds	r1, #1
 800bc26:	6461      	str	r1, [r4, #68]	; 0x44
 800bc28:	0052      	lsls	r2, r2, #1
 800bc2a:	e7a4      	b.n	800bb76 <_dtoa_r+0x22e>
 800bc2c:	f3af 8000 	nop.w
 800bc30:	636f4361 	.word	0x636f4361
 800bc34:	3fd287a7 	.word	0x3fd287a7
 800bc38:	8b60c8b3 	.word	0x8b60c8b3
 800bc3c:	3fc68a28 	.word	0x3fc68a28
 800bc40:	509f79fb 	.word	0x509f79fb
 800bc44:	3fd34413 	.word	0x3fd34413
 800bc48:	7ff00000 	.word	0x7ff00000
 800bc4c:	0808899b 	.word	0x0808899b
 800bc50:	3ff80000 	.word	0x3ff80000
 800bc54:	080889f8 	.word	0x080889f8
 800bc58:	080889d0 	.word	0x080889d0
 800bc5c:	080889c5 	.word	0x080889c5
 800bc60:	07f1      	lsls	r1, r6, #31
 800bc62:	d508      	bpl.n	800bc76 <_dtoa_r+0x32e>
 800bc64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc6c:	f7f4 fce4 	bl	8000638 <__aeabi_dmul>
 800bc70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc74:	3501      	adds	r5, #1
 800bc76:	1076      	asrs	r6, r6, #1
 800bc78:	3708      	adds	r7, #8
 800bc7a:	2e00      	cmp	r6, #0
 800bc7c:	d1f0      	bne.n	800bc60 <_dtoa_r+0x318>
 800bc7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc82:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc86:	f7f4 fe01 	bl	800088c <__aeabi_ddiv>
 800bc8a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc8e:	e01a      	b.n	800bcc6 <_dtoa_r+0x37e>
 800bc90:	2502      	movs	r5, #2
 800bc92:	e7a1      	b.n	800bbd8 <_dtoa_r+0x290>
 800bc94:	f000 80a0 	beq.w	800bdd8 <_dtoa_r+0x490>
 800bc98:	f1ca 0600 	rsb	r6, sl, #0
 800bc9c:	4b9f      	ldr	r3, [pc, #636]	; (800bf1c <_dtoa_r+0x5d4>)
 800bc9e:	4fa0      	ldr	r7, [pc, #640]	; (800bf20 <_dtoa_r+0x5d8>)
 800bca0:	f006 020f 	and.w	r2, r6, #15
 800bca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcb0:	f7f4 fcc2 	bl	8000638 <__aeabi_dmul>
 800bcb4:	e9cd 0100 	strd	r0, r1, [sp]
 800bcb8:	1136      	asrs	r6, r6, #4
 800bcba:	2300      	movs	r3, #0
 800bcbc:	2502      	movs	r5, #2
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	d17f      	bne.n	800bdc2 <_dtoa_r+0x47a>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e1      	bne.n	800bc8a <_dtoa_r+0x342>
 800bcc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 8087 	beq.w	800bddc <_dtoa_r+0x494>
 800bcce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	4b93      	ldr	r3, [pc, #588]	; (800bf24 <_dtoa_r+0x5dc>)
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4639      	mov	r1, r7
 800bcda:	f7f4 ff1f 	bl	8000b1c <__aeabi_dcmplt>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d07c      	beq.n	800bddc <_dtoa_r+0x494>
 800bce2:	f1b9 0f00 	cmp.w	r9, #0
 800bce6:	d079      	beq.n	800bddc <_dtoa_r+0x494>
 800bce8:	9b02      	ldr	r3, [sp, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dd35      	ble.n	800bd5a <_dtoa_r+0x412>
 800bcee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bcf2:	9308      	str	r3, [sp, #32]
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	4b8b      	ldr	r3, [pc, #556]	; (800bf28 <_dtoa_r+0x5e0>)
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7f4 fc9c 	bl	8000638 <__aeabi_dmul>
 800bd00:	e9cd 0100 	strd	r0, r1, [sp]
 800bd04:	9f02      	ldr	r7, [sp, #8]
 800bd06:	3501      	adds	r5, #1
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7f4 fc2b 	bl	8000564 <__aeabi_i2d>
 800bd0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd12:	f7f4 fc91 	bl	8000638 <__aeabi_dmul>
 800bd16:	2200      	movs	r2, #0
 800bd18:	4b84      	ldr	r3, [pc, #528]	; (800bf2c <_dtoa_r+0x5e4>)
 800bd1a:	f7f4 fad7 	bl	80002cc <__adddf3>
 800bd1e:	4605      	mov	r5, r0
 800bd20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	d15d      	bne.n	800bde4 <_dtoa_r+0x49c>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4b81      	ldr	r3, [pc, #516]	; (800bf30 <_dtoa_r+0x5e8>)
 800bd2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd30:	f7f4 faca 	bl	80002c8 <__aeabi_dsub>
 800bd34:	462a      	mov	r2, r5
 800bd36:	4633      	mov	r3, r6
 800bd38:	e9cd 0100 	strd	r0, r1, [sp]
 800bd3c:	f7f4 ff0c 	bl	8000b58 <__aeabi_dcmpgt>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	f040 8288 	bne.w	800c256 <_dtoa_r+0x90e>
 800bd46:	462a      	mov	r2, r5
 800bd48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd50:	f7f4 fee4 	bl	8000b1c <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f040 827c 	bne.w	800c252 <_dtoa_r+0x90a>
 800bd5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd5e:	e9cd 2300 	strd	r2, r3, [sp]
 800bd62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f2c0 8150 	blt.w	800c00a <_dtoa_r+0x6c2>
 800bd6a:	f1ba 0f0e 	cmp.w	sl, #14
 800bd6e:	f300 814c 	bgt.w	800c00a <_dtoa_r+0x6c2>
 800bd72:	4b6a      	ldr	r3, [pc, #424]	; (800bf1c <_dtoa_r+0x5d4>)
 800bd74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd78:	ed93 7b00 	vldr	d7, [r3]
 800bd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd84:	f280 80d8 	bge.w	800bf38 <_dtoa_r+0x5f0>
 800bd88:	f1b9 0f00 	cmp.w	r9, #0
 800bd8c:	f300 80d4 	bgt.w	800bf38 <_dtoa_r+0x5f0>
 800bd90:	f040 825e 	bne.w	800c250 <_dtoa_r+0x908>
 800bd94:	2200      	movs	r2, #0
 800bd96:	4b66      	ldr	r3, [pc, #408]	; (800bf30 <_dtoa_r+0x5e8>)
 800bd98:	ec51 0b17 	vmov	r0, r1, d7
 800bd9c:	f7f4 fc4c 	bl	8000638 <__aeabi_dmul>
 800bda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bda4:	f7f4 fece 	bl	8000b44 <__aeabi_dcmpge>
 800bda8:	464f      	mov	r7, r9
 800bdaa:	464e      	mov	r6, r9
 800bdac:	2800      	cmp	r0, #0
 800bdae:	f040 8234 	bne.w	800c21a <_dtoa_r+0x8d2>
 800bdb2:	2331      	movs	r3, #49	; 0x31
 800bdb4:	f10b 0501 	add.w	r5, fp, #1
 800bdb8:	f88b 3000 	strb.w	r3, [fp]
 800bdbc:	f10a 0a01 	add.w	sl, sl, #1
 800bdc0:	e22f      	b.n	800c222 <_dtoa_r+0x8da>
 800bdc2:	07f2      	lsls	r2, r6, #31
 800bdc4:	d505      	bpl.n	800bdd2 <_dtoa_r+0x48a>
 800bdc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdca:	f7f4 fc35 	bl	8000638 <__aeabi_dmul>
 800bdce:	3501      	adds	r5, #1
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	1076      	asrs	r6, r6, #1
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	e772      	b.n	800bcbe <_dtoa_r+0x376>
 800bdd8:	2502      	movs	r5, #2
 800bdda:	e774      	b.n	800bcc6 <_dtoa_r+0x37e>
 800bddc:	f8cd a020 	str.w	sl, [sp, #32]
 800bde0:	464f      	mov	r7, r9
 800bde2:	e791      	b.n	800bd08 <_dtoa_r+0x3c0>
 800bde4:	4b4d      	ldr	r3, [pc, #308]	; (800bf1c <_dtoa_r+0x5d4>)
 800bde6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d047      	beq.n	800be84 <_dtoa_r+0x53c>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	494e      	ldr	r1, [pc, #312]	; (800bf34 <_dtoa_r+0x5ec>)
 800bdfc:	f7f4 fd46 	bl	800088c <__aeabi_ddiv>
 800be00:	462a      	mov	r2, r5
 800be02:	4633      	mov	r3, r6
 800be04:	f7f4 fa60 	bl	80002c8 <__aeabi_dsub>
 800be08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be0c:	465d      	mov	r5, fp
 800be0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be12:	f7f4 fec1 	bl	8000b98 <__aeabi_d2iz>
 800be16:	4606      	mov	r6, r0
 800be18:	f7f4 fba4 	bl	8000564 <__aeabi_i2d>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be24:	f7f4 fa50 	bl	80002c8 <__aeabi_dsub>
 800be28:	3630      	adds	r6, #48	; 0x30
 800be2a:	f805 6b01 	strb.w	r6, [r5], #1
 800be2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be32:	e9cd 0100 	strd	r0, r1, [sp]
 800be36:	f7f4 fe71 	bl	8000b1c <__aeabi_dcmplt>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d163      	bne.n	800bf06 <_dtoa_r+0x5be>
 800be3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be42:	2000      	movs	r0, #0
 800be44:	4937      	ldr	r1, [pc, #220]	; (800bf24 <_dtoa_r+0x5dc>)
 800be46:	f7f4 fa3f 	bl	80002c8 <__aeabi_dsub>
 800be4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be4e:	f7f4 fe65 	bl	8000b1c <__aeabi_dcmplt>
 800be52:	2800      	cmp	r0, #0
 800be54:	f040 80b7 	bne.w	800bfc6 <_dtoa_r+0x67e>
 800be58:	eba5 030b 	sub.w	r3, r5, fp
 800be5c:	429f      	cmp	r7, r3
 800be5e:	f77f af7c 	ble.w	800bd5a <_dtoa_r+0x412>
 800be62:	2200      	movs	r2, #0
 800be64:	4b30      	ldr	r3, [pc, #192]	; (800bf28 <_dtoa_r+0x5e0>)
 800be66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be6a:	f7f4 fbe5 	bl	8000638 <__aeabi_dmul>
 800be6e:	2200      	movs	r2, #0
 800be70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be74:	4b2c      	ldr	r3, [pc, #176]	; (800bf28 <_dtoa_r+0x5e0>)
 800be76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be7a:	f7f4 fbdd 	bl	8000638 <__aeabi_dmul>
 800be7e:	e9cd 0100 	strd	r0, r1, [sp]
 800be82:	e7c4      	b.n	800be0e <_dtoa_r+0x4c6>
 800be84:	462a      	mov	r2, r5
 800be86:	4633      	mov	r3, r6
 800be88:	f7f4 fbd6 	bl	8000638 <__aeabi_dmul>
 800be8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be90:	eb0b 0507 	add.w	r5, fp, r7
 800be94:	465e      	mov	r6, fp
 800be96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be9a:	f7f4 fe7d 	bl	8000b98 <__aeabi_d2iz>
 800be9e:	4607      	mov	r7, r0
 800bea0:	f7f4 fb60 	bl	8000564 <__aeabi_i2d>
 800bea4:	3730      	adds	r7, #48	; 0x30
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beae:	f7f4 fa0b 	bl	80002c8 <__aeabi_dsub>
 800beb2:	f806 7b01 	strb.w	r7, [r6], #1
 800beb6:	42ae      	cmp	r6, r5
 800beb8:	e9cd 0100 	strd	r0, r1, [sp]
 800bebc:	f04f 0200 	mov.w	r2, #0
 800bec0:	d126      	bne.n	800bf10 <_dtoa_r+0x5c8>
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <_dtoa_r+0x5ec>)
 800bec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bec8:	f7f4 fa00 	bl	80002cc <__adddf3>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bed4:	f7f4 fe40 	bl	8000b58 <__aeabi_dcmpgt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	d174      	bne.n	800bfc6 <_dtoa_r+0x67e>
 800bedc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bee0:	2000      	movs	r0, #0
 800bee2:	4914      	ldr	r1, [pc, #80]	; (800bf34 <_dtoa_r+0x5ec>)
 800bee4:	f7f4 f9f0 	bl	80002c8 <__aeabi_dsub>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bef0:	f7f4 fe14 	bl	8000b1c <__aeabi_dcmplt>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	f43f af30 	beq.w	800bd5a <_dtoa_r+0x412>
 800befa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800befe:	2b30      	cmp	r3, #48	; 0x30
 800bf00:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bf04:	d002      	beq.n	800bf0c <_dtoa_r+0x5c4>
 800bf06:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bf0a:	e04a      	b.n	800bfa2 <_dtoa_r+0x65a>
 800bf0c:	4615      	mov	r5, r2
 800bf0e:	e7f4      	b.n	800befa <_dtoa_r+0x5b2>
 800bf10:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <_dtoa_r+0x5e0>)
 800bf12:	f7f4 fb91 	bl	8000638 <__aeabi_dmul>
 800bf16:	e9cd 0100 	strd	r0, r1, [sp]
 800bf1a:	e7bc      	b.n	800be96 <_dtoa_r+0x54e>
 800bf1c:	080889f8 	.word	0x080889f8
 800bf20:	080889d0 	.word	0x080889d0
 800bf24:	3ff00000 	.word	0x3ff00000
 800bf28:	40240000 	.word	0x40240000
 800bf2c:	401c0000 	.word	0x401c0000
 800bf30:	40140000 	.word	0x40140000
 800bf34:	3fe00000 	.word	0x3fe00000
 800bf38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf3c:	465d      	mov	r5, fp
 800bf3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf42:	4630      	mov	r0, r6
 800bf44:	4639      	mov	r1, r7
 800bf46:	f7f4 fca1 	bl	800088c <__aeabi_ddiv>
 800bf4a:	f7f4 fe25 	bl	8000b98 <__aeabi_d2iz>
 800bf4e:	4680      	mov	r8, r0
 800bf50:	f7f4 fb08 	bl	8000564 <__aeabi_i2d>
 800bf54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf58:	f7f4 fb6e 	bl	8000638 <__aeabi_dmul>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bf68:	f7f4 f9ae 	bl	80002c8 <__aeabi_dsub>
 800bf6c:	f805 6b01 	strb.w	r6, [r5], #1
 800bf70:	eba5 060b 	sub.w	r6, r5, fp
 800bf74:	45b1      	cmp	r9, r6
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	d139      	bne.n	800bff0 <_dtoa_r+0x6a8>
 800bf7c:	f7f4 f9a6 	bl	80002cc <__adddf3>
 800bf80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	f7f4 fde6 	bl	8000b58 <__aeabi_dcmpgt>
 800bf8c:	b9c8      	cbnz	r0, 800bfc2 <_dtoa_r+0x67a>
 800bf8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf92:	4630      	mov	r0, r6
 800bf94:	4639      	mov	r1, r7
 800bf96:	f7f4 fdb7 	bl	8000b08 <__aeabi_dcmpeq>
 800bf9a:	b110      	cbz	r0, 800bfa2 <_dtoa_r+0x65a>
 800bf9c:	f018 0f01 	tst.w	r8, #1
 800bfa0:	d10f      	bne.n	800bfc2 <_dtoa_r+0x67a>
 800bfa2:	9904      	ldr	r1, [sp, #16]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f000 fbce 	bl	800c746 <_Bfree>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfae:	702b      	strb	r3, [r5, #0]
 800bfb0:	f10a 0301 	add.w	r3, sl, #1
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f43f acff 	beq.w	800b9bc <_dtoa_r+0x74>
 800bfbe:	601d      	str	r5, [r3, #0]
 800bfc0:	e4fc      	b.n	800b9bc <_dtoa_r+0x74>
 800bfc2:	f8cd a020 	str.w	sl, [sp, #32]
 800bfc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bfca:	2a39      	cmp	r2, #57	; 0x39
 800bfcc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bfd0:	d108      	bne.n	800bfe4 <_dtoa_r+0x69c>
 800bfd2:	459b      	cmp	fp, r3
 800bfd4:	d10a      	bne.n	800bfec <_dtoa_r+0x6a4>
 800bfd6:	9b08      	ldr	r3, [sp, #32]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	9308      	str	r3, [sp, #32]
 800bfdc:	2330      	movs	r3, #48	; 0x30
 800bfde:	f88b 3000 	strb.w	r3, [fp]
 800bfe2:	465b      	mov	r3, fp
 800bfe4:	781a      	ldrb	r2, [r3, #0]
 800bfe6:	3201      	adds	r2, #1
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	e78c      	b.n	800bf06 <_dtoa_r+0x5be>
 800bfec:	461d      	mov	r5, r3
 800bfee:	e7ea      	b.n	800bfc6 <_dtoa_r+0x67e>
 800bff0:	2200      	movs	r2, #0
 800bff2:	4b9b      	ldr	r3, [pc, #620]	; (800c260 <_dtoa_r+0x918>)
 800bff4:	f7f4 fb20 	bl	8000638 <__aeabi_dmul>
 800bff8:	2200      	movs	r2, #0
 800bffa:	2300      	movs	r3, #0
 800bffc:	4606      	mov	r6, r0
 800bffe:	460f      	mov	r7, r1
 800c000:	f7f4 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 800c004:	2800      	cmp	r0, #0
 800c006:	d09a      	beq.n	800bf3e <_dtoa_r+0x5f6>
 800c008:	e7cb      	b.n	800bfa2 <_dtoa_r+0x65a>
 800c00a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c00c:	2a00      	cmp	r2, #0
 800c00e:	f000 808b 	beq.w	800c128 <_dtoa_r+0x7e0>
 800c012:	9a06      	ldr	r2, [sp, #24]
 800c014:	2a01      	cmp	r2, #1
 800c016:	dc6e      	bgt.n	800c0f6 <_dtoa_r+0x7ae>
 800c018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	d067      	beq.n	800c0ee <_dtoa_r+0x7a6>
 800c01e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c022:	9f07      	ldr	r7, [sp, #28]
 800c024:	9d05      	ldr	r5, [sp, #20]
 800c026:	9a05      	ldr	r2, [sp, #20]
 800c028:	2101      	movs	r1, #1
 800c02a:	441a      	add	r2, r3
 800c02c:	4620      	mov	r0, r4
 800c02e:	9205      	str	r2, [sp, #20]
 800c030:	4498      	add	r8, r3
 800c032:	f000 fc1a 	bl	800c86a <__i2b>
 800c036:	4606      	mov	r6, r0
 800c038:	2d00      	cmp	r5, #0
 800c03a:	dd0c      	ble.n	800c056 <_dtoa_r+0x70e>
 800c03c:	f1b8 0f00 	cmp.w	r8, #0
 800c040:	dd09      	ble.n	800c056 <_dtoa_r+0x70e>
 800c042:	4545      	cmp	r5, r8
 800c044:	9a05      	ldr	r2, [sp, #20]
 800c046:	462b      	mov	r3, r5
 800c048:	bfa8      	it	ge
 800c04a:	4643      	movge	r3, r8
 800c04c:	1ad2      	subs	r2, r2, r3
 800c04e:	9205      	str	r2, [sp, #20]
 800c050:	1aed      	subs	r5, r5, r3
 800c052:	eba8 0803 	sub.w	r8, r8, r3
 800c056:	9b07      	ldr	r3, [sp, #28]
 800c058:	b1eb      	cbz	r3, 800c096 <_dtoa_r+0x74e>
 800c05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d067      	beq.n	800c130 <_dtoa_r+0x7e8>
 800c060:	b18f      	cbz	r7, 800c086 <_dtoa_r+0x73e>
 800c062:	4631      	mov	r1, r6
 800c064:	463a      	mov	r2, r7
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fc9e 	bl	800c9a8 <__pow5mult>
 800c06c:	9a04      	ldr	r2, [sp, #16]
 800c06e:	4601      	mov	r1, r0
 800c070:	4606      	mov	r6, r0
 800c072:	4620      	mov	r0, r4
 800c074:	f000 fc02 	bl	800c87c <__multiply>
 800c078:	9904      	ldr	r1, [sp, #16]
 800c07a:	9008      	str	r0, [sp, #32]
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fb62 	bl	800c746 <_Bfree>
 800c082:	9b08      	ldr	r3, [sp, #32]
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	9b07      	ldr	r3, [sp, #28]
 800c088:	1bda      	subs	r2, r3, r7
 800c08a:	d004      	beq.n	800c096 <_dtoa_r+0x74e>
 800c08c:	9904      	ldr	r1, [sp, #16]
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fc8a 	bl	800c9a8 <__pow5mult>
 800c094:	9004      	str	r0, [sp, #16]
 800c096:	2101      	movs	r1, #1
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 fbe6 	bl	800c86a <__i2b>
 800c09e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 81cf 	beq.w	800c446 <_dtoa_r+0xafe>
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fc7b 	bl	800c9a8 <__pow5mult>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	dc40      	bgt.n	800c13c <_dtoa_r+0x7f4>
 800c0ba:	9b00      	ldr	r3, [sp, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d139      	bne.n	800c134 <_dtoa_r+0x7ec>
 800c0c0:	9b01      	ldr	r3, [sp, #4]
 800c0c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d136      	bne.n	800c138 <_dtoa_r+0x7f0>
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0d0:	0d1b      	lsrs	r3, r3, #20
 800c0d2:	051b      	lsls	r3, r3, #20
 800c0d4:	b12b      	cbz	r3, 800c0e2 <_dtoa_r+0x79a>
 800c0d6:	9b05      	ldr	r3, [sp, #20]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	9305      	str	r3, [sp, #20]
 800c0dc:	f108 0801 	add.w	r8, r8, #1
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	9307      	str	r3, [sp, #28]
 800c0e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d12a      	bne.n	800c140 <_dtoa_r+0x7f8>
 800c0ea:	2001      	movs	r0, #1
 800c0ec:	e030      	b.n	800c150 <_dtoa_r+0x808>
 800c0ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0f4:	e795      	b.n	800c022 <_dtoa_r+0x6da>
 800c0f6:	9b07      	ldr	r3, [sp, #28]
 800c0f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c0fc:	42bb      	cmp	r3, r7
 800c0fe:	bfbf      	itttt	lt
 800c100:	9b07      	ldrlt	r3, [sp, #28]
 800c102:	9707      	strlt	r7, [sp, #28]
 800c104:	1afa      	sublt	r2, r7, r3
 800c106:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c108:	bfbb      	ittet	lt
 800c10a:	189b      	addlt	r3, r3, r2
 800c10c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c10e:	1bdf      	subge	r7, r3, r7
 800c110:	2700      	movlt	r7, #0
 800c112:	f1b9 0f00 	cmp.w	r9, #0
 800c116:	bfb5      	itete	lt
 800c118:	9b05      	ldrlt	r3, [sp, #20]
 800c11a:	9d05      	ldrge	r5, [sp, #20]
 800c11c:	eba3 0509 	sublt.w	r5, r3, r9
 800c120:	464b      	movge	r3, r9
 800c122:	bfb8      	it	lt
 800c124:	2300      	movlt	r3, #0
 800c126:	e77e      	b.n	800c026 <_dtoa_r+0x6de>
 800c128:	9f07      	ldr	r7, [sp, #28]
 800c12a:	9d05      	ldr	r5, [sp, #20]
 800c12c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c12e:	e783      	b.n	800c038 <_dtoa_r+0x6f0>
 800c130:	9a07      	ldr	r2, [sp, #28]
 800c132:	e7ab      	b.n	800c08c <_dtoa_r+0x744>
 800c134:	2300      	movs	r3, #0
 800c136:	e7d4      	b.n	800c0e2 <_dtoa_r+0x79a>
 800c138:	9b00      	ldr	r3, [sp, #0]
 800c13a:	e7d2      	b.n	800c0e2 <_dtoa_r+0x79a>
 800c13c:	2300      	movs	r3, #0
 800c13e:	9307      	str	r3, [sp, #28]
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c146:	6918      	ldr	r0, [r3, #16]
 800c148:	f000 fb41 	bl	800c7ce <__hi0bits>
 800c14c:	f1c0 0020 	rsb	r0, r0, #32
 800c150:	4440      	add	r0, r8
 800c152:	f010 001f 	ands.w	r0, r0, #31
 800c156:	d047      	beq.n	800c1e8 <_dtoa_r+0x8a0>
 800c158:	f1c0 0320 	rsb	r3, r0, #32
 800c15c:	2b04      	cmp	r3, #4
 800c15e:	dd3b      	ble.n	800c1d8 <_dtoa_r+0x890>
 800c160:	9b05      	ldr	r3, [sp, #20]
 800c162:	f1c0 001c 	rsb	r0, r0, #28
 800c166:	4403      	add	r3, r0
 800c168:	9305      	str	r3, [sp, #20]
 800c16a:	4405      	add	r5, r0
 800c16c:	4480      	add	r8, r0
 800c16e:	9b05      	ldr	r3, [sp, #20]
 800c170:	2b00      	cmp	r3, #0
 800c172:	dd05      	ble.n	800c180 <_dtoa_r+0x838>
 800c174:	461a      	mov	r2, r3
 800c176:	9904      	ldr	r1, [sp, #16]
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fc55 	bl	800ca28 <__lshift>
 800c17e:	9004      	str	r0, [sp, #16]
 800c180:	f1b8 0f00 	cmp.w	r8, #0
 800c184:	dd05      	ble.n	800c192 <_dtoa_r+0x84a>
 800c186:	4639      	mov	r1, r7
 800c188:	4642      	mov	r2, r8
 800c18a:	4620      	mov	r0, r4
 800c18c:	f000 fc4c 	bl	800ca28 <__lshift>
 800c190:	4607      	mov	r7, r0
 800c192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c194:	b353      	cbz	r3, 800c1ec <_dtoa_r+0x8a4>
 800c196:	4639      	mov	r1, r7
 800c198:	9804      	ldr	r0, [sp, #16]
 800c19a:	f000 fc99 	bl	800cad0 <__mcmp>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	da24      	bge.n	800c1ec <_dtoa_r+0x8a4>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	9904      	ldr	r1, [sp, #16]
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 fad5 	bl	800c758 <__multadd>
 800c1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b0:	9004      	str	r0, [sp, #16]
 800c1b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f000 814c 	beq.w	800c454 <_dtoa_r+0xb0c>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4631      	mov	r1, r6
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 fac8 	bl	800c758 <__multadd>
 800c1c8:	9b02      	ldr	r3, [sp, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	dc4f      	bgt.n	800c270 <_dtoa_r+0x928>
 800c1d0:	9b06      	ldr	r3, [sp, #24]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	dd4c      	ble.n	800c270 <_dtoa_r+0x928>
 800c1d6:	e011      	b.n	800c1fc <_dtoa_r+0x8b4>
 800c1d8:	d0c9      	beq.n	800c16e <_dtoa_r+0x826>
 800c1da:	9a05      	ldr	r2, [sp, #20]
 800c1dc:	331c      	adds	r3, #28
 800c1de:	441a      	add	r2, r3
 800c1e0:	9205      	str	r2, [sp, #20]
 800c1e2:	441d      	add	r5, r3
 800c1e4:	4498      	add	r8, r3
 800c1e6:	e7c2      	b.n	800c16e <_dtoa_r+0x826>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	e7f6      	b.n	800c1da <_dtoa_r+0x892>
 800c1ec:	f1b9 0f00 	cmp.w	r9, #0
 800c1f0:	dc38      	bgt.n	800c264 <_dtoa_r+0x91c>
 800c1f2:	9b06      	ldr	r3, [sp, #24]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	dd35      	ble.n	800c264 <_dtoa_r+0x91c>
 800c1f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1fc:	9b02      	ldr	r3, [sp, #8]
 800c1fe:	b963      	cbnz	r3, 800c21a <_dtoa_r+0x8d2>
 800c200:	4639      	mov	r1, r7
 800c202:	2205      	movs	r2, #5
 800c204:	4620      	mov	r0, r4
 800c206:	f000 faa7 	bl	800c758 <__multadd>
 800c20a:	4601      	mov	r1, r0
 800c20c:	4607      	mov	r7, r0
 800c20e:	9804      	ldr	r0, [sp, #16]
 800c210:	f000 fc5e 	bl	800cad0 <__mcmp>
 800c214:	2800      	cmp	r0, #0
 800c216:	f73f adcc 	bgt.w	800bdb2 <_dtoa_r+0x46a>
 800c21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c21c:	465d      	mov	r5, fp
 800c21e:	ea6f 0a03 	mvn.w	sl, r3
 800c222:	f04f 0900 	mov.w	r9, #0
 800c226:	4639      	mov	r1, r7
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fa8c 	bl	800c746 <_Bfree>
 800c22e:	2e00      	cmp	r6, #0
 800c230:	f43f aeb7 	beq.w	800bfa2 <_dtoa_r+0x65a>
 800c234:	f1b9 0f00 	cmp.w	r9, #0
 800c238:	d005      	beq.n	800c246 <_dtoa_r+0x8fe>
 800c23a:	45b1      	cmp	r9, r6
 800c23c:	d003      	beq.n	800c246 <_dtoa_r+0x8fe>
 800c23e:	4649      	mov	r1, r9
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fa80 	bl	800c746 <_Bfree>
 800c246:	4631      	mov	r1, r6
 800c248:	4620      	mov	r0, r4
 800c24a:	f000 fa7c 	bl	800c746 <_Bfree>
 800c24e:	e6a8      	b.n	800bfa2 <_dtoa_r+0x65a>
 800c250:	2700      	movs	r7, #0
 800c252:	463e      	mov	r6, r7
 800c254:	e7e1      	b.n	800c21a <_dtoa_r+0x8d2>
 800c256:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c25a:	463e      	mov	r6, r7
 800c25c:	e5a9      	b.n	800bdb2 <_dtoa_r+0x46a>
 800c25e:	bf00      	nop
 800c260:	40240000 	.word	0x40240000
 800c264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c266:	f8cd 9008 	str.w	r9, [sp, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 80f9 	beq.w	800c462 <_dtoa_r+0xb1a>
 800c270:	2d00      	cmp	r5, #0
 800c272:	dd05      	ble.n	800c280 <_dtoa_r+0x938>
 800c274:	4631      	mov	r1, r6
 800c276:	462a      	mov	r2, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 fbd5 	bl	800ca28 <__lshift>
 800c27e:	4606      	mov	r6, r0
 800c280:	9b07      	ldr	r3, [sp, #28]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d04c      	beq.n	800c320 <_dtoa_r+0x9d8>
 800c286:	6871      	ldr	r1, [r6, #4]
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 fa37 	bl	800c6fc <_Balloc>
 800c28e:	6932      	ldr	r2, [r6, #16]
 800c290:	3202      	adds	r2, #2
 800c292:	4605      	mov	r5, r0
 800c294:	0092      	lsls	r2, r2, #2
 800c296:	f106 010c 	add.w	r1, r6, #12
 800c29a:	300c      	adds	r0, #12
 800c29c:	f7fd fe7c 	bl	8009f98 <memcpy>
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 fbbf 	bl	800ca28 <__lshift>
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	f8cd b014 	str.w	fp, [sp, #20]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	46b1      	mov	r9, r6
 800c2b6:	9307      	str	r3, [sp, #28]
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	9804      	ldr	r0, [sp, #16]
 800c2be:	f7ff fab7 	bl	800b830 <quorem>
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c2ca:	9804      	ldr	r0, [sp, #16]
 800c2cc:	f000 fc00 	bl	800cad0 <__mcmp>
 800c2d0:	4632      	mov	r2, r6
 800c2d2:	9000      	str	r0, [sp, #0]
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 fc14 	bl	800cb04 <__mdiff>
 800c2dc:	68c3      	ldr	r3, [r0, #12]
 800c2de:	4602      	mov	r2, r0
 800c2e0:	bb03      	cbnz	r3, 800c324 <_dtoa_r+0x9dc>
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	9008      	str	r0, [sp, #32]
 800c2e6:	9804      	ldr	r0, [sp, #16]
 800c2e8:	f000 fbf2 	bl	800cad0 <__mcmp>
 800c2ec:	9a08      	ldr	r2, [sp, #32]
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	9308      	str	r3, [sp, #32]
 800c2f6:	f000 fa26 	bl	800c746 <_Bfree>
 800c2fa:	9b08      	ldr	r3, [sp, #32]
 800c2fc:	b9a3      	cbnz	r3, 800c328 <_dtoa_r+0x9e0>
 800c2fe:	9a06      	ldr	r2, [sp, #24]
 800c300:	b992      	cbnz	r2, 800c328 <_dtoa_r+0x9e0>
 800c302:	9a07      	ldr	r2, [sp, #28]
 800c304:	b982      	cbnz	r2, 800c328 <_dtoa_r+0x9e0>
 800c306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c30a:	d029      	beq.n	800c360 <_dtoa_r+0xa18>
 800c30c:	9b00      	ldr	r3, [sp, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dd01      	ble.n	800c316 <_dtoa_r+0x9ce>
 800c312:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	1c5d      	adds	r5, r3, #1
 800c31a:	f883 8000 	strb.w	r8, [r3]
 800c31e:	e782      	b.n	800c226 <_dtoa_r+0x8de>
 800c320:	4630      	mov	r0, r6
 800c322:	e7c2      	b.n	800c2aa <_dtoa_r+0x962>
 800c324:	2301      	movs	r3, #1
 800c326:	e7e3      	b.n	800c2f0 <_dtoa_r+0x9a8>
 800c328:	9a00      	ldr	r2, [sp, #0]
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	db04      	blt.n	800c338 <_dtoa_r+0x9f0>
 800c32e:	d125      	bne.n	800c37c <_dtoa_r+0xa34>
 800c330:	9a06      	ldr	r2, [sp, #24]
 800c332:	bb1a      	cbnz	r2, 800c37c <_dtoa_r+0xa34>
 800c334:	9a07      	ldr	r2, [sp, #28]
 800c336:	bb0a      	cbnz	r2, 800c37c <_dtoa_r+0xa34>
 800c338:	2b00      	cmp	r3, #0
 800c33a:	ddec      	ble.n	800c316 <_dtoa_r+0x9ce>
 800c33c:	2201      	movs	r2, #1
 800c33e:	9904      	ldr	r1, [sp, #16]
 800c340:	4620      	mov	r0, r4
 800c342:	f000 fb71 	bl	800ca28 <__lshift>
 800c346:	4639      	mov	r1, r7
 800c348:	9004      	str	r0, [sp, #16]
 800c34a:	f000 fbc1 	bl	800cad0 <__mcmp>
 800c34e:	2800      	cmp	r0, #0
 800c350:	dc03      	bgt.n	800c35a <_dtoa_r+0xa12>
 800c352:	d1e0      	bne.n	800c316 <_dtoa_r+0x9ce>
 800c354:	f018 0f01 	tst.w	r8, #1
 800c358:	d0dd      	beq.n	800c316 <_dtoa_r+0x9ce>
 800c35a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c35e:	d1d8      	bne.n	800c312 <_dtoa_r+0x9ca>
 800c360:	9b05      	ldr	r3, [sp, #20]
 800c362:	9a05      	ldr	r2, [sp, #20]
 800c364:	1c5d      	adds	r5, r3, #1
 800c366:	2339      	movs	r3, #57	; 0x39
 800c368:	7013      	strb	r3, [r2, #0]
 800c36a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c36e:	2b39      	cmp	r3, #57	; 0x39
 800c370:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c374:	d04f      	beq.n	800c416 <_dtoa_r+0xace>
 800c376:	3301      	adds	r3, #1
 800c378:	7013      	strb	r3, [r2, #0]
 800c37a:	e754      	b.n	800c226 <_dtoa_r+0x8de>
 800c37c:	9a05      	ldr	r2, [sp, #20]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f102 0501 	add.w	r5, r2, #1
 800c384:	dd06      	ble.n	800c394 <_dtoa_r+0xa4c>
 800c386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c38a:	d0e9      	beq.n	800c360 <_dtoa_r+0xa18>
 800c38c:	f108 0801 	add.w	r8, r8, #1
 800c390:	9b05      	ldr	r3, [sp, #20]
 800c392:	e7c2      	b.n	800c31a <_dtoa_r+0x9d2>
 800c394:	9a02      	ldr	r2, [sp, #8]
 800c396:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c39a:	eba5 030b 	sub.w	r3, r5, fp
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d021      	beq.n	800c3e6 <_dtoa_r+0xa9e>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	220a      	movs	r2, #10
 800c3a6:	9904      	ldr	r1, [sp, #16]
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 f9d5 	bl	800c758 <__multadd>
 800c3ae:	45b1      	cmp	r9, r6
 800c3b0:	9004      	str	r0, [sp, #16]
 800c3b2:	f04f 0300 	mov.w	r3, #0
 800c3b6:	f04f 020a 	mov.w	r2, #10
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4620      	mov	r0, r4
 800c3be:	d105      	bne.n	800c3cc <_dtoa_r+0xa84>
 800c3c0:	f000 f9ca 	bl	800c758 <__multadd>
 800c3c4:	4681      	mov	r9, r0
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	9505      	str	r5, [sp, #20]
 800c3ca:	e776      	b.n	800c2ba <_dtoa_r+0x972>
 800c3cc:	f000 f9c4 	bl	800c758 <__multadd>
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4681      	mov	r9, r0
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	220a      	movs	r2, #10
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f000 f9bd 	bl	800c758 <__multadd>
 800c3de:	4606      	mov	r6, r0
 800c3e0:	e7f2      	b.n	800c3c8 <_dtoa_r+0xa80>
 800c3e2:	f04f 0900 	mov.w	r9, #0
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	9904      	ldr	r1, [sp, #16]
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f000 fb1c 	bl	800ca28 <__lshift>
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	9004      	str	r0, [sp, #16]
 800c3f4:	f000 fb6c 	bl	800cad0 <__mcmp>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	dcb6      	bgt.n	800c36a <_dtoa_r+0xa22>
 800c3fc:	d102      	bne.n	800c404 <_dtoa_r+0xabc>
 800c3fe:	f018 0f01 	tst.w	r8, #1
 800c402:	d1b2      	bne.n	800c36a <_dtoa_r+0xa22>
 800c404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c408:	2b30      	cmp	r3, #48	; 0x30
 800c40a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c40e:	f47f af0a 	bne.w	800c226 <_dtoa_r+0x8de>
 800c412:	4615      	mov	r5, r2
 800c414:	e7f6      	b.n	800c404 <_dtoa_r+0xabc>
 800c416:	4593      	cmp	fp, r2
 800c418:	d105      	bne.n	800c426 <_dtoa_r+0xade>
 800c41a:	2331      	movs	r3, #49	; 0x31
 800c41c:	f10a 0a01 	add.w	sl, sl, #1
 800c420:	f88b 3000 	strb.w	r3, [fp]
 800c424:	e6ff      	b.n	800c226 <_dtoa_r+0x8de>
 800c426:	4615      	mov	r5, r2
 800c428:	e79f      	b.n	800c36a <_dtoa_r+0xa22>
 800c42a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c490 <_dtoa_r+0xb48>
 800c42e:	f7ff bac5 	b.w	800b9bc <_dtoa_r+0x74>
 800c432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c434:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800c494 <_dtoa_r+0xb4c>
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f43f aabf 	beq.w	800b9bc <_dtoa_r+0x74>
 800c43e:	f10b 0308 	add.w	r3, fp, #8
 800c442:	f7ff bab9 	b.w	800b9b8 <_dtoa_r+0x70>
 800c446:	9b06      	ldr	r3, [sp, #24]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	f77f ae36 	ble.w	800c0ba <_dtoa_r+0x772>
 800c44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c450:	9307      	str	r3, [sp, #28]
 800c452:	e64a      	b.n	800c0ea <_dtoa_r+0x7a2>
 800c454:	9b02      	ldr	r3, [sp, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	dc03      	bgt.n	800c462 <_dtoa_r+0xb1a>
 800c45a:	9b06      	ldr	r3, [sp, #24]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	f73f aecd 	bgt.w	800c1fc <_dtoa_r+0x8b4>
 800c462:	465d      	mov	r5, fp
 800c464:	4639      	mov	r1, r7
 800c466:	9804      	ldr	r0, [sp, #16]
 800c468:	f7ff f9e2 	bl	800b830 <quorem>
 800c46c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c470:	f805 8b01 	strb.w	r8, [r5], #1
 800c474:	9a02      	ldr	r2, [sp, #8]
 800c476:	eba5 030b 	sub.w	r3, r5, fp
 800c47a:	429a      	cmp	r2, r3
 800c47c:	ddb1      	ble.n	800c3e2 <_dtoa_r+0xa9a>
 800c47e:	2300      	movs	r3, #0
 800c480:	220a      	movs	r2, #10
 800c482:	9904      	ldr	r1, [sp, #16]
 800c484:	4620      	mov	r0, r4
 800c486:	f000 f967 	bl	800c758 <__multadd>
 800c48a:	9004      	str	r0, [sp, #16]
 800c48c:	e7ea      	b.n	800c464 <_dtoa_r+0xb1c>
 800c48e:	bf00      	nop
 800c490:	0808899a 	.word	0x0808899a
 800c494:	080889bc 	.word	0x080889bc

0800c498 <__libc_fini_array>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	; (800c4b8 <__libc_fini_array+0x20>)
 800c49c:	4c07      	ldr	r4, [pc, #28]	; (800c4bc <__libc_fini_array+0x24>)
 800c49e:	1b64      	subs	r4, r4, r5
 800c4a0:	10a4      	asrs	r4, r4, #2
 800c4a2:	b91c      	cbnz	r4, 800c4ac <__libc_fini_array+0x14>
 800c4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4a8:	f000 bd52 	b.w	800cf50 <_fini>
 800c4ac:	3c01      	subs	r4, #1
 800c4ae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c4b2:	4798      	blx	r3
 800c4b4:	e7f5      	b.n	800c4a2 <__libc_fini_array+0xa>
 800c4b6:	bf00      	nop
 800c4b8:	08088bf0 	.word	0x08088bf0
 800c4bc:	08088bf8 	.word	0x08088bf8

0800c4c0 <_malloc_trim_r>:
 800c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	2008      	movs	r0, #8
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	f7ff f993 	bl	800b7f4 <sysconf>
 800c4ce:	4f23      	ldr	r7, [pc, #140]	; (800c55c <_malloc_trim_r+0x9c>)
 800c4d0:	4680      	mov	r8, r0
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f7fd fd8c 	bl	8009ff0 <__malloc_lock>
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	685e      	ldr	r6, [r3, #4]
 800c4dc:	f026 0603 	bic.w	r6, r6, #3
 800c4e0:	1b34      	subs	r4, r6, r4
 800c4e2:	3c11      	subs	r4, #17
 800c4e4:	4444      	add	r4, r8
 800c4e6:	fbb4 f4f8 	udiv	r4, r4, r8
 800c4ea:	3c01      	subs	r4, #1
 800c4ec:	fb08 f404 	mul.w	r4, r8, r4
 800c4f0:	45a0      	cmp	r8, r4
 800c4f2:	dd05      	ble.n	800c500 <_malloc_trim_r+0x40>
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f7fd fd81 	bl	8009ffc <__malloc_unlock>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	2100      	movs	r1, #0
 800c502:	4628      	mov	r0, r5
 800c504:	f7fd ff28 	bl	800a358 <_sbrk_r>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4433      	add	r3, r6
 800c50c:	4298      	cmp	r0, r3
 800c50e:	d1f1      	bne.n	800c4f4 <_malloc_trim_r+0x34>
 800c510:	4261      	negs	r1, r4
 800c512:	4628      	mov	r0, r5
 800c514:	f7fd ff20 	bl	800a358 <_sbrk_r>
 800c518:	3001      	adds	r0, #1
 800c51a:	d110      	bne.n	800c53e <_malloc_trim_r+0x7e>
 800c51c:	2100      	movs	r1, #0
 800c51e:	4628      	mov	r0, r5
 800c520:	f7fd ff1a 	bl	800a358 <_sbrk_r>
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	1a83      	subs	r3, r0, r2
 800c528:	2b0f      	cmp	r3, #15
 800c52a:	dde3      	ble.n	800c4f4 <_malloc_trim_r+0x34>
 800c52c:	490c      	ldr	r1, [pc, #48]	; (800c560 <_malloc_trim_r+0xa0>)
 800c52e:	6809      	ldr	r1, [r1, #0]
 800c530:	1a40      	subs	r0, r0, r1
 800c532:	490c      	ldr	r1, [pc, #48]	; (800c564 <_malloc_trim_r+0xa4>)
 800c534:	f043 0301 	orr.w	r3, r3, #1
 800c538:	6008      	str	r0, [r1, #0]
 800c53a:	6053      	str	r3, [r2, #4]
 800c53c:	e7da      	b.n	800c4f4 <_malloc_trim_r+0x34>
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	4a08      	ldr	r2, [pc, #32]	; (800c564 <_malloc_trim_r+0xa4>)
 800c542:	1b36      	subs	r6, r6, r4
 800c544:	f046 0601 	orr.w	r6, r6, #1
 800c548:	605e      	str	r6, [r3, #4]
 800c54a:	6813      	ldr	r3, [r2, #0]
 800c54c:	4628      	mov	r0, r5
 800c54e:	1b1c      	subs	r4, r3, r4
 800c550:	6014      	str	r4, [r2, #0]
 800c552:	f7fd fd53 	bl	8009ffc <__malloc_unlock>
 800c556:	2001      	movs	r0, #1
 800c558:	e7d0      	b.n	800c4fc <_malloc_trim_r+0x3c>
 800c55a:	bf00      	nop
 800c55c:	20000450 	.word	0x20000450
 800c560:	20000858 	.word	0x20000858
 800c564:	20017c30 	.word	0x20017c30

0800c568 <_free_r>:
 800c568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c56c:	4604      	mov	r4, r0
 800c56e:	4688      	mov	r8, r1
 800c570:	2900      	cmp	r1, #0
 800c572:	f000 80ab 	beq.w	800c6cc <_free_r+0x164>
 800c576:	f7fd fd3b 	bl	8009ff0 <__malloc_lock>
 800c57a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c57e:	4d54      	ldr	r5, [pc, #336]	; (800c6d0 <_free_r+0x168>)
 800c580:	f022 0001 	bic.w	r0, r2, #1
 800c584:	f1a8 0308 	sub.w	r3, r8, #8
 800c588:	181f      	adds	r7, r3, r0
 800c58a:	68a9      	ldr	r1, [r5, #8]
 800c58c:	687e      	ldr	r6, [r7, #4]
 800c58e:	42b9      	cmp	r1, r7
 800c590:	f026 0603 	bic.w	r6, r6, #3
 800c594:	f002 0201 	and.w	r2, r2, #1
 800c598:	d11b      	bne.n	800c5d2 <_free_r+0x6a>
 800c59a:	4430      	add	r0, r6
 800c59c:	b93a      	cbnz	r2, 800c5ae <_free_r+0x46>
 800c59e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800c5a2:	1a9b      	subs	r3, r3, r2
 800c5a4:	4410      	add	r0, r2
 800c5a6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800c5aa:	60ca      	str	r2, [r1, #12]
 800c5ac:	6091      	str	r1, [r2, #8]
 800c5ae:	f040 0201 	orr.w	r2, r0, #1
 800c5b2:	605a      	str	r2, [r3, #4]
 800c5b4:	60ab      	str	r3, [r5, #8]
 800c5b6:	4b47      	ldr	r3, [pc, #284]	; (800c6d4 <_free_r+0x16c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4283      	cmp	r3, r0
 800c5bc:	d804      	bhi.n	800c5c8 <_free_r+0x60>
 800c5be:	4b46      	ldr	r3, [pc, #280]	; (800c6d8 <_free_r+0x170>)
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	6819      	ldr	r1, [r3, #0]
 800c5c4:	f7ff ff7c 	bl	800c4c0 <_malloc_trim_r>
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ce:	f7fd bd15 	b.w	8009ffc <__malloc_unlock>
 800c5d2:	607e      	str	r6, [r7, #4]
 800c5d4:	2a00      	cmp	r2, #0
 800c5d6:	d139      	bne.n	800c64c <_free_r+0xe4>
 800c5d8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800c5dc:	1a5b      	subs	r3, r3, r1
 800c5de:	4408      	add	r0, r1
 800c5e0:	6899      	ldr	r1, [r3, #8]
 800c5e2:	f105 0c08 	add.w	ip, r5, #8
 800c5e6:	4561      	cmp	r1, ip
 800c5e8:	d032      	beq.n	800c650 <_free_r+0xe8>
 800c5ea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c5ee:	f8c1 c00c 	str.w	ip, [r1, #12]
 800c5f2:	f8cc 1008 	str.w	r1, [ip, #8]
 800c5f6:	19b9      	adds	r1, r7, r6
 800c5f8:	6849      	ldr	r1, [r1, #4]
 800c5fa:	07c9      	lsls	r1, r1, #31
 800c5fc:	d40a      	bmi.n	800c614 <_free_r+0xac>
 800c5fe:	4430      	add	r0, r6
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	bb3a      	cbnz	r2, 800c654 <_free_r+0xec>
 800c604:	4e35      	ldr	r6, [pc, #212]	; (800c6dc <_free_r+0x174>)
 800c606:	42b1      	cmp	r1, r6
 800c608:	d124      	bne.n	800c654 <_free_r+0xec>
 800c60a:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800c60e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800c612:	2201      	movs	r2, #1
 800c614:	f040 0101 	orr.w	r1, r0, #1
 800c618:	6059      	str	r1, [r3, #4]
 800c61a:	5018      	str	r0, [r3, r0]
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	d1d3      	bne.n	800c5c8 <_free_r+0x60>
 800c620:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c624:	d21a      	bcs.n	800c65c <_free_r+0xf4>
 800c626:	08c0      	lsrs	r0, r0, #3
 800c628:	1081      	asrs	r1, r0, #2
 800c62a:	2201      	movs	r2, #1
 800c62c:	408a      	lsls	r2, r1
 800c62e:	6869      	ldr	r1, [r5, #4]
 800c630:	3001      	adds	r0, #1
 800c632:	430a      	orrs	r2, r1
 800c634:	606a      	str	r2, [r5, #4]
 800c636:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800c63a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800c63e:	3a08      	subs	r2, #8
 800c640:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800c644:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800c648:	60cb      	str	r3, [r1, #12]
 800c64a:	e7bd      	b.n	800c5c8 <_free_r+0x60>
 800c64c:	2200      	movs	r2, #0
 800c64e:	e7d2      	b.n	800c5f6 <_free_r+0x8e>
 800c650:	2201      	movs	r2, #1
 800c652:	e7d0      	b.n	800c5f6 <_free_r+0x8e>
 800c654:	68fe      	ldr	r6, [r7, #12]
 800c656:	60ce      	str	r6, [r1, #12]
 800c658:	60b1      	str	r1, [r6, #8]
 800c65a:	e7db      	b.n	800c614 <_free_r+0xac>
 800c65c:	0a42      	lsrs	r2, r0, #9
 800c65e:	2a04      	cmp	r2, #4
 800c660:	d813      	bhi.n	800c68a <_free_r+0x122>
 800c662:	0982      	lsrs	r2, r0, #6
 800c664:	3238      	adds	r2, #56	; 0x38
 800c666:	1c51      	adds	r1, r2, #1
 800c668:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c66c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c670:	428e      	cmp	r6, r1
 800c672:	d124      	bne.n	800c6be <_free_r+0x156>
 800c674:	2001      	movs	r0, #1
 800c676:	1092      	asrs	r2, r2, #2
 800c678:	fa00 f202 	lsl.w	r2, r0, r2
 800c67c:	6868      	ldr	r0, [r5, #4]
 800c67e:	4302      	orrs	r2, r0
 800c680:	606a      	str	r2, [r5, #4]
 800c682:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800c686:	60b3      	str	r3, [r6, #8]
 800c688:	e7de      	b.n	800c648 <_free_r+0xe0>
 800c68a:	2a14      	cmp	r2, #20
 800c68c:	d801      	bhi.n	800c692 <_free_r+0x12a>
 800c68e:	325b      	adds	r2, #91	; 0x5b
 800c690:	e7e9      	b.n	800c666 <_free_r+0xfe>
 800c692:	2a54      	cmp	r2, #84	; 0x54
 800c694:	d802      	bhi.n	800c69c <_free_r+0x134>
 800c696:	0b02      	lsrs	r2, r0, #12
 800c698:	326e      	adds	r2, #110	; 0x6e
 800c69a:	e7e4      	b.n	800c666 <_free_r+0xfe>
 800c69c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c6a0:	d802      	bhi.n	800c6a8 <_free_r+0x140>
 800c6a2:	0bc2      	lsrs	r2, r0, #15
 800c6a4:	3277      	adds	r2, #119	; 0x77
 800c6a6:	e7de      	b.n	800c666 <_free_r+0xfe>
 800c6a8:	f240 5154 	movw	r1, #1364	; 0x554
 800c6ac:	428a      	cmp	r2, r1
 800c6ae:	bf9a      	itte	ls
 800c6b0:	0c82      	lsrls	r2, r0, #18
 800c6b2:	327c      	addls	r2, #124	; 0x7c
 800c6b4:	227e      	movhi	r2, #126	; 0x7e
 800c6b6:	e7d6      	b.n	800c666 <_free_r+0xfe>
 800c6b8:	6889      	ldr	r1, [r1, #8]
 800c6ba:	428e      	cmp	r6, r1
 800c6bc:	d004      	beq.n	800c6c8 <_free_r+0x160>
 800c6be:	684a      	ldr	r2, [r1, #4]
 800c6c0:	f022 0203 	bic.w	r2, r2, #3
 800c6c4:	4282      	cmp	r2, r0
 800c6c6:	d8f7      	bhi.n	800c6b8 <_free_r+0x150>
 800c6c8:	68ce      	ldr	r6, [r1, #12]
 800c6ca:	e7da      	b.n	800c682 <_free_r+0x11a>
 800c6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d0:	20000450 	.word	0x20000450
 800c6d4:	2000085c 	.word	0x2000085c
 800c6d8:	20017c60 	.word	0x20017c60
 800c6dc:	20000458 	.word	0x20000458

0800c6e0 <_localeconv_r>:
 800c6e0:	4b04      	ldr	r3, [pc, #16]	; (800c6f4 <_localeconv_r+0x14>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c6e6:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <_localeconv_r+0x18>)
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	bf08      	it	eq
 800c6ec:	4618      	moveq	r0, r3
 800c6ee:	30f0      	adds	r0, #240	; 0xf0
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	20000020 	.word	0x20000020
 800c6f8:	20000864 	.word	0x20000864

0800c6fc <_Balloc>:
 800c6fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c6fe:	b570      	push	{r4, r5, r6, lr}
 800c700:	4605      	mov	r5, r0
 800c702:	460c      	mov	r4, r1
 800c704:	b17b      	cbz	r3, 800c726 <_Balloc+0x2a>
 800c706:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800c708:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c70c:	b9a0      	cbnz	r0, 800c738 <_Balloc+0x3c>
 800c70e:	2101      	movs	r1, #1
 800c710:	fa01 f604 	lsl.w	r6, r1, r4
 800c714:	1d72      	adds	r2, r6, #5
 800c716:	0092      	lsls	r2, r2, #2
 800c718:	4628      	mov	r0, r5
 800c71a:	f000 fbb9 	bl	800ce90 <_calloc_r>
 800c71e:	b148      	cbz	r0, 800c734 <_Balloc+0x38>
 800c720:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c724:	e00b      	b.n	800c73e <_Balloc+0x42>
 800c726:	2221      	movs	r2, #33	; 0x21
 800c728:	2104      	movs	r1, #4
 800c72a:	f000 fbb1 	bl	800ce90 <_calloc_r>
 800c72e:	64e8      	str	r0, [r5, #76]	; 0x4c
 800c730:	2800      	cmp	r0, #0
 800c732:	d1e8      	bne.n	800c706 <_Balloc+0xa>
 800c734:	2000      	movs	r0, #0
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	6802      	ldr	r2, [r0, #0]
 800c73a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c73e:	2300      	movs	r3, #0
 800c740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c744:	e7f7      	b.n	800c736 <_Balloc+0x3a>

0800c746 <_Bfree>:
 800c746:	b131      	cbz	r1, 800c756 <_Bfree+0x10>
 800c748:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c74a:	684a      	ldr	r2, [r1, #4]
 800c74c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c750:	6008      	str	r0, [r1, #0]
 800c752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c756:	4770      	bx	lr

0800c758 <__multadd>:
 800c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75c:	690d      	ldr	r5, [r1, #16]
 800c75e:	461f      	mov	r7, r3
 800c760:	4606      	mov	r6, r0
 800c762:	460c      	mov	r4, r1
 800c764:	f101 0c14 	add.w	ip, r1, #20
 800c768:	2300      	movs	r3, #0
 800c76a:	f8dc 0000 	ldr.w	r0, [ip]
 800c76e:	b281      	uxth	r1, r0
 800c770:	fb02 7101 	mla	r1, r2, r1, r7
 800c774:	0c0f      	lsrs	r7, r1, #16
 800c776:	0c00      	lsrs	r0, r0, #16
 800c778:	fb02 7000 	mla	r0, r2, r0, r7
 800c77c:	b289      	uxth	r1, r1
 800c77e:	3301      	adds	r3, #1
 800c780:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c784:	429d      	cmp	r5, r3
 800c786:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c78a:	f84c 1b04 	str.w	r1, [ip], #4
 800c78e:	dcec      	bgt.n	800c76a <__multadd+0x12>
 800c790:	b1d7      	cbz	r7, 800c7c8 <__multadd+0x70>
 800c792:	68a3      	ldr	r3, [r4, #8]
 800c794:	42ab      	cmp	r3, r5
 800c796:	dc12      	bgt.n	800c7be <__multadd+0x66>
 800c798:	6861      	ldr	r1, [r4, #4]
 800c79a:	4630      	mov	r0, r6
 800c79c:	3101      	adds	r1, #1
 800c79e:	f7ff ffad 	bl	800c6fc <_Balloc>
 800c7a2:	6922      	ldr	r2, [r4, #16]
 800c7a4:	3202      	adds	r2, #2
 800c7a6:	f104 010c 	add.w	r1, r4, #12
 800c7aa:	4680      	mov	r8, r0
 800c7ac:	0092      	lsls	r2, r2, #2
 800c7ae:	300c      	adds	r0, #12
 800c7b0:	f7fd fbf2 	bl	8009f98 <memcpy>
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7ff ffc5 	bl	800c746 <_Bfree>
 800c7bc:	4644      	mov	r4, r8
 800c7be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7c2:	3501      	adds	r5, #1
 800c7c4:	615f      	str	r7, [r3, #20]
 800c7c6:	6125      	str	r5, [r4, #16]
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c7ce <__hi0bits>:
 800c7ce:	0c02      	lsrs	r2, r0, #16
 800c7d0:	0412      	lsls	r2, r2, #16
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	b9b2      	cbnz	r2, 800c804 <__hi0bits+0x36>
 800c7d6:	0403      	lsls	r3, r0, #16
 800c7d8:	2010      	movs	r0, #16
 800c7da:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c7de:	bf04      	itt	eq
 800c7e0:	021b      	lsleq	r3, r3, #8
 800c7e2:	3008      	addeq	r0, #8
 800c7e4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c7e8:	bf04      	itt	eq
 800c7ea:	011b      	lsleq	r3, r3, #4
 800c7ec:	3004      	addeq	r0, #4
 800c7ee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c7f2:	bf04      	itt	eq
 800c7f4:	009b      	lsleq	r3, r3, #2
 800c7f6:	3002      	addeq	r0, #2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	db06      	blt.n	800c80a <__hi0bits+0x3c>
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	d503      	bpl.n	800c808 <__hi0bits+0x3a>
 800c800:	3001      	adds	r0, #1
 800c802:	4770      	bx	lr
 800c804:	2000      	movs	r0, #0
 800c806:	e7e8      	b.n	800c7da <__hi0bits+0xc>
 800c808:	2020      	movs	r0, #32
 800c80a:	4770      	bx	lr

0800c80c <__lo0bits>:
 800c80c:	6803      	ldr	r3, [r0, #0]
 800c80e:	f013 0207 	ands.w	r2, r3, #7
 800c812:	4601      	mov	r1, r0
 800c814:	d00b      	beq.n	800c82e <__lo0bits+0x22>
 800c816:	07da      	lsls	r2, r3, #31
 800c818:	d423      	bmi.n	800c862 <__lo0bits+0x56>
 800c81a:	0798      	lsls	r0, r3, #30
 800c81c:	bf49      	itett	mi
 800c81e:	085b      	lsrmi	r3, r3, #1
 800c820:	089b      	lsrpl	r3, r3, #2
 800c822:	2001      	movmi	r0, #1
 800c824:	600b      	strmi	r3, [r1, #0]
 800c826:	bf5c      	itt	pl
 800c828:	600b      	strpl	r3, [r1, #0]
 800c82a:	2002      	movpl	r0, #2
 800c82c:	4770      	bx	lr
 800c82e:	b298      	uxth	r0, r3
 800c830:	b9a8      	cbnz	r0, 800c85e <__lo0bits+0x52>
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	2010      	movs	r0, #16
 800c836:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c83a:	bf04      	itt	eq
 800c83c:	0a1b      	lsreq	r3, r3, #8
 800c83e:	3008      	addeq	r0, #8
 800c840:	071a      	lsls	r2, r3, #28
 800c842:	bf04      	itt	eq
 800c844:	091b      	lsreq	r3, r3, #4
 800c846:	3004      	addeq	r0, #4
 800c848:	079a      	lsls	r2, r3, #30
 800c84a:	bf04      	itt	eq
 800c84c:	089b      	lsreq	r3, r3, #2
 800c84e:	3002      	addeq	r0, #2
 800c850:	07da      	lsls	r2, r3, #31
 800c852:	d402      	bmi.n	800c85a <__lo0bits+0x4e>
 800c854:	085b      	lsrs	r3, r3, #1
 800c856:	d006      	beq.n	800c866 <__lo0bits+0x5a>
 800c858:	3001      	adds	r0, #1
 800c85a:	600b      	str	r3, [r1, #0]
 800c85c:	4770      	bx	lr
 800c85e:	4610      	mov	r0, r2
 800c860:	e7e9      	b.n	800c836 <__lo0bits+0x2a>
 800c862:	2000      	movs	r0, #0
 800c864:	4770      	bx	lr
 800c866:	2020      	movs	r0, #32
 800c868:	4770      	bx	lr

0800c86a <__i2b>:
 800c86a:	b510      	push	{r4, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	2101      	movs	r1, #1
 800c870:	f7ff ff44 	bl	800c6fc <_Balloc>
 800c874:	2201      	movs	r2, #1
 800c876:	6144      	str	r4, [r0, #20]
 800c878:	6102      	str	r2, [r0, #16]
 800c87a:	bd10      	pop	{r4, pc}

0800c87c <__multiply>:
 800c87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c880:	4614      	mov	r4, r2
 800c882:	690a      	ldr	r2, [r1, #16]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	429a      	cmp	r2, r3
 800c888:	bfb8      	it	lt
 800c88a:	460b      	movlt	r3, r1
 800c88c:	4688      	mov	r8, r1
 800c88e:	bfbc      	itt	lt
 800c890:	46a0      	movlt	r8, r4
 800c892:	461c      	movlt	r4, r3
 800c894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c898:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c89c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8a4:	eb07 0609 	add.w	r6, r7, r9
 800c8a8:	42b3      	cmp	r3, r6
 800c8aa:	bfb8      	it	lt
 800c8ac:	3101      	addlt	r1, #1
 800c8ae:	f7ff ff25 	bl	800c6fc <_Balloc>
 800c8b2:	f100 0514 	add.w	r5, r0, #20
 800c8b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4573      	cmp	r3, lr
 800c8c0:	d316      	bcc.n	800c8f0 <__multiply+0x74>
 800c8c2:	f104 0214 	add.w	r2, r4, #20
 800c8c6:	f108 0114 	add.w	r1, r8, #20
 800c8ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c8ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	9b00      	ldr	r3, [sp, #0]
 800c8d6:	9201      	str	r2, [sp, #4]
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d80c      	bhi.n	800c8f6 <__multiply+0x7a>
 800c8dc:	2e00      	cmp	r6, #0
 800c8de:	dd03      	ble.n	800c8e8 <__multiply+0x6c>
 800c8e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d05d      	beq.n	800c9a4 <__multiply+0x128>
 800c8e8:	6106      	str	r6, [r0, #16]
 800c8ea:	b003      	add	sp, #12
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	f843 2b04 	str.w	r2, [r3], #4
 800c8f4:	e7e3      	b.n	800c8be <__multiply+0x42>
 800c8f6:	f8b2 b000 	ldrh.w	fp, [r2]
 800c8fa:	f1bb 0f00 	cmp.w	fp, #0
 800c8fe:	d023      	beq.n	800c948 <__multiply+0xcc>
 800c900:	4689      	mov	r9, r1
 800c902:	46ac      	mov	ip, r5
 800c904:	f04f 0800 	mov.w	r8, #0
 800c908:	f859 4b04 	ldr.w	r4, [r9], #4
 800c90c:	f8dc a000 	ldr.w	sl, [ip]
 800c910:	b2a3      	uxth	r3, r4
 800c912:	fa1f fa8a 	uxth.w	sl, sl
 800c916:	fb0b a303 	mla	r3, fp, r3, sl
 800c91a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c91e:	f8dc 4000 	ldr.w	r4, [ip]
 800c922:	4443      	add	r3, r8
 800c924:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c928:	fb0b 840a 	mla	r4, fp, sl, r8
 800c92c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c930:	46e2      	mov	sl, ip
 800c932:	b29b      	uxth	r3, r3
 800c934:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c938:	454f      	cmp	r7, r9
 800c93a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c93e:	f84a 3b04 	str.w	r3, [sl], #4
 800c942:	d82b      	bhi.n	800c99c <__multiply+0x120>
 800c944:	f8cc 8004 	str.w	r8, [ip, #4]
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c94e:	3204      	adds	r2, #4
 800c950:	f1ba 0f00 	cmp.w	sl, #0
 800c954:	d020      	beq.n	800c998 <__multiply+0x11c>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	4689      	mov	r9, r1
 800c95a:	46a8      	mov	r8, r5
 800c95c:	f04f 0b00 	mov.w	fp, #0
 800c960:	f8b9 c000 	ldrh.w	ip, [r9]
 800c964:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c968:	fb0a 440c 	mla	r4, sl, ip, r4
 800c96c:	445c      	add	r4, fp
 800c96e:	46c4      	mov	ip, r8
 800c970:	b29b      	uxth	r3, r3
 800c972:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c976:	f84c 3b04 	str.w	r3, [ip], #4
 800c97a:	f859 3b04 	ldr.w	r3, [r9], #4
 800c97e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c982:	0c1b      	lsrs	r3, r3, #16
 800c984:	fb0a b303 	mla	r3, sl, r3, fp
 800c988:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c98c:	454f      	cmp	r7, r9
 800c98e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c992:	d805      	bhi.n	800c9a0 <__multiply+0x124>
 800c994:	f8c8 3004 	str.w	r3, [r8, #4]
 800c998:	3504      	adds	r5, #4
 800c99a:	e79b      	b.n	800c8d4 <__multiply+0x58>
 800c99c:	46d4      	mov	ip, sl
 800c99e:	e7b3      	b.n	800c908 <__multiply+0x8c>
 800c9a0:	46e0      	mov	r8, ip
 800c9a2:	e7dd      	b.n	800c960 <__multiply+0xe4>
 800c9a4:	3e01      	subs	r6, #1
 800c9a6:	e799      	b.n	800c8dc <__multiply+0x60>

0800c9a8 <__pow5mult>:
 800c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	4615      	mov	r5, r2
 800c9ae:	f012 0203 	ands.w	r2, r2, #3
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	d007      	beq.n	800c9c8 <__pow5mult+0x20>
 800c9b8:	3a01      	subs	r2, #1
 800c9ba:	4c1a      	ldr	r4, [pc, #104]	; (800ca24 <__pow5mult+0x7c>)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9c2:	f7ff fec9 	bl	800c758 <__multadd>
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	10ad      	asrs	r5, r5, #2
 800c9ca:	d027      	beq.n	800ca1c <__pow5mult+0x74>
 800c9cc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800c9ce:	b944      	cbnz	r4, 800c9e2 <__pow5mult+0x3a>
 800c9d0:	f240 2171 	movw	r1, #625	; 0x271
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7ff ff48 	bl	800c86a <__i2b>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	64b0      	str	r0, [r6, #72]	; 0x48
 800c9de:	4604      	mov	r4, r0
 800c9e0:	6003      	str	r3, [r0, #0]
 800c9e2:	f04f 0800 	mov.w	r8, #0
 800c9e6:	07eb      	lsls	r3, r5, #31
 800c9e8:	d50a      	bpl.n	800ca00 <__pow5mult+0x58>
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	4622      	mov	r2, r4
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ff44 	bl	800c87c <__multiply>
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	4681      	mov	r9, r0
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff fea4 	bl	800c746 <_Bfree>
 800c9fe:	464f      	mov	r7, r9
 800ca00:	106d      	asrs	r5, r5, #1
 800ca02:	d00b      	beq.n	800ca1c <__pow5mult+0x74>
 800ca04:	6820      	ldr	r0, [r4, #0]
 800ca06:	b938      	cbnz	r0, 800ca18 <__pow5mult+0x70>
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff ff35 	bl	800c87c <__multiply>
 800ca12:	6020      	str	r0, [r4, #0]
 800ca14:	f8c0 8000 	str.w	r8, [r0]
 800ca18:	4604      	mov	r4, r0
 800ca1a:	e7e4      	b.n	800c9e6 <__pow5mult+0x3e>
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	bf00      	nop
 800ca24:	08088ac0 	.word	0x08088ac0

0800ca28 <__lshift>:
 800ca28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca32:	6923      	ldr	r3, [r4, #16]
 800ca34:	6849      	ldr	r1, [r1, #4]
 800ca36:	eb0a 0903 	add.w	r9, sl, r3
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	4607      	mov	r7, r0
 800ca3e:	4616      	mov	r6, r2
 800ca40:	f109 0501 	add.w	r5, r9, #1
 800ca44:	42ab      	cmp	r3, r5
 800ca46:	db32      	blt.n	800caae <__lshift+0x86>
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f7ff fe57 	bl	800c6fc <_Balloc>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	4680      	mov	r8, r0
 800ca52:	f100 0114 	add.w	r1, r0, #20
 800ca56:	461a      	mov	r2, r3
 800ca58:	4553      	cmp	r3, sl
 800ca5a:	db2b      	blt.n	800cab4 <__lshift+0x8c>
 800ca5c:	6920      	ldr	r0, [r4, #16]
 800ca5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca62:	f104 0314 	add.w	r3, r4, #20
 800ca66:	f016 021f 	ands.w	r2, r6, #31
 800ca6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca72:	d025      	beq.n	800cac0 <__lshift+0x98>
 800ca74:	f1c2 0e20 	rsb	lr, r2, #32
 800ca78:	2000      	movs	r0, #0
 800ca7a:	681e      	ldr	r6, [r3, #0]
 800ca7c:	468a      	mov	sl, r1
 800ca7e:	4096      	lsls	r6, r2
 800ca80:	4330      	orrs	r0, r6
 800ca82:	f84a 0b04 	str.w	r0, [sl], #4
 800ca86:	f853 0b04 	ldr.w	r0, [r3], #4
 800ca8a:	459c      	cmp	ip, r3
 800ca8c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ca90:	d814      	bhi.n	800cabc <__lshift+0x94>
 800ca92:	6048      	str	r0, [r1, #4]
 800ca94:	b108      	cbz	r0, 800ca9a <__lshift+0x72>
 800ca96:	f109 0502 	add.w	r5, r9, #2
 800ca9a:	3d01      	subs	r5, #1
 800ca9c:	4638      	mov	r0, r7
 800ca9e:	f8c8 5010 	str.w	r5, [r8, #16]
 800caa2:	4621      	mov	r1, r4
 800caa4:	f7ff fe4f 	bl	800c746 <_Bfree>
 800caa8:	4640      	mov	r0, r8
 800caaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caae:	3101      	adds	r1, #1
 800cab0:	005b      	lsls	r3, r3, #1
 800cab2:	e7c7      	b.n	800ca44 <__lshift+0x1c>
 800cab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cab8:	3301      	adds	r3, #1
 800caba:	e7cd      	b.n	800ca58 <__lshift+0x30>
 800cabc:	4651      	mov	r1, sl
 800cabe:	e7dc      	b.n	800ca7a <__lshift+0x52>
 800cac0:	3904      	subs	r1, #4
 800cac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac6:	f841 2f04 	str.w	r2, [r1, #4]!
 800caca:	459c      	cmp	ip, r3
 800cacc:	d8f9      	bhi.n	800cac2 <__lshift+0x9a>
 800cace:	e7e4      	b.n	800ca9a <__lshift+0x72>

0800cad0 <__mcmp>:
 800cad0:	6903      	ldr	r3, [r0, #16]
 800cad2:	690a      	ldr	r2, [r1, #16]
 800cad4:	1a9b      	subs	r3, r3, r2
 800cad6:	b530      	push	{r4, r5, lr}
 800cad8:	d10c      	bne.n	800caf4 <__mcmp+0x24>
 800cada:	0092      	lsls	r2, r2, #2
 800cadc:	3014      	adds	r0, #20
 800cade:	3114      	adds	r1, #20
 800cae0:	1884      	adds	r4, r0, r2
 800cae2:	4411      	add	r1, r2
 800cae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800caec:	4295      	cmp	r5, r2
 800caee:	d003      	beq.n	800caf8 <__mcmp+0x28>
 800caf0:	d305      	bcc.n	800cafe <__mcmp+0x2e>
 800caf2:	2301      	movs	r3, #1
 800caf4:	4618      	mov	r0, r3
 800caf6:	bd30      	pop	{r4, r5, pc}
 800caf8:	42a0      	cmp	r0, r4
 800cafa:	d3f3      	bcc.n	800cae4 <__mcmp+0x14>
 800cafc:	e7fa      	b.n	800caf4 <__mcmp+0x24>
 800cafe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb02:	e7f7      	b.n	800caf4 <__mcmp+0x24>

0800cb04 <__mdiff>:
 800cb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb08:	460d      	mov	r5, r1
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	4628      	mov	r0, r5
 800cb10:	4614      	mov	r4, r2
 800cb12:	f7ff ffdd 	bl	800cad0 <__mcmp>
 800cb16:	1e06      	subs	r6, r0, #0
 800cb18:	d108      	bne.n	800cb2c <__mdiff+0x28>
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7ff fded 	bl	800c6fc <_Balloc>
 800cb22:	2301      	movs	r3, #1
 800cb24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb2c:	bfa4      	itt	ge
 800cb2e:	4623      	movge	r3, r4
 800cb30:	462c      	movge	r4, r5
 800cb32:	4638      	mov	r0, r7
 800cb34:	6861      	ldr	r1, [r4, #4]
 800cb36:	bfa6      	itte	ge
 800cb38:	461d      	movge	r5, r3
 800cb3a:	2600      	movge	r6, #0
 800cb3c:	2601      	movlt	r6, #1
 800cb3e:	f7ff fddd 	bl	800c6fc <_Balloc>
 800cb42:	692b      	ldr	r3, [r5, #16]
 800cb44:	60c6      	str	r6, [r0, #12]
 800cb46:	6926      	ldr	r6, [r4, #16]
 800cb48:	f105 0914 	add.w	r9, r5, #20
 800cb4c:	f104 0214 	add.w	r2, r4, #20
 800cb50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cb54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cb58:	f100 0514 	add.w	r5, r0, #20
 800cb5c:	f04f 0e00 	mov.w	lr, #0
 800cb60:	f852 ab04 	ldr.w	sl, [r2], #4
 800cb64:	f859 4b04 	ldr.w	r4, [r9], #4
 800cb68:	fa1e f18a 	uxtah	r1, lr, sl
 800cb6c:	b2a3      	uxth	r3, r4
 800cb6e:	1ac9      	subs	r1, r1, r3
 800cb70:	0c23      	lsrs	r3, r4, #16
 800cb72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cb76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cb7a:	b289      	uxth	r1, r1
 800cb7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cb80:	45c8      	cmp	r8, r9
 800cb82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cb86:	4694      	mov	ip, r2
 800cb88:	f845 3b04 	str.w	r3, [r5], #4
 800cb8c:	d8e8      	bhi.n	800cb60 <__mdiff+0x5c>
 800cb8e:	45bc      	cmp	ip, r7
 800cb90:	d304      	bcc.n	800cb9c <__mdiff+0x98>
 800cb92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cb96:	b183      	cbz	r3, 800cbba <__mdiff+0xb6>
 800cb98:	6106      	str	r6, [r0, #16]
 800cb9a:	e7c5      	b.n	800cb28 <__mdiff+0x24>
 800cb9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cba0:	fa1e f381 	uxtah	r3, lr, r1
 800cba4:	141a      	asrs	r2, r3, #16
 800cba6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbb0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cbb4:	f845 3b04 	str.w	r3, [r5], #4
 800cbb8:	e7e9      	b.n	800cb8e <__mdiff+0x8a>
 800cbba:	3e01      	subs	r6, #1
 800cbbc:	e7e9      	b.n	800cb92 <__mdiff+0x8e>

0800cbbe <__d2b>:
 800cbbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbc2:	460e      	mov	r6, r1
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	ec59 8b10 	vmov	r8, r9, d0
 800cbca:	4615      	mov	r5, r2
 800cbcc:	f7ff fd96 	bl	800c6fc <_Balloc>
 800cbd0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbda:	bb34      	cbnz	r4, 800cc2a <__d2b+0x6c>
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	f1b8 0300 	subs.w	r3, r8, #0
 800cbe2:	d027      	beq.n	800cc34 <__d2b+0x76>
 800cbe4:	a802      	add	r0, sp, #8
 800cbe6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cbea:	f7ff fe0f 	bl	800c80c <__lo0bits>
 800cbee:	9900      	ldr	r1, [sp, #0]
 800cbf0:	b1f0      	cbz	r0, 800cc30 <__d2b+0x72>
 800cbf2:	9a01      	ldr	r2, [sp, #4]
 800cbf4:	f1c0 0320 	rsb	r3, r0, #32
 800cbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfc:	430b      	orrs	r3, r1
 800cbfe:	40c2      	lsrs	r2, r0
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	9201      	str	r2, [sp, #4]
 800cc04:	9b01      	ldr	r3, [sp, #4]
 800cc06:	61bb      	str	r3, [r7, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	bf14      	ite	ne
 800cc0c:	2102      	movne	r1, #2
 800cc0e:	2101      	moveq	r1, #1
 800cc10:	6139      	str	r1, [r7, #16]
 800cc12:	b1c4      	cbz	r4, 800cc46 <__d2b+0x88>
 800cc14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cc18:	4404      	add	r4, r0
 800cc1a:	6034      	str	r4, [r6, #0]
 800cc1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc20:	6028      	str	r0, [r5, #0]
 800cc22:	4638      	mov	r0, r7
 800cc24:	b003      	add	sp, #12
 800cc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc2e:	e7d5      	b.n	800cbdc <__d2b+0x1e>
 800cc30:	6179      	str	r1, [r7, #20]
 800cc32:	e7e7      	b.n	800cc04 <__d2b+0x46>
 800cc34:	a801      	add	r0, sp, #4
 800cc36:	f7ff fde9 	bl	800c80c <__lo0bits>
 800cc3a:	9b01      	ldr	r3, [sp, #4]
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	2101      	movs	r1, #1
 800cc40:	6139      	str	r1, [r7, #16]
 800cc42:	3020      	adds	r0, #32
 800cc44:	e7e5      	b.n	800cc12 <__d2b+0x54>
 800cc46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cc4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc4e:	6030      	str	r0, [r6, #0]
 800cc50:	6918      	ldr	r0, [r3, #16]
 800cc52:	f7ff fdbc 	bl	800c7ce <__hi0bits>
 800cc56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cc5a:	e7e1      	b.n	800cc20 <__d2b+0x62>

0800cc5c <frexp>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	2100      	movs	r1, #0
 800cc60:	ec55 4b10 	vmov	r4, r5, d0
 800cc64:	6001      	str	r1, [r0, #0]
 800cc66:	4916      	ldr	r1, [pc, #88]	; (800ccc0 <frexp+0x64>)
 800cc68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc6c:	428b      	cmp	r3, r1
 800cc6e:	4606      	mov	r6, r0
 800cc70:	462a      	mov	r2, r5
 800cc72:	dc22      	bgt.n	800ccba <frexp+0x5e>
 800cc74:	ee10 1a10 	vmov	r1, s0
 800cc78:	4319      	orrs	r1, r3
 800cc7a:	d01e      	beq.n	800ccba <frexp+0x5e>
 800cc7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc80:	da0d      	bge.n	800cc9e <frexp+0x42>
 800cc82:	2200      	movs	r2, #0
 800cc84:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <frexp+0x68>)
 800cc86:	ee10 0a10 	vmov	r0, s0
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	f7f3 fcd4 	bl	8000638 <__aeabi_dmul>
 800cc90:	460a      	mov	r2, r1
 800cc92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc96:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	6031      	str	r1, [r6, #0]
 800cc9e:	6831      	ldr	r1, [r6, #0]
 800cca0:	151b      	asrs	r3, r3, #20
 800cca2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cca6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ccaa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800ccae:	440b      	add	r3, r1
 800ccb0:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ccba:	ec45 4b10 	vmov	d0, r4, r5
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	7fefffff 	.word	0x7fefffff
 800ccc4:	43500000 	.word	0x43500000

0800ccc8 <strncpy>:
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	3901      	subs	r1, #1
 800cccc:	4604      	mov	r4, r0
 800ccce:	b902      	cbnz	r2, 800ccd2 <strncpy+0xa>
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ccd8:	f803 5b01 	strb.w	r5, [r3], #1
 800ccdc:	1e56      	subs	r6, r2, #1
 800ccde:	b92d      	cbnz	r5, 800ccec <strncpy+0x24>
 800cce0:	4414      	add	r4, r2
 800cce2:	42a3      	cmp	r3, r4
 800cce4:	d0f4      	beq.n	800ccd0 <strncpy+0x8>
 800cce6:	f803 5b01 	strb.w	r5, [r3], #1
 800ccea:	e7fa      	b.n	800cce2 <strncpy+0x1a>
 800ccec:	461c      	mov	r4, r3
 800ccee:	4632      	mov	r2, r6
 800ccf0:	e7ed      	b.n	800ccce <strncpy+0x6>

0800ccf2 <__ssprint_r>:
 800ccf2:	6893      	ldr	r3, [r2, #8]
 800ccf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	4681      	mov	r9, r0
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	4616      	mov	r6, r2
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d05e      	beq.n	800cdc0 <__ssprint_r+0xce>
 800cd02:	f04f 0b00 	mov.w	fp, #0
 800cd06:	f8d2 a000 	ldr.w	sl, [r2]
 800cd0a:	465f      	mov	r7, fp
 800cd0c:	b357      	cbz	r7, 800cd64 <__ssprint_r+0x72>
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	429f      	cmp	r7, r3
 800cd12:	d340      	bcc.n	800cd96 <__ssprint_r+0xa4>
 800cd14:	89a2      	ldrh	r2, [r4, #12]
 800cd16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd1a:	d03c      	beq.n	800cd96 <__ssprint_r+0xa4>
 800cd1c:	6825      	ldr	r5, [r4, #0]
 800cd1e:	6921      	ldr	r1, [r4, #16]
 800cd20:	eba5 0801 	sub.w	r8, r5, r1
 800cd24:	6965      	ldr	r5, [r4, #20]
 800cd26:	2302      	movs	r3, #2
 800cd28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd2c:	fb95 f5f3 	sdiv	r5, r5, r3
 800cd30:	f108 0301 	add.w	r3, r8, #1
 800cd34:	443b      	add	r3, r7
 800cd36:	429d      	cmp	r5, r3
 800cd38:	bf38      	it	cc
 800cd3a:	461d      	movcc	r5, r3
 800cd3c:	0553      	lsls	r3, r2, #21
 800cd3e:	d544      	bpl.n	800cdca <__ssprint_r+0xd8>
 800cd40:	4629      	mov	r1, r5
 800cd42:	4648      	mov	r0, r9
 800cd44:	f7fc fef2 	bl	8009b2c <_malloc_r>
 800cd48:	b988      	cbnz	r0, 800cd6e <__ssprint_r+0x7c>
 800cd4a:	230c      	movs	r3, #12
 800cd4c:	f8c9 3000 	str.w	r3, [r9]
 800cd50:	89a3      	ldrh	r3, [r4, #12]
 800cd52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cd5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd62:	e02f      	b.n	800cdc4 <__ssprint_r+0xd2>
 800cd64:	e9da b700 	ldrd	fp, r7, [sl]
 800cd68:	f10a 0a08 	add.w	sl, sl, #8
 800cd6c:	e7ce      	b.n	800cd0c <__ssprint_r+0x1a>
 800cd6e:	4642      	mov	r2, r8
 800cd70:	6921      	ldr	r1, [r4, #16]
 800cd72:	9001      	str	r0, [sp, #4]
 800cd74:	f7fd f910 	bl	8009f98 <memcpy>
 800cd78:	89a2      	ldrh	r2, [r4, #12]
 800cd7a:	9b01      	ldr	r3, [sp, #4]
 800cd7c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800cd80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd84:	81a2      	strh	r2, [r4, #12]
 800cd86:	6123      	str	r3, [r4, #16]
 800cd88:	6165      	str	r5, [r4, #20]
 800cd8a:	4443      	add	r3, r8
 800cd8c:	eba5 0508 	sub.w	r5, r5, r8
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	60a5      	str	r5, [r4, #8]
 800cd94:	463b      	mov	r3, r7
 800cd96:	42bb      	cmp	r3, r7
 800cd98:	bf28      	it	cs
 800cd9a:	463b      	movcs	r3, r7
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	4659      	mov	r1, fp
 800cda0:	6820      	ldr	r0, [r4, #0]
 800cda2:	9301      	str	r3, [sp, #4]
 800cda4:	f7fd f903 	bl	8009fae <memmove>
 800cda8:	68a2      	ldr	r2, [r4, #8]
 800cdaa:	9b01      	ldr	r3, [sp, #4]
 800cdac:	1ad2      	subs	r2, r2, r3
 800cdae:	60a2      	str	r2, [r4, #8]
 800cdb0:	6822      	ldr	r2, [r4, #0]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	68b3      	ldr	r3, [r6, #8]
 800cdb8:	1bdf      	subs	r7, r3, r7
 800cdba:	60b7      	str	r7, [r6, #8]
 800cdbc:	2f00      	cmp	r7, #0
 800cdbe:	d1d1      	bne.n	800cd64 <__ssprint_r+0x72>
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	6070      	str	r0, [r6, #4]
 800cdc4:	b003      	add	sp, #12
 800cdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdca:	462a      	mov	r2, r5
 800cdcc:	4648      	mov	r0, r9
 800cdce:	f7fd f91b 	bl	800a008 <_realloc_r>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d1d6      	bne.n	800cd86 <__ssprint_r+0x94>
 800cdd8:	6921      	ldr	r1, [r4, #16]
 800cdda:	4648      	mov	r0, r9
 800cddc:	f7ff fbc4 	bl	800c568 <_free_r>
 800cde0:	e7b3      	b.n	800cd4a <__ssprint_r+0x58>
	...

0800cde4 <__register_exitproc>:
 800cde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde8:	4c26      	ldr	r4, [pc, #152]	; (800ce84 <__register_exitproc+0xa0>)
 800cdea:	4606      	mov	r6, r0
 800cdec:	6820      	ldr	r0, [r4, #0]
 800cdee:	4698      	mov	r8, r3
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	4691      	mov	r9, r2
 800cdf4:	f7fc fe88 	bl	8009b08 <__retarget_lock_acquire_recursive>
 800cdf8:	4b23      	ldr	r3, [pc, #140]	; (800ce88 <__register_exitproc+0xa4>)
 800cdfa:	681d      	ldr	r5, [r3, #0]
 800cdfc:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800ce00:	b918      	cbnz	r0, 800ce0a <__register_exitproc+0x26>
 800ce02:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800ce06:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ce0a:	6843      	ldr	r3, [r0, #4]
 800ce0c:	2b1f      	cmp	r3, #31
 800ce0e:	dd19      	ble.n	800ce44 <__register_exitproc+0x60>
 800ce10:	4b1e      	ldr	r3, [pc, #120]	; (800ce8c <__register_exitproc+0xa8>)
 800ce12:	b933      	cbnz	r3, 800ce22 <__register_exitproc+0x3e>
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	f7fc fe78 	bl	8009b0a <__retarget_lock_release_recursive>
 800ce1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce22:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ce26:	f7fc fe71 	bl	8009b0c <malloc>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d0f2      	beq.n	800ce14 <__register_exitproc+0x30>
 800ce2e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800ce32:	6003      	str	r3, [r0, #0]
 800ce34:	2200      	movs	r2, #0
 800ce36:	6042      	str	r2, [r0, #4]
 800ce38:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ce3c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800ce40:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800ce44:	6843      	ldr	r3, [r0, #4]
 800ce46:	b19e      	cbz	r6, 800ce70 <__register_exitproc+0x8c>
 800ce48:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800ce52:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800ce56:	409a      	lsls	r2, r3
 800ce58:	4311      	orrs	r1, r2
 800ce5a:	2e02      	cmp	r6, #2
 800ce5c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800ce60:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800ce64:	bf02      	ittt	eq
 800ce66:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800ce6a:	430a      	orreq	r2, r1
 800ce6c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	3302      	adds	r3, #2
 800ce74:	6042      	str	r2, [r0, #4]
 800ce76:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800ce7a:	6820      	ldr	r0, [r4, #0]
 800ce7c:	f7fc fe45 	bl	8009b0a <__retarget_lock_release_recursive>
 800ce80:	2000      	movs	r0, #0
 800ce82:	e7cc      	b.n	800ce1e <__register_exitproc+0x3a>
 800ce84:	20000860 	.word	0x20000860
 800ce88:	08088964 	.word	0x08088964
 800ce8c:	08009b0d 	.word	0x08009b0d

0800ce90 <_calloc_r>:
 800ce90:	b510      	push	{r4, lr}
 800ce92:	4351      	muls	r1, r2
 800ce94:	f7fc fe4a 	bl	8009b2c <_malloc_r>
 800ce98:	4604      	mov	r4, r0
 800ce9a:	b198      	cbz	r0, 800cec4 <_calloc_r+0x34>
 800ce9c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800cea0:	f022 0203 	bic.w	r2, r2, #3
 800cea4:	3a04      	subs	r2, #4
 800cea6:	2a24      	cmp	r2, #36	; 0x24
 800cea8:	d81b      	bhi.n	800cee2 <_calloc_r+0x52>
 800ceaa:	2a13      	cmp	r2, #19
 800ceac:	d917      	bls.n	800cede <_calloc_r+0x4e>
 800ceae:	2100      	movs	r1, #0
 800ceb0:	2a1b      	cmp	r2, #27
 800ceb2:	e9c0 1100 	strd	r1, r1, [r0]
 800ceb6:	d807      	bhi.n	800cec8 <_calloc_r+0x38>
 800ceb8:	f100 0308 	add.w	r3, r0, #8
 800cebc:	2200      	movs	r2, #0
 800cebe:	e9c3 2200 	strd	r2, r2, [r3]
 800cec2:	609a      	str	r2, [r3, #8]
 800cec4:	4620      	mov	r0, r4
 800cec6:	bd10      	pop	{r4, pc}
 800cec8:	2a24      	cmp	r2, #36	; 0x24
 800ceca:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800cece:	bf11      	iteee	ne
 800ced0:	f100 0310 	addne.w	r3, r0, #16
 800ced4:	6101      	streq	r1, [r0, #16]
 800ced6:	f100 0318 	addeq.w	r3, r0, #24
 800ceda:	6141      	streq	r1, [r0, #20]
 800cedc:	e7ee      	b.n	800cebc <_calloc_r+0x2c>
 800cede:	4603      	mov	r3, r0
 800cee0:	e7ec      	b.n	800cebc <_calloc_r+0x2c>
 800cee2:	2100      	movs	r1, #0
 800cee4:	f7fd f87c 	bl	8009fe0 <memset>
 800cee8:	e7ec      	b.n	800cec4 <_calloc_r+0x34>

0800ceea <__ascii_mbtowc>:
 800ceea:	b082      	sub	sp, #8
 800ceec:	b901      	cbnz	r1, 800cef0 <__ascii_mbtowc+0x6>
 800ceee:	a901      	add	r1, sp, #4
 800cef0:	b142      	cbz	r2, 800cf04 <__ascii_mbtowc+0x1a>
 800cef2:	b14b      	cbz	r3, 800cf08 <__ascii_mbtowc+0x1e>
 800cef4:	7813      	ldrb	r3, [r2, #0]
 800cef6:	600b      	str	r3, [r1, #0]
 800cef8:	7812      	ldrb	r2, [r2, #0]
 800cefa:	1c10      	adds	r0, r2, #0
 800cefc:	bf18      	it	ne
 800cefe:	2001      	movne	r0, #1
 800cf00:	b002      	add	sp, #8
 800cf02:	4770      	bx	lr
 800cf04:	4610      	mov	r0, r2
 800cf06:	e7fb      	b.n	800cf00 <__ascii_mbtowc+0x16>
 800cf08:	f06f 0001 	mvn.w	r0, #1
 800cf0c:	e7f8      	b.n	800cf00 <__ascii_mbtowc+0x16>

0800cf0e <__ascii_wctomb>:
 800cf0e:	b149      	cbz	r1, 800cf24 <__ascii_wctomb+0x16>
 800cf10:	2aff      	cmp	r2, #255	; 0xff
 800cf12:	bf85      	ittet	hi
 800cf14:	238a      	movhi	r3, #138	; 0x8a
 800cf16:	6003      	strhi	r3, [r0, #0]
 800cf18:	700a      	strbls	r2, [r1, #0]
 800cf1a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cf1e:	bf98      	it	ls
 800cf20:	2001      	movls	r0, #1
 800cf22:	4770      	bx	lr
 800cf24:	4608      	mov	r0, r1
 800cf26:	4770      	bx	lr

0800cf28 <_sbrk>:
 800cf28:	4b04      	ldr	r3, [pc, #16]	; (800cf3c <_sbrk+0x14>)
 800cf2a:	6819      	ldr	r1, [r3, #0]
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	b909      	cbnz	r1, 800cf34 <_sbrk+0xc>
 800cf30:	4903      	ldr	r1, [pc, #12]	; (800cf40 <_sbrk+0x18>)
 800cf32:	6019      	str	r1, [r3, #0]
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	4402      	add	r2, r0
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	4770      	bx	lr
 800cf3c:	20017c64 	.word	0x20017c64
 800cf40:	20017c7c 	.word	0x20017c7c

0800cf44 <_init>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	bf00      	nop
 800cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4a:	bc08      	pop	{r3}
 800cf4c:	469e      	mov	lr, r3
 800cf4e:	4770      	bx	lr

0800cf50 <_fini>:
 800cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf52:	bf00      	nop
 800cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf56:	bc08      	pop	{r3}
 800cf58:	469e      	mov	lr, r3
 800cf5a:	4770      	bx	lr

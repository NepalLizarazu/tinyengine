
TTE_demo_mcunet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006bb4  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800b9c4  0800b9c4  0001b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001284  20000000  0800b9cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006760  20001284  0800cc50  00021284  2**2
                  ALLOC
  8 ._user_heap_stack 00000a00  200079e4  0800cc50  000279e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00021284  2**0
                  CONTENTS, READONLY
 10 .debug_info   00094ea0  00000000  00000000  000212b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000486f  00000000  00000000  000b6154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001ed54  00000000  00000000  000ba9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a40  00000000  00000000  000d9718  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000033c8  00000000  00000000  000da158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c0e9  00000000  00000000  000dd520  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006679  00000000  00000000  000e9609  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000efc82  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026bc  00000000  00000000  000efd00  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  000f23bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20001284 	.word	0x20001284
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004de0 	.word	0x08004de0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20001288 	.word	0x20001288
 8000204:	08004de0 	.word	0x08004de0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000508:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <BSP_PB_Init+0x98>)
{
 800050a:	460b      	mov	r3, r1
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800050c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800050e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8000512:	b530      	push	{r4, r5, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000514:	6311      	str	r1, [r2, #48]	; 0x30
{
 8000516:	b089      	sub	sp, #36	; 0x24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000518:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800051a:	4604      	mov	r4, r0
 800051c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000520:	bb28      	cbnz	r0, 800056e <BSP_PB_Init+0x66>
 8000522:	9200      	str	r2, [sp, #0]
 8000524:	9a00      	ldr	r2, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000526:	b343      	cbz	r3, 800057a <BSP_PB_Init+0x72>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000528:	2b01      	cmp	r3, #1
 800052a:	d11e      	bne.n	800056a <BSP_PB_Init+0x62>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
    gpio_init_structure.Pull = GPIO_NOPULL;
 800052c:	2500      	movs	r5, #0
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    
    if(Button != BUTTON_WAKEUP)
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800052e:	481d      	ldr	r0, [pc, #116]	; (80005a4 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000530:	491d      	ldr	r1, [pc, #116]	; (80005a8 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000532:	2202      	movs	r2, #2
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <BSP_PB_Init+0xa4>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000536:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800053a:	42ac      	cmp	r4, r5
 800053c:	bf18      	it	ne
 800053e:	4603      	movne	r3, r0
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000540:	481b      	ldr	r0, [pc, #108]	; (80005b0 <BSP_PB_Init+0xa8>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000542:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000544:	a903      	add	r1, sp, #12
 8000546:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800054a:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800054c:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000550:	f000 f9da 	bl	8000908 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <BSP_PB_Init+0xac>)
 8000556:	462a      	mov	r2, r5
 8000558:	210f      	movs	r1, #15
 800055a:	f913 4014 	ldrsb.w	r4, [r3, r4, lsl #1]
 800055e:	4620      	mov	r0, r4
 8000560:	f000 f976 	bl	8000850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000564:	4620      	mov	r0, r4
 8000566:	f000 f9a9 	bl	80008bc <HAL_NVIC_EnableIRQ>
  }
}
 800056a:	b009      	add	sp, #36	; 0x24
 800056c:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800056e:	2801      	cmp	r0, #1
 8000570:	d013      	beq.n	800059a <BSP_PB_Init+0x92>
 8000572:	9202      	str	r2, [sp, #8]
 8000574:	9a02      	ldr	r2, [sp, #8]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1d6      	bne.n	8000528 <BSP_PB_Init+0x20>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800057a:	4d0b      	ldr	r5, [pc, #44]	; (80005a8 <BSP_PB_Init+0xa0>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800057c:	2202      	movs	r2, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800057e:	480c      	ldr	r0, [pc, #48]	; (80005b0 <BSP_PB_Init+0xa8>)
 8000580:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000582:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000586:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800058a:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800058c:	9206      	str	r2, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800058e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000592:	f000 f9b9 	bl	8000908 <HAL_GPIO_Init>
}
 8000596:	b009      	add	sp, #36	; 0x24
 8000598:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9a01      	ldr	r2, [sp, #4]
 800059e:	e7c2      	b.n	8000526 <BSP_PB_Init+0x1e>
 80005a0:	40023800 	.word	0x40023800
 80005a4:	10210000 	.word	0x10210000
 80005a8:	08004e00 	.word	0x08004e00
 80005ac:	10110000 	.word	0x10110000
 80005b0:	20000000 	.word	0x20000000
 80005b4:	08004df8 	.word	0x08004df8

080005b8 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80005b8:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80005ba:	4a04      	ldr	r2, [pc, #16]	; (80005cc <BSP_PB_GetState+0x14>)
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <BSP_PB_GetState+0x18>)
 80005be:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80005c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005c6:	f000 fabd 	bl	8000b44 <HAL_GPIO_ReadPin>
}
 80005ca:	bd08      	pop	{r3, pc}
 80005cc:	08004e00 	.word	0x08004e00
 80005d0:	20000000 	.word	0x20000000

080005d4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80005d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80005d8:	4c3b      	ldr	r4, [pc, #236]	; (80006c8 <BSP_LCD_DisplayChar+0xf4>)
{
 80005da:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80005dc:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <BSP_LCD_DisplayChar+0xf8>)
{
 80005de:	4682      	mov	sl, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80005e0:	6825      	ldr	r5, [r4, #0]
 80005e2:	3a20      	subs	r2, #32
{
 80005e4:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80005e6:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80005ea:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80005ee:	f8de 3008 	ldr.w	r3, [lr, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80005f2:	8898      	ldrh	r0, [r3, #4]
 80005f4:	88de      	ldrh	r6, [r3, #6]
 80005f6:	1dc1      	adds	r1, r0, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80005f8:	681c      	ldr	r4, [r3, #0]
 80005fa:	fb06 f202 	mul.w	r2, r6, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80005fe:	10c9      	asrs	r1, r1, #3
 8000600:	9602      	str	r6, [sp, #8]
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8000602:	ebc0 03c1 	rsb	r3, r0, r1, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000606:	9101      	str	r1, [sp, #4]
 8000608:	fb01 f202 	mul.w	r2, r1, r2
  offset =  8 *((width + 7)/8) -  width ;
 800060c:	b2db      	uxtb	r3, r3
 800060e:	9304      	str	r3, [sp, #16]
  
  for(i = 0; i < height; i++)
 8000610:	2e00      	cmp	r6, #0
 8000612:	d04c      	beq.n	80006ae <BSP_LCD_DisplayChar+0xda>
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <BSP_LCD_DisplayChar+0xfc>)
 8000616:	2134      	movs	r1, #52	; 0x34
 8000618:	eb04 0b02 	add.w	fp, r4, r2
 800061c:	fb01 3505 	mla	r5, r1, r5, r3
 8000620:	2300      	movs	r3, #0
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	1e43      	subs	r3, r0, #1
 8000626:	9305      	str	r3, [sp, #20]
 8000628:	9b03      	ldr	r3, [sp, #12]
 800062a:	9a00      	ldr	r2, [sp, #0]
 800062c:	f89b 7000 	ldrb.w	r7, [fp]
 8000630:	eb03 0c02 	add.w	ip, r3, r2
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
    
    switch(((width + 7)/8))
 8000634:	9b01      	ldr	r3, [sp, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	fa1f fc8c 	uxth.w	ip, ip
 800063c:	d005      	beq.n	800064a <BSP_LCD_DisplayChar+0x76>
 800063e:	2b02      	cmp	r3, #2
 8000640:	d138      	bne.n	80006b4 <BSP_LCD_DisplayChar+0xe0>
    case 1:
      line =  pchar[0];      
      break;
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000642:	f8bb 7000 	ldrh.w	r7, [fp]
 8000646:	ba7f      	rev16	r7, r7
 8000648:	b2bf      	uxth	r7, r7
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
      break;
    } 
    
    for (j = 0; j < width; j++)
 800064a:	b340      	cbz	r0, 800069e <BSP_LCD_DisplayChar+0xca>
 800064c:	2100      	movs	r1, #0
    {
      if(line & (1 << (width- j + offset- 1))) 
 800064e:	f04f 0801 	mov.w	r8, #1
 8000652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000656:	eb03 0902 	add.w	r9, r3, r2
 800065a:	e008      	b.n	800066e <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800065c:	2e02      	cmp	r6, #2
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800065e:	f8de 2000 	ldr.w	r2, [lr]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000662:	d016      	beq.n	8000692 <BSP_LCD_DisplayChar+0xbe>
    for (j = 0; j < width; j++)
 8000664:	3101      	adds	r1, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000666:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (j = 0; j < width; j++)
 800066a:	4288      	cmp	r0, r1
 800066c:	d017      	beq.n	800069e <BSP_LCD_DisplayChar+0xca>
      if(line & (1 << (width- j + offset- 1))) 
 800066e:	eba9 0201 	sub.w	r2, r9, r1
 8000672:	eb0a 0301 	add.w	r3, sl, r1
 8000676:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8000678:	fa08 f202 	lsl.w	r2, r8, r2
 800067c:	b29b      	uxth	r3, r3
 800067e:	6cae      	ldr	r6, [r5, #72]	; 0x48
 8000680:	423a      	tst	r2, r7
 8000682:	fb04 330c 	mla	r3, r4, ip, r3
 8000686:	6dec      	ldr	r4, [r5, #92]	; 0x5c
 8000688:	d1e8      	bne.n	800065c <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800068a:	2e02      	cmp	r6, #2
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800068c:	f8de 2004 	ldr.w	r2, [lr, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000690:	d1e8      	bne.n	8000664 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 8000692:	3101      	adds	r1, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000694:	b292      	uxth	r2, r2
    for (j = 0; j < width; j++)
 8000696:	4288      	cmp	r0, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000698:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (j = 0; j < width; j++)
 800069c:	d1e7      	bne.n	800066e <BSP_LCD_DisplayChar+0x9a>
  for(i = 0; i < height; i++)
 800069e:	9b00      	ldr	r3, [sp, #0]
 80006a0:	9a01      	ldr	r2, [sp, #4]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4493      	add	fp, r2
 80006a6:	9a02      	ldr	r2, [sp, #8]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d1bc      	bne.n	8000628 <BSP_LCD_DisplayChar+0x54>
}
 80006ae:	b007      	add	sp, #28
 80006b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80006b4:	043f      	lsls	r7, r7, #16
 80006b6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80006ba:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80006be:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 80006c2:	431f      	orrs	r7, r3
 80006c4:	e7c1      	b.n	800064a <BSP_LCD_DisplayChar+0x76>
 80006c6:	bf00      	nop
 80006c8:	200012a0 	.word	0x200012a0
 80006cc:	200012a4 	.word	0x200012a4
 80006d0:	200012bc 	.word	0x200012bc

080006d4 <BSP_LCD_DisplayStringAt>:
{
 80006d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006d8:	4616      	mov	r6, r2
  while (*ptr++) size ++ ;
 80006da:	7812      	ldrb	r2, [r2, #0]
{
 80006dc:	4604      	mov	r4, r0
 80006de:	4688      	mov	r8, r1
  while (*ptr++) size ++ ;
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	d04b      	beq.n	800077c <BSP_LCD_DisplayStringAt+0xa8>
 80006e4:	1c71      	adds	r1, r6, #1
 80006e6:	1b8d      	subs	r5, r1, r6
 80006e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1fa      	bne.n	80006e6 <BSP_LCD_DisplayStringAt+0x12>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80006f0:	4f23      	ldr	r7, [pc, #140]	; (8000780 <BSP_LCD_DisplayStringAt+0xac>)
 80006f2:	2034      	movs	r0, #52	; 0x34
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80006f4:	4923      	ldr	r1, [pc, #140]	; (8000784 <BSP_LCD_DisplayStringAt+0xb0>)
  switch (Mode)
 80006f6:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80006f8:	f8d7 9000 	ldr.w	r9, [r7]
 80006fc:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000788 <BSP_LCD_DisplayStringAt+0xb4>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000700:	eb09 0749 	add.w	r7, r9, r9, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000704:	fb00 c009 	mla	r0, r0, r9, ip
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000708:	eb01 0187 	add.w	r1, r1, r7, lsl #2
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800070c:	6e00      	ldr	r0, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800070e:	688f      	ldr	r7, [r1, #8]
 8000710:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 8000714:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 8000718:	d029      	beq.n	800076e <BSP_LCD_DisplayStringAt+0x9a>
 800071a:	2b02      	cmp	r3, #2
 800071c:	d021      	beq.n	8000762 <BSP_LCD_DisplayStringAt+0x8e>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800071e:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000720:	b280      	uxth	r0, r0
    ref_column = 1;
 8000722:	2b00      	cmp	r3, #0
 8000724:	bfd8      	it	le
 8000726:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000728:	4586      	cmp	lr, r0
 800072a:	d818      	bhi.n	800075e <BSP_LCD_DisplayStringAt+0x8a>
 800072c:	b1ba      	cbz	r2, 800075e <BSP_LCD_DisplayStringAt+0x8a>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800072e:	2334      	movs	r3, #52	; 0x34
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000730:	4635      	mov	r5, r6
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000732:	fb03 c909 	mla	r9, r3, r9, ip
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8000736:	4620      	mov	r0, r4
 8000738:	4641      	mov	r1, r8
 800073a:	f7ff ff4b 	bl	80005d4 <BSP_LCD_DisplayChar>
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800073e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000742:	88b8      	ldrh	r0, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000744:	1bab      	subs	r3, r5, r6
 8000746:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800074a:	4404      	add	r4, r0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800074c:	b29b      	uxth	r3, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800074e:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000750:	fb00 1313 	mls	r3, r0, r3, r1
 8000754:	b29b      	uxth	r3, r3
 8000756:	4283      	cmp	r3, r0
 8000758:	d301      	bcc.n	800075e <BSP_LCD_DisplayStringAt+0x8a>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d1eb      	bne.n	8000736 <BSP_LCD_DisplayStringAt+0x62>
}
 800075e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000762:	1b49      	subs	r1, r1, r5
 8000764:	fb11 f10e 	smulbb	r1, r1, lr
 8000768:	1b0c      	subs	r4, r1, r4
 800076a:	b2a4      	uxth	r4, r4
      break;
 800076c:	e7d7      	b.n	800071e <BSP_LCD_DisplayStringAt+0x4a>
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800076e:	1b49      	subs	r1, r1, r5
 8000770:	fb0e f101 	mul.w	r1, lr, r1
 8000774:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8000778:	b2a4      	uxth	r4, r4
      break;
 800077a:	e7d0      	b.n	800071e <BSP_LCD_DisplayStringAt+0x4a>
  uint32_t size = 0, xsize = 0; 
 800077c:	4615      	mov	r5, r2
 800077e:	e7b7      	b.n	80006f0 <BSP_LCD_DisplayStringAt+0x1c>
 8000780:	200012a0 	.word	0x200012a0
 8000784:	200012a4 	.word	0x200012a4
 8000788:	200012bc 	.word	0x200012bc

0800078c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_InitTick+0x3c>)
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	490e      	ldr	r1, [pc, #56]	; (80007d0 <HAL_InitTick+0x40>)
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	fbb3 f3f2 	udiv	r3, r3, r2
{
 800079e:	b510      	push	{r4, lr}
 80007a0:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a2:	6808      	ldr	r0, [r1, #0]
 80007a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007a8:	f000 f896 	bl	80008d8 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ac:	b908      	cbnz	r0, 80007b2 <HAL_InitTick+0x22>
 80007ae:	2c0f      	cmp	r4, #15
 80007b0:	d901      	bls.n	80007b6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80007b4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b6:	2200      	movs	r2, #0
 80007b8:	4621      	mov	r1, r4
 80007ba:	f04f 30ff 	mov.w	r0, #4294967295
 80007be:	f000 f847 	bl	8000850 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_InitTick+0x44>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	601c      	str	r4, [r3, #0]
}
 80007c8:	bd10      	pop	{r4, pc}
 80007ca:	bf00      	nop
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	200007bc 	.word	0x200007bc
 80007d4:	20000010 	.word	0x20000010

080007d8 <HAL_Init>:
{
 80007d8:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007e4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007ec:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ee:	f000 f81b 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ffcc 	bl	8000790 <HAL_InitTick>
  HAL_MspInit();
 80007f8:	f7ff ffc8 	bl	800078c <HAL_MspInit>
}
 80007fc:	2000      	movs	r0, #0
 80007fe:	bd08      	pop	{r3, pc}
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_IncTick+0x10>)
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_IncTick+0x14>)
 8000808:	6811      	ldr	r1, [r2, #0]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	440b      	add	r3, r1
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200079d0 	.word	0x200079d0
 8000818:	2000000c 	.word	0x2000000c

0800081c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800081c:	4b01      	ldr	r3, [pc, #4]	; (8000824 <HAL_GetTick+0x8>)
 800081e:	6818      	ldr	r0, [r3, #0]
}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200079d0 	.word	0x200079d0

08000828 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082a:	0200      	lsls	r0, r0, #8
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800083a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800083c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000840:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000842:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8000844:	60c8      	str	r0, [r1, #12]
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	05fa0000 	.word	0x05fa0000

08000850 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_NVIC_SetPriority+0x60>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000858:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	2d04      	cmp	r5, #4
 8000862:	bf28      	it	cs
 8000864:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	2c06      	cmp	r4, #6
 8000868:	d918      	bls.n	800089c <HAL_NVIC_SetPriority+0x4c>
 800086a:	3b03      	subs	r3, #3
 800086c:	f04f 34ff 	mov.w	r4, #4294967295
 8000870:	409c      	lsls	r4, r3
 8000872:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000876:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800087a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	fa02 f205 	lsl.w	r2, r2, r5
 8000880:	ea21 0102 	bic.w	r1, r1, r2
 8000884:	fa01 f203 	lsl.w	r2, r1, r3
 8000888:	ea42 0204 	orr.w	r2, r2, r4
 800088c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000890:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8000892:	db06      	blt.n	80008a2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_NVIC_SetPriority+0x64>)
 8000896:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000898:	bc30      	pop	{r4, r5}
 800089a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089c:	2400      	movs	r4, #0
 800089e:	4623      	mov	r3, r4
 80008a0:	e7e9      	b.n	8000876 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	f000 000f 	and.w	r0, r0, #15
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <HAL_NVIC_SetPriority+0x68>)
 80008a8:	541a      	strb	r2, [r3, r0]
 80008aa:	bc30      	pop	{r4, r5}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00
 80008b4:	e000e400 	.word	0xe000e400
 80008b8:	e000ed14 	.word	0xe000ed14

080008bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008bc:	2800      	cmp	r0, #0
 80008be:	db07      	blt.n	80008d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c0:	2301      	movs	r3, #1
 80008c2:	f000 011f 	and.w	r1, r0, #31
 80008c6:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_NVIC_EnableIRQ+0x18>)
 80008c8:	0940      	lsrs	r0, r0, #5
 80008ca:	408b      	lsls	r3, r1
 80008cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	3801      	subs	r0, #1
 80008da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008de:	d20d      	bcs.n	80008fc <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e4:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	25f0      	movs	r5, #240	; 0xf0
 80008ea:	4c06      	ldr	r4, [pc, #24]	; (8000904 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ec:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ee:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80008f8:	bc30      	pop	{r4, r5}
 80008fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008fc:	2001      	movs	r0, #1
 80008fe:	4770      	bx	lr
 8000900:	e000e010 	.word	0xe000e010
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800090c:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8000b3c <HAL_GPIO_Init+0x234>
{
 8000910:	b083      	sub	sp, #12
 8000912:	468e      	mov	lr, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000914:	2500      	movs	r5, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8000b40 <HAL_GPIO_Init+0x238>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	f8d1 8000 	ldr.w	r8, [r1]
 800091e:	e003      	b.n	8000928 <HAL_GPIO_Init+0x20>
  for(position = 0; position < GPIO_NUMBER; position++)
 8000920:	3501      	adds	r5, #1
 8000922:	2d10      	cmp	r5, #16
 8000924:	f000 80b6 	beq.w	8000a94 <HAL_GPIO_Init+0x18c>
    ioposition = ((uint32_t)0x01) << position;
 8000928:	2301      	movs	r3, #1
 800092a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092c:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8000930:	428b      	cmp	r3, r1
 8000932:	d1f5      	bne.n	8000920 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	f8de 4004 	ldr.w	r4, [lr, #4]
 8000938:	f024 0710 	bic.w	r7, r4, #16
 800093c:	2f02      	cmp	r7, #2
 800093e:	f040 80ac 	bne.w	8000a9a <HAL_GPIO_Init+0x192>
        temp = GPIOx->AFR[position >> 3];
 8000942:	08ef      	lsrs	r7, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000944:	f005 0a07 	and.w	sl, r5, #7
 8000948:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800094c:	f8de 2010 	ldr.w	r2, [lr, #16]
 8000950:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000954:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000958:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800095a:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800095e:	fa02 f20a 	lsl.w	r2, r2, sl
 8000962:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000966:	ea26 060b 	bic.w	r6, r6, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800096a:	f04f 0b03 	mov.w	fp, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800096e:	4332      	orrs	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000970:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000974:	f004 0603 	and.w	r6, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 8000978:	623a      	str	r2, [r7, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800097a:	ea6f 020b 	mvn.w	r2, fp
      temp = GPIOx->MODER;
 800097e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000980:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000984:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000986:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000988:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 800098a:	6886      	ldr	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800098c:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000990:	ea06 0b02 	and.w	fp, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000994:	f8de 600c 	ldr.w	r6, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000998:	40af      	lsls	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800099a:	fa06 f60a 	lsl.w	r6, r6, sl
 800099e:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 80009a2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80009a4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a6:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009aa:	431f      	orrs	r7, r3
        GPIOx->OTYPER = temp;
 80009ac:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80009ae:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b0:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009b2:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80009b6:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009ba:	fa03 f30a 	lsl.w	r3, r3, sl
 80009be:	ea43 0302 	orr.w	r3, r3, r2
      GPIOx->PUPDR = temp;
 80009c2:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c4:	d5ac      	bpl.n	8000920 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80009ca:	f025 0703 	bic.w	r7, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009ce:	f005 0303 	and.w	r3, r5, #3
 80009d2:	220f      	movs	r2, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80009d8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009dc:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80009e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80009e6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009ea:	fa02 fa03 	lsl.w	sl, r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80009f2:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009f4:	4e48      	ldr	r6, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	9a01      	ldr	r2, [sp, #4]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009f8:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2];
 80009fa:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009fc:	ea22 020a 	bic.w	r2, r2, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a00:	d020      	beq.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000a02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a06:	42b0      	cmp	r0, r6
 8000a08:	d05e      	beq.n	8000ac8 <HAL_GPIO_Init+0x1c0>
 8000a0a:	4e44      	ldr	r6, [pc, #272]	; (8000b1c <HAL_GPIO_Init+0x214>)
 8000a0c:	42b0      	cmp	r0, r6
 8000a0e:	d060      	beq.n	8000ad2 <HAL_GPIO_Init+0x1ca>
 8000a10:	4e43      	ldr	r6, [pc, #268]	; (8000b20 <HAL_GPIO_Init+0x218>)
 8000a12:	42b0      	cmp	r0, r6
 8000a14:	d062      	beq.n	8000adc <HAL_GPIO_Init+0x1d4>
 8000a16:	4e43      	ldr	r6, [pc, #268]	; (8000b24 <HAL_GPIO_Init+0x21c>)
 8000a18:	42b0      	cmp	r0, r6
 8000a1a:	d064      	beq.n	8000ae6 <HAL_GPIO_Init+0x1de>
 8000a1c:	4e42      	ldr	r6, [pc, #264]	; (8000b28 <HAL_GPIO_Init+0x220>)
 8000a1e:	42b0      	cmp	r0, r6
 8000a20:	d06b      	beq.n	8000afa <HAL_GPIO_Init+0x1f2>
 8000a22:	4e42      	ldr	r6, [pc, #264]	; (8000b2c <HAL_GPIO_Init+0x224>)
 8000a24:	42b0      	cmp	r0, r6
 8000a26:	d06d      	beq.n	8000b04 <HAL_GPIO_Init+0x1fc>
 8000a28:	4e41      	ldr	r6, [pc, #260]	; (8000b30 <HAL_GPIO_Init+0x228>)
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	d060      	beq.n	8000af0 <HAL_GPIO_Init+0x1e8>
 8000a2e:	4e41      	ldr	r6, [pc, #260]	; (8000b34 <HAL_GPIO_Init+0x22c>)
 8000a30:	42b0      	cmp	r0, r6
 8000a32:	d06c      	beq.n	8000b0e <HAL_GPIO_Init+0x206>
 8000a34:	4e40      	ldr	r6, [pc, #256]	; (8000b38 <HAL_GPIO_Init+0x230>)
 8000a36:	42b0      	cmp	r0, r6
 8000a38:	bf0c      	ite	eq
 8000a3a:	2609      	moveq	r6, #9
 8000a3c:	260a      	movne	r6, #10
 8000a3e:	fa06 f303 	lsl.w	r3, r6, r3
 8000a42:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a44:	60ba      	str	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a46:	03e6      	lsls	r6, r4, #15
        temp = EXTI->IMR;
 8000a48:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	ea6f 0201 	mvn.w	r2, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a50:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8000a54:	bf54      	ite	pl
 8000a56:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000a58:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5a:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8000a5c:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8000a60:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a64:	bf54      	ite	pl
 8000a66:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000a68:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6a:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8000a6c:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8000a70:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8000a74:	bf54      	ite	pl
 8000a76:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000a78:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000a7c:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8000a80:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	bf54      	ite	pl
 8000a86:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000a88:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a8a:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8000a8c:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a90:	f47f af4a 	bne.w	8000928 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a94:	b003      	add	sp, #12
 8000a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a9e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8000aa0:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000aa6:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aaa:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aae:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ab0:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ab4:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ab8:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000abc:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8000ac0:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac2:	f63f af74 	bhi.w	80009ae <HAL_GPIO_Init+0xa6>
 8000ac6:	e760      	b.n	800098a <HAL_GPIO_Init+0x82>
 8000ac8:	2601      	movs	r6, #1
 8000aca:	fa06 f303 	lsl.w	r3, r6, r3
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	e7b8      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	fa06 f303 	lsl.w	r3, r6, r3
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	e7b3      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000adc:	2603      	movs	r6, #3
 8000ade:	fa06 f303 	lsl.w	r3, r6, r3
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	e7ae      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000ae6:	2604      	movs	r6, #4
 8000ae8:	fa06 f303 	lsl.w	r3, r6, r3
 8000aec:	431a      	orrs	r2, r3
 8000aee:	e7a9      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000af0:	2607      	movs	r6, #7
 8000af2:	fa06 f303 	lsl.w	r3, r6, r3
 8000af6:	431a      	orrs	r2, r3
 8000af8:	e7a4      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000afa:	2605      	movs	r6, #5
 8000afc:	fa06 f303 	lsl.w	r3, r6, r3
 8000b00:	431a      	orrs	r2, r3
 8000b02:	e79f      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000b04:	2606      	movs	r6, #6
 8000b06:	fa06 f303 	lsl.w	r3, r6, r3
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	e79a      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000b0e:	2608      	movs	r6, #8
 8000b10:	fa06 f303 	lsl.w	r3, r6, r3
 8000b14:	431a      	orrs	r2, r3
 8000b16:	e795      	b.n	8000a44 <HAL_GPIO_Init+0x13c>
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021c00 	.word	0x40021c00
 8000b34:	40022000 	.word	0x40022000
 8000b38:	40022400 	.word	0x40022400
 8000b3c:	40013c00 	.word	0x40013c00
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b44:	6903      	ldr	r3, [r0, #16]
 8000b46:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000b48:	bf14      	ite	ne
 8000b4a:	2001      	movne	r0, #1
 8000b4c:	2000      	moveq	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	b902      	cbnz	r2, 8000b54 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b52:	0409      	lsls	r1, r1, #16
 8000b54:	6181      	str	r1, [r0, #24]
  }
}
 8000b56:	4770      	bx	lr

08000b58 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000b5e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8000b62:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	6411      	str	r1, [r2, #64]	; 0x40
{
 8000b66:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b6a:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b7a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000b7c:	f7ff fe4e 	bl	800081c <HAL_GetTick>
 8000b80:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b82:	e005      	b.n	8000b90 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b84:	f7ff fe4a 	bl	800081c <HAL_GetTick>
 8000b88:	1b40      	subs	r0, r0, r5
 8000b8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b8e:	d817      	bhi.n	8000bc0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	03da      	lsls	r2, r3, #15
 8000b94:	d5f6      	bpl.n	8000b84 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b96:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b98:	4d0c      	ldr	r5, [pc, #48]	; (8000bcc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000ba0:	f7ff fe3c 	bl	800081c <HAL_GetTick>
 8000ba4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ba6:	e005      	b.n	8000bb4 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ba8:	f7ff fe38 	bl	800081c <HAL_GetTick>
 8000bac:	1b00      	subs	r0, r0, r4
 8000bae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000bb2:	d805      	bhi.n	8000bc0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bb4:	686b      	ldr	r3, [r5, #4]
 8000bb6:	039b      	lsls	r3, r3, #14
 8000bb8:	d5f6      	bpl.n	8000ba8 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000bba:	2000      	movs	r0, #0
}
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8000bc0:	2003      	movs	r0, #3
}
 8000bc2:	b003      	add	sp, #12
 8000bc4:	bd30      	pop	{r4, r5, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	f000 8134 	beq.w	8000e3e <HAL_RCC_OscConfig+0x26e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd6:	6803      	ldr	r3, [r0, #0]
{
 8000bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bdc:	07dd      	lsls	r5, r3, #31
{
 8000bde:	b082      	sub	sp, #8
 8000be0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	d535      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be4:	49ab      	ldr	r1, [pc, #684]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000be6:	688a      	ldr	r2, [r1, #8]
 8000be8:	f002 020c 	and.w	r2, r2, #12
 8000bec:	2a04      	cmp	r2, #4
 8000bee:	f000 80fe 	beq.w	8000dee <HAL_RCC_OscConfig+0x21e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf2:	688a      	ldr	r2, [r1, #8]
 8000bf4:	f002 020c 	and.w	r2, r2, #12
 8000bf8:	2a08      	cmp	r2, #8
 8000bfa:	f000 80f4 	beq.w	8000de6 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfe:	6863      	ldr	r3, [r4, #4]
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d010      	beq.n	8000c28 <HAL_RCC_OscConfig+0x58>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 811b 	beq.w	8000e42 <HAL_RCC_OscConfig+0x272>
 8000c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c10:	4ba0      	ldr	r3, [pc, #640]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f000 8162 	beq.w	8000edc <HAL_RCC_OscConfig+0x30c>
 8000c18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e004      	b.n	8000c32 <HAL_RCC_OscConfig+0x62>
 8000c28:	4a9a      	ldr	r2, [pc, #616]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c32:	f7ff fdf3 	bl	800081c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	4d97      	ldr	r5, [pc, #604]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8000c38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3a:	e005      	b.n	8000c48 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fdee 	bl	800081c <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	2864      	cmp	r0, #100	; 0x64
 8000c44:	f200 80ee 	bhi.w	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	039a      	lsls	r2, r3, #14
 8000c4c:	d5f6      	bpl.n	8000c3c <HAL_RCC_OscConfig+0x6c>
 8000c4e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c50:	079f      	lsls	r7, r3, #30
 8000c52:	d442      	bmi.n	8000cda <HAL_RCC_OscConfig+0x10a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c54:	071a      	lsls	r2, r3, #28
 8000c56:	d517      	bpl.n	8000c88 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c58:	6963      	ldr	r3, [r4, #20]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80b0 	beq.w	8000dc0 <HAL_RCC_OscConfig+0x1f0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c60:	4b8c      	ldr	r3, [pc, #560]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000c62:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c64:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8000c66:	f042 0201 	orr.w	r2, r2, #1
 8000c6a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c6c:	f7ff fdd6 	bl	800081c <HAL_GetTick>
 8000c70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c72:	e005      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c74:	f7ff fdd2 	bl	800081c <HAL_GetTick>
 8000c78:	1b80      	subs	r0, r0, r6
 8000c7a:	2802      	cmp	r0, #2
 8000c7c:	f200 80d2 	bhi.w	8000e24 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c82:	079b      	lsls	r3, r3, #30
 8000c84:	d5f6      	bpl.n	8000c74 <HAL_RCC_OscConfig+0xa4>
 8000c86:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c88:	075d      	lsls	r5, r3, #29
 8000c8a:	d56b      	bpl.n	8000d64 <HAL_RCC_OscConfig+0x194>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8c:	4b81      	ldr	r3, [pc, #516]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c90:	00d0      	lsls	r0, r2, #3
 8000c92:	f100 80ed 	bmi.w	8000e70 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000c98:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000caa:	4b7b      	ldr	r3, [pc, #492]	; (8000e98 <HAL_RCC_OscConfig+0x2c8>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	05d1      	lsls	r1, r2, #23
 8000cb0:	f140 80a7 	bpl.w	8000e02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb4:	68a3      	ldr	r3, [r4, #8]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d039      	beq.n	8000d2e <HAL_RCC_OscConfig+0x15e>
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80da 	beq.w	8000e74 <HAL_RCC_OscConfig+0x2a4>
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	4b74      	ldr	r3, [pc, #464]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000cc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cc6:	f000 8111 	beq.w	8000eec <HAL_RCC_OscConfig+0x31c>
 8000cca:	f022 0201 	bic.w	r2, r2, #1
 8000cce:	671a      	str	r2, [r3, #112]	; 0x70
 8000cd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cd2:	f022 0204 	bic.w	r2, r2, #4
 8000cd6:	671a      	str	r2, [r3, #112]	; 0x70
 8000cd8:	e02e      	b.n	8000d38 <HAL_RCC_OscConfig+0x168>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cda:	4a6e      	ldr	r2, [pc, #440]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000cdc:	6891      	ldr	r1, [r2, #8]
 8000cde:	f011 0f0c 	tst.w	r1, #12
 8000ce2:	d062      	beq.n	8000daa <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce4:	6891      	ldr	r1, [r2, #8]
 8000ce6:	f001 010c 	and.w	r1, r1, #12
 8000cea:	2908      	cmp	r1, #8
 8000cec:	d05a      	beq.n	8000da4 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cee:	68e3      	ldr	r3, [r4, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 80df 	beq.w	8000eb4 <HAL_RCC_OscConfig+0x2e4>
        __HAL_RCC_HSI_ENABLE();
 8000cf6:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfa:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	f042 0201 	orr.w	r2, r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d02:	f7ff fd8b 	bl	800081c <HAL_GetTick>
 8000d06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	e005      	b.n	8000d16 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fd87 	bl	800081c <HAL_GetTick>
 8000d0e:	1b80      	subs	r0, r0, r6
 8000d10:	2802      	cmp	r0, #2
 8000d12:	f200 8087 	bhi.w	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	0798      	lsls	r0, r3, #30
 8000d1a:	d5f6      	bpl.n	8000d0a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d28:	602b      	str	r3, [r5, #0]
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	e792      	b.n	8000c54 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2e:	4a59      	ldr	r2, [pc, #356]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000d30:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d38:	f7ff fd70 	bl	800081c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d3c:	4e55      	ldr	r6, [pc, #340]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8000d3e:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d40:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d44:	e005      	b.n	8000d52 <HAL_RCC_OscConfig+0x182>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fd69 	bl	800081c <HAL_GetTick>
 8000d4a:	eba0 0008 	sub.w	r0, r0, r8
 8000d4e:	42b8      	cmp	r0, r7
 8000d50:	d868      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d52:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000d54:	079b      	lsls	r3, r3, #30
 8000d56:	d5f6      	bpl.n	8000d46 <HAL_RCC_OscConfig+0x176>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d58:	b125      	cbz	r5, 8000d64 <HAL_RCC_OscConfig+0x194>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5a:	4a4e      	ldr	r2, [pc, #312]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000d5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d64:	69a3      	ldr	r3, [r4, #24]
 8000d66:	b1cb      	cbz	r3, 8000d9c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d68:	4a4a      	ldr	r2, [pc, #296]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000d6a:	6891      	ldr	r1, [r2, #8]
 8000d6c:	f001 010c 	and.w	r1, r1, #12
 8000d70:	2908      	cmp	r1, #8
 8000d72:	d021      	beq.n	8000db8 <HAL_RCC_OscConfig+0x1e8>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d74:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d76:	6813      	ldr	r3, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d78:	f000 80c0 	beq.w	8000efc <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d80:	4614      	mov	r4, r2
        __HAL_RCC_PLL_DISABLE();
 8000d82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d84:	f7ff fd4a 	bl	800081c <HAL_GetTick>
 8000d88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d8a:	e004      	b.n	8000d96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8c:	f7ff fd46 	bl	800081c <HAL_GetTick>
 8000d90:	1b40      	subs	r0, r0, r5
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d846      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	d4f7      	bmi.n	8000d8c <HAL_RCC_OscConfig+0x1bc>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
}
 8000d9e:	b002      	add	sp, #8
 8000da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da4:	6852      	ldr	r2, [r2, #4]
 8000da6:	0256      	lsls	r6, r2, #9
 8000da8:	d4a1      	bmi.n	8000cee <HAL_RCC_OscConfig+0x11e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000daa:	4a3a      	ldr	r2, [pc, #232]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	0795      	lsls	r5, r2, #30
 8000db0:	d53c      	bpl.n	8000e2c <HAL_RCC_OscConfig+0x25c>
 8000db2:	68e2      	ldr	r2, [r4, #12]
 8000db4:	2a01      	cmp	r2, #1
 8000db6:	d039      	beq.n	8000e2c <HAL_RCC_OscConfig+0x25c>
    return HAL_ERROR;
 8000db8:	2001      	movs	r0, #1
}
 8000dba:	b002      	add	sp, #8
 8000dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000dc2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc4:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fd26 	bl	800081c <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd2:	e004      	b.n	8000dde <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fd22 	bl	800081c <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d822      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000de0:	079f      	lsls	r7, r3, #30
 8000de2:	d4f7      	bmi.n	8000dd4 <HAL_RCC_OscConfig+0x204>
 8000de4:	e74f      	b.n	8000c86 <HAL_RCC_OscConfig+0xb6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de6:	684a      	ldr	r2, [r1, #4]
 8000de8:	0250      	lsls	r0, r2, #9
 8000dea:	f57f af08 	bpl.w	8000bfe <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dee:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	0391      	lsls	r1, r2, #14
 8000df4:	f57f af2c 	bpl.w	8000c50 <HAL_RCC_OscConfig+0x80>
 8000df8:	6862      	ldr	r2, [r4, #4]
 8000dfa:	2a00      	cmp	r2, #0
 8000dfc:	f47f af28 	bne.w	8000c50 <HAL_RCC_OscConfig+0x80>
 8000e00:	e7da      	b.n	8000db8 <HAL_RCC_OscConfig+0x1e8>
      PWR->CR1 |= PWR_CR1_DBP;
 8000e02:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e04:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8000e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fd06 	bl	800081c <HAL_GetTick>
 8000e10:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e12:	6833      	ldr	r3, [r6, #0]
 8000e14:	05da      	lsls	r2, r3, #23
 8000e16:	f53f af4d 	bmi.w	8000cb4 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e1a:	f7ff fcff 	bl	800081c <HAL_GetTick>
 8000e1e:	1bc0      	subs	r0, r0, r7
 8000e20:	2864      	cmp	r0, #100	; 0x64
 8000e22:	d9f6      	bls.n	8000e12 <HAL_RCC_OscConfig+0x242>
            return HAL_TIMEOUT;
 8000e24:	2003      	movs	r0, #3
}
 8000e26:	b002      	add	sp, #8
 8000e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	4919      	ldr	r1, [pc, #100]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000e2e:	6920      	ldr	r0, [r4, #16]
 8000e30:	680a      	ldr	r2, [r1, #0]
 8000e32:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e36:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000e3a:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3c:	e70a      	b.n	8000c54 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
}
 8000e40:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
 8000e44:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e46:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e56:	f7ff fce1 	bl	800081c <HAL_GetTick>
 8000e5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5c:	e004      	b.n	8000e68 <HAL_RCC_OscConfig+0x298>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fcdd 	bl	800081c <HAL_GetTick>
 8000e62:	1b80      	subs	r0, r0, r6
 8000e64:	2864      	cmp	r0, #100	; 0x64
 8000e66:	d8dd      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	039b      	lsls	r3, r3, #14
 8000e6c:	d4f7      	bmi.n	8000e5e <HAL_RCC_OscConfig+0x28e>
 8000e6e:	e6ee      	b.n	8000c4e <HAL_RCC_OscConfig+0x7e>
  FlagStatus pwrclkchanged = RESET;
 8000e70:	2500      	movs	r5, #0
 8000e72:	e71a      	b.n	8000caa <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_RCC_OscConfig+0x2c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e7c:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	671a      	str	r2, [r3, #112]	; 0x70
 8000e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fcc6 	bl	800081c <HAL_GetTick>
 8000e90:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x2d6>
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fcbe 	bl	800081c <HAL_GetTick>
 8000ea0:	1bc0      	subs	r0, r0, r7
 8000ea2:	4540      	cmp	r0, r8
 8000ea4:	d8be      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000ea8:	0798      	lsls	r0, r3, #30
 8000eaa:	d4f7      	bmi.n	8000e9c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	f43f af59 	beq.w	8000d64 <HAL_RCC_OscConfig+0x194>
 8000eb2:	e752      	b.n	8000d5a <HAL_RCC_OscConfig+0x18a>
        __HAL_RCC_HSI_DISABLE();
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_RCC_OscConfig+0x394>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb8:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fcac 	bl	800081c <HAL_GetTick>
 8000ec4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	e004      	b.n	8000ed2 <HAL_RCC_OscConfig+0x302>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fca8 	bl	800081c <HAL_GetTick>
 8000ecc:	1b80      	subs	r0, r0, r6
 8000ece:	2802      	cmp	r0, #2
 8000ed0:	d8a8      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed2:	682b      	ldr	r3, [r5, #0]
 8000ed4:	0799      	lsls	r1, r3, #30
 8000ed6:	d4f7      	bmi.n	8000ec8 <HAL_RCC_OscConfig+0x2f8>
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	e6bb      	b.n	8000c54 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000edc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e6a2      	b.n	8000c32 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eec:	f042 0204 	orr.w	r2, r2, #4
 8000ef0:	671a      	str	r2, [r3, #112]	; 0x70
 8000ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ef4:	f042 0201 	orr.w	r2, r2, #1
 8000ef8:	671a      	str	r2, [r3, #112]	; 0x70
 8000efa:	e71d      	b.n	8000d38 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_PLL_DISABLE();
 8000efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f00:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 8000f02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f04:	f7ff fc8a 	bl	800081c <HAL_GetTick>
 8000f08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0a:	e004      	b.n	8000f16 <HAL_RCC_OscConfig+0x346>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0c:	f7ff fc86 	bl	800081c <HAL_GetTick>
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d886      	bhi.n	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f16:	682b      	ldr	r3, [r5, #0]
 8000f18:	0199      	lsls	r1, r3, #6
 8000f1a:	d4f7      	bmi.n	8000f0c <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f1c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f22:	4313      	orrs	r3, r2
 8000f24:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8000f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2c:	4c0d      	ldr	r4, [pc, #52]	; (8000f64 <HAL_RCC_OscConfig+0x394>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f2e:	0852      	lsrs	r2, r2, #1
 8000f30:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000f34:	3a01      	subs	r2, #1
 8000f36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f3e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc68 	bl	800081c <HAL_GetTick>
 8000f4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4e:	e005      	b.n	8000f5c <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f50:	f7ff fc64 	bl	800081c <HAL_GetTick>
 8000f54:	1b40      	subs	r0, r0, r5
 8000f56:	2802      	cmp	r0, #2
 8000f58:	f63f af64 	bhi.w	8000e24 <HAL_RCC_OscConfig+0x254>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	019a      	lsls	r2, r3, #6
 8000f60:	d5f6      	bpl.n	8000f50 <HAL_RCC_OscConfig+0x380>
 8000f62:	e71b      	b.n	8000d9c <HAL_RCC_OscConfig+0x1cc>
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f68:	b178      	cbz	r0, 8000f8a <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f6a:	4a5e      	ldr	r2, [pc, #376]	; (80010e4 <HAL_RCC_ClockConfig+0x17c>)
 8000f6c:	6813      	ldr	r3, [r2, #0]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d20b      	bcs.n	8000f8e <HAL_RCC_ClockConfig+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	f023 030f 	bic.w	r3, r3, #15
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000f8c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f8e:	6803      	ldr	r3, [r0, #0]
{
 8000f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f94:	079d      	lsls	r5, r3, #30
 8000f96:	d514      	bpl.n	8000fc2 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f98:	075c      	lsls	r4, r3, #29
 8000f9a:	d504      	bpl.n	8000fa6 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f9c:	4c52      	ldr	r4, [pc, #328]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 8000f9e:	68a2      	ldr	r2, [r4, #8]
 8000fa0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000fa4:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa6:	071a      	lsls	r2, r3, #28
 8000fa8:	d504      	bpl.n	8000fb4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000faa:	4c4f      	ldr	r4, [pc, #316]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 8000fac:	68a2      	ldr	r2, [r4, #8]
 8000fae:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000fb2:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb4:	4c4c      	ldr	r4, [pc, #304]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 8000fb6:	6885      	ldr	r5, [r0, #8]
 8000fb8:	68a2      	ldr	r2, [r4, #8]
 8000fba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fbe:	432a      	orrs	r2, r5
 8000fc0:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc2:	07df      	lsls	r7, r3, #31
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460d      	mov	r5, r1
 8000fc8:	d521      	bpl.n	800100e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fca:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fcc:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fce:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd2:	d063      	beq.n	800109c <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd4:	2a02      	cmp	r2, #2
 8000fd6:	d078      	beq.n	80010ca <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd8:	0799      	lsls	r1, r3, #30
 8000fda:	d528      	bpl.n	800102e <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fdc:	4942      	ldr	r1, [pc, #264]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fde:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe2:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe4:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe6:	f023 0303 	bic.w	r3, r3, #3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000fee:	f7ff fc15 	bl	800081c <HAL_GetTick>
 8000ff2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff4:	e004      	b.n	8001000 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff6:	f7ff fc11 	bl	800081c <HAL_GetTick>
 8000ffa:	1bc0      	subs	r0, r0, r7
 8000ffc:	4540      	cmp	r0, r8
 8000ffe:	d862      	bhi.n	80010c6 <HAL_RCC_ClockConfig+0x15e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001000:	68b3      	ldr	r3, [r6, #8]
 8001002:	6862      	ldr	r2, [r4, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800100c:	d1f3      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800100e:	4a35      	ldr	r2, [pc, #212]	; (80010e4 <HAL_RCC_ClockConfig+0x17c>)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	42ab      	cmp	r3, r5
 8001018:	d90c      	bls.n	8001034 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f023 030f 	bic.w	r3, r3, #15
 8001020:	432b      	orrs	r3, r5
 8001022:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	42ab      	cmp	r3, r5
 800102c:	d002      	beq.n	8001034 <HAL_RCC_ClockConfig+0xcc>
    return HAL_ERROR;
 800102e:	2001      	movs	r0, #1
}
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	075a      	lsls	r2, r3, #29
 8001038:	d506      	bpl.n	8001048 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800103a:	492b      	ldr	r1, [pc, #172]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 800103c:	68e0      	ldr	r0, [r4, #12]
 800103e:	688a      	ldr	r2, [r1, #8]
 8001040:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001044:	4302      	orrs	r2, r0
 8001046:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001048:	071b      	lsls	r3, r3, #28
 800104a:	d507      	bpl.n	800105c <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800104c:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 800104e:	6921      	ldr	r1, [r4, #16]
 8001050:	6893      	ldr	r3, [r2, #8]
 8001052:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001056:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800105a:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800105c:	4922      	ldr	r1, [pc, #136]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 800105e:	688b      	ldr	r3, [r1, #8]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d01c      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x13a>
 8001068:	2b08      	cmp	r3, #8
 800106a:	d12a      	bne.n	80010c2 <HAL_RCC_ClockConfig+0x15a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800106c:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800106e:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001070:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001074:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001076:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800107a:	d129      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x168>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800107c:	481b      	ldr	r0, [pc, #108]	; (80010ec <HAL_RCC_ClockConfig+0x184>)
 800107e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001082:	fba1 0100 	umull	r0, r1, r1, r0
 8001086:	f7ff f8bf 	bl	8000208 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001092:	3301      	adds	r3, #1
 8001094:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	e003      	b.n	80010a4 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109c:	039e      	lsls	r6, r3, #14
 800109e:	d49d      	bmi.n	8000fdc <HAL_RCC_ClockConfig+0x74>
 80010a0:	e7c5      	b.n	800102e <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a4:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_RCC_ClockConfig+0x180>)
  HAL_InitTick (TICK_INT_PRIORITY);
 80010a6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a8:	4c12      	ldr	r4, [pc, #72]	; (80010f4 <HAL_RCC_ClockConfig+0x18c>)
 80010aa:	6892      	ldr	r2, [r2, #8]
 80010ac:	4912      	ldr	r1, [pc, #72]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 80010ae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80010b2:	5ca2      	ldrb	r2, [r4, r2]
 80010b4:	40d3      	lsrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010b8:	f7ff fb6a 	bl	8000790 <HAL_InitTick>
  return HAL_OK;
 80010bc:	2000      	movs	r0, #0
}
 80010be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_ClockConfig+0x184>)
 80010c4:	e7ee      	b.n	80010a4 <HAL_RCC_ClockConfig+0x13c>
        return HAL_TIMEOUT;
 80010c6:	2003      	movs	r0, #3
 80010c8:	e7b2      	b.n	8001030 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ca:	0198      	lsls	r0, r3, #6
 80010cc:	d486      	bmi.n	8000fdc <HAL_RCC_ClockConfig+0x74>
 80010ce:	e7ae      	b.n	800102e <HAL_RCC_ClockConfig+0xc6>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <HAL_RCC_ClockConfig+0x188>)
 80010d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80010d6:	2300      	movs	r3, #0
 80010d8:	fba1 0100 	umull	r0, r1, r1, r0
 80010dc:	f7ff f894 	bl	8000208 <__aeabi_uldivmod>
 80010e0:	e7d3      	b.n	800108a <HAL_RCC_ClockConfig+0x122>
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	00f42400 	.word	0x00f42400
 80010f0:	017d7840 	.word	0x017d7840
 80010f4:	08004e28 	.word	0x08004e28
 80010f8:	200007bc 	.word	0x200007bc

080010fc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010fc:	4916      	ldr	r1, [pc, #88]	; (8001158 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80010fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001100:	688b      	ldr	r3, [r1, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b04      	cmp	r3, #4
 8001108:	d01b      	beq.n	8001142 <HAL_RCC_GetSysClockFreq+0x46>
 800110a:	2b08      	cmp	r3, #8
 800110c:	d117      	bne.n	800113e <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800110e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001110:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001112:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001116:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001118:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800111c:	d113      	bne.n	8001146 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <HAL_RCC_GetSysClockFreq+0x60>)
 8001120:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001124:	fba1 0100 	umull	r0, r1, r1, r0
 8001128:	f7ff f86e 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_RCC_GetSysClockFreq+0x5c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001134:	3301      	adds	r3, #1
 8001136:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001138:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800113c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001140:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001144:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <HAL_RCC_GetSysClockFreq+0x64>)
 8001148:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800114c:	2300      	movs	r3, #0
 800114e:	fba1 0100 	umull	r0, r1, r1, r0
 8001152:	f7ff f859 	bl	8000208 <__aeabi_uldivmod>
 8001156:	e7e9      	b.n	800112c <HAL_RCC_GetSysClockFreq+0x30>
 8001158:	40023800 	.word	0x40023800
 800115c:	00f42400 	.word	0x00f42400
 8001160:	017d7840 	.word	0x017d7840

08001164 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001168:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800116a:	4905      	ldr	r1, [pc, #20]	; (8001180 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800116c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001170:	6808      	ldr	r0, [r1, #0]
 8001172:	5cd3      	ldrb	r3, [r2, r3]
}
 8001174:	40d8      	lsrs	r0, r3
 8001176:	4770      	bx	lr
 8001178:	40023800 	.word	0x40023800
 800117c:	08004e38 	.word	0x08004e38
 8001180:	200007bc 	.word	0x200007bc

08001184 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001188:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800118a:	4905      	ldr	r1, [pc, #20]	; (80011a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800118c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001190:	6808      	ldr	r0, [r1, #0]
 8001192:	5cd3      	ldrb	r3, [r2, r3]
}
 8001194:	40d8      	lsrs	r0, r3
 8001196:	4770      	bx	lr
 8001198:	40023800 	.word	0x40023800
 800119c:	08004e38 	.word	0x08004e38
 80011a0:	200007bc 	.word	0x200007bc

080011a4 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a8:	4699      	mov	r9, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80011aa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
{
 80011ae:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY)
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d150      	bne.n	8001256 <HAL_UART_Receive+0xb2>
 80011b4:	4688      	mov	r8, r1
  {
    if((pData == NULL ) || (Size == 0U))
 80011b6:	2900      	cmp	r1, #0
 80011b8:	d051      	beq.n	800125e <HAL_UART_Receive+0xba>
 80011ba:	fab2 f382 	clz	r3, r2
 80011be:	9201      	str	r2, [sp, #4]
 80011c0:	095b      	lsrs	r3, r3, #5
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <HAL_UART_Receive+0xba>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80011c6:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 80011ca:	4605      	mov	r5, r0
 80011cc:	2901      	cmp	r1, #1
 80011ce:	d042      	beq.n	8001256 <HAL_UART_Receive+0xb2>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011d0:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 80011d2:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80011d4:	2322      	movs	r3, #34	; 0x22
    __HAL_LOCK(huart);
 80011d6:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80011da:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80011de:	f7ff fb1d 	bl	800081c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80011e2:	68ab      	ldr	r3, [r5, #8]
    huart->RxXferSize = Size;
 80011e4:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 80011e6:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 80011e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80011ec:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
    huart->RxXferCount = Size;
 80011f0:	f8a5 205a 	strh.w	r2, [r5, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80011f4:	d05f      	beq.n	80012b6 <HAL_UART_Receive+0x112>
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d165      	bne.n	80012c6 <HAL_UART_Receive+0x122>
 80011fa:	692b      	ldr	r3, [r5, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d168      	bne.n	80012d2 <HAL_UART_Receive+0x12e>
 8001200:	26ff      	movs	r6, #255	; 0xff
 8001202:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001206:	f8b5 005a 	ldrh.w	r0, [r5, #90]	; 0x5a
 800120a:	b280      	uxth	r0, r0
 800120c:	b1d8      	cbz	r0, 8001246 <HAL_UART_Receive+0xa2>
    {
      huart->RxXferCount--;
 800120e:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
 8001212:	3a01      	subs	r2, #1
 8001214:	b292      	uxth	r2, r2
 8001216:	f8a5 205a 	strh.w	r2, [r5, #90]	; 0x5a
 800121a:	f1b9 3fff 	cmp.w	r9, #4294967295
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800121e:	682c      	ldr	r4, [r5, #0]
 8001220:	d121      	bne.n	8001266 <HAL_UART_Receive+0xc2>
 8001222:	69e2      	ldr	r2, [r4, #28]
 8001224:	0692      	lsls	r2, r2, #26
 8001226:	d5fc      	bpl.n	8001222 <HAL_UART_Receive+0x7e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001228:	68ab      	ldr	r3, [r5, #8]
 800122a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800122e:	d03a      	beq.n	80012a6 <HAL_UART_Receive+0x102>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001232:	f108 0801 	add.w	r8, r8, #1
 8001236:	4033      	ands	r3, r6
 8001238:	f808 3c01 	strb.w	r3, [r8, #-1]
    while(huart->RxXferCount > 0U)
 800123c:	f8b5 005a 	ldrh.w	r0, [r5, #90]	; 0x5a
 8001240:	b280      	uxth	r0, r0
 8001242:	2800      	cmp	r0, #0
 8001244:	d1e3      	bne.n	800120e <HAL_UART_Receive+0x6a>
    huart->RxState = HAL_UART_STATE_READY;
 8001246:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001248:	f885 0068 	strb.w	r0, [r5, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 800124c:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
}
 8001250:	b003      	add	sp, #12
 8001252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001256:	2002      	movs	r0, #2
}
 8001258:	b003      	add	sp, #12
 800125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800125e:	2001      	movs	r0, #1
}
 8001260:	b003      	add	sp, #12
 8001262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001266:	69e3      	ldr	r3, [r4, #28]
 8001268:	069b      	lsls	r3, r3, #26
 800126a:	d4dd      	bmi.n	8001228 <HAL_UART_Receive+0x84>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800126c:	f1b9 0f00 	cmp.w	r9, #0
 8001270:	d005      	beq.n	800127e <HAL_UART_Receive+0xda>
 8001272:	f7ff fad3 	bl	800081c <HAL_GetTick>
 8001276:	1bc0      	subs	r0, r0, r7
 8001278:	4581      	cmp	r9, r0
 800127a:	d8ce      	bhi.n	800121a <HAL_UART_Receive+0x76>
 800127c:	682c      	ldr	r4, [r5, #0]
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800127e:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

        huart->gState = HAL_UART_STATE_READY;
 8001280:	2220      	movs	r2, #32
        huart->RxState = HAL_UART_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001282:	2100      	movs	r1, #0
        return HAL_TIMEOUT;
 8001284:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001286:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800128a:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800128c:	68a3      	ldr	r3, [r4, #8]
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001294:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
        __HAL_UNLOCK(huart);
 8001298:	f885 1068 	strb.w	r1, [r5, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800129c:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
}
 80012a0:	b003      	add	sp, #12
 80012a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012a6:	692b      	ldr	r3, [r5, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1c1      	bne.n	8001230 <HAL_UART_Receive+0x8c>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80012ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012ae:	4033      	ands	r3, r6
 80012b0:	f828 3b02 	strh.w	r3, [r8], #2
        pData +=2U;
 80012b4:	e7a7      	b.n	8001206 <HAL_UART_Receive+0x62>
    UART_MASK_COMPUTATION(huart);
 80012b6:	692b      	ldr	r3, [r5, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1a1      	bne.n	8001200 <HAL_UART_Receive+0x5c>
 80012bc:	f240 16ff 	movw	r6, #511	; 0x1ff
 80012c0:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
 80012c4:	e79f      	b.n	8001206 <HAL_UART_Receive+0x62>
 80012c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012ca:	d006      	beq.n	80012da <HAL_UART_Receive+0x136>
 80012cc:	f8b5 605c 	ldrh.w	r6, [r5, #92]	; 0x5c
 80012d0:	e799      	b.n	8001206 <HAL_UART_Receive+0x62>
 80012d2:	267f      	movs	r6, #127	; 0x7f
 80012d4:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
 80012d8:	e795      	b.n	8001206 <HAL_UART_Receive+0x62>
 80012da:	692b      	ldr	r3, [r5, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f8      	beq.n	80012d2 <HAL_UART_Receive+0x12e>
 80012e0:	263f      	movs	r6, #63	; 0x3f
 80012e2:	f8a5 605c 	strh.w	r6, [r5, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 80012e6:	e78e      	b.n	8001206 <HAL_UART_Receive+0x62>

080012e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012ea:	07da      	lsls	r2, r3, #31
{
 80012ec:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012ee:	d506      	bpl.n	80012fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80012f0:	6801      	ldr	r1, [r0, #0]
 80012f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80012f4:	684a      	ldr	r2, [r1, #4]
 80012f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80012fa:	4322      	orrs	r2, r4
 80012fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80012fe:	079c      	lsls	r4, r3, #30
 8001300:	d506      	bpl.n	8001310 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001302:	6801      	ldr	r1, [r0, #0]
 8001304:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001306:	684a      	ldr	r2, [r1, #4]
 8001308:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800130c:	4322      	orrs	r2, r4
 800130e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001310:	0759      	lsls	r1, r3, #29
 8001312:	d506      	bpl.n	8001322 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001314:	6801      	ldr	r1, [r0, #0]
 8001316:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001318:	684a      	ldr	r2, [r1, #4]
 800131a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800131e:	4322      	orrs	r2, r4
 8001320:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001322:	071a      	lsls	r2, r3, #28
 8001324:	d506      	bpl.n	8001334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001326:	6801      	ldr	r1, [r0, #0]
 8001328:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800132a:	684a      	ldr	r2, [r1, #4]
 800132c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001330:	4322      	orrs	r2, r4
 8001332:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001334:	06dc      	lsls	r4, r3, #27
 8001336:	d506      	bpl.n	8001346 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001338:	6801      	ldr	r1, [r0, #0]
 800133a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800133c:	688a      	ldr	r2, [r1, #8]
 800133e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001342:	4322      	orrs	r2, r4
 8001344:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001346:	0699      	lsls	r1, r3, #26
 8001348:	d506      	bpl.n	8001358 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800134a:	6801      	ldr	r1, [r0, #0]
 800134c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800134e:	688a      	ldr	r2, [r1, #8]
 8001350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001354:	4322      	orrs	r2, r4
 8001356:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001358:	065a      	lsls	r2, r3, #25
 800135a:	d50a      	bpl.n	8001372 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800135c:	6801      	ldr	r1, [r0, #0]
 800135e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001360:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001362:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001366:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800136a:	ea42 0204 	orr.w	r2, r2, r4
 800136e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001370:	d00b      	beq.n	800138a <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	d506      	bpl.n	8001384 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001376:	6802      	ldr	r2, [r0, #0]
 8001378:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800137a:	6853      	ldr	r3, [r2, #4]
 800137c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001380:	430b      	orrs	r3, r1
 8001382:	6053      	str	r3, [r2, #4]
  }
}
 8001384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001388:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800138a:	684a      	ldr	r2, [r1, #4]
 800138c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800138e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001392:	4322      	orrs	r2, r4
 8001394:	604a      	str	r2, [r1, #4]
 8001396:	e7ec      	b.n	8001372 <UART_AdvFeatureConfig+0x8a>

08001398 <HAL_UART_Init>:
  if(huart == NULL)
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 8129 	beq.w	80015f0 <HAL_UART_Init+0x258>
{
 800139e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80013a0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80013a4:	4604      	mov	r4, r0
 80013a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d047      	beq.n	800143e <HAL_UART_Init+0xa6>
  __HAL_UART_DISABLE(huart);
 80013ae:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013b0:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013b2:	6920      	ldr	r0, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80013b4:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013b8:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80013ba:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013bc:	4302      	orrs	r2, r0
 80013be:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 80013c0:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013c4:	4dbb      	ldr	r5, [pc, #748]	; (80016b4 <HAL_UART_Init+0x31c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013c6:	4302      	orrs	r2, r0
 80013c8:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80013ca:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013cc:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013ce:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013d0:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013d2:	400d      	ands	r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013d4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013d6:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013d8:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013da:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013dc:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013e0:	6859      	ldr	r1, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013e2:	4db5      	ldr	r5, [pc, #724]	; (80016b8 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013e4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013e8:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013ea:	ea41 0106 	orr.w	r1, r1, r6
 80013ee:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80013f0:	6899      	ldr	r1, [r3, #8]
 80013f2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80013f6:	ea42 0201 	orr.w	r2, r2, r1
 80013fa:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013fc:	d024      	beq.n	8001448 <HAL_UART_Init+0xb0>
 80013fe:	4aaf      	ldr	r2, [pc, #700]	; (80016bc <HAL_UART_Init+0x324>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d043      	beq.n	800148c <HAL_UART_Init+0xf4>
 8001404:	4aae      	ldr	r2, [pc, #696]	; (80016c0 <HAL_UART_Init+0x328>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f000 80a2 	beq.w	8001550 <HAL_UART_Init+0x1b8>
 800140c:	4aad      	ldr	r2, [pc, #692]	; (80016c4 <HAL_UART_Init+0x32c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d045      	beq.n	800149e <HAL_UART_Init+0x106>
 8001412:	4aad      	ldr	r2, [pc, #692]	; (80016c8 <HAL_UART_Init+0x330>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f000 80b2 	beq.w	800157e <HAL_UART_Init+0x1e6>
 800141a:	4aac      	ldr	r2, [pc, #688]	; (80016cc <HAL_UART_Init+0x334>)
 800141c:	4293      	cmp	r3, r2
 800141e:	f000 8134 	beq.w	800168a <HAL_UART_Init+0x2f2>
 8001422:	4aab      	ldr	r2, [pc, #684]	; (80016d0 <HAL_UART_Init+0x338>)
 8001424:	4293      	cmp	r3, r2
 8001426:	f000 8163 	beq.w	80016f0 <HAL_UART_Init+0x358>
 800142a:	4aaa      	ldr	r2, [pc, #680]	; (80016d4 <HAL_UART_Init+0x33c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f000 8119 	beq.w	8001664 <HAL_UART_Init+0x2cc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001432:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001436:	f000 8170 	beq.w	800171a <HAL_UART_Init+0x382>
    return HAL_ERROR;
 800143a:	2001      	movs	r0, #1
}
 800143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800143e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001442:	f000 fd1b 	bl	8001e7c <HAL_UART_MspInit>
 8001446:	e7b2      	b.n	80013ae <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001448:	4aa3      	ldr	r2, [pc, #652]	; (80016d8 <HAL_UART_Init+0x340>)
 800144a:	49a4      	ldr	r1, [pc, #656]	; (80016dc <HAL_UART_Init+0x344>)
 800144c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001450:	f002 0203 	and.w	r2, r2, #3
 8001454:	5c8a      	ldrb	r2, [r1, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001456:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800145a:	d02f      	beq.n	80014bc <HAL_UART_Init+0x124>
    switch (clocksource)
 800145c:	2a08      	cmp	r2, #8
 800145e:	d8ec      	bhi.n	800143a <HAL_UART_Init+0xa2>
 8001460:	a101      	add	r1, pc, #4	; (adr r1, 8001468 <HAL_UART_Init+0xd0>)
 8001462:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001466:	bf00      	nop
 8001468:	0800154b 	.word	0x0800154b
 800146c:	080014e5 	.word	0x080014e5
 8001470:	0800156d 	.word	0x0800156d
 8001474:	0800143b 	.word	0x0800143b
 8001478:	08001597 	.word	0x08001597
 800147c:	0800143b 	.word	0x0800143b
 8001480:	0800143b 	.word	0x0800143b
 8001484:	0800143b 	.word	0x0800143b
 8001488:	0800159d 	.word	0x0800159d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800148c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001490:	4993      	ldr	r1, [pc, #588]	; (80016e0 <HAL_UART_Init+0x348>)
 8001492:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001496:	f002 020c 	and.w	r2, r2, #12
 800149a:	5c8a      	ldrb	r2, [r1, r2]
 800149c:	e7db      	b.n	8001456 <HAL_UART_Init+0xbe>
 800149e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80014a2:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80014a6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80014aa:	2a40      	cmp	r2, #64	; 0x40
 80014ac:	d070      	beq.n	8001590 <HAL_UART_Init+0x1f8>
 80014ae:	d945      	bls.n	800153c <HAL_UART_Init+0x1a4>
 80014b0:	2a80      	cmp	r2, #128	; 0x80
 80014b2:	d058      	beq.n	8001566 <HAL_UART_Init+0x1ce>
 80014b4:	2ac0      	cmp	r2, #192	; 0xc0
 80014b6:	f000 80a5 	beq.w	8001604 <HAL_UART_Init+0x26c>
 80014ba:	e7ba      	b.n	8001432 <HAL_UART_Init+0x9a>
    switch (clocksource)
 80014bc:	2a08      	cmp	r2, #8
 80014be:	f200 812c 	bhi.w	800171a <HAL_UART_Init+0x382>
 80014c2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80014c6:	00cc      	.short	0x00cc
 80014c8:	00c700b0 	.word	0x00c700b0
 80014cc:	00c4012a 	.word	0x00c4012a
 80014d0:	012a012a 	.word	0x012a012a
 80014d4:	00a2012a 	.word	0x00a2012a
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d1aa      	bne.n	8001432 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80014e0:	f000 80a1 	beq.w	8001626 <HAL_UART_Init+0x28e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014e4:	f7ff fe4e 	bl	8001184 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014e8:	e9d4 3100 	ldrd	r3, r1, [r4]
 80014ec:	eb00 0251 	add.w	r2, r0, r1, lsr #1
 80014f0:	fbb2 f2f1 	udiv	r2, r2, r1
 80014f4:	b292      	uxth	r2, r2
 80014f6:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d157      	bne.n	80015ae <HAL_UART_Init+0x216>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014fe:	685a      	ldr	r2, [r3, #4]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001500:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800150e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001518:	66e1      	str	r1, [r4, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800151a:	f7ff f97f 	bl	800081c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800151e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001520:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	0712      	lsls	r2, r2, #28
 8001526:	d447      	bmi.n	80015b8 <HAL_UART_Init+0x220>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001528:	2220      	movs	r2, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800152a:	2300      	movs	r3, #0
  huart->gState= HAL_UART_STATE_READY;
 800152c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69

  return HAL_OK;
 8001530:	4618      	mov	r0, r3
  huart->RxState= HAL_UART_STATE_READY;
 8001532:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8001536:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 800153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800153c:	2a00      	cmp	r2, #0
 800153e:	f47f af78 	bne.w	8001432 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001542:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001546:	f000 808a 	beq.w	800165e <HAL_UART_Init+0x2c6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800154a:	f7ff fe0b 	bl	8001164 <HAL_RCC_GetPCLK1Freq>
 800154e:	e7cb      	b.n	80014e8 <HAL_UART_Init+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001550:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001554:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001558:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800155c:	2a10      	cmp	r2, #16
 800155e:	d017      	beq.n	8001590 <HAL_UART_Init+0x1f8>
 8001560:	d9ec      	bls.n	800153c <HAL_UART_Init+0x1a4>
 8001562:	2a20      	cmp	r2, #32
 8001564:	d170      	bne.n	8001648 <HAL_UART_Init+0x2b0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001566:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800156a:	d073      	beq.n	8001654 <HAL_UART_Init+0x2bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800156c:	6861      	ldr	r1, [r4, #4]
 800156e:	4a5d      	ldr	r2, [pc, #372]	; (80016e4 <HAL_UART_Init+0x34c>)
 8001570:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8001574:	fbb2 f2f1 	udiv	r2, r2, r1
 8001578:	b292      	uxth	r2, r2
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	e7bc      	b.n	80014f8 <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800157e:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001582:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001586:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800158a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800158e:	d131      	bne.n	80015f4 <HAL_UART_Init+0x25c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001590:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001594:	d05b      	beq.n	800164e <HAL_UART_Init+0x2b6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001596:	f7ff fdb1 	bl	80010fc <HAL_RCC_GetSysClockFreq>
 800159a:	e7a5      	b.n	80014e8 <HAL_UART_Init+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800159c:	6861      	ldr	r1, [r4, #4]
 800159e:	084a      	lsrs	r2, r1, #1
 80015a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80015a4:	fbb2 f2f1 	udiv	r2, r2, r1
 80015a8:	b292      	uxth	r2, r2
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	e7a4      	b.n	80014f8 <HAL_UART_Init+0x160>
    UART_AdvFeatureConfig(huart);
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fe9a 	bl	80012e8 <UART_AdvFeatureConfig>
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	e7a2      	b.n	80014fe <HAL_UART_Init+0x166>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80015b8:	4f4b      	ldr	r7, [pc, #300]	; (80016e8 <HAL_UART_Init+0x350>)
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ba:	69dd      	ldr	r5, [r3, #28]
 80015bc:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80015c0:	d1b2      	bne.n	8001528 <HAL_UART_Init+0x190>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80015c2:	f7ff f92b 	bl	800081c <HAL_GetTick>
 80015c6:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015c8:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80015ca:	42b8      	cmp	r0, r7
 80015cc:	d9f5      	bls.n	80015ba <HAL_UART_Init+0x222>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015ce:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80015d0:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80015e2:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 80015e6:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 80015ea:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
}
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
}
 80015f2:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015f4:	d9a2      	bls.n	800153c <HAL_UART_Init+0x1a4>
 80015f6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80015fa:	d0b4      	beq.n	8001566 <HAL_UART_Init+0x1ce>
 80015fc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001600:	f47f af17 	bne.w	8001432 <HAL_UART_Init+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001604:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001608:	d1c8      	bne.n	800159c <HAL_UART_Init+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800160a:	6861      	ldr	r1, [r4, #4]
 800160c:	084a      	lsrs	r2, r1, #1
 800160e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001612:	fbb2 f2f1 	udiv	r2, r2, r1
    brrtemp = usartdiv & 0xFFF0U;
 8001616:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800161a:	f3c2 0242 	ubfx	r2, r2, #1, #3
    brrtemp = usartdiv & 0xFFF0U;
 800161e:	b289      	uxth	r1, r1
    huart->Instance->BRR = brrtemp;
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	e768      	b.n	80014f8 <HAL_UART_Init+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001626:	f7ff fdad 	bl	8001184 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = brrtemp;
 800162a:	e9d4 3100 	ldrd	r3, r1, [r4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800162e:	084a      	lsrs	r2, r1, #1
 8001630:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001634:	fbb0 f0f1 	udiv	r0, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 8001638:	f020 020f 	bic.w	r2, r0, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800163c:	f3c0 0042 	ubfx	r0, r0, #1, #3
    brrtemp = usartdiv & 0xFFF0U;
 8001640:	b292      	uxth	r2, r2
    huart->Instance->BRR = brrtemp;
 8001642:	4310      	orrs	r0, r2
 8001644:	60d8      	str	r0, [r3, #12]
 8001646:	e757      	b.n	80014f8 <HAL_UART_Init+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001648:	2a30      	cmp	r2, #48	; 0x30
 800164a:	d0db      	beq.n	8001604 <HAL_UART_Init+0x26c>
 800164c:	e6f1      	b.n	8001432 <HAL_UART_Init+0x9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800164e:	f7ff fd55 	bl	80010fc <HAL_RCC_GetSysClockFreq>
 8001652:	e7ea      	b.n	800162a <HAL_UART_Init+0x292>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001654:	6861      	ldr	r1, [r4, #4]
 8001656:	4a25      	ldr	r2, [pc, #148]	; (80016ec <HAL_UART_Init+0x354>)
 8001658:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800165c:	e7d9      	b.n	8001612 <HAL_UART_Init+0x27a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800165e:	f7ff fd81 	bl	8001164 <HAL_RCC_GetPCLK1Freq>
 8001662:	e7e2      	b.n	800162a <HAL_UART_Init+0x292>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001664:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8001668:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800166c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001670:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001674:	d08c      	beq.n	8001590 <HAL_UART_Init+0x1f8>
 8001676:	f67f af61 	bls.w	800153c <HAL_UART_Init+0x1a4>
 800167a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800167e:	f43f af72 	beq.w	8001566 <HAL_UART_Init+0x1ce>
 8001682:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001686:	d0bd      	beq.n	8001604 <HAL_UART_Init+0x26c>
 8001688:	e6d3      	b.n	8001432 <HAL_UART_Init+0x9a>
 800168a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800168e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001692:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001696:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800169a:	f43f af79 	beq.w	8001590 <HAL_UART_Init+0x1f8>
 800169e:	f67f af1b 	bls.w	80014d8 <HAL_UART_Init+0x140>
 80016a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80016a6:	f43f af5e 	beq.w	8001566 <HAL_UART_Init+0x1ce>
 80016aa:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80016ae:	d0a9      	beq.n	8001604 <HAL_UART_Init+0x26c>
 80016b0:	e6bf      	b.n	8001432 <HAL_UART_Init+0x9a>
 80016b2:	bf00      	nop
 80016b4:	efff69f3 	.word	0xefff69f3
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40004800 	.word	0x40004800
 80016c4:	40004c00 	.word	0x40004c00
 80016c8:	40005000 	.word	0x40005000
 80016cc:	40011400 	.word	0x40011400
 80016d0:	40007800 	.word	0x40007800
 80016d4:	40007c00 	.word	0x40007c00
 80016d8:	40023800 	.word	0x40023800
 80016dc:	08004e08 	.word	0x08004e08
 80016e0:	08004e0c 	.word	0x08004e0c
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	01fffffe 	.word	0x01fffffe
 80016ec:	01e84800 	.word	0x01e84800
 80016f0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80016f4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80016f8:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80016fc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001700:	f43f af46 	beq.w	8001590 <HAL_UART_Init+0x1f8>
 8001704:	f67f af1a 	bls.w	800153c <HAL_UART_Init+0x1a4>
 8001708:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800170c:	f43f af2b 	beq.w	8001566 <HAL_UART_Init+0x1ce>
 8001710:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001714:	f43f af76 	beq.w	8001604 <HAL_UART_Init+0x26c>
 8001718:	e68b      	b.n	8001432 <HAL_UART_Init+0x9a>
    huart->Instance->BRR = brrtemp;
 800171a:	2200      	movs	r2, #0
    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001722:	bf00      	nop

08001724 <_GLOBAL__sub_I_JpegDec>:
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <_GLOBAL__sub_I_JpegDec+0x14>)
 8001726:	2200      	movs	r2, #0
 8001728:	665b      	str	r3, [r3, #100]	; 0x64
 800172a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
 8001730:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20001364 	.word	0x20001364

0800173c <_GLOBAL__sub_D_JpegDec>:
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <_GLOBAL__sub_D_JpegDec+0xc>)
 800173e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001740:	b108      	cbz	r0, 8001746 <_GLOBAL__sub_D_JpegDec+0xa>
 8001742:	f002 bf01 	b.w	8004548 <_ZdaPv>
 8001746:	4770      	bx	lr
 8001748:	20001364 	.word	0x20001364

0800174c <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 800174c:	b430      	push	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800174e:	b295      	uxth	r5, r2
 8001750:	2303      	movs	r3, #3
 8001752:	b28c      	uxth	r4, r1
 8001754:	4602      	mov	r2, r0
 8001756:	4629      	mov	r1, r5
 8001758:	4620      	mov	r0, r4
}
 800175a:	bc30      	pop	{r4, r5}
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800175c:	f7fe bfba 	b.w	80006d4 <BSP_LCD_DisplayStringAt>

08001760 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001760:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <main+0xf4>)
#define RES_W 128
#define RES_H 120

//uint16_t *RGBbuf;
#define ENABLE_TRAIN
int main(void) {
 8001762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001766:	ed2d 8b02 	vpush	{d8}
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	b0b7      	sub	sp, #220	; 0xdc
 800176e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8001772:	d111      	bne.n	8001798 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001778:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800177c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001784:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800178e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001794:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001798:	4a2e      	ldr	r2, [pc, #184]	; (8001854 <main+0xf4>)
 800179a:	6953      	ldr	r3, [r2, #20]
 800179c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80017a0:	d128      	bne.n	80017f4 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80017a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017ae:	f643 77e0 	movw	r7, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017b2:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017b6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80017ba:	07ae      	lsls	r6, r5, #30
 80017bc:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017be:	ea03 0c07 	and.w	ip, r3, r7
 80017c2:	4630      	mov	r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017c4:	4629      	mov	r1, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017c6:	ea4c 0400 	orr.w	r4, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017ca:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017cc:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 80017d0:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80017d4:	1c4c      	adds	r4, r1, #1
 80017d6:	d1f6      	bne.n	80017c6 <main+0x66>
 80017d8:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 80017da:	f113 0f20 	cmn.w	r3, #32
 80017de:	d1ee      	bne.n	80017be <main+0x5e>
 80017e0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80017e4:	6953      	ldr	r3, [r2, #20]
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ea:	6153      	str	r3, [r2, #20]
 80017ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017f0:	f3bf 8f6f 	isb	sy
  char buf[150];
  char showbuf[150];

  CPU_CACHE_Enable();
  HAL_Init();
 80017f4:	f7fe fff0 	bl	80007d8 <HAL_Init>
void SystemClock_Config(void) {
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f8:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80017fe:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001802:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001804:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001808:	2119      	movs	r1, #25
  RCC_OscInitStruct.PLL.PLLN = 432;
 800180a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800180e:	4650      	mov	r0, sl
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	9616      	str	r6, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001812:	961a      	str	r6, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001814:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001816:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800181a:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 800181c:	e9cd 4117 	strd	r4, r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001820:	931b      	str	r3, [sp, #108]	; 0x6c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001822:	f7ff f9d5 	bl	8000bd0 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 8001826:	b100      	cbz	r0, 800182a <main+0xca>
 8001828:	e7fe      	b.n	8001828 <main+0xc8>
    while (1) {
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 800182a:	f7ff f995 	bl	8000b58 <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 800182e:	b100      	cbz	r0, 8001832 <main+0xd2>
 8001830:	e7fe      	b.n	8001830 <main+0xd0>
    while (1) {
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8001832:	220f      	movs	r2, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 5b80 	mov.w	fp, #4096	; 0x1000

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800183c:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800183e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001844:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001846:	e9cd 3b0e 	strd	r3, fp, [sp, #56]	; 0x38
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800184a:	f7ff fb8d 	bl	8000f68 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 800184e:	4604      	mov	r4, r0
 8001850:	b110      	cbz	r0, 8001858 <main+0xf8>
 8001852:	e7fe      	b.n	8001852 <main+0xf2>
 8001854:	e000ed00 	.word	0xe000ed00
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001858:	4bda      	ldr	r3, [pc, #872]	; (8001bc4 <main+0x464>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800185a:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f8ca 0000 	str.w	r0, [sl]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001860:	463a      	mov	r2, r7
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
                        ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001864:	f04f 080a 	mov.w	r8, #10

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001868:	f04f 0905 	mov.w	r9, #5
    		input[i*10+j] = (uint8_t) round(in0[i][j]/x_scale);
 800186c:	ed9f 8ad6 	vldr	s16, [pc, #856]	; 8001bc8 <main+0x468>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	e9ca 0001 	strd	r0, r0, [sl, #4]
 8001874:	e9ca 0003 	strd	r0, r0, [sl, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001878:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800187a:	f040 0c10 	orr.w	ip, r0, #16
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800187e:	48d3      	ldr	r0, [pc, #844]	; (8001bcc <main+0x46c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8001884:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001888:	f00c 0c10 	and.w	ip, ip, #16
 800188c:	f8cd c004 	str.w	ip, [sp, #4]
 8001890:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001894:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001898:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800189c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80018a0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018a4:	f00c 0c40 	and.w	ip, ip, #64	; 0x40
 80018a8:	f8cd c008 	str.w	ip, [sp, #8]
 80018ac:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018b4:	f04c 0c02 	orr.w	ip, ip, #2
 80018b8:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80018bc:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018c0:	f00c 0c02 	and.w	ip, ip, #2
 80018c4:	f8cd c00c 	str.w	ip, [sp, #12]
 80018c8:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018cc:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018d0:	f04c 0c08 	orr.w	ip, ip, #8
 80018d4:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80018d8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018dc:	f00c 0c08 	and.w	ip, ip, #8
 80018e0:	f8cd c010 	str.w	ip, [sp, #16]
 80018e4:	f8dd c010 	ldr.w	ip, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018ec:	f04c 0c04 	orr.w	ip, ip, #4
 80018f0:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 80018f4:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 80018f8:	f00c 0c04 	and.w	ip, ip, #4
 80018fc:	f8cd c014 	str.w	ip, [sp, #20]
 8001900:	f8dd c014 	ldr.w	ip, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001908:	f04c 0c01 	orr.w	ip, ip, #1
 800190c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8001910:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001914:	f00c 0c01 	and.w	ip, ip, #1
 8001918:	f8cd c018 	str.w	ip, [sp, #24]
 800191c:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001920:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001924:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8001928:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800192c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001930:	f40c 7c00 	and.w	ip, ip, #512	; 0x200
 8001934:	f8cd c01c 	str.w	ip, [sp, #28]
 8001938:	f8dd c01c 	ldr.w	ip, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800193c:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001940:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8001944:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8001948:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800194c:	f40c 7c80 	and.w	ip, ip, #256	; 0x100
 8001950:	f8cd c020 	str.w	ip, [sp, #32]
 8001954:	f8dd c020 	ldr.w	ip, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001958:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800195c:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 8001960:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8001964:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001968:	f40c 6c80 	and.w	ip, ip, #1024	; 0x400
 800196c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001970:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001974:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001978:	ea4c 0c01 	orr.w	ip, ip, r1
 800197c:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8001980:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001984:	ea0c 0c01 	and.w	ip, ip, r1
 8001988:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800198c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001990:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8001994:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8001998:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80019a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80019a6:	f7ff f8d3 	bl	8000b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80019aa:	4622      	mov	r2, r4
 80019ac:	210c      	movs	r1, #12
 80019ae:	4888      	ldr	r0, [pc, #544]	; (8001bd0 <main+0x470>)
 80019b0:	f7ff f8ce 	bl	8000b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019b4:	463a      	mov	r2, r7
 80019b6:	2108      	movs	r1, #8
 80019b8:	4886      	ldr	r0, [pc, #536]	; (8001bd4 <main+0x474>)
 80019ba:	f7ff f8c9 	bl	8000b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019be:	463a      	mov	r2, r7
 80019c0:	4659      	mov	r1, fp
 80019c2:	4883      	ldr	r0, [pc, #524]	; (8001bd0 <main+0x470>)
 80019c4:	f7ff f8c4 	bl	8000b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80019c8:	4622      	mov	r2, r4
 80019ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ce:	4882      	ldr	r0, [pc, #520]	; (8001bd8 <main+0x478>)
 80019d0:	f7ff f8be 	bl	8000b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 80019d4:	4622      	mov	r2, r4
 80019d6:	21c8      	movs	r1, #200	; 0xc8
 80019d8:	4880      	ldr	r0, [pc, #512]	; (8001bdc <main+0x47c>)
 80019da:	f7ff f8b9 	bl	8000b50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80019de:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e0:	4651      	mov	r1, sl
 80019e2:	487f      	ldr	r0, [pc, #508]	; (8001be0 <main+0x480>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80019e4:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f7fe ff8d 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 80019ee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f2:	4651      	mov	r1, sl
 80019f4:	4879      	ldr	r0, [pc, #484]	; (8001bdc <main+0x47c>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 80019f6:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019f8:	230b      	movs	r3, #11
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fc:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a02:	f7fe ff81 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 8001a06:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	4875      	ldr	r0, [pc, #468]	; (8001be4 <main+0x484>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 8001a10:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a12:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f7fe ff75 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001a1e:	2208      	movs	r2, #8
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001a20:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001a22:	4651      	mov	r1, sl
 8001a24:	4869      	ldr	r0, [pc, #420]	; (8001bcc <main+0x46c>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001a26:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001a28:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f7fe ff6a 	bl	8000908 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a34:	4651      	mov	r1, sl
 8001a36:	486c      	ldr	r0, [pc, #432]	; (8001be8 <main+0x488>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	e9cd b410 	strd	fp, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f7fe ff63 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a42:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8001bf4 <main+0x494>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a46:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a48:	4651      	mov	r1, sl
 8001a4a:	4860      	ldr	r0, [pc, #384]	; (8001bcc <main+0x46c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a4e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a50:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f7fe ff58 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8001a58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	4651      	mov	r1, sl
 8001a5e:	4863      	ldr	r0, [pc, #396]	; (8001bec <main+0x48c>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8001a60:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a62:	e9cd 5813 	strd	r5, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f7fe ff4d 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a6e:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a70:	4651      	mov	r1, sl
 8001a72:	4856      	ldr	r0, [pc, #344]	; (8001bcc <main+0x46c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a76:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	e9cd 7411 	strd	r7, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f7fe ff44 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8001a80:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a84:	4651      	mov	r1, sl
 8001a86:	4852      	ldr	r0, [pc, #328]	; (8001bd0 <main+0x470>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8001a8a:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	e9cd 7411 	strd	r7, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a90:	f7fe ff3a 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a98:	4651      	mov	r1, sl
 8001a9a:	4855      	ldr	r0, [pc, #340]	; (8001bf0 <main+0x490>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a9c:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f7fe ff31 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001aa6:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	4651      	mov	r1, sl
 8001aaa:	484a      	ldr	r0, [pc, #296]	; (8001bd4 <main+0x474>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f7fe ff28 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ab8:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aba:	4651      	mov	r1, sl
 8001abc:	4843      	ldr	r0, [pc, #268]	; (8001bcc <main+0x46c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001abe:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f7fe ff20 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001ac8:	f248 0304 	movw	r3, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001acc:	4651      	mov	r1, sl
 8001ace:	4842      	ldr	r0, [pc, #264]	; (8001bd8 <main+0x478>)
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001ad0:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ad6:	f7fe ff17 	bl	8000908 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001ada:	4651      	mov	r1, sl
 8001adc:	483c      	ldr	r0, [pc, #240]	; (8001bd0 <main+0x470>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ade:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f7fe ff0d 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001af2:	4651      	mov	r1, sl
 8001af4:	4838      	ldr	r0, [pc, #224]	; (8001bd8 <main+0x478>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f7fe ff03 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b06:	4651      	mov	r1, sl
 8001b08:	4831      	ldr	r0, [pc, #196]	; (8001bd0 <main+0x470>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b0a:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b10:	f7fe fefa 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b18:	4651      	mov	r1, sl
 8001b1a:	482d      	ldr	r0, [pc, #180]	; (8001bd0 <main+0x470>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b1c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b20:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f7fe fef0 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b28:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	4651      	mov	r1, sl
 8001b2c:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <main+0x478>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b2e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b30:	e9cd 5813 	strd	r5, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f7fe fee6 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8001b3c:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b3e:	4651      	mov	r1, sl
 8001b40:	4826      	ldr	r0, [pc, #152]	; (8001bdc <main+0x47c>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8001b42:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	e9cd 7411 	strd	r7, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b4a:	f7fe fedd 	bl	8000908 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	4651      	mov	r1, sl
 8001b50:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <main+0x490>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001b52:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b56:	e9cd 5813 	strd	r5, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f7fe fed3 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b62:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001b64:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	4651      	mov	r1, sl
 8001b68:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <main+0x490>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6a:	9214      	str	r2, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001b6e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f7fe fec8 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b78:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	4817      	ldr	r0, [pc, #92]	; (8001bdc <main+0x47c>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b7e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f7fe fec0 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b88:	220b      	movs	r2, #11
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001b8a:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	4817      	ldr	r0, [pc, #92]	; (8001bec <main+0x48c>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001b90:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	e9cd 5213 	strd	r5, r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f7fe feb5 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001b9e:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	4812      	ldr	r0, [pc, #72]	; (8001bec <main+0x48c>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001ba4:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	e9cd 5813 	strd	r5, r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f7fe feab 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8001bb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	480a      	ldr	r0, [pc, #40]	; (8001be4 <main+0x484>)
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8001bba:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bbc:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	9413      	str	r4, [sp, #76]	; 0x4c
 8001bc2:	e019      	b.n	8001bf8 <main+0x498>
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	3f36a6d4 	.word	0x3f36a6d4
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40022800 	.word	0x40022800
 8001bd8:	40021c00 	.word	0x40021c00
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40022400 	.word	0x40022400
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	10120000 	.word	0x10120000
 8001bf8:	4d82      	ldr	r5, [pc, #520]	; (8001e04 <main+0x6a4>)
 8001bfa:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8001e24 <main+0x6c4>
		UART.Init.Mode = UART_MODE_TX_RX;
		UART.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
		UART.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
		if (HAL_UART_Init(&UART) != HAL_OK) {
 8001bfe:	46a9      	mov	r9, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f7fe fe80 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001c08:	4651      	mov	r1, sl
 8001c0a:	487f      	ldr	r0, [pc, #508]	; (8001e08 <main+0x6a8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0c:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f7fe fe79 	bl	8000908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	4651      	mov	r1, sl
 8001c1c:	487b      	ldr	r0, [pc, #492]	; (8001e0c <main+0x6ac>)
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8001c1e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	e9cd 4711 	strd	r4, r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f7fe fe70 	bl	8000908 <HAL_GPIO_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8001c28:	4621      	mov	r1, r4
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	4c78      	ldr	r4, [pc, #480]	; (8001e10 <main+0x6b0>)
 8001c2e:	f7fe fc6b 	bl	8000508 <BSP_PB_Init>
 8001c32:	4e78      	ldr	r6, [pc, #480]	; (8001e14 <main+0x6b4>)
  signed char *input = getInput(); // &buffer0[8000]
 8001c34:	f001 f96a 	bl	8002f0c <getInput>
 8001c38:	4f77      	ldr	r7, [pc, #476]	; (8001e18 <main+0x6b8>)
 8001c3a:	4683      	mov	fp, r0
	starti = HAL_GetTick();
 8001c3c:	f7fe fdee 	bl	800081c <HAL_GetTick>
 8001c40:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <main+0x6bc>)
 8001c42:	465a      	mov	r2, fp
    		input[i*10+j] = (uint8_t) round(in0[i][j]/x_scale);
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	3328      	adds	r3, #40	; 0x28
 8001c4a:	320a      	adds	r2, #10
 8001c4c:	ee67 7a88 	vmul.f32	s15, s15, s16
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001c50:	fef8 7a67 	vrinta.f32	s15, s15
 8001c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c58:	ee17 1a90 	vmov	r1, s15
 8001c5c:	f802 1c0a 	strb.w	r1, [r2, #-10]
 8001c60:	ed53 7a09 	vldr	s15, [r3, #-36]	; 0xffffffdc
 8001c64:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c68:	fef8 7a67 	vrinta.f32	s15, s15
 8001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c70:	ee17 1a90 	vmov	r1, s15
 8001c74:	f802 1c09 	strb.w	r1, [r2, #-9]
 8001c78:	ed53 7a08 	vldr	s15, [r3, #-32]	; 0xffffffe0
 8001c7c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c80:	fef8 7a67 	vrinta.f32	s15, s15
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 1a90 	vmov	r1, s15
 8001c8c:	f802 1c08 	strb.w	r1, [r2, #-8]
 8001c90:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 8001c94:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c98:	fef8 7a67 	vrinta.f32	s15, s15
 8001c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca0:	ee17 1a90 	vmov	r1, s15
 8001ca4:	f802 1c07 	strb.w	r1, [r2, #-7]
 8001ca8:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8001cac:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001cb0:	fef8 7a67 	vrinta.f32	s15, s15
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	ee17 1a90 	vmov	r1, s15
 8001cbc:	f802 1c06 	strb.w	r1, [r2, #-6]
 8001cc0:	ed53 7a05 	vldr	s15, [r3, #-20]	; 0xffffffec
 8001cc4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001cc8:	fef8 7a67 	vrinta.f32	s15, s15
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	ee17 1a90 	vmov	r1, s15
 8001cd4:	f802 1c05 	strb.w	r1, [r2, #-5]
 8001cd8:	ed53 7a04 	vldr	s15, [r3, #-16]
 8001cdc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001ce0:	fef8 7a67 	vrinta.f32	s15, s15
 8001ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce8:	ee17 1a90 	vmov	r1, s15
 8001cec:	f802 1c04 	strb.w	r1, [r2, #-4]
 8001cf0:	ed53 7a03 	vldr	s15, [r3, #-12]
 8001cf4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001cf8:	fef8 7a67 	vrinta.f32	s15, s15
 8001cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d00:	ee17 1a90 	vmov	r1, s15
 8001d04:	f802 1c03 	strb.w	r1, [r2, #-3]
 8001d08:	ed53 7a02 	vldr	s15, [r3, #-8]
 8001d0c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001d10:	fef8 7a67 	vrinta.f32	s15, s15
 8001d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d18:	ee17 1a90 	vmov	r1, s15
 8001d1c:	f802 1c02 	strb.w	r1, [r2, #-2]
 8001d20:	ed53 7a01 	vldr	s15, [r3, #-4]
    for (int i = 0; i < 49; i++){
 8001d24:	429c      	cmp	r4, r3
    		input[i*10+j] = (uint8_t) round(in0[i][j]/x_scale);
 8001d26:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001d2a:	fef8 7a67 	vrinta.f32	s15, s15
 8001d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d32:	ee17 1a90 	vmov	r1, s15
 8001d36:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (int i = 0; i < 49; i++){
 8001d3a:	d183      	bne.n	8001c44 <main+0x4e4>
    endi = HAL_GetTick();
 8001d3c:	f7fe fd6e 	bl	800081c <HAL_GetTick>
    uint8_t button0 = BSP_PB_GetState(BUTTON_KEY) == GPIO_PIN_SET;
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7fe fc39 	bl	80005b8 <BSP_PB_GetState>
    uint8_t button1 = !HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8001d46:	2101      	movs	r1, #1
 8001d48:	482f      	ldr	r0, [pc, #188]	; (8001e08 <main+0x6a8>)
 8001d4a:	f7fe fefb 	bl	8000b44 <HAL_GPIO_ReadPin>
    uint8_t button2 = !HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8001d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d52:	482e      	ldr	r0, [pc, #184]	; (8001e0c <main+0x6ac>)
 8001d54:	f7fe fef6 	bl	8000b44 <HAL_GPIO_ReadPin>
    s[0] = 'c';
 8001d58:	2263      	movs	r2, #99	; 0x63
	if (!is_initialized) {
 8001d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d5e:	f88d 2000 	strb.w	r2, [sp]
 8001d62:	b9ab      	cbnz	r3, 8001d90 <main+0x630>
		UART.Init.BaudRate = 115200;
 8001d64:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
		UART.Init.Mode = UART_MODE_TX_RX;
 8001d68:	f04f 0c0c 	mov.w	ip, #12
		UART.Instance = USART1;
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	; (8001e20 <main+0x6c0>)
		if (HAL_UART_Init(&UART) != HAL_OK) {
 8001d6e:	4648      	mov	r0, r9
		UART.Init.Parity = UART_PARITY_NONE;
 8001d70:	612b      	str	r3, [r5, #16]
		UART.Instance = USART1;
 8001d72:	602a      	str	r2, [r5, #0]
		UART.Init.BaudRate = 115200;
 8001d74:	6069      	str	r1, [r5, #4]
		UART.Init.Mode = UART_MODE_TX_RX;
 8001d76:	f8c5 c014 	str.w	ip, [r5, #20]
		UART.Init.StopBits = UART_STOPBITS_1;
 8001d7a:	e9c5 3302 	strd	r3, r3, [r5, #8]
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d82:	e9c5 3308 	strd	r3, r3, [r5, #32]
		if (HAL_UART_Init(&UART) != HAL_OK) {
 8001d86:	f7ff fb07 	bl	8001398 <HAL_UART_Init>
			//Error handling
		}
		is_initialized = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f8c8 3000 	str.w	r3, [r8]
	}
	HAL_UART_Receive(&UART, (uint8_t*) s, 1, 10);
 8001d90:	4669      	mov	r1, sp
 8001d92:	230a      	movs	r3, #10
 8001d94:	2201      	movs	r2, #1
 8001d96:	4648      	mov	r0, r9
 8001d98:	f7ff fa04 	bl	80011a4 <HAL_UART_Receive>
      start = HAL_GetTick();
 8001d9c:	f7fe fd3e 	bl	800081c <HAL_GetTick>
  invoke_inf();
 8001da0:	f001 f8bc 	bl	8002f1c <invoke_inf>
  signed char *output = (signed char *)getOutput();
 8001da4:	f001 f8b6 	bl	8002f14 <getOutput>
    out_int8[i] = output[i];
 8001da8:	f990 3000 	ldrsb.w	r3, [r0]
 8001dac:	f990 c001 	ldrsb.w	ip, [r0, #1]
 8001db0:	f990 1002 	ldrsb.w	r1, [r0, #2]
 8001db4:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8001db8:	7033      	strb	r3, [r6, #0]
 8001dba:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8001dbe:	f990 e005 	ldrsb.w	lr, [r0, #5]
 8001dc2:	f886 c001 	strb.w	ip, [r6, #1]
 8001dc6:	70b1      	strb	r1, [r6, #2]
 8001dc8:	f990 c006 	ldrsb.w	ip, [r0, #6]
 8001dcc:	f990 1007 	ldrsb.w	r1, [r0, #7]
 8001dd0:	70f2      	strb	r2, [r6, #3]
 8001dd2:	7133      	strb	r3, [r6, #4]
 8001dd4:	f990 2008 	ldrsb.w	r2, [r0, #8]
 8001dd8:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8001ddc:	71f1      	strb	r1, [r6, #7]
 8001dde:	7232      	strb	r2, [r6, #8]
 8001de0:	f886 e005 	strb.w	lr, [r6, #5]
 8001de4:	f886 c006 	strb.w	ip, [r6, #6]
 8001de8:	7273      	strb	r3, [r6, #9]
      end = HAL_GetTick();
 8001dea:	f7fe fd17 	bl	800081c <HAL_GetTick>
      sprintf(showbuf, " Inference ");
 8001dee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001df2:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
      displaystring(showbuf, 273, 10);
 8001df6:	220a      	movs	r2, #10
 8001df8:	f240 1111 	movw	r1, #273	; 0x111
 8001dfc:	4650      	mov	r0, sl
 8001dfe:	f7ff fca5 	bl	800174c <_Z13displaystringPcii>
  }
 8001e02:	e71b      	b.n	8001c3c <main+0x4dc>
 8001e04:	200013f4 	.word	0x200013f4
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	200007bc 	.word	0x200007bc
 8001e14:	20001468 	.word	0x20001468
 8001e18:	08004e1c 	.word	0x08004e1c
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	40011000 	.word	0x40011000
 8001e24:	20001464 	.word	0x20001464

08001e28 <Reset_Handler>:
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopFillZerobss+0x14>
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	e003      	b.n	8001e38 <LoopCopyDataInit>

08001e30 <CopyDataInit>:
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <LoopFillZerobss+0x18>)
 8001e32:	585b      	ldr	r3, [r3, r1]
 8001e34:	5043      	str	r3, [r0, r1]
 8001e36:	3104      	adds	r1, #4

08001e38 <LoopCopyDataInit>:
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <LoopFillZerobss+0x1c>)
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <LoopFillZerobss+0x20>)
 8001e3c:	1842      	adds	r2, r0, r1
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3f6      	bcc.n	8001e30 <CopyDataInit>
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <LoopFillZerobss+0x24>)
 8001e44:	e002      	b.n	8001e4c <LoopFillZerobss>

08001e46 <FillZerobss>:
 8001e46:	2300      	movs	r3, #0
 8001e48:	f842 3b04 	str.w	r3, [r2], #4

08001e4c <LoopFillZerobss>:
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <LoopFillZerobss+0x28>)
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3f9      	bcc.n	8001e46 <FillZerobss>
 8001e52:	f000 f895 	bl	8001f80 <SystemInit>
 8001e56:	f002 fb95 	bl	8004584 <__libc_init_array>
 8001e5a:	f7ff fc81 	bl	8001760 <main>
 8001e5e:	4770      	bx	lr
 8001e60:	2004ffff 	.word	0x2004ffff
 8001e64:	0800b9cc 	.word	0x0800b9cc
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20001284 	.word	0x20001284
 8001e70:	20001284 	.word	0x20001284
 8001e74:	200079e4 	.word	0x200079e4

08001e78 <ADC_IRQHandler>:
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>
	...

08001e7c <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (huart->Instance == USART1) {
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <HAL_UART_MspInit+0xc8>)
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001e80:	b570      	push	{r4, r5, r6, lr}
  if (huart->Instance == USART1) {
 8001e82:	4293      	cmp	r3, r2
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001e84:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f04f 0400 	mov.w	r4, #0
 8001e8a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001e8e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001e92:	9409      	str	r4, [sp, #36]	; 0x24
  if (huart->Instance == USART1) {
 8001e94:	d025      	beq.n	8001ee2 <HAL_UART_MspInit+0x66>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

  } else if (huart->Instance == USART6) {
 8001e96:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <HAL_UART_MspInit+0xcc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0x24>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}
 8001e9c:	b00a      	add	sp, #40	; 0x28
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8001ea2:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	a905      	add	r1, sp, #20
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001eac:	2408      	movs	r4, #8
    __HAL_RCC_USART6_CLK_ENABLE();
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
 8001eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb6:	f002 0220 	and.w	r2, r2, #32
 8001eba:	9203      	str	r2, [sp, #12]
 8001ebc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	f042 0204 	orr.w	r2, r2, #4
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8001ec8:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ece:	4820      	ldr	r0, [pc, #128]	; (8001f50 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed2:	9304      	str	r3, [sp, #16]
 8001ed4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ed6:	e9cd 5408 	strd	r5, r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f7fe fd15 	bl	8000908 <HAL_GPIO_Init>
}
 8001ede:	b00a      	add	sp, #40	; 0x28
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ee6:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee8:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001eec:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef6:	f002 0210 	and.w	r2, r2, #16
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f00:	4332      	orrs	r2, r6
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
 8001f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f06:	4032      	ands	r2, r6
 8001f08:	9201      	str	r2, [sp, #4]
 8001f0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f16:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f24:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f7fe fcef 	bl	8000908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	a905      	add	r1, sp, #20
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f34:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	e9cd 4407 	strd	r4, r4, [sp, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f7fe fce4 	bl	8000908 <HAL_GPIO_Init>
}
 8001f40:	b00a      	add	sp, #40	; 0x28
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40011400 	.word	0x40011400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40020000 	.word	0x40020000

08001f5c <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <HardFault_Handler>:

void HardFault_Handler(void) {
 8001f60:	e7fe      	b.n	8001f60 <HardFault_Handler>
 8001f62:	bf00      	nop

08001f64 <MemManage_Handler>:

  while (1) {
  }
}

void MemManage_Handler(void) {
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler>
 8001f66:	bf00      	nop

08001f68 <BusFault_Handler>:

  while (1) {
  }
}

void BusFault_Handler(void) {
 8001f68:	e7fe      	b.n	8001f68 <BusFault_Handler>
 8001f6a:	bf00      	nop

08001f6c <UsageFault_Handler>:

  while (1) {
  }
}

void UsageFault_Handler(void) {
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler>
 8001f6e:	bf00      	nop

08001f70 <SVC_Handler>:
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <DebugMon_Handler>:
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <PendSV_Handler>:
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <SysTick_Handler>:

void DebugMon_Handler(void) {}

void PendSV_Handler(void) {}

void SysTick_Handler(void) { HAL_IncTick(); }
 8001f7c:	f7fe bc42 	b.w	8000804 <HAL_IncTick>

08001f80 <SystemInit>:
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8001f80:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <SystemInit+0x40>)
#endif

  RCC->CR |= (uint32_t)0x00000001;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <SystemInit+0x44>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8001f84:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

  RCC->CFGR = 0x00000000;

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f88:	490f      	ldr	r1, [pc, #60]	; (8001fc8 <SystemInit+0x48>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8001f8a:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8001f8e:	b470      	push	{r4, r5, r6}
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8001f90:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 8001f94:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001f96:	6818      	ldr	r0, [r3, #0]
  RCC->CIR = 0x00000000;

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8001f98:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  RCC->PLLCFGR = 0x24003010;
 8001f9c:	4e0b      	ldr	r6, [pc, #44]	; (8001fcc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8001f9e:	f040 0001 	orr.w	r0, r0, #1
 8001fa2:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001fa4:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	4001      	ands	r1, r0
 8001faa:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001fac:	605e      	str	r6, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001fb4:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8001fb6:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8001fb8:	6095      	str	r5, [r2, #8]
#endif
}
 8001fba:	bc70      	pop	{r4, r5, r6}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	fef6ffff 	.word	0xfef6ffff
 8001fcc:	24003010 	.word	0x24003010

08001fd0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8001fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd4:	b09d      	sub	sp, #116	; 0x74

    //Set padding value
    q7_t PAD8 = pad_value;
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8001fd6:	f101 0901 	add.w	r9, r1, #1
{
 8001fda:	9216      	str	r2, [sp, #88]	; 0x58
 8001fdc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8001fde:	930a      	str	r3, [sp, #40]	; 0x28
 8001fe0:	1c8b      	adds	r3, r1, #2
 8001fe2:	4252      	negs	r2, r2
 8001fe4:	910c      	str	r1, [sp, #48]	; 0x30
 8001fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8001fe8:	f002 0207 	and.w	r2, r2, #7
 8001fec:	f8bd 10bc 	ldrh.w	r1, [sp, #188]	; 0xbc
 8001ff0:	9013      	str	r0, [sp, #76]	; 0x4c
 8001ff2:	1dd3      	adds	r3, r2, #7
 8001ff4:	910d      	str	r1, [sp, #52]	; 0x34
 8001ff6:	f8bd 10c0 	ldrh.w	r1, [sp, #192]	; 0xc0
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8002000:	910b      	str	r1, [sp, #44]	; 0x2c
 8002002:	bf38      	it	cc
 8002004:	230c      	movcc	r3, #12
 8002006:	f99d 70cc 	ldrsb.w	r7, [sp, #204]	; 0xcc
 800200a:	454b      	cmp	r3, r9
 800200c:	f200 82cd 	bhi.w	80025aa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5da>
 8002010:	b322      	cbz	r2, 800205c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x8c>
        *cols_8b++ = PAD8;
 8002012:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002014:	2a01      	cmp	r2, #1
 8002016:	701f      	strb	r7, [r3, #0]
 8002018:	f103 0c01 	add.w	ip, r3, #1
 800201c:	d020      	beq.n	8002060 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 800201e:	2a02      	cmp	r2, #2
 8002020:	705f      	strb	r7, [r3, #1]
 8002022:	f103 0c02 	add.w	ip, r3, #2
 8002026:	d01b      	beq.n	8002060 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8002028:	2a03      	cmp	r2, #3
 800202a:	709f      	strb	r7, [r3, #2]
 800202c:	f103 0c03 	add.w	ip, r3, #3
 8002030:	d016      	beq.n	8002060 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8002032:	2a04      	cmp	r2, #4
 8002034:	70df      	strb	r7, [r3, #3]
 8002036:	f103 0c04 	add.w	ip, r3, #4
 800203a:	d011      	beq.n	8002060 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 800203c:	2a05      	cmp	r2, #5
 800203e:	711f      	strb	r7, [r3, #4]
 8002040:	f103 0c05 	add.w	ip, r3, #5
 8002044:	d00c      	beq.n	8002060 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x90>
 8002046:	2a07      	cmp	r2, #7
 8002048:	715f      	strb	r7, [r3, #5]
 800204a:	f103 0c06 	add.w	ip, r3, #6
 800204e:	f040 82b1 	bne.w	80025b4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5e4>
 8002052:	719f      	strb	r7, [r3, #6]
 8002054:	f103 0c07 	add.w	ip, r3, #7
    for(i = 0; i < input_x + 2; i++){
 8002058:	4690      	mov	r8, r2
 800205a:	e002      	b.n	8002062 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 800205c:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 8002060:	4690      	mov	r8, r2
 8002062:	2400      	movs	r4, #0
 8002064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002066:	f10c 0001 	add.w	r0, ip, #1
 800206a:	4625      	mov	r5, r4
 800206c:	f367 0407 	bfi	r4, r7, #0, #8
 8002070:	eba3 0e02 	sub.w	lr, r3, r2
 8002074:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002076:	4629      	mov	r1, r5
 8002078:	f367 0507 	bfi	r5, r7, #0, #8
 800207c:	f367 240f 	bfi	r4, r7, #8, #8
 8002080:	441a      	add	r2, r3
 8002082:	f367 250f 	bfi	r5, r7, #8, #8
 8002086:	ea4f 06de 	mov.w	r6, lr, lsr #3
 800208a:	f367 4417 	bfi	r4, r7, #16, #8
 800208e:	f367 4517 	bfi	r5, r7, #16, #8
 8002092:	f367 641f 	bfi	r4, r7, #24, #8
 8002096:	f367 651f 	bfi	r5, r7, #24, #8
 800209a:	3101      	adds	r1, #1
 800209c:	4603      	mov	r3, r0
        *cols_8b++ = PAD8;
 800209e:	3008      	adds	r0, #8
 80020a0:	428e      	cmp	r6, r1
 80020a2:	f103 0307 	add.w	r3, r3, #7
 80020a6:	e9c2 4500 	strd	r4, r5, [r2]
 80020aa:	f102 0208 	add.w	r2, r2, #8
 80020ae:	d8f4      	bhi.n	800209a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xca>
 80020b0:	f02e 0107 	bic.w	r1, lr, #7
 80020b4:	eb08 0201 	add.w	r2, r8, r1
 80020b8:	4571      	cmp	r1, lr
 80020ba:	eb0c 0001 	add.w	r0, ip, r1
 80020be:	b292      	uxth	r2, r2
 80020c0:	d05c      	beq.n	800217c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
    for(i = 0; i < input_x + 2; i++){
 80020c2:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 80020c4:	1c43      	adds	r3, r0, #1
 80020c6:	f80c 7001 	strb.w	r7, [ip, r1]
    for(i = 0; i < input_x + 2; i++){
 80020ca:	b290      	uxth	r0, r2
 80020cc:	4581      	cmp	r9, r0
 80020ce:	db55      	blt.n	800217c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 80020d0:	1c42      	adds	r2, r0, #1
        *cols_8b++ = PAD8;
 80020d2:	701f      	strb	r7, [r3, #0]
 80020d4:	1c59      	adds	r1, r3, #1
    for(i = 0; i < input_x + 2; i++){
 80020d6:	b292      	uxth	r2, r2
 80020d8:	4591      	cmp	r9, r2
 80020da:	db4e      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 80020dc:	1c82      	adds	r2, r0, #2
        *cols_8b++ = PAD8;
 80020de:	705f      	strb	r7, [r3, #1]
 80020e0:	1c99      	adds	r1, r3, #2
    for(i = 0; i < input_x + 2; i++){
 80020e2:	b292      	uxth	r2, r2
 80020e4:	4591      	cmp	r9, r2
 80020e6:	db48      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 80020e8:	1cc2      	adds	r2, r0, #3
        *cols_8b++ = PAD8;
 80020ea:	709f      	strb	r7, [r3, #2]
 80020ec:	1cd9      	adds	r1, r3, #3
    for(i = 0; i < input_x + 2; i++){
 80020ee:	b292      	uxth	r2, r2
 80020f0:	4591      	cmp	r9, r2
 80020f2:	db42      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 80020f4:	1d02      	adds	r2, r0, #4
        *cols_8b++ = PAD8;
 80020f6:	70df      	strb	r7, [r3, #3]
 80020f8:	1d19      	adds	r1, r3, #4
    for(i = 0; i < input_x + 2; i++){
 80020fa:	b292      	uxth	r2, r2
 80020fc:	4591      	cmp	r9, r2
 80020fe:	db3c      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002100:	1d42      	adds	r2, r0, #5
        *cols_8b++ = PAD8;
 8002102:	711f      	strb	r7, [r3, #4]
 8002104:	1d59      	adds	r1, r3, #5
    for(i = 0; i < input_x + 2; i++){
 8002106:	b292      	uxth	r2, r2
 8002108:	4591      	cmp	r9, r2
 800210a:	db36      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 800210c:	1d82      	adds	r2, r0, #6
        *cols_8b++ = PAD8;
 800210e:	715f      	strb	r7, [r3, #5]
 8002110:	1d99      	adds	r1, r3, #6
    for(i = 0; i < input_x + 2; i++){
 8002112:	b292      	uxth	r2, r2
 8002114:	4591      	cmp	r9, r2
 8002116:	db30      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002118:	1dc2      	adds	r2, r0, #7
        *cols_8b++ = PAD8;
 800211a:	719f      	strb	r7, [r3, #6]
 800211c:	1dd9      	adds	r1, r3, #7
    for(i = 0; i < input_x + 2; i++){
 800211e:	b292      	uxth	r2, r2
 8002120:	4591      	cmp	r9, r2
 8002122:	db2a      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002124:	f100 0208 	add.w	r2, r0, #8
        *cols_8b++ = PAD8;
 8002128:	71df      	strb	r7, [r3, #7]
 800212a:	f103 0108 	add.w	r1, r3, #8
    for(i = 0; i < input_x + 2; i++){
 800212e:	b292      	uxth	r2, r2
 8002130:	4591      	cmp	r9, r2
 8002132:	db22      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002134:	f100 0209 	add.w	r2, r0, #9
        *cols_8b++ = PAD8;
 8002138:	721f      	strb	r7, [r3, #8]
 800213a:	f103 0109 	add.w	r1, r3, #9
    for(i = 0; i < input_x + 2; i++){
 800213e:	b292      	uxth	r2, r2
 8002140:	4591      	cmp	r9, r2
 8002142:	db1a      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002144:	f100 020a 	add.w	r2, r0, #10
        *cols_8b++ = PAD8;
 8002148:	725f      	strb	r7, [r3, #9]
 800214a:	f103 010a 	add.w	r1, r3, #10
    for(i = 0; i < input_x + 2; i++){
 800214e:	b292      	uxth	r2, r2
 8002150:	4591      	cmp	r9, r2
 8002152:	db12      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002154:	f100 020b 	add.w	r2, r0, #11
        *cols_8b++ = PAD8;
 8002158:	729f      	strb	r7, [r3, #10]
 800215a:	f103 010b 	add.w	r1, r3, #11
    for(i = 0; i < input_x + 2; i++){
 800215e:	b292      	uxth	r2, r2
 8002160:	4591      	cmp	r9, r2
 8002162:	db0a      	blt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
 8002164:	f100 020c 	add.w	r2, r0, #12
        *cols_8b++ = PAD8;
 8002168:	72df      	strb	r7, [r3, #11]
 800216a:	f103 010c 	add.w	r1, r3, #12
    for(i = 0; i < input_x + 2; i++){
 800216e:	b292      	uxth	r2, r2
 8002170:	454a      	cmp	r2, r9
 8002172:	dc02      	bgt.n	800217a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1aa>
        *cols_8b++ = PAD8;
 8002174:	731f      	strb	r7, [r3, #12]
 8002176:	330d      	adds	r3, #13
 8002178:	e000      	b.n	800217c <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1ac>
 800217a:	460b      	mov	r3, r1
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 800217c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800217e:	b192      	cbz	r2, 80021a6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1d6>
 8002180:	4614      	mov	r4, r2
 8002182:	2100      	movs	r1, #0
 8002184:	461a      	mov	r2, r3
 8002186:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002188:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;//left
 800218a:	7017      	strb	r7, [r2, #0]
 800218c:	442a      	add	r2, r5
    for(i = 0; i < input_y; i++){
 800218e:	b288      	uxth	r0, r1
        cols_8b += input_x; //skip middle
        *cols_8b++ = PAD8;//right
 8002190:	f802 7c01 	strb.w	r7, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8002194:	4284      	cmp	r4, r0
 8002196:	d8f7      	bhi.n	8002188 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x1b8>
 8002198:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800219a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800219c:	3a01      	subs	r2, #1
 800219e:	b292      	uxth	r2, r2
 80021a0:	fb02 1201 	mla	r2, r2, r1, r1
 80021a4:	4413      	add	r3, r2
 80021a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021a8:	f1a2 0113 	sub.w	r1, r2, #19
 80021ac:	f64f 72ea 	movw	r2, #65514	; 0xffea
 80021b0:	4291      	cmp	r1, r2
 80021b2:	f200 81f0 	bhi.w	8002596 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c6>
 80021b6:	425a      	negs	r2, r3
 80021b8:	f012 0203 	ands.w	r2, r2, #3
 80021bc:	f000 81d8 	beq.w	8002570 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a0>
 80021c0:	2a01      	cmp	r2, #1
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
        *cols_8b++ = PAD8;
 80021c2:	701f      	strb	r7, [r3, #0]
 80021c4:	f103 0501 	add.w	r5, r3, #1
 80021c8:	f000 81d3 	beq.w	8002572 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a2>
 80021cc:	2a03      	cmp	r2, #3
 80021ce:	705f      	strb	r7, [r3, #1]
 80021d0:	f103 0502 	add.w	r5, r3, #2
 80021d4:	f040 81e7 	bne.w	80025a6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5d6>
 80021d8:	1cdd      	adds	r5, r3, #3
    for(i = 0; i < input_x + 2; i++){
 80021da:	4616      	mov	r6, r2
        *cols_8b++ = PAD8;
 80021dc:	709f      	strb	r7, [r3, #2]
 80021de:	2100      	movs	r1, #0
 80021e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80021e2:	4413      	add	r3, r2
 80021e4:	1a84      	subs	r4, r0, r2
    for(i = 0; i < input_x + 2; i++){
 80021e6:	460a      	mov	r2, r1
 80021e8:	f367 0107 	bfi	r1, r7, #0, #8
 80021ec:	08a0      	lsrs	r0, r4, #2
 80021ee:	f367 210f 	bfi	r1, r7, #8, #8
 80021f2:	f367 4117 	bfi	r1, r7, #16, #8
 80021f6:	f367 611f 	bfi	r1, r7, #24, #8
 80021fa:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 80021fc:	f843 1b04 	str.w	r1, [r3], #4
 8002200:	4290      	cmp	r0, r2
 8002202:	d8fa      	bhi.n	80021fa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x22a>
 8002204:	f024 0303 	bic.w	r3, r4, #3
 8002208:	18f2      	adds	r2, r6, r3
 800220a:	42a3      	cmp	r3, r4
 800220c:	eb05 0003 	add.w	r0, r5, r3
 8002210:	b291      	uxth	r1, r2
 8002212:	d019      	beq.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
    for(i = 0; i < input_x + 2; i++){
 8002214:	1c4a      	adds	r2, r1, #1
        *cols_8b++ = PAD8;
 8002216:	54ef      	strb	r7, [r5, r3]
    for(i = 0; i < input_x + 2; i++){
 8002218:	b293      	uxth	r3, r2
 800221a:	4599      	cmp	r9, r3
 800221c:	db14      	blt.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 800221e:	1c8b      	adds	r3, r1, #2
        *cols_8b++ = PAD8;
 8002220:	7047      	strb	r7, [r0, #1]
    for(i = 0; i < input_x + 2; i++){
 8002222:	b29b      	uxth	r3, r3
 8002224:	454b      	cmp	r3, r9
 8002226:	dc0f      	bgt.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8002228:	1ccb      	adds	r3, r1, #3
        *cols_8b++ = PAD8;
 800222a:	7087      	strb	r7, [r0, #2]
    for(i = 0; i < input_x + 2; i++){
 800222c:	b29b      	uxth	r3, r3
 800222e:	4599      	cmp	r9, r3
 8002230:	db0a      	blt.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 8002232:	1d0b      	adds	r3, r1, #4
        *cols_8b++ = PAD8;
 8002234:	70c7      	strb	r7, [r0, #3]
    for(i = 0; i < input_x + 2; i++){
 8002236:	b29b      	uxth	r3, r3
 8002238:	4599      	cmp	r9, r3
 800223a:	db05      	blt.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 800223c:	1d4b      	adds	r3, r1, #5
        *cols_8b++ = PAD8;
 800223e:	7107      	strb	r7, [r0, #4]
    for(i = 0; i < input_x + 2; i++){
 8002240:	b29b      	uxth	r3, r3
 8002242:	4599      	cmp	r9, r3
 8002244:	db00      	blt.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
        *cols_8b++ = PAD8;
 8002246:	7147      	strb	r7, [r0, #5]
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;

    for (c = 0; c < input_ch; c++){
 8002248:	980a      	ldr	r0, [sp, #40]	; 0x28
 800224a:	2800      	cmp	r0, #0
 800224c:	f000 818c 	beq.w	8002568 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x598>
 8002250:	1e43      	subs	r3, r0, #1
{
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
        for (j = 0; j < output_x / 2; j++) {
 8002252:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002254:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002256:	46d0      	mov	r8, sl
 8002258:	b29b      	uxth	r3, r3
 800225a:	1e69      	subs	r1, r5, #1
 800225c:	086f      	lsrs	r7, r5, #1
 800225e:	1e72      	subs	r2, r6, #1
 8002260:	3301      	adds	r3, #1
 8002262:	fb00 f101 	mul.w	r1, r0, r1
 8002266:	b292      	uxth	r2, r2
 8002268:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800226a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800226e:	9115      	str	r1, [sp, #84]	; 0x54
 8002270:	0079      	lsls	r1, r7, #1
 8002272:	f104 0909 	add.w	r9, r4, #9
 8002276:	9317      	str	r3, [sp, #92]	; 0x5c
 8002278:	f005 0301 	and.w	r3, r5, #1
 800227c:	9111      	str	r1, [sp, #68]	; 0x44
 800227e:	1c51      	adds	r1, r2, #1
 8002280:	930e      	str	r3, [sp, #56]	; 0x38
 8002282:	4603      	mov	r3, r0
 8002284:	3203      	adds	r2, #3
 8002286:	970f      	str	r7, [sp, #60]	; 0x3c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	921b      	str	r2, [sp, #108]	; 0x6c
 800228e:	9319      	str	r3, [sp, #100]	; 0x64
 8002290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002292:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002294:	911a      	str	r1, [sp, #104]	; 0x68
 8002296:	4413      	add	r3, r2
 8002298:	9318      	str	r3, [sp, #96]	; 0x60
 800229a:	4603      	mov	r3, r0
 800229c:	fb05 f303 	mul.w	r3, r5, r3
 80022a0:	9310      	str	r3, [sp, #64]	; 0x40
 80022a2:	0073      	lsls	r3, r6, #1
 80022a4:	9312      	str	r3, [sp, #72]	; 0x48
 80022a6:	0043      	lsls	r3, r0, #1
 80022a8:	9306      	str	r3, [sp, #24]
        for(i = 0; i < input_y; i++){
 80022aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80022ac:	b1db      	cbz	r3, 80022e6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 80022ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80022b0:	b1ca      	cbz	r2, 80022e6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x316>
 80022b2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80022b4:	2500      	movs	r5, #0
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 80022b6:	9c18      	ldr	r4, [sp, #96]	; 0x60
        for(i = 0; i < input_y; i++){
 80022b8:	469a      	mov	sl, r3
 80022ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80022bc:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 80022c0:	e9dd ce19 	ldrd	ip, lr, [sp, #100]	; 0x64
 80022c4:	eb04 000e 	add.w	r0, r4, lr
 80022c8:	4622      	mov	r2, r4
 80022ca:	4633      	mov	r3, r6
                *cols_8b++ = *src;// + input_offset;
 80022cc:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 80022d0:	443b      	add	r3, r7
                *cols_8b++ = *src;// + input_offset;
 80022d2:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 80022d6:	4282      	cmp	r2, r0
 80022d8:	d1f8      	bne.n	80022cc <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2fc>
 80022da:	3501      	adds	r5, #1
 80022dc:	4466      	add	r6, ip
            cols_8b += 1;//skip end
 80022de:	445c      	add	r4, fp
        for(i = 0; i < input_y; i++){
 80022e0:	b2ab      	uxth	r3, r5
 80022e2:	459a      	cmp	sl, r3
 80022e4:	d8ee      	bhi.n	80022c4 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2f4>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80022e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80022e8:	f108 0804 	add.w	r8, r8, #4
 80022ec:	3304      	adds	r3, #4
 80022ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80022f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80022f2:	3304      	adds	r3, #4
 80022f4:	9328      	str	r3, [sp, #160]	; 0xa0
    for (i = 0; i < output_y; i++) {
 80022f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 812c 	beq.w	8002556 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x586>
 80022fe:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
 8002302:	2300      	movs	r3, #0
 8002304:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002306:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002308:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 800230c:	46f0      	mov	r8, lr
 800230e:	440a      	add	r2, r1
 8002310:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 8002314:	9307      	str	r3, [sp, #28]
 8002316:	9208      	str	r2, [sp, #32]
 8002318:	9309      	str	r3, [sp, #36]	; 0x24
        for (j = 0; j < output_x / 2; j++) {
 800231a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a8 	beq.w	8002472 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x4a2>
 8002322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002324:	9907      	ldr	r1, [sp, #28]
 8002326:	fb01 2302 	mla	r3, r1, r2, r2
 800232a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800232c:	eb08 0c01 	add.w	ip, r8, r1
 8002330:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002332:	9304      	str	r3, [sp, #16]
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	eb08 0701 	add.w	r7, r8, r1
 800233a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800233c:	9303      	str	r3, [sp, #12]
 800233e:	4441      	add	r1, r8
            /* requantize */
            sum0 = (float) sum0 * *scales;
            sum0 += output_offset;
            sum0 = MAX(sum0, activation_min);
            sum0 = MIN(sum0, activation_max);
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8002340:	9b08      	ldr	r3, [sp, #32]
 8002342:	9105      	str	r1, [sp, #20]
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	9a01      	ldr	r2, [sp, #4]
            sum1 += output_offset;
            sum1 = MAX(sum1, activation_min);
            sum1 = MIN(sum1, activation_max);
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;

            cols_8b_iterptr += STRIDE * 2;
 8002348:	f108 0802 	add.w	r8, r8, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800234c:	9904      	ldr	r1, [sp, #16]
 800234e:	f10c 0c02 	add.w	ip, ip, #2
            q31_t sum0 = bias[0] + biasR[0];
 8002352:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8002354:	3702      	adds	r7, #2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8002356:	1a51      	subs	r1, r2, r1
            q31_t sum0 = bias[0] + biasR[0];
 8002358:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            sum0 += cols_8b[0]*ksrc[0];
 800235a:	f918 4c02 	ldrsb.w	r4, [r8, #-2]
            q31_t sum0 = bias[0] + biasR[0];
 800235e:	f853 3c04 	ldr.w	r3, [r3, #-4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8002362:	9102      	str	r1, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8002364:	f850 1c04 	ldr.w	r1, [r0, #-4]
            sum0 += cols_8b[0]*ksrc[0];
 8002368:	f919 0c09 	ldrsb.w	r0, [r9, #-9]
            q31_t sum0 = bias[0] + biasR[0];
 800236c:	4419      	add	r1, r3
            sum1 += cols_8b[1]*ksrc[0];
 800236e:	f918 5c01 	ldrsb.w	r5, [r8, #-1]
            sum0 += cols_8b[1]*ksrc[1];
 8002372:	f919 2c08 	ldrsb.w	r2, [r9, #-8]
            sum0 += cols_8b[0]*ksrc[0];
 8002376:	fb14 1400 	smlabb	r4, r4, r0, r1
            sum1 += cols_8b[2]*ksrc[1];
 800237a:	f998 3000 	ldrsb.w	r3, [r8]
            sum0 += cols_8b[2]*ksrc[2];
 800237e:	f919 bc07 	ldrsb.w	fp, [r9, #-7]
            sum1 += cols_8b[1]*ksrc[0];
 8002382:	fb10 1105 	smlabb	r1, r0, r5, r1
            sum0 += cols_8b[1]*ksrc[1];
 8002386:	fb15 4402 	smlabb	r4, r5, r2, r4
            sum0 += cols_8b[0]*ksrc[3];
 800238a:	f919 ac06 	ldrsb.w	sl, [r9, #-6]
            sum1 += cols_8b[2]*ksrc[1];
 800238e:	fb12 1003 	smlabb	r0, r2, r3, r1
            sum0 += cols_8b[0]*ksrc[3];
 8002392:	f99c 2000 	ldrsb.w	r2, [ip]
            sum0 += cols_8b[2]*ksrc[2];
 8002396:	fb13 430b 	smlabb	r3, r3, fp, r4
            sum1 += cols_8b[1]*ksrc[3];
 800239a:	f99c 1001 	ldrsb.w	r1, [ip, #1]
            sum0 += cols_8b[1]*ksrc[4];
 800239e:	f919 6c05 	ldrsb.w	r6, [r9, #-5]
            sum0 += cols_8b[0]*ksrc[3];
 80023a2:	fb12 330a 	smlabb	r3, r2, sl, r3
            sum1 += cols_8b[2]*ksrc[4];
 80023a6:	f99c 5002 	ldrsb.w	r5, [ip, #2]
            sum1 += cols_8b[3]*ksrc[2];
 80023aa:	f998 2001 	ldrsb.w	r2, [r8, #1]
            sum0 += cols_8b[1]*ksrc[4];
 80023ae:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum0 += cols_8b[2]*ksrc[5];
 80023b2:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
            sum1 += cols_8b[3]*ksrc[2];
 80023b6:	fb1b 0202 	smlabb	r2, fp, r2, r0
            sum0 += cols_8b[0]*ksrc[6];
 80023ba:	f919 0c03 	ldrsb.w	r0, [r9, #-3]
 80023be:	f997 b002 	ldrsb.w	fp, [r7, #2]
            sum0 += cols_8b[2]*ksrc[5];
 80023c2:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[3];
 80023c6:	fb1a 2201 	smlabb	r2, sl, r1, r2
            sum0 += cols_8b[1]*ksrc[7];
 80023ca:	f919 1c02 	ldrsb.w	r1, [r9, #-2]
            sum0 += cols_8b[0]*ksrc[6];
 80023ce:	fb1b 3300 	smlabb	r3, fp, r0, r3
            sum1 += cols_8b[1]*ksrc[6];
 80023d2:	f997 b003 	ldrsb.w	fp, [r7, #3]
            sum1 += cols_8b[2]*ksrc[7];
 80023d6:	f997 a004 	ldrsb.w	sl, [r7, #4]
            sum1 += cols_8b[2]*ksrc[4];
 80023da:	fb16 2205 	smlabb	r2, r6, r5, r2
            sum0 += cols_8b[1]*ksrc[7];
 80023de:	fb1b 3301 	smlabb	r3, fp, r1, r3
            sum0 += cols_8b[2]*ksrc[8];
 80023e2:	f919 6c01 	ldrsb.w	r6, [r9, #-1]
            sum0 = (float) sum0 * *scales;
 80023e6:	ed5e 7a01 	vldr	s15, [lr, #-4]
            sum0 += cols_8b[2]*ksrc[8];
 80023ea:	fb1a 3306 	smlabb	r3, sl, r6, r3
            sum1 += cols_8b[3]*ksrc[5];
 80023ee:	f99c 5003 	ldrsb.w	r5, [ip, #3]
 80023f2:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum0 += cols_8b[2]*ksrc[8];
 80023f6:	ee07 3a10 	vmov	s14, r3
            sum1 += cols_8b[3]*ksrc[8];
 80023fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
            sum0 = (float) sum0 * *scales;
 80023fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            sum1 += cols_8b[1]*ksrc[6];
 8002402:	fb10 220b 	smlabb	r2, r0, fp, r2
            sum0 += output_offset;
 8002406:	982a      	ldr	r0, [sp, #168]	; 0xa8
            sum1 += cols_8b[2]*ksrc[7];
 8002408:	fb11 220a 	smlabb	r2, r1, sl, r2
            sum0 = (float) sum0 * *scales;
 800240c:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 += cols_8b[3]*ksrc[8];
 8002410:	fb16 2203 	smlabb	r2, r6, r3, r2
            sum0 = (float) sum0 * *scales;
 8002414:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            sum1 = (float) sum1 * *scales;
 8002418:	ee07 2a90 	vmov	s15, r2
 800241c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 8002420:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 8002424:	4403      	add	r3, r0
            sum0 = MAX(sum0, activation_min);
 8002426:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8002428:	4283      	cmp	r3, r0
 800242a:	bfb8      	it	lt
 800242c:	4603      	movlt	r3, r0
            sum0 = MIN(sum0, activation_max);
 800242e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8002430:	4283      	cmp	r3, r0
 8002432:	bfa8      	it	ge
 8002434:	4603      	movge	r3, r0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8002436:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800243a:	9a01      	ldr	r2, [sp, #4]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800243c:	540b      	strb	r3, [r1, r0]
            sum1 = (float) sum1 * *scales;
 800243e:	ed1e 7a01 	vldr	s14, [lr, #-4]
            sum1 += output_offset;
 8002442:	992a      	ldr	r1, [sp, #168]	; 0xa8
            sum1 = (float) sum1 * *scales;
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8002450:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8002452:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8002454:	428b      	cmp	r3, r1
 8002456:	bfb8      	it	lt
 8002458:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 800245a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800245c:	428b      	cmp	r3, r1
 800245e:	bfa8      	it	ge
 8002460:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8002462:	7013      	strb	r3, [r2, #0]
 8002464:	9b06      	ldr	r3, [sp, #24]
 8002466:	18d3      	adds	r3, r2, r3
 8002468:	9301      	str	r3, [sp, #4]
        for (j = 0; j < output_x / 2; j++) {
 800246a:	9b05      	ldr	r3, [sp, #20]
 800246c:	4598      	cmp	r8, r3
 800246e:	f47f af6a 	bne.w	8002346 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x376>
 8002472:	9f09      	ldr	r7, [sp, #36]	; 0x24
        }
        if (output_x & 1) {
 8002474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002476:	3701      	adds	r7, #1
 8002478:	9709      	str	r7, [sp, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d07b      	beq.n	8002576 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5a6>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 800247e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002480:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002482:	9807      	ldr	r0, [sp, #28]
 8002484:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8002488:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800248a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800248e:	4420      	add	r0, r4
            sum += cols_8b[0]*ksrc[0];
 8002490:	f998 4000 	ldrsb.w	r4, [r8]
            q31_t sum = bias[0] + biasR[0];
 8002494:	4413      	add	r3, r2
            sum += cols_8b[0]*ksrc[0];
 8002496:	f919 2c09 	ldrsb.w	r2, [r9, #-9]
            sum += cols_8b[1]*ksrc[1];
 800249a:	f998 5001 	ldrsb.w	r5, [r8, #1]
            sum += cols_8b[0]*ksrc[0];
 800249e:	fb14 3c02 	smlabb	ip, r4, r2, r3

            sum = (float) sum * *scales;
            sum += output_offset;
            sum = MAX(sum, activation_min);
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80024a2:	9a08      	ldr	r2, [sp, #32]
 80024a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            sum += cols_8b[1]*ksrc[1];
 80024a6:	f919 4c08 	ldrsb.w	r4, [r9, #-8]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80024aa:	eba2 0a03 	sub.w	sl, r2, r3
 80024ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
            cols_8b += column_x + 2;
 80024b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80024b2:	18d3      	adds	r3, r2, r3
 80024b4:	9007      	str	r0, [sp, #28]
 80024b6:	eb08 0106 	add.w	r1, r8, r6
            sum = (float) sum * *scales;
 80024ba:	ed1e 7a01 	vldr	s14, [lr, #-4]
 80024be:	9308      	str	r3, [sp, #32]
            sum += cols_8b[1]*ksrc[1];
 80024c0:	fb15 c304 	smlabb	r3, r5, r4, ip
            sum += cols_8b[2]*ksrc[2];
 80024c4:	f998 5002 	ldrsb.w	r5, [r8, #2]
            cols_8b += column_x + 2;
 80024c8:	1988      	adds	r0, r1, r6
            sum += cols_8b[2]*ksrc[2];
 80024ca:	f919 4c07 	ldrsb.w	r4, [r9, #-7]
            sum += output_offset;
 80024ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 80024d0:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[0]*ksrc[3];
 80024d4:	f918 5006 	ldrsb.w	r5, [r8, r6]
 80024d8:	f919 4c06 	ldrsb.w	r4, [r9, #-6]
            sum += cols_8b[0]*ksrc[6];
 80024dc:	f918 6016 	ldrsb.w	r6, [r8, r6, lsl #1]

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 1 * 2;
 80024e0:	f108 0803 	add.w	r8, r8, #3
            sum += cols_8b[0]*ksrc[3];
 80024e4:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[4];
 80024e8:	f991 4001 	ldrsb.w	r4, [r1, #1]
 80024ec:	f919 5c05 	ldrsb.w	r5, [r9, #-5]
            sum += cols_8b[2]*ksrc[5];
 80024f0:	f991 1002 	ldrsb.w	r1, [r1, #2]
            sum += cols_8b[1]*ksrc[4];
 80024f4:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[5];
 80024f8:	f919 4c04 	ldrsb.w	r4, [r9, #-4]
 80024fc:	fb11 3104 	smlabb	r1, r1, r4, r3
            sum += cols_8b[0]*ksrc[6];
 8002500:	f919 3c03 	ldrsb.w	r3, [r9, #-3]
 8002504:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[1]*ksrc[7];
 8002508:	f990 6001 	ldrsb.w	r6, [r0, #1]
 800250c:	f919 3c02 	ldrsb.w	r3, [r9, #-2]
            sum += cols_8b[2]*ksrc[8];
 8002510:	f990 0002 	ldrsb.w	r0, [r0, #2]
            sum += cols_8b[1]*ksrc[7];
 8002514:	fb16 1103 	smlabb	r1, r6, r3, r1
            sum += cols_8b[2]*ksrc[8];
 8002518:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 800251c:	fb10 1103 	smlabb	r1, r0, r3, r1
            sum = (float) sum * *scales;
 8002520:	ee07 1a90 	vmov	s15, r1
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8002534:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8002536:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8002538:	4293      	cmp	r3, r2
 800253a:	bfb8      	it	lt
 800253c:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 800253e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8002540:	4293      	cmp	r3, r2
 8002542:	bfa8      	it	ge
 8002544:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8002546:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002548:	f80a 3002 	strb.w	r3, [sl, r2]
    for (i = 0; i < output_y; i++) {
 800254c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800254e:	42bb      	cmp	r3, r7
 8002550:	f47f aee3 	bne.w	800231a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 8002554:	46f0      	mov	r8, lr
        input++;
 8002556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002558:	f109 0909 	add.w	r9, r9, #9
 800255c:	3301      	adds	r3, #1
 800255e:	9313      	str	r3, [sp, #76]	; 0x4c
    for (c = 0; c < input_ch; c++){
 8002560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002562:	4598      	cmp	r8, r3
 8002564:	f47f aea1 	bne.w	80022aa <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2da>
}
 8002568:	2000      	movs	r0, #0
 800256a:	b01d      	add	sp, #116	; 0x74
 800256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 2; i++){
 8002570:	461d      	mov	r5, r3
 8002572:	4616      	mov	r6, r2
 8002574:	e633      	b.n	80021de <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
 8002576:	9b08      	ldr	r3, [sp, #32]
        cols_8b_iterptr += 1 * 2;
 8002578:	f108 0802 	add.w	r8, r8, #2
 800257c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800257e:	4413      	add	r3, r2
 8002580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002582:	9308      	str	r3, [sp, #32]
 8002584:	9b07      	ldr	r3, [sp, #28]
 8002586:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8002588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800258a:	9307      	str	r3, [sp, #28]
 800258c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800258e:	4293      	cmp	r3, r2
 8002590:	f47f aec3 	bne.w	800231a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x34a>
 8002594:	e7de      	b.n	8002554 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x584>
    for(i = 0; i < input_x + 2; i++){
 8002596:	4619      	mov	r1, r3
        *cols_8b++ = PAD8;
 8002598:	f801 7b01 	strb.w	r7, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 800259c:	1aca      	subs	r2, r1, r3
 800259e:	b292      	uxth	r2, r2
 80025a0:	4591      	cmp	r9, r2
 80025a2:	daf9      	bge.n	8002598 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x5c8>
 80025a4:	e650      	b.n	8002248 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x278>
 80025a6:	2602      	movs	r6, #2
 80025a8:	e619      	b.n	80021de <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x20e>
        *cols_8b++ = PAD8;
 80025aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    for(i = 0; i < input_x + 2; i++){
 80025ac:	2001      	movs	r0, #1
        *cols_8b++ = PAD8;
 80025ae:	701f      	strb	r7, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	e58d      	b.n	80020d0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x100>
    for(i = 0; i < input_x + 2; i++){
 80025b4:	f04f 0806 	mov.w	r8, #6
 80025b8:	e553      	b.n	8002062 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x92>
 80025ba:	bf00      	nop

080025bc <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 80025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c0:	b09b      	sub	sp, #108	; 0x6c
 80025c2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 80025c6:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 80025ca:	9112      	str	r1, [sp, #72]	; 0x48
 80025cc:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 80025d0:	9011      	str	r0, [sp, #68]	; 0x44
{
 80025d2:	9204      	str	r2, [sp, #16]
    for (i = 0; i < output_y; i++) {
 80025d4:	2800      	cmp	r0, #0
 80025d6:	f000 839d 	beq.w	8002d14 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x758>
        for (j = 0; j < output_x / 2; j++) {
 80025da:	0848      	lsrs	r0, r1, #1
 80025dc:	1e4b      	subs	r3, r1, #1
 80025de:	0054      	lsls	r4, r2, #1
 80025e0:	2500      	movs	r5, #0
 80025e2:	0046      	lsls	r6, r0, #1
 80025e4:	9014      	str	r0, [sp, #80]	; 0x50
 80025e6:	9405      	str	r4, [sp, #20]
 80025e8:	9618      	str	r6, [sp, #96]	; 0x60
 80025ea:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 80025ec:	950e      	str	r5, [sp, #56]	; 0x38
 80025ee:	fb06 f303 	mul.w	r3, r6, r3
    for (i = 0; i < output_y; i++) {
 80025f2:	950d      	str	r5, [sp, #52]	; 0x34
 80025f4:	9319      	str	r3, [sp, #100]	; 0x64
 80025f6:	1903      	adds	r3, r0, r4
 80025f8:	f001 0001 	and.w	r0, r1, #1
 80025fc:	fb06 f101 	mul.w	r1, r6, r1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	9013      	str	r0, [sp, #76]	; 0x4c
 8002604:	9316      	str	r3, [sp, #88]	; 0x58
 8002606:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002608:	9115      	str	r1, [sp, #84]	; 0x54
 800260a:	4433      	add	r3, r6
 800260c:	930f      	str	r3, [sp, #60]	; 0x3c
 800260e:	0093      	lsls	r3, r2, #2
 8002610:	9317      	str	r3, [sp, #92]	; 0x5c
 8002612:	4253      	negs	r3, r2
 8002614:	930c      	str	r3, [sp, #48]	; 0x30
 8002616:	0073      	lsls	r3, r6, #1
 8002618:	930b      	str	r3, [sp, #44]	; 0x2c
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            sum += cols_8b[5]*ksrc[5];
            sum += cols_8b[6]*ksrc[6];
            cols_8b += column_x + 6;
 800261a:	1d93      	adds	r3, r2, #6
 800261c:	9310      	str	r3, [sp, #64]	; 0x40
        for (j = 0; j < output_x / 2; j++) {
 800261e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8206 	beq.w	8002a32 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x476>
 8002626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002628:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800262a:	9904      	ldr	r1, [sp, #16]
 800262c:	fb02 3303 	mla	r3, r2, r3, r3
 8002630:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002632:	eb02 0e01 	add.w	lr, r2, r1
 8002636:	9905      	ldr	r1, [sp, #20]
 8002638:	9308      	str	r3, [sp, #32]
 800263a:	440a      	add	r2, r1
 800263c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800263e:	9201      	str	r2, [sp, #4]
 8002640:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002642:	eb02 0c01 	add.w	ip, r2, r1
 8002646:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800264c:	9307      	str	r3, [sp, #28]
 800264e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002650:	4413      	add	r3, r2
 8002652:	9306      	str	r3, [sp, #24]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8002654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002656:	9302      	str	r3, [sp, #8]
            q31_t sum0 = bias[0] + biasR[0];
 8002658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800265a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800265c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	eb0e 0006 	add.w	r0, lr, r6
            sum0 += cols_8b[0]*ksrc[0];
 8002666:	f99b 5000 	ldrsb.w	r5, [fp]
 800266a:	9f01      	ldr	r7, [sp, #4]
            q31_t sum0 = bias[0] + biasR[0];
 800266c:	4419      	add	r1, r3
 800266e:	9a04      	ldr	r2, [sp, #16]
            sum0 += cols_8b[0]*ksrc[0];
 8002670:	f91e 3006 	ldrsb.w	r3, [lr, r6]
 8002674:	f10e 0e02 	add.w	lr, lr, #2
 8002678:	18bc      	adds	r4, r7, r2
            sum0 += cols_8b[1]*ksrc[1];
 800267a:	f99b 6001 	ldrsb.w	r6, [fp, #1]
            sum1 += cols_8b[1]*ksrc[0];
 800267e:	f990 7001 	ldrsb.w	r7, [r0, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8002682:	fb13 1305 	smlabb	r3, r3, r5, r1
            sum1 += cols_8b[2]*ksrc[1];
 8002686:	f990 8002 	ldrsb.w	r8, [r0, #2]
 800268a:	4462      	add	r2, ip
            sum1 += cols_8b[1]*ksrc[0];
 800268c:	fb15 1107 	smlabb	r1, r5, r7, r1
            sum1 += cols_8b[3]*ksrc[2];
 8002690:	f990 9003 	ldrsb.w	r9, [r0, #3]
            sum0 += cols_8b[1]*ksrc[1];
 8002694:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[2];
 8002698:	f99b 7002 	ldrsb.w	r7, [fp, #2]
            sum1 += cols_8b[2]*ksrc[1];
 800269c:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[3];
 80026a0:	f990 a004 	ldrsb.w	sl, [r0, #4]
            sum0 += cols_8b[2]*ksrc[2];
 80026a4:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[3];
 80026a8:	f99b 8003 	ldrsb.w	r8, [fp, #3]
            sum1 += cols_8b[3]*ksrc[2];
 80026ac:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum1 += cols_8b[5]*ksrc[4];
 80026b0:	f990 5005 	ldrsb.w	r5, [r0, #5]
            sum0 += cols_8b[3]*ksrc[3];
 80026b4:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[4];
 80026b8:	f99b 9004 	ldrsb.w	r9, [fp, #4]
            sum1 += cols_8b[4]*ksrc[3];
 80026bc:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum1 += cols_8b[6]*ksrc[5];
 80026c0:	f990 6006 	ldrsb.w	r6, [r0, #6]
            sum0 += cols_8b[4]*ksrc[4];
 80026c4:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum0 += cols_8b[5]*ksrc[5];
 80026c8:	f99b a005 	ldrsb.w	sl, [fp, #5]
            sum1 += cols_8b[5]*ksrc[4];
 80026cc:	fb19 1105 	smlabb	r1, r9, r5, r1
            sum1 += cols_8b[1]*ksrc[7];
 80026d0:	f99e 7005 	ldrsb.w	r7, [lr, #5]
            sum0 += cols_8b[5]*ksrc[5];
 80026d4:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum0 += cols_8b[6]*ksrc[6];
 80026d8:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum1 += cols_8b[6]*ksrc[5];
 80026dc:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum1 += cols_8b[7]*ksrc[6];
 80026e0:	f990 a007 	ldrsb.w	sl, [r0, #7]
            sum0 += cols_8b[6]*ksrc[6];
 80026e4:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum0 += cols_8b[0]*ksrc[7];
 80026e8:	f99b 0007 	ldrsb.w	r0, [fp, #7]
 80026ec:	f99e 6004 	ldrsb.w	r6, [lr, #4]
            sum1 += cols_8b[7]*ksrc[6];
 80026f0:	fb15 110a 	smlabb	r1, r5, sl, r1
            sum1 += cols_8b[2]*ksrc[8];
 80026f4:	f99e 8006 	ldrsb.w	r8, [lr, #6]
            sum0 += cols_8b[0]*ksrc[7];
 80026f8:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[8];
 80026fc:	f99b 6008 	ldrsb.w	r6, [fp, #8]
            sum1 += cols_8b[1]*ksrc[7];
 8002700:	fb10 1107 	smlabb	r1, r0, r7, r1
            sum1 += cols_8b[3]*ksrc[9];
 8002704:	f99e 9007 	ldrsb.w	r9, [lr, #7]
            sum0 += cols_8b[1]*ksrc[8];
 8002708:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum0 += cols_8b[2]*ksrc[9];
 800270c:	f99b 7009 	ldrsb.w	r7, [fp, #9]
            sum1 += cols_8b[2]*ksrc[8];
 8002710:	fb16 1108 	smlabb	r1, r6, r8, r1
            sum1 += cols_8b[4]*ksrc[10];
 8002714:	f99e 5008 	ldrsb.w	r5, [lr, #8]
            sum0 += cols_8b[2]*ksrc[9];
 8002718:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum0 += cols_8b[3]*ksrc[10];
 800271c:	f99b 800a 	ldrsb.w	r8, [fp, #10]
            sum1 += cols_8b[3]*ksrc[9];
 8002720:	fb17 1109 	smlabb	r1, r7, r9, r1
            sum0 += cols_8b[3]*ksrc[10];
 8002724:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[4]*ksrc[11];
 8002728:	f99b 900b 	ldrsb.w	r9, [fp, #11]
            sum1 += cols_8b[4]*ksrc[10];
 800272c:	fb18 1105 	smlabb	r1, r8, r5, r1
            sum1 += cols_8b[5]*ksrc[11];
 8002730:	f99e a009 	ldrsb.w	sl, [lr, #9]
            sum0 += cols_8b[4]*ksrc[11];
 8002734:	fb15 3309 	smlabb	r3, r5, r9, r3
            sum0 += cols_8b[5]*ksrc[12];
 8002738:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum0 += cols_8b[0]*ksrc[14];
 800273c:	9f01      	ldr	r7, [sp, #4]
            sum1 += cols_8b[5]*ksrc[11];
 800273e:	fb19 110a 	smlabb	r1, r9, sl, r1
            sum1 += cols_8b[6]*ksrc[12];
 8002742:	f99e 000a 	ldrsb.w	r0, [lr, #10]
            sum0 += cols_8b[5]*ksrc[12];
 8002746:	fb1a 3305 	smlabb	r3, sl, r5, r3
            sum0 += cols_8b[6]*ksrc[13];
 800274a:	f99b a00d 	ldrsb.w	sl, [fp, #13]
            sum0 += cols_8b[0]*ksrc[14];
 800274e:	f997 600c 	ldrsb.w	r6, [r7, #12]
            sum1 += cols_8b[6]*ksrc[12];
 8002752:	fb15 1100 	smlabb	r1, r5, r0, r1
            sum0 += cols_8b[6]*ksrc[13];
 8002756:	fb10 330a 	smlabb	r3, r0, sl, r3
            sum1 += cols_8b[7]*ksrc[13];
 800275a:	f99e 500b 	ldrsb.w	r5, [lr, #11]
            sum0 += cols_8b[0]*ksrc[14];
 800275e:	f99b 000e 	ldrsb.w	r0, [fp, #14]
            sum1 += cols_8b[1]*ksrc[14];
 8002762:	f997 800d 	ldrsb.w	r8, [r7, #13]
            sum1 += cols_8b[7]*ksrc[13];
 8002766:	fb1a 1105 	smlabb	r1, sl, r5, r1
            sum0 += cols_8b[0]*ksrc[14];
 800276a:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum0 += cols_8b[1]*ksrc[15];
 800276e:	f99b 600f 	ldrsb.w	r6, [fp, #15]
            sum1 += cols_8b[2]*ksrc[15];
 8002772:	f997 900e 	ldrsb.w	r9, [r7, #14]
            sum1 += cols_8b[1]*ksrc[14];
 8002776:	fb10 1108 	smlabb	r1, r0, r8, r1
            sum0 += cols_8b[1]*ksrc[15];
 800277a:	fb18 3306 	smlabb	r3, r8, r6, r3
            sum0 += cols_8b[2]*ksrc[16];
 800277e:	f99b 8010 	ldrsb.w	r8, [fp, #16]
            sum1 += cols_8b[3]*ksrc[16];
 8002782:	f997 a00f 	ldrsb.w	sl, [r7, #15]
            sum1 += cols_8b[2]*ksrc[15];
 8002786:	fb16 1109 	smlabb	r1, r6, r9, r1
            sum0 += cols_8b[2]*ksrc[16];
 800278a:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum0 += cols_8b[3]*ksrc[17];
 800278e:	f99b 9011 	ldrsb.w	r9, [fp, #17]
            sum1 += cols_8b[2]*ksrc[15];
 8002792:	4638      	mov	r0, r7
            sum1 += cols_8b[4]*ksrc[17];
 8002794:	f997 5010 	ldrsb.w	r5, [r7, #16]
            sum1 += cols_8b[3]*ksrc[16];
 8002798:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[4]*ksrc[18];
 800279c:	f99b 8012 	ldrsb.w	r8, [fp, #18]
            sum0 += cols_8b[3]*ksrc[17];
 80027a0:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[6]*ksrc[19];
 80027a4:	f990 6012 	ldrsb.w	r6, [r0, #18]
            sum1 += cols_8b[4]*ksrc[17];
 80027a8:	fb19 1705 	smlabb	r7, r9, r5, r1
            sum1 += cols_8b[5]*ksrc[18];
 80027ac:	f990 9011 	ldrsb.w	r9, [r0, #17]
            sum0 += cols_8b[4]*ksrc[18];
 80027b0:	fb15 3308 	smlabb	r3, r5, r8, r3
            sum0 += cols_8b[5]*ksrc[19];
 80027b4:	f99b 1013 	ldrsb.w	r1, [fp, #19]
            sum1 += cols_8b[5]*ksrc[18];
 80027b8:	fb18 7809 	smlabb	r8, r8, r9, r7
            sum0 += cols_8b[6]*ksrc[20];
 80027bc:	f99b 7014 	ldrsb.w	r7, [fp, #20]
            sum0 += cols_8b[5]*ksrc[19];
 80027c0:	fb19 3501 	smlabb	r5, r9, r1, r3
            sum0 += cols_8b[0]*ksrc[21];
 80027c4:	f994 3012 	ldrsb.w	r3, [r4, #18]
            sum1 += cols_8b[6]*ksrc[19];
 80027c8:	fb11 8106 	smlabb	r1, r1, r6, r8
 80027cc:	3002      	adds	r0, #2
            sum0 += cols_8b[6]*ksrc[20];
 80027ce:	fb16 5507 	smlabb	r5, r6, r7, r5
            sum0 += cols_8b[0]*ksrc[21];
 80027d2:	f99b 6015 	ldrsb.w	r6, [fp, #21]
            sum0 += cols_8b[1]*ksrc[22];
 80027d6:	f99b a016 	ldrsb.w	sl, [fp, #22]
            sum0 += cols_8b[0]*ksrc[21];
 80027da:	fb13 5306 	smlabb	r3, r3, r6, r5
            sum1 += cols_8b[7]*ksrc[20];
 80027de:	f990 5011 	ldrsb.w	r5, [r0, #17]
            sum0 += cols_8b[0]*ksrc[21];
 80027e2:	9603      	str	r6, [sp, #12]
            sum1 += cols_8b[7]*ksrc[20];
 80027e4:	fb17 1505 	smlabb	r5, r7, r5, r1
            sum1 += cols_8b[1]*ksrc[21];
 80027e8:	f994 6013 	ldrsb.w	r6, [r4, #19]
 80027ec:	9001      	str	r0, [sp, #4]
 80027ee:	9803      	ldr	r0, [sp, #12]
            sum0 += cols_8b[1]*ksrc[22];
 80027f0:	fb16 330a 	smlabb	r3, r6, sl, r3
            sum1 += cols_8b[2]*ksrc[22];
 80027f4:	f994 9014 	ldrsb.w	r9, [r4, #20]
            sum0 += cols_8b[2]*ksrc[23];
 80027f8:	f99b 8017 	ldrsb.w	r8, [fp, #23]
            sum1 += cols_8b[1]*ksrc[21];
 80027fc:	fb10 5006 	smlabb	r0, r0, r6, r5
            sum1 += cols_8b[3]*ksrc[23];
 8002800:	f994 7015 	ldrsb.w	r7, [r4, #21]
            sum0 += cols_8b[3]*ksrc[24];
 8002804:	f99b 1018 	ldrsb.w	r1, [fp, #24]
            sum0 += cols_8b[2]*ksrc[23];
 8002808:	fb19 3308 	smlabb	r3, r9, r8, r3
            sum1 += cols_8b[2]*ksrc[22];
 800280c:	fb1a 0009 	smlabb	r0, sl, r9, r0
            sum1 += cols_8b[4]*ksrc[24];
 8002810:	f994 6016 	ldrsb.w	r6, [r4, #22]
            sum0 += cols_8b[3]*ksrc[24];
 8002814:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum0 += cols_8b[4]*ksrc[25];
 8002818:	f99b 5019 	ldrsb.w	r5, [fp, #25]
            sum1 += cols_8b[3]*ksrc[23];
 800281c:	fb18 0007 	smlabb	r0, r8, r7, r0
            sum1 += cols_8b[5]*ksrc[25];
 8002820:	f994 a017 	ldrsb.w	sl, [r4, #23]
            sum0 += cols_8b[5]*ksrc[26];
 8002824:	f99b 901a 	ldrsb.w	r9, [fp, #26]
            sum0 += cols_8b[4]*ksrc[25];
 8002828:	fb16 3305 	smlabb	r3, r6, r5, r3
            sum1 += cols_8b[4]*ksrc[24];
 800282c:	fb11 0006 	smlabb	r0, r1, r6, r0
            sum1 += cols_8b[6]*ksrc[26];
 8002830:	f994 8018 	ldrsb.w	r8, [r4, #24]
            sum0 += cols_8b[6]*ksrc[27];
 8002834:	f99b 701b 	ldrsb.w	r7, [fp, #27]
            sum0 += cols_8b[5]*ksrc[26];
 8002838:	fb1a 3309 	smlabb	r3, sl, r9, r3
            sum1 += cols_8b[5]*ksrc[25];
 800283c:	fb15 050a 	smlabb	r5, r5, sl, r0
            sum0 += cols_8b[0]*ksrc[28];
 8002840:	f99c 1018 	ldrsb.w	r1, [ip, #24]
 8002844:	f99b 601c 	ldrsb.w	r6, [fp, #28]
            sum0 += cols_8b[6]*ksrc[27];
 8002848:	fb18 3307 	smlabb	r3, r8, r7, r3
            sum1 += cols_8b[6]*ksrc[26];
 800284c:	fb19 5508 	smlabb	r5, r9, r8, r5
            sum1 += cols_8b[7]*ksrc[27];
 8002850:	f994 4019 	ldrsb.w	r4, [r4, #25]
            sum0 += cols_8b[1]*ksrc[29];
 8002854:	f99b 001d 	ldrsb.w	r0, [fp, #29]
            sum0 += cols_8b[0]*ksrc[28];
 8002858:	fb11 3306 	smlabb	r3, r1, r6, r3
            sum1 += cols_8b[7]*ksrc[27];
 800285c:	fb17 5404 	smlabb	r4, r7, r4, r5
            sum1 += cols_8b[1]*ksrc[28];
 8002860:	f99c 1019 	ldrsb.w	r1, [ip, #25]
            sum1 += cols_8b[2]*ksrc[29];
 8002864:	f99c 801a 	ldrsb.w	r8, [ip, #26]
            sum0 += cols_8b[2]*ksrc[30];
 8002868:	f99b a01e 	ldrsb.w	sl, [fp, #30]
            sum0 += cols_8b[1]*ksrc[29];
 800286c:	fb11 3300 	smlabb	r3, r1, r0, r3
            sum1 += cols_8b[1]*ksrc[28];
 8002870:	fb16 4401 	smlabb	r4, r6, r1, r4
            sum0 += cols_8b[3]*ksrc[31];
 8002874:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum1 += cols_8b[3]*ksrc[30];
 8002878:	f99c 101b 	ldrsb.w	r1, [ip, #27]
            sum0 += cols_8b[2]*ksrc[30];
 800287c:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum1 += cols_8b[2]*ksrc[29];
 8002880:	fb10 4408 	smlabb	r4, r0, r8, r4
            sum1 += cols_8b[4]*ksrc[31];
 8002884:	f99c 601c 	ldrsb.w	r6, [ip, #28]
            sum0 += cols_8b[4]*ksrc[32];
 8002888:	f99b 0020 	ldrsb.w	r0, [fp, #32]
            sum0 += cols_8b[3]*ksrc[31];
 800288c:	fb11 3305 	smlabb	r3, r1, r5, r3
            sum1 += cols_8b[3]*ksrc[30];
 8002890:	fb1a 4101 	smlabb	r1, sl, r1, r4
            sum0 += cols_8b[5]*ksrc[33];
 8002894:	f99b 8021 	ldrsb.w	r8, [fp, #33]	; 0x21
            sum1 += cols_8b[5]*ksrc[32];
 8002898:	f99c 401d 	ldrsb.w	r4, [ip, #29]
            sum0 += cols_8b[4]*ksrc[32];
 800289c:	fb16 3300 	smlabb	r3, r6, r0, r3
            sum1 += cols_8b[4]*ksrc[31];
 80028a0:	fb15 1106 	smlabb	r1, r5, r6, r1
            sum1 += cols_8b[6]*ksrc[33];
 80028a4:	f99c 501e 	ldrsb.w	r5, [ip, #30]
            sum0 += cols_8b[6]*ksrc[34];
 80028a8:	f99b 6022 	ldrsb.w	r6, [fp, #34]	; 0x22
            sum0 += cols_8b[5]*ksrc[33];
 80028ac:	fb14 3308 	smlabb	r3, r4, r8, r3
            sum1 += cols_8b[5]*ksrc[32];
 80028b0:	fb10 1104 	smlabb	r1, r0, r4, r1
            sum0 += cols_8b[0]*ksrc[35];
 80028b4:	f992 701e 	ldrsb.w	r7, [r2, #30]
 80028b8:	f99b 4023 	ldrsb.w	r4, [fp, #35]	; 0x23
            sum0 += cols_8b[6]*ksrc[34];
 80028bc:	fb15 3306 	smlabb	r3, r5, r6, r3
            sum1 += cols_8b[6]*ksrc[33];
 80028c0:	fb18 1505 	smlabb	r5, r8, r5, r1
            sum1 += cols_8b[7]*ksrc[34];
 80028c4:	f99c 801f 	ldrsb.w	r8, [ip, #31]
            sum1 += cols_8b[1]*ksrc[35];
 80028c8:	f992 901f 	ldrsb.w	r9, [r2, #31]
            sum0 += cols_8b[0]*ksrc[35];
 80028cc:	fb17 3304 	smlabb	r3, r7, r4, r3
            sum0 += cols_8b[1]*ksrc[36];
 80028d0:	f99b 0024 	ldrsb.w	r0, [fp, #36]	; 0x24
            sum1 += cols_8b[7]*ksrc[34];
 80028d4:	fb16 5808 	smlabb	r8, r6, r8, r5
            sum1 += cols_8b[2]*ksrc[36];
 80028d8:	f992 7020 	ldrsb.w	r7, [r2, #32]
            sum0 += cols_8b[2]*ksrc[37];
 80028dc:	f99b 1025 	ldrsb.w	r1, [fp, #37]	; 0x25
            sum1 += cols_8b[1]*ksrc[35];
 80028e0:	fb14 8609 	smlabb	r6, r4, r9, r8
            sum0 += cols_8b[1]*ksrc[36];
 80028e4:	fb19 3300 	smlabb	r3, r9, r0, r3
            sum1 += cols_8b[3]*ksrc[37];
 80028e8:	f992 5021 	ldrsb.w	r5, [r2, #33]	; 0x21
            sum0 += cols_8b[3]*ksrc[38];
 80028ec:	f99b a026 	ldrsb.w	sl, [fp, #38]	; 0x26
            sum1 += cols_8b[2]*ksrc[36];
 80028f0:	fb10 6407 	smlabb	r4, r0, r7, r6
            sum0 += cols_8b[2]*ksrc[37];
 80028f4:	fb17 3301 	smlabb	r3, r7, r1, r3
            sum1 += cols_8b[4]*ksrc[38];
 80028f8:	f992 9022 	ldrsb.w	r9, [r2, #34]	; 0x22
            sum0 += cols_8b[4]*ksrc[39];
 80028fc:	f99b 8027 	ldrsb.w	r8, [fp, #39]	; 0x27
            sum1 += cols_8b[3]*ksrc[37];
 8002900:	fb11 4005 	smlabb	r0, r1, r5, r4
            sum0 += cols_8b[3]*ksrc[38];
 8002904:	fb15 330a 	smlabb	r3, r5, sl, r3
            sum1 += cols_8b[5]*ksrc[39];
 8002908:	f992 7023 	ldrsb.w	r7, [r2, #35]	; 0x23
            sum1 += cols_8b[4]*ksrc[38];
 800290c:	fb1a 0109 	smlabb	r1, sl, r9, r0
            sum0 += cols_8b[5]*ksrc[40];
 8002910:	f99b 6028 	ldrsb.w	r6, [fp, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[39];
 8002914:	fb19 3308 	smlabb	r3, r9, r8, r3
 8002918:	9805      	ldr	r0, [sp, #20]
            sum1 += cols_8b[6]*ksrc[40];
 800291a:	f992 5024 	ldrsb.w	r5, [r2, #36]	; 0x24
            sum1 += cols_8b[5]*ksrc[39];
 800291e:	fb18 1107 	smlabb	r1, r8, r7, r1
 8002922:	4460      	add	r0, ip
            sum0 += cols_8b[6]*ksrc[41];
 8002924:	f99b 4029 	ldrsb.w	r4, [fp, #41]	; 0x29
            sum0 += cols_8b[5]*ksrc[40];
 8002928:	fb17 3306 	smlabb	r3, r7, r6, r3
            sum1 += cols_8b[7]*ksrc[41];
 800292c:	f992 9025 	ldrsb.w	r9, [r2, #37]	; 0x25
            sum0 += cols_8b[0]*ksrc[42];
 8002930:	f990 a024 	ldrsb.w	sl, [r0, #36]	; 0x24
            sum1 += cols_8b[6]*ksrc[40];
 8002934:	fb16 1105 	smlabb	r1, r6, r5, r1
            sum0 += cols_8b[0]*ksrc[42];
 8002938:	f99b 202a 	ldrsb.w	r2, [fp, #42]	; 0x2a
            sum0 += cols_8b[6]*ksrc[41];
 800293c:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum1 += cols_8b[1]*ksrc[42];
 8002940:	f990 8025 	ldrsb.w	r8, [r0, #37]	; 0x25
            sum1 += cols_8b[7]*ksrc[41];
 8002944:	fb14 1109 	smlabb	r1, r4, r9, r1
            sum0 += cols_8b[0]*ksrc[42];
 8002948:	fb1a 3302 	smlabb	r3, sl, r2, r3
            sum0 += cols_8b[1]*ksrc[43];
 800294c:	f99b a02b 	ldrsb.w	sl, [fp, #43]	; 0x2b
            sum1 += cols_8b[2]*ksrc[43];
 8002950:	f990 6026 	ldrsb.w	r6, [r0, #38]	; 0x26
            sum1 += cols_8b[1]*ksrc[42];
 8002954:	fb12 1108 	smlabb	r1, r2, r8, r1
            sum0 += cols_8b[2]*ksrc[44];
 8002958:	f99b 702c 	ldrsb.w	r7, [fp, #44]	; 0x2c
            sum0 += cols_8b[1]*ksrc[43];
 800295c:	fb18 330a 	smlabb	r3, r8, sl, r3
            sum0 = (float) sum0 * *scales;
 8002960:	9c25      	ldr	r4, [sp, #148]	; 0x94
            sum1 += cols_8b[2]*ksrc[43];
 8002962:	fb1a 1106 	smlabb	r1, sl, r6, r1
            sum0 += cols_8b[3]*ksrc[45];
 8002966:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum0 += cols_8b[2]*ksrc[44];
 800296a:	fb16 3307 	smlabb	r3, r6, r7, r3
            sum0 = (float) sum0 * *scales;
 800296e:	edd4 7a00 	vldr	s15, [r4]
 8002972:	f10c 0c02 	add.w	ip, ip, #2
            sum1 += cols_8b[3]*ksrc[44];
 8002976:	f990 4027 	ldrsb.w	r4, [r0, #39]	; 0x27
            sum1 += cols_8b[4]*ksrc[45];
 800297a:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
            sum0 += cols_8b[4]*ksrc[46];
 800297e:	f99b 902e 	ldrsb.w	r9, [fp, #46]	; 0x2e
            sum0 += cols_8b[3]*ksrc[45];
 8002982:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum1 += cols_8b[5]*ksrc[46];
 8002986:	f990 6029 	ldrsb.w	r6, [r0, #41]	; 0x29
            sum1 += cols_8b[3]*ksrc[44];
 800298a:	fb17 1104 	smlabb	r1, r7, r4, r1
            sum0 += cols_8b[5]*ksrc[47];
 800298e:	f99b 802f 	ldrsb.w	r8, [fp, #47]	; 0x2f
            sum0 += cols_8b[4]*ksrc[46];
 8002992:	fb12 3309 	smlabb	r3, r2, r9, r3
            sum1 += cols_8b[6]*ksrc[47];
 8002996:	f990 a02a 	ldrsb.w	sl, [r0, #42]	; 0x2a
            sum1 += cols_8b[4]*ksrc[45];
 800299a:	fb15 1102 	smlabb	r1, r5, r2, r1
            sum0 += cols_8b[6]*ksrc[48];
 800299e:	f99b 4030 	ldrsb.w	r4, [fp, #48]	; 0x30
            sum0 += cols_8b[5]*ksrc[47];
 80029a2:	fb16 3308 	smlabb	r3, r6, r8, r3
            sum1 += cols_8b[5]*ksrc[46];
 80029a6:	fb19 1106 	smlabb	r1, r9, r6, r1
            sum1 += cols_8b[7]*ksrc[48];
 80029aa:	f990 002b 	ldrsb.w	r0, [r0, #43]	; 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 80029ae:	fb1a 3304 	smlabb	r3, sl, r4, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80029b2:	9a02      	ldr	r2, [sp, #8]
            sum1 += cols_8b[6]*ksrc[47];
 80029b4:	fb18 110a 	smlabb	r1, r8, sl, r1
            sum0 += cols_8b[6]*ksrc[48];
 80029b8:	ee07 3a10 	vmov	s14, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80029bc:	9b08      	ldr	r3, [sp, #32]
            sum1 += cols_8b[7]*ksrc[48];
 80029be:	fb14 1100 	smlabb	r1, r4, r0, r1
            sum0 = (float) sum0 * *scales;
 80029c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80029c6:	1ad7      	subs	r7, r2, r3
            sum0 = (float) sum0 * *scales;
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
            sum1 = (float) sum1 * *scales;
 80029cc:	ee07 1a90 	vmov	s15, r1
            sum0 += output_offset;
 80029d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 80029d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            sum0 = (float) sum0 * *scales;
 80029d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80029da:	ee17 3a10 	vmov	r3, s14
            sum0 += output_offset;
 80029de:	440b      	add	r3, r1
            sum0 = MAX(sum0, activation_min);
 80029e0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80029e2:	428b      	cmp	r3, r1
 80029e4:	bfb8      	it	lt
 80029e6:	460b      	movlt	r3, r1
            sum0 = MIN(sum0, activation_max);
 80029e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80029ea:	428b      	cmp	r3, r1
 80029ec:	bfa8      	it	ge
 80029ee:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80029f0:	9907      	ldr	r1, [sp, #28]
 80029f2:	547b      	strb	r3, [r7, r1]
            sum1 = (float) sum1 * *scales;
 80029f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80029f6:	ed93 7a00 	vldr	s14, [r3]
            sum1 += output_offset;
 80029fa:	9927      	ldr	r1, [sp, #156]	; 0x9c
            sum1 = (float) sum1 * *scales;
 80029fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a04:	ee17 3a90 	vmov	r3, s15
            sum1 += output_offset;
 8002a08:	440b      	add	r3, r1
            sum1 = MAX(sum1, activation_min);
 8002a0a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	bfb8      	it	lt
 8002a10:	460b      	movlt	r3, r1
            sum1 = MIN(sum1, activation_max);
 8002a12:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002a14:	428b      	cmp	r3, r1
 8002a16:	bfa8      	it	ge
 8002a18:	460b      	movge	r3, r1
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8002a1a:	7013      	strb	r3, [r2, #0]
 8002a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	9302      	str	r3, [sp, #8]
        for (j = 0; j < output_x / 2; j++) {
 8002a22:	9b06      	ldr	r3, [sp, #24]
 8002a24:	4563      	cmp	r3, ip
 8002a26:	f47f ae17 	bne.w	8002658 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x9c>
 8002a2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002a2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002a2e:	4413      	add	r3, r2
 8002a30:	932a      	str	r3, [sp, #168]	; 0xa8
 8002a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (output_x & 1) {
 8002a34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002a36:	3301      	adds	r3, #1
 8002a38:	930d      	str	r3, [sp, #52]	; 0x34
 8002a3a:	2a00      	cmp	r2, #0
 8002a3c:	f000 816d 	beq.w	8002d1a <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x75e>
            q31_t sum = bias[0] + biasR[0];
 8002a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
            cols_8b += column_x + 6;
 8002a42:	9e10      	ldr	r6, [sp, #64]	; 0x40
            q31_t sum = bias[0] + biasR[0];
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	990e      	ldr	r1, [sp, #56]	; 0x38
            cols_8b += column_x + 6;
 8002a48:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002a4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002a4c:	1990      	adds	r0, r2, r6
            q31_t sum = bias[0] + biasR[0];
 8002a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a50:	4421      	add	r1, r4
            sum += cols_8b[0]*ksrc[0];
 8002a52:	f99b 5000 	ldrsb.w	r5, [fp]
            q31_t sum = bias[0] + biasR[0];
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	910e      	str	r1, [sp, #56]	; 0x38
            sum += cols_8b[0]*ksrc[0];
 8002a5a:	992a      	ldr	r1, [sp, #168]	; 0xa8
            q31_t sum = bias[0] + biasR[0];
 8002a5c:	4413      	add	r3, r2
            sum += cols_8b[1]*ksrc[1];
 8002a5e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[0]*ksrc[0];
 8002a60:	f991 4000 	ldrsb.w	r4, [r1]
            sum += cols_8b[2]*ksrc[9];
            sum += cols_8b[3]*ksrc[10];
            sum += cols_8b[4]*ksrc[11];
            sum += cols_8b[5]*ksrc[12];
            sum += cols_8b[6]*ksrc[13];
            cols_8b += column_x + 6;
 8002a64:	1981      	adds	r1, r0, r6
            sum += cols_8b[1]*ksrc[1];
 8002a66:	f992 2001 	ldrsb.w	r2, [r2, #1]
            sum += cols_8b[0]*ksrc[0];
 8002a6a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[1];
 8002a6e:	f99b 5001 	ldrsb.w	r5, [fp, #1]
            sum += cols_8b[2]*ksrc[2];
 8002a72:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[1]*ksrc[1];
 8002a74:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[2];
 8002a78:	f99b 5002 	ldrsb.w	r5, [fp, #2]
 8002a7c:	f994 4002 	ldrsb.w	r4, [r4, #2]
            sum += cols_8b[3]*ksrc[3];
 8002a80:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[2]*ksrc[2];
 8002a82:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[3];
 8002a86:	f99b 5003 	ldrsb.w	r5, [fp, #3]
 8002a8a:	f992 2003 	ldrsb.w	r2, [r2, #3]
            sum += cols_8b[4]*ksrc[4];
 8002a8e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[3];
 8002a90:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[4];
 8002a94:	f99b 5004 	ldrsb.w	r5, [fp, #4]
 8002a98:	f994 4004 	ldrsb.w	r4, [r4, #4]
            sum += cols_8b[5]*ksrc[5];
 8002a9c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[4]*ksrc[4];
 8002a9e:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[5];
 8002aa2:	f99b 5005 	ldrsb.w	r5, [fp, #5]
 8002aa6:	f992 2005 	ldrsb.w	r2, [r2, #5]
            sum += cols_8b[6]*ksrc[6];
 8002aaa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
            sum += cols_8b[5]*ksrc[5];
 8002aac:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8002ab0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[6];
 8002ab2:	f994 4006 	ldrsb.w	r4, [r4, #6]
            sum += cols_8b[0]*ksrc[7];
 8002ab6:	4617      	mov	r7, r2
            sum += cols_8b[6]*ksrc[6];
 8002ab8:	f99b 5006 	ldrsb.w	r5, [fp, #6]
            sum += cols_8b[0]*ksrc[7];
 8002abc:	57ba      	ldrsb	r2, [r7, r6]
            sum += cols_8b[6]*ksrc[6];
 8002abe:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[0]*ksrc[7];
 8002ac2:	f99b 5007 	ldrsb.w	r5, [fp, #7]
            sum += cols_8b[1]*ksrc[8];
 8002ac6:	f990 4001 	ldrsb.w	r4, [r0, #1]
            sum += cols_8b[0]*ksrc[7];
 8002aca:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[1]*ksrc[8];
 8002ace:	f99b 5008 	ldrsb.w	r5, [fp, #8]
            sum += cols_8b[2]*ksrc[9];
 8002ad2:	f990 2002 	ldrsb.w	r2, [r0, #2]
            sum += cols_8b[1]*ksrc[8];
 8002ad6:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[2]*ksrc[9];
 8002ada:	f99b 5009 	ldrsb.w	r5, [fp, #9]
            sum += cols_8b[3]*ksrc[10];
 8002ade:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum += cols_8b[2]*ksrc[9];
 8002ae2:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[3]*ksrc[10];
 8002ae6:	f99b 500a 	ldrsb.w	r5, [fp, #10]
            sum += cols_8b[4]*ksrc[11];
 8002aea:	f990 2004 	ldrsb.w	r2, [r0, #4]
            sum += cols_8b[3]*ksrc[10];
 8002aee:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[4]*ksrc[11];
 8002af2:	f99b 500b 	ldrsb.w	r5, [fp, #11]
            sum += cols_8b[5]*ksrc[12];
 8002af6:	f990 4005 	ldrsb.w	r4, [r0, #5]
            sum += cols_8b[4]*ksrc[11];
 8002afa:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[5]*ksrc[12];
 8002afe:	f99b 500c 	ldrsb.w	r5, [fp, #12]
            sum += cols_8b[6]*ksrc[13];
 8002b02:	f990 2006 	ldrsb.w	r2, [r0, #6]
            sum += cols_8b[5]*ksrc[12];
 8002b06:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[6]*ksrc[13];
 8002b0a:	f99b 500d 	ldrsb.w	r5, [fp, #13]
            sum += cols_8b[0]*ksrc[14];
 8002b0e:	463c      	mov	r4, r7
 8002b10:	4637      	mov	r7, r6
            sum += cols_8b[6]*ksrc[13];
 8002b12:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[0]*ksrc[14];
 8002b16:	f99b 500e 	ldrsb.w	r5, [fp, #14]
 8002b1a:	f914 4016 	ldrsb.w	r4, [r4, r6, lsl #1]
            sum += cols_8b[1]*ksrc[15];
 8002b1e:	f991 2001 	ldrsb.w	r2, [r1, #1]
            sum += cols_8b[0]*ksrc[14];
 8002b22:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[1]*ksrc[15];
 8002b26:	f99b 500f 	ldrsb.w	r5, [fp, #15]
            sum += cols_8b[2]*ksrc[16];
 8002b2a:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[15];
 8002b2e:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[2]*ksrc[16];
 8002b32:	f99b 5010 	ldrsb.w	r5, [fp, #16]
            sum += cols_8b[3]*ksrc[17];
 8002b36:	f991 2003 	ldrsb.w	r2, [r1, #3]
            sum += cols_8b[2]*ksrc[16];
 8002b3a:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[17];
 8002b3e:	f99b 5011 	ldrsb.w	r5, [fp, #17]
            sum += cols_8b[4]*ksrc[18];
 8002b42:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum = MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2;
 8002b46:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
            sum += cols_8b[3]*ksrc[17];
 8002b48:	fb12 3305 	smlabb	r3, r2, r5, r3
            sum += cols_8b[4]*ksrc[18];
 8002b4c:	f99b 5012 	ldrsb.w	r5, [fp, #18]
            sum += cols_8b[5]*ksrc[19];
 8002b50:	f991 2005 	ldrsb.w	r2, [r1, #5]
        cols_8b_iterptr += 3 * 2;
 8002b54:	3607      	adds	r6, #7
            sum += cols_8b[4]*ksrc[18];
 8002b56:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[19];
 8002b5a:	f99b 5013 	ldrsb.w	r5, [fp, #19]
            sum += cols_8b[6]*ksrc[20];
 8002b5e:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[19];
 8002b62:	fb12 3305 	smlabb	r3, r2, r5, r3
        cols_8b_iterptr += 3 * 2;
 8002b66:	962a      	str	r6, [sp, #168]	; 0xa8
            sum += cols_8b[6]*ksrc[20];
 8002b68:	f99b 6014 	ldrsb.w	r6, [fp, #20]
            cols_8b += column_x + 6;
 8002b6c:	19ca      	adds	r2, r1, r7
            sum += cols_8b[0]*ksrc[21];
 8002b6e:	f910 0017 	ldrsb.w	r0, [r0, r7, lsl #1]
            sum += cols_8b[6]*ksrc[20];
 8002b72:	fb14 3506 	smlabb	r5, r4, r6, r3
            sum += cols_8b[0]*ksrc[21];
 8002b76:	f99b 3015 	ldrsb.w	r3, [fp, #21]
            sum += cols_8b[1]*ksrc[22];
 8002b7a:	f992 7001 	ldrsb.w	r7, [r2, #1]
            sum += cols_8b[0]*ksrc[21];
 8002b7e:	fb10 5503 	smlabb	r5, r0, r3, r5
            sum += cols_8b[1]*ksrc[22];
 8002b82:	f99b 3016 	ldrsb.w	r3, [fp, #22]
            sum += cols_8b[2]*ksrc[23];
 8002b86:	f992 4002 	ldrsb.w	r4, [r2, #2]
            sum += cols_8b[1]*ksrc[22];
 8002b8a:	fb17 5503 	smlabb	r5, r7, r3, r5
            sum += cols_8b[2]*ksrc[23];
 8002b8e:	f99b 0017 	ldrsb.w	r0, [fp, #23]
            sum += cols_8b[3]*ksrc[24];
 8002b92:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[2]*ksrc[23];
 8002b96:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[3]*ksrc[24];
 8002b9a:	f99b 0018 	ldrsb.w	r0, [fp, #24]
            sum += cols_8b[4]*ksrc[25];
 8002b9e:	f992 4004 	ldrsb.w	r4, [r2, #4]
            sum += cols_8b[3]*ksrc[24];
 8002ba2:	fb13 5500 	smlabb	r5, r3, r0, r5
            sum += cols_8b[4]*ksrc[25];
 8002ba6:	f99b 0019 	ldrsb.w	r0, [fp, #25]
            sum += cols_8b[5]*ksrc[26];
 8002baa:	f992 3005 	ldrsb.w	r3, [r2, #5]
            sum += cols_8b[4]*ksrc[25];
 8002bae:	fb14 5500 	smlabb	r5, r4, r0, r5
            sum += cols_8b[5]*ksrc[26];
 8002bb2:	f99b 401a 	ldrsb.w	r4, [fp, #26]
            sum += cols_8b[0]*ksrc[28];
 8002bb6:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[6]*ksrc[27];
 8002bb8:	f992 0006 	ldrsb.w	r0, [r2, #6]
            sum += cols_8b[5]*ksrc[26];
 8002bbc:	fb13 5404 	smlabb	r4, r3, r4, r5
            sum += cols_8b[6]*ksrc[27];
 8002bc0:	f99b 301b 	ldrsb.w	r3, [fp, #27]
            sum += cols_8b[0]*ksrc[28];
 8002bc4:	f911 5017 	ldrsb.w	r5, [r1, r7, lsl #1]
            cols_8b += column_x + 6;
 8002bc8:	19d1      	adds	r1, r2, r7
            sum += cols_8b[6]*ksrc[27];
 8002bca:	fb10 4303 	smlabb	r3, r0, r3, r4
            sum += cols_8b[0]*ksrc[28];
 8002bce:	f99b 401c 	ldrsb.w	r4, [fp, #28]
            sum += cols_8b[1]*ksrc[29];
 8002bd2:	f991 0001 	ldrsb.w	r0, [r1, #1]
            sum += cols_8b[0]*ksrc[28];
 8002bd6:	fb15 3304 	smlabb	r3, r5, r4, r3
            sum += cols_8b[1]*ksrc[29];
 8002bda:	f99b 501d 	ldrsb.w	r5, [fp, #29]
            sum += cols_8b[2]*ksrc[30];
 8002bde:	f991 4002 	ldrsb.w	r4, [r1, #2]
            sum += cols_8b[1]*ksrc[29];
 8002be2:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[2]*ksrc[30];
 8002be6:	f99b 501e 	ldrsb.w	r5, [fp, #30]
            sum += cols_8b[3]*ksrc[31];
 8002bea:	f991 0003 	ldrsb.w	r0, [r1, #3]
            sum += cols_8b[2]*ksrc[30];
 8002bee:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[3]*ksrc[31];
 8002bf2:	f99b 501f 	ldrsb.w	r5, [fp, #31]
            sum += cols_8b[4]*ksrc[32];
 8002bf6:	f991 4004 	ldrsb.w	r4, [r1, #4]
            sum += cols_8b[3]*ksrc[31];
 8002bfa:	fb10 3305 	smlabb	r3, r0, r5, r3
            sum += cols_8b[4]*ksrc[32];
 8002bfe:	f99b 5020 	ldrsb.w	r5, [fp, #32]
            sum += cols_8b[5]*ksrc[33];
 8002c02:	f991 0005 	ldrsb.w	r0, [r1, #5]
            sum += cols_8b[4]*ksrc[32];
 8002c06:	fb14 3305 	smlabb	r3, r4, r5, r3
            sum += cols_8b[5]*ksrc[33];
 8002c0a:	f99b 6021 	ldrsb.w	r6, [fp, #33]	; 0x21
            sum += cols_8b[6]*ksrc[34];
 8002c0e:	f991 4006 	ldrsb.w	r4, [r1, #6]
            sum += cols_8b[5]*ksrc[33];
 8002c12:	fb10 3006 	smlabb	r0, r0, r6, r3
            sum += cols_8b[6]*ksrc[34];
 8002c16:	f99b 5022 	ldrsb.w	r5, [fp, #34]	; 0x22
            cols_8b += column_x + 6;
 8002c1a:	19cb      	adds	r3, r1, r7
            sum += cols_8b[0]*ksrc[35];
 8002c1c:	f912 2017 	ldrsb.w	r2, [r2, r7, lsl #1]
            sum += cols_8b[6]*ksrc[34];
 8002c20:	fb14 0605 	smlabb	r6, r4, r5, r0
            sum += cols_8b[0]*ksrc[35];
 8002c24:	f99b 0023 	ldrsb.w	r0, [fp, #35]	; 0x23
            sum += cols_8b[1]*ksrc[36];
 8002c28:	f993 7001 	ldrsb.w	r7, [r3, #1]
            sum += cols_8b[0]*ksrc[35];
 8002c2c:	fb12 6600 	smlabb	r6, r2, r0, r6
            sum += cols_8b[1]*ksrc[36];
 8002c30:	f99b 4024 	ldrsb.w	r4, [fp, #36]	; 0x24
            sum += cols_8b[2]*ksrc[37];
 8002c34:	f993 0002 	ldrsb.w	r0, [r3, #2]
            sum += cols_8b[1]*ksrc[36];
 8002c38:	fb17 6604 	smlabb	r6, r7, r4, r6
            sum += cols_8b[2]*ksrc[37];
 8002c3c:	f99b 2025 	ldrsb.w	r2, [fp, #37]	; 0x25
            sum += cols_8b[3]*ksrc[38];
 8002c40:	f993 4003 	ldrsb.w	r4, [r3, #3]
            sum += cols_8b[2]*ksrc[37];
 8002c44:	fb10 6602 	smlabb	r6, r0, r2, r6
            sum += cols_8b[3]*ksrc[38];
 8002c48:	f99b 2026 	ldrsb.w	r2, [fp, #38]	; 0x26
            sum += cols_8b[4]*ksrc[39];
 8002c4c:	f993 0004 	ldrsb.w	r0, [r3, #4]
            sum += cols_8b[3]*ksrc[38];
 8002c50:	fb14 6602 	smlabb	r6, r4, r2, r6
            sum += cols_8b[4]*ksrc[39];
 8002c54:	f99b 4027 	ldrsb.w	r4, [fp, #39]	; 0x27
            sum += cols_8b[5]*ksrc[40];
 8002c58:	f993 5005 	ldrsb.w	r5, [r3, #5]
            sum += cols_8b[4]*ksrc[39];
 8002c5c:	fb10 6404 	smlabb	r4, r0, r4, r6
            sum += cols_8b[5]*ksrc[40];
 8002c60:	f99b 0028 	ldrsb.w	r0, [fp, #40]	; 0x28
            cols_8b += column_x + 6;
 8002c64:	9f10      	ldr	r7, [sp, #64]	; 0x40
            sum += cols_8b[5]*ksrc[40];
 8002c66:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum += cols_8b[6]*ksrc[41];
 8002c6a:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8002c6e:	f99b 5029 	ldrsb.w	r5, [fp, #41]	; 0x29
            cols_8b += column_x + 6;
 8002c72:	443b      	add	r3, r7
            sum += cols_8b[0]*ksrc[42];
 8002c74:	f911 4017 	ldrsb.w	r4, [r1, r7, lsl #1]
            sum += cols_8b[6]*ksrc[41];
 8002c78:	fb12 0205 	smlabb	r2, r2, r5, r0
            sum += cols_8b[0]*ksrc[42];
 8002c7c:	f99b 502a 	ldrsb.w	r5, [fp, #42]	; 0x2a
            sum += cols_8b[1]*ksrc[43];
 8002c80:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum += cols_8b[0]*ksrc[42];
 8002c84:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[1]*ksrc[43];
 8002c88:	f99b 502b 	ldrsb.w	r5, [fp, #43]	; 0x2b
            sum += cols_8b[2]*ksrc[44];
 8002c8c:	f993 4002 	ldrsb.w	r4, [r3, #2]
            sum += cols_8b[1]*ksrc[43];
 8002c90:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[2]*ksrc[44];
 8002c94:	f99b 502c 	ldrsb.w	r5, [fp, #44]	; 0x2c
            sum += cols_8b[3]*ksrc[45];
 8002c98:	f993 0003 	ldrsb.w	r0, [r3, #3]
            sum += cols_8b[2]*ksrc[44];
 8002c9c:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[3]*ksrc[45];
 8002ca0:	f99b 502d 	ldrsb.w	r5, [fp, #45]	; 0x2d
            sum += cols_8b[4]*ksrc[46];
 8002ca4:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum += cols_8b[3]*ksrc[45];
 8002ca8:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[4]*ksrc[46];
 8002cac:	f99b 502e 	ldrsb.w	r5, [fp, #46]	; 0x2e
            sum += cols_8b[5]*ksrc[47];
 8002cb0:	f993 0005 	ldrsb.w	r0, [r3, #5]
            sum += cols_8b[4]*ksrc[46];
 8002cb4:	fb14 2205 	smlabb	r2, r4, r5, r2
            sum += cols_8b[5]*ksrc[47];
 8002cb8:	f99b 502f 	ldrsb.w	r5, [fp, #47]	; 0x2f
            sum += cols_8b[6]*ksrc[48];
 8002cbc:	f993 3006 	ldrsb.w	r3, [r3, #6]
            sum += cols_8b[5]*ksrc[47];
 8002cc0:	fb10 2205 	smlabb	r2, r0, r5, r2
            sum += cols_8b[6]*ksrc[48];
 8002cc4:	f99b 5030 	ldrsb.w	r5, [fp, #48]	; 0x30
            sum = (float) sum * *scales;
 8002cc8:	9825      	ldr	r0, [sp, #148]	; 0x94
            sum += cols_8b[6]*ksrc[48];
 8002cca:	fb13 2205 	smlabb	r2, r3, r5, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8002cce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
            sum = (float) sum * *scales;
 8002cd0:	ed90 7a00 	vldr	s14, [r0]
 8002cd4:	ee07 2a90 	vmov	s15, r2
            sum += output_offset;
 8002cd8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8002cda:	992c      	ldr	r1, [sp, #176]	; 0xb0
            sum = (float) sum * *scales;
 8002cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce0:	9f15      	ldr	r7, [sp, #84]	; 0x54
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8002ce2:	1a71      	subs	r1, r6, r1
 8002ce4:	443e      	add	r6, r7
            sum = (float) sum * *scales;
 8002ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cea:	960f      	str	r6, [sp, #60]	; 0x3c
 8002cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf0:	ee17 3a90 	vmov	r3, s15
            sum += output_offset;
 8002cf4:	4413      	add	r3, r2
            sum = MAX(sum, activation_min);
 8002cf6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bfb8      	it	lt
 8002cfc:	4613      	movlt	r3, r2
            sum = MIN(sum, activation_max);
 8002cfe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bfa8      	it	ge
 8002d04:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8002d06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002d08:	548b      	strb	r3, [r1, r2]
    for (i = 0; i < output_y; i++) {
 8002d0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	f47f ac85 	bne.w	800261e <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
    }
}
 8002d14:	b01b      	add	sp, #108	; 0x6c
 8002d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b_iterptr += 3 * 2;
 8002d1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002d1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002d1e:	3306      	adds	r3, #6
 8002d20:	932a      	str	r3, [sp, #168]	; 0xa8
 8002d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d24:	4413      	add	r3, r2
 8002d26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d2c:	4413      	add	r3, r2
    for (i = 0; i < output_y; i++) {
 8002d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d30:	930e      	str	r3, [sp, #56]	; 0x38
 8002d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d34:	4293      	cmp	r3, r2
 8002d36:	f47f ac72 	bne.w	800261e <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x62>
}
 8002d3a:	b01b      	add	sp, #108	; 0x6c
 8002d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d40 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>:
{
 8002d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d44:	b093      	sub	sp, #76	; 0x4c
 8002d46:	461c      	mov	r4, r3
    for(i = 0; i < input_x + 6; i++){
 8002d48:	f101 0e05 	add.w	lr, r1, #5
{
 8002d4c:	4615      	mov	r5, r2
 8002d4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d50:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8002d54:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8002d58:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002d5c:	1cd8      	adds	r0, r3, #3
 8002d5e:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    for(i = 0; i < input_x + 6; i++){
 8002d62:	2100      	movs	r1, #0
{
 8002d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d66:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8002d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8002d6c:	f99d 30a4 	ldrsb.w	r3, [sp, #164]	; 0xa4
    for(i = 0; i < input_x + 6; i++){
 8002d70:	3101      	adds	r1, #1
 8002d72:	4602      	mov	r2, r0
        *cols_8b++ = PAD8;
 8002d74:	f800 3c03 	strb.w	r3, [r0, #-3]
 8002d78:	3003      	adds	r0, #3
    for(i = 0; i < input_x + 6; i++){
 8002d7a:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8002d7c:	f800 3c05 	strb.w	r3, [r0, #-5]
        *cols_8b++ = PAD8;
 8002d80:	f800 3c04 	strb.w	r3, [r0, #-4]
    for(i = 0; i < input_x + 6; i++){
 8002d84:	4571      	cmp	r1, lr
 8002d86:	ddf3      	ble.n	8002d70 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x30>
    for(i = 0; i < input_y; i++){
 8002d88:	b1cd      	cbz	r5, 8002dbe <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x7e>
 8002d8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	2600      	movs	r6, #0
 8002d90:	1d8f      	adds	r7, r1, #6
 8002d92:	19d1      	adds	r1, r2, r7
 8002d94:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 8002d96:	7003      	strb	r3, [r0, #0]
        *cols_8b++ = PAD8;//left
 8002d98:	7043      	strb	r3, [r0, #1]
    for(i = 0; i < input_y; i++){
 8002d9a:	fa1f fc86 	uxth.w	ip, r6
        *cols_8b++ = PAD8;//left
 8002d9e:	7083      	strb	r3, [r0, #2]
        *cols_8b++ = PAD8;//right
 8002da0:	f801 3c03 	strb.w	r3, [r1, #-3]
 8002da4:	4438      	add	r0, r7
    for(i = 0; i < input_y; i++){
 8002da6:	4565      	cmp	r5, ip
        *cols_8b++ = PAD8;//right
 8002da8:	f801 3c02 	strb.w	r3, [r1, #-2]
        *cols_8b++ = PAD8;//right
 8002dac:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002db0:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 8002db2:	d8ef      	bhi.n	8002d94 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x54>
 8002db4:	1e69      	subs	r1, r5, #1
 8002db6:	b289      	uxth	r1, r1
 8002db8:	fb01 7707 	mla	r7, r1, r7, r7
 8002dbc:	443a      	add	r2, r7
 8002dbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002dc0:	1e88      	subs	r0, r1, #2
 8002dc2:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8002dc6:	4288      	cmp	r0, r1
 8002dc8:	f200 8092 	bhi.w	8002ef0 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b0>
 8002dcc:	2000      	movs	r0, #0
 8002dce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	f363 0007 	bfi	r0, r3, #0, #8
 8002dd6:	f101 0c06 	add.w	ip, r1, #6
 8002dda:	4611      	mov	r1, r2
 8002ddc:	f363 200f 	bfi	r0, r3, #8, #8
 8002de0:	ea4f 079c 	mov.w	r7, ip, lsr #2
 8002de4:	f363 4017 	bfi	r0, r3, #16, #8
 8002de8:	f363 601f 	bfi	r0, r3, #24, #8
 8002dec:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;
 8002dee:	6008      	str	r0, [r1, #0]
 8002df0:	6048      	str	r0, [r1, #4]
 8002df2:	310c      	adds	r1, #12
 8002df4:	42b7      	cmp	r7, r6
 8002df6:	f841 0c04 	str.w	r0, [r1, #-4]
 8002dfa:	d8f7      	bhi.n	8002dec <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xac>
 8002dfc:	f02c 0003 	bic.w	r0, ip, #3
 8002e00:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8002e04:	4560      	cmp	r0, ip
 8002e06:	b287      	uxth	r7, r0
 8002e08:	eb02 0106 	add.w	r1, r2, r6
 8002e0c:	d010      	beq.n	8002e30 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
    for(i = 0; i < input_x + 6; i++){
 8002e0e:	1c78      	adds	r0, r7, #1
        *cols_8b++ = PAD8;
 8002e10:	5593      	strb	r3, [r2, r6]
        *cols_8b++ = PAD8;
 8002e12:	704b      	strb	r3, [r1, #1]
    for(i = 0; i < input_x + 6; i++){
 8002e14:	b282      	uxth	r2, r0
        *cols_8b++ = PAD8;
 8002e16:	708b      	strb	r3, [r1, #2]
    for(i = 0; i < input_x + 6; i++){
 8002e18:	4572      	cmp	r2, lr
 8002e1a:	dc09      	bgt.n	8002e30 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
 8002e1c:	1cba      	adds	r2, r7, #2
        *cols_8b++ = PAD8;
 8002e1e:	70cb      	strb	r3, [r1, #3]
        *cols_8b++ = PAD8;
 8002e20:	710b      	strb	r3, [r1, #4]
    for(i = 0; i < input_x + 6; i++){
 8002e22:	b292      	uxth	r2, r2
        *cols_8b++ = PAD8;
 8002e24:	714b      	strb	r3, [r1, #5]
    for(i = 0; i < input_x + 6; i++){
 8002e26:	4596      	cmp	lr, r2
 8002e28:	db02      	blt.n	8002e30 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>
        *cols_8b++ = PAD8;
 8002e2a:	718b      	strb	r3, [r1, #6]
        *cols_8b++ = PAD8;
 8002e2c:	71cb      	strb	r3, [r1, #7]
        *cols_8b++ = PAD8;
 8002e2e:	720b      	strb	r3, [r1, #8]
    for (c = 0; c < input_ch; c++){
 8002e30:	2c00      	cmp	r4, #0
 8002e32:	d059      	beq.n	8002ee8 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
 8002e34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e36:	1e63      	subs	r3, r4, #1
 8002e38:	1e56      	subs	r6, r2, #1
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8002e3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2b6      	uxth	r6, r6
 8002e42:	3214      	adds	r2, #20
 8002e44:	3301      	adds	r3, #1
 8002e46:	1c77      	adds	r7, r6, #1
 8002e48:	9211      	str	r2, [sp, #68]	; 0x44
 8002e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e4c:	3607      	adds	r6, #7
 8002e4e:	fb07 f804 	mul.w	r8, r7, r4
 8002e52:	18d3      	adds	r3, r2, r3
 8002e54:	960d      	str	r6, [sp, #52]	; 0x34
 8002e56:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < input_y; i++){
 8002e58:	b1f5      	cbz	r5, 8002e98 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 8002e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e5c:	b1e3      	cbz	r3, 8002e98 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x158>
 8002e5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e60:	f04f 0e00 	mov.w	lr, #0
 8002e64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002e66:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8002e6a:	eb03 0c02 	add.w	ip, r3, r2
 8002e6e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002e70:	eb07 000c 	add.w	r0, r7, ip
 8002e74:	4662      	mov	r2, ip
 8002e76:	464b      	mov	r3, r9
                *cols_8b++ = *src;// + input_offset;
 8002e78:	f993 1000 	ldrsb.w	r1, [r3]
                src += input_ch;
 8002e7c:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8002e7e:	f802 1f01 	strb.w	r1, [r2, #1]!
            for(j = 0; j < input_x; j++){
 8002e82:	4282      	cmp	r2, r0
 8002e84:	d1f8      	bne.n	8002e78 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x138>
 8002e86:	f10e 0e01 	add.w	lr, lr, #1
 8002e8a:	44c1      	add	r9, r8
 8002e8c:	44b4      	add	ip, r6
        for(i = 0; i < input_y; i++){
 8002e8e:	fa1f f38e 	uxth.w	r3, lr
 8002e92:	429d      	cmp	r5, r3
 8002e94:	d8ec      	bhi.n	8002e70 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x130>
 8002e96:	960d      	str	r6, [sp, #52]	; 0x34
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8002e98:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8002e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e9c:	9604      	str	r6, [sp, #16]
 8002e9e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8002ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ea2:	9603      	str	r6, [sp, #12]
 8002ea4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8002ea6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8002ea8:	9601      	str	r6, [sp, #4]
 8002eaa:	f106 0904 	add.w	r9, r6, #4
 8002eae:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8002eb0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8002eb2:	9302      	str	r3, [sp, #8]
        input++;
 8002eb4:	3301      	adds	r3, #1
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8002eb6:	9600      	str	r6, [sp, #0]
        ksrc += 49;
 8002eb8:	3631      	adds	r6, #49	; 0x31
        input++;
 8002eba:	930b      	str	r3, [sp, #44]	; 0x2c
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8002ebc:	465b      	mov	r3, fp
 8002ebe:	9207      	str	r2, [sp, #28]
 8002ec0:	4652      	mov	r2, sl
 8002ec2:	9106      	str	r1, [sp, #24]
 8002ec4:	f10b 0b04 	add.w	fp, fp, #4
 8002ec8:	9005      	str	r0, [sp, #20]
 8002eca:	f10a 0a04 	add.w	sl, sl, #4
 8002ece:	9408      	str	r4, [sp, #32]
 8002ed0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002ed2:	9810      	ldr	r0, [sp, #64]	; 0x40
        ksrc += 49;
 8002ed4:	961c      	str	r6, [sp, #112]	; 0x70
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8002ed6:	f7ff fb71 	bl	80025bc <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>
    for (c = 0; c < input_ch; c++){
 8002eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d002      	beq.n	8002ee8 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1a8>
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8002ee2:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8002ee6:	e7b7      	b.n	8002e58 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x118>
}
 8002ee8:	2000      	movs	r0, #0
 8002eea:	b013      	add	sp, #76	; 0x4c
 8002eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef0:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 8002ef6:	f802 3c03 	strb.w	r3, [r2, #-3]
        *cols_8b++ = PAD8;
 8002efa:	f802 3c02 	strb.w	r3, [r2, #-2]
 8002efe:	3203      	adds	r2, #3
    for(i = 0; i < input_x + 6; i++){
 8002f00:	b289      	uxth	r1, r1
        *cols_8b++ = PAD8;
 8002f02:	f802 3c04 	strb.w	r3, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 8002f06:	4571      	cmp	r1, lr
 8002f08:	ddf4      	ble.n	8002ef4 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1b4>
 8002f0a:	e791      	b.n	8002e30 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf0>

08002f0c <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
    return &buffer0[8000];
}
 8002f0c:	4800      	ldr	r0, [pc, #0]	; (8002f10 <getInput+0x4>)
 8002f0e:	4770      	bx	lr
 8002f10:	200033dc 	.word	0x200033dc

08002f14 <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 8002f14:	4800      	ldr	r0, [pc, #0]	; (8002f18 <getOutput+0x4>)
 8002f16:	4770      	bx	lr
 8002f18:	200014e0 	.word	0x200014e0

08002f1c <invoke_inf>:
for(int i = 0; i < 10; i++) v5_bias[i] -= (int32_t)(fptr[i] * blr * v5_bias_QAS[i]);
/* layer 24:GROUP_CONV */
const float v5_weight_QAS[10] = {1041585.94,1077256.6,1047029.44,1069220.4,1060796.9,1091398.6,1042545.4,1041784.6,1129145.0,1121113.8,};
group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace((float*)&buffer0[0],1,1,64,weight_fp10,NULL,v5_weight,1,1,640,-FLT_MAX,FLT_MAX,(float*)sbuf,1,64, v5_weight_QAS, lr);
}
void invoke_inf(){
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

kbuf[287] = 0;
 8002f20:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8003208 <invoke_inf+0x2ec>
void invoke_inf(){
 8002f24:	b08f      	sub	sp, #60	; 0x3c
kbuf[286] = 0;
kbuf[0] = 0;
int tes = kbuf[0];
int tes1 = kbuf[287];
/* layer 0:CONV_2D */
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f26:	2400      	movs	r4, #0
 8002f28:	2619      	movs	r6, #25
 8002f2a:	f508 59fa 	add.w	r9, r8, #8000	; 0x1f40
kbuf[0] = 0;
 8002f2e:	f246 0c6a 	movw	ip, #24682	; 0x606a
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f32:	940d      	str	r4, [sp, #52]	; 0x34
 8002f34:	2705      	movs	r7, #5
 8002f36:	9404      	str	r4, [sp, #16]
 8002f38:	f509 547a 	add.w	r4, r9, #16000	; 0x3e80
 8002f3c:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
 8002f40:	f06f 0b7f 	mvn.w	fp, #127	; 0x7f
 8002f44:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f46:	2440      	movs	r4, #64	; 0x40
kbuf[0] = 0;
 8002f48:	eb08 000c 	add.w	r0, r8, ip
kbuf[287] = 0;
 8002f4c:	2500      	movs	r5, #0
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f4e:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8002f52:	4aa8      	ldr	r2, [pc, #672]	; (80031f4 <invoke_inf+0x2d8>)
 8002f54:	49a8      	ldr	r1, [pc, #672]	; (80031f8 <invoke_inf+0x2dc>)
kbuf[286] = 0;
 8002f56:	f246 4ee2 	movw	lr, #25826	; 0x64e2
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f5a:	f8cd 801c 	str.w	r8, [sp, #28]
 8002f5e:	900c      	str	r0, [sp, #48]	; 0x30
 8002f60:	4648      	mov	r0, r9
 8002f62:	9708      	str	r7, [sp, #32]
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	2301      	movs	r3, #1
 8002f68:	9202      	str	r2, [sp, #8]
 8002f6a:	2231      	movs	r2, #49	; 0x31
 8002f6c:	9101      	str	r1, [sp, #4]
 8002f6e:	210a      	movs	r1, #10
 8002f70:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
kbuf[287] = 0;
 8002f74:	f246 44e6 	movw	r4, #25830	; 0x64e6
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f78:	e9cd ba05 	strd	fp, sl, [sp, #20]
kbuf[287] = 0;
 8002f7c:	f848 5004 	str.w	r5, [r8, r4]
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f80:	4c9e      	ldr	r4, [pc, #632]	; (80031fc <invoke_inf+0x2e0>)
 8002f82:	9400      	str	r4, [sp, #0]
/* layer 1:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,25,64,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-127,0,-128,127,&buffer0[0],5,25,64,sbuf,0);
 8002f84:	f509 547a 	add.w	r4, r9, #16000	; 0x3e80
kbuf[286] = 0;
 8002f88:	f848 500e 	str.w	r5, [r8, lr]
kbuf[0] = 0;
 8002f8c:	f848 500c 	str.w	r5, [r8, ip]
convolve_s8_kernel3_inputch3_stride2_pad1_fpreq(&buffer0[8000],10,49,1,(const q7_t*) weight0,bias0,scales0,-111,0,-128,127,&buffer0[0],5,25,64,sbuf,kbuf,0);
 8002f90:	f000 fb7c 	bl	800368c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,25,64,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-127,0,-128,127,&buffer0[0],5,25,64,sbuf,0);
 8002f94:	950d      	str	r5, [sp, #52]	; 0x34
 8002f96:	940c      	str	r4, [sp, #48]	; 0x30
 8002f98:	4625      	mov	r5, r4
 8002f9a:	2400      	movs	r4, #0
 8002f9c:	f8df e26c 	ldr.w	lr, [pc, #620]	; 800320c <invoke_inf+0x2f0>
 8002fa0:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8003210 <invoke_inf+0x2f4>
 8002fa4:	2340      	movs	r3, #64	; 0x40
 8002fa6:	9405      	str	r4, [sp, #20]
 8002fa8:	f06f 047e 	mvn.w	r4, #126	; 0x7e
 8002fac:	f8cd c008 	str.w	ip, [sp, #8]
 8002fb0:	4632      	mov	r2, r6
 8002fb2:	f8df c260 	ldr.w	ip, [pc, #608]	; 8003214 <invoke_inf+0x2f8>
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	4640      	mov	r0, r8
 8002fba:	e9cd e403 	strd	lr, r4, [sp, #12]
 8002fbe:	f8df e258 	ldr.w	lr, [pc, #600]	; 8003218 <invoke_inf+0x2fc>
/* layer 2:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],5,25,64,(const q7_t*) weight2,bias2,scales2,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf);
 8002fc2:	2400      	movs	r4, #0
depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0],5,25,64,(const q7_t*) CHWweight1,offsetBias1,offsetRBias1,scales1,-127,0,-128,127,&buffer0[0],5,25,64,sbuf,0);
 8002fc4:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 8002fc8:	e9cd 8708 	strd	r8, r7, [sp, #32]
 8002fcc:	e9cd ce00 	strd	ip, lr, [sp]
 8002fd0:	e9cd ba06 	strd	fp, sl, [sp, #24]
 8002fd4:	f7ff feb4 	bl	8002d40 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,25,64,(const q7_t*) weight2,bias2,scales2,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf);
 8002fd8:	f8df c240 	ldr.w	ip, [pc, #576]	; 800321c <invoke_inf+0x300>
 8002fdc:	f8df e240 	ldr.w	lr, [pc, #576]	; 8003220 <invoke_inf+0x304>
 8002fe0:	2340      	movs	r3, #64	; 0x40
 8002fe2:	9404      	str	r4, [sp, #16]
 8002fe4:	f06f 047e 	mvn.w	r4, #126	; 0x7e
 8002fe8:	f8cd c004 	str.w	ip, [sp, #4]
 8002fec:	4632      	mov	r2, r6
 8002fee:	f8df c234 	ldr.w	ip, [pc, #564]	; 8003224 <invoke_inf+0x308>
 8002ff2:	4639      	mov	r1, r7
 8002ff4:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	950b      	str	r5, [sp, #44]	; 0x2c
 8002ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8002ffe:	f8cd c000 	str.w	ip, [sp]
 8003002:	e9cd 7608 	strd	r7, r6, [sp, #32]
 8003006:	e9cd e402 	strd	lr, r4, [sp, #8]
 800300a:	e9cd ba05 	strd	fp, sl, [sp, #20]
 800300e:	f000 f937 	bl	8003280 <convolve_1x1_s8_fpreq>
/* layer 3:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000],5,25,64,(const q7_t*) CHWweight3,offsetBias3,offsetRBias3,scales3,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf,0);
 8003012:	f8df c214 	ldr.w	ip, [pc, #532]	; 8003228 <invoke_inf+0x30c>
 8003016:	f06f 0e7e 	mvn.w	lr, #126	; 0x7e
 800301a:	2300      	movs	r3, #0
 800301c:	2400      	movs	r4, #0
 800301e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003022:	930d      	str	r3, [sp, #52]	; 0x34
 8003024:	2340      	movs	r3, #64	; 0x40
 8003026:	950c      	str	r5, [sp, #48]	; 0x30
 8003028:	4632      	mov	r2, r6
 800302a:	930b      	str	r3, [sp, #44]	; 0x2c
 800302c:	4639      	mov	r1, r7
 800302e:	9405      	str	r4, [sp, #20]
 8003030:	4648      	mov	r0, r9
/* layer 4:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[8000],5,25,64,(const q7_t*) weight4,bias4,scales4,-127,0,-128,127,&buffer0[0],5,25,64,sbuf);
 8003032:	2400      	movs	r4, #0
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000],5,25,64,(const q7_t*) CHWweight3,offsetBias3,offsetRBias3,scales3,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf,0);
 8003034:	e9cd ce03 	strd	ip, lr, [sp, #12]
 8003038:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800322c <invoke_inf+0x310>
 800303c:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 8003230 <invoke_inf+0x314>
 8003040:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8003044:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8003234 <invoke_inf+0x318>
 8003048:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
 800304c:	f8cd c000 	str.w	ip, [sp]
 8003050:	e9cd ba06 	strd	fp, sl, [sp, #24]
 8003054:	f7fe ffbc 	bl	8001fd0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[8000],5,25,64,(const q7_t*) weight4,bias4,scales4,-127,0,-128,127,&buffer0[0],5,25,64,sbuf);
 8003058:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8003238 <invoke_inf+0x31c>
 800305c:	f06f 0e7e 	mvn.w	lr, #126	; 0x7e
 8003060:	2340      	movs	r3, #64	; 0x40
 8003062:	950b      	str	r5, [sp, #44]	; 0x2c
 8003064:	4632      	mov	r2, r6
 8003066:	9708      	str	r7, [sp, #32]
 8003068:	4639      	mov	r1, r7
 800306a:	9404      	str	r4, [sp, #16]
 800306c:	4648      	mov	r0, r9
 800306e:	f8cd b014 	str.w	fp, [sp, #20]
/* layer 5:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,25,64,(const q7_t*) CHWweight5,offsetBias5,offsetRBias5,scales5,-127,0,-128,127,&buffer0[0],5,25,64,sbuf,0);
 8003072:	2400      	movs	r4, #0
convolve_1x1_s8_fpreq(&buffer0[8000],5,25,64,(const q7_t*) weight4,bias4,scales4,-127,0,-128,127,&buffer0[0],5,25,64,sbuf);
 8003074:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8003078:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800323c <invoke_inf+0x320>
 800307c:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8003240 <invoke_inf+0x324>
 8003080:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 8003084:	e9cd ce00 	strd	ip, lr, [sp]
 8003088:	e9cd a806 	strd	sl, r8, [sp, #24]
 800308c:	f000 f8f8 	bl	8003280 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,25,64,(const q7_t*) CHWweight5,offsetBias5,offsetRBias5,scales5,-127,0,-128,127,&buffer0[0],5,25,64,sbuf,0);
 8003090:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8003244 <invoke_inf+0x328>
 8003094:	f06f 0e7e 	mvn.w	lr, #126	; 0x7e
 8003098:	2300      	movs	r3, #0
 800309a:	950c      	str	r5, [sp, #48]	; 0x30
 800309c:	4632      	mov	r2, r6
 800309e:	930d      	str	r3, [sp, #52]	; 0x34
 80030a0:	2340      	movs	r3, #64	; 0x40
 80030a2:	4639      	mov	r1, r7
 80030a4:	960a      	str	r6, [sp, #40]	; 0x28
 80030a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80030a8:	4640      	mov	r0, r8
 80030aa:	9405      	str	r4, [sp, #20]
/* layer 6:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[0],5,25,64,(const q7_t*) weight6,bias6,scales6,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf);
 80030ac:	462c      	mov	r4, r5
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0],5,25,64,(const q7_t*) CHWweight5,offsetBias5,offsetRBias5,scales5,-127,0,-128,127,&buffer0[0],5,25,64,sbuf,0);
 80030ae:	e9cd ce03 	strd	ip, lr, [sp, #12]
 80030b2:	f8df e194 	ldr.w	lr, [pc, #404]	; 8003248 <invoke_inf+0x32c>
 80030b6:	f8df c194 	ldr.w	ip, [pc, #404]	; 800324c <invoke_inf+0x330>
 80030ba:	e9cd ce01 	strd	ip, lr, [sp, #4]
 80030be:	f8df c190 	ldr.w	ip, [pc, #400]	; 8003250 <invoke_inf+0x334>
 80030c2:	e9cd 8708 	strd	r8, r7, [sp, #32]
 80030c6:	f8cd c000 	str.w	ip, [sp]
 80030ca:	e9cd ba06 	strd	fp, sl, [sp, #24]
 80030ce:	f7fe ff7f 	bl	8001fd0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
convolve_1x1_s8_fpreq(&buffer0[0],5,25,64,(const q7_t*) weight6,bias6,scales6,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf);
 80030d2:	f8df e180 	ldr.w	lr, [pc, #384]	; 8003254 <invoke_inf+0x338>
 80030d6:	f8df c180 	ldr.w	ip, [pc, #384]	; 8003258 <invoke_inf+0x33c>
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	950b      	str	r5, [sp, #44]	; 0x2c
 80030de:	f06f 007e 	mvn.w	r0, #126	; 0x7e
 80030e2:	2500      	movs	r5, #0
 80030e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80030e8:	4632      	mov	r2, r6
 80030ea:	4639      	mov	r1, r7
 80030ec:	9708      	str	r7, [sp, #32]
 80030ee:	e9cd ce01 	strd	ip, lr, [sp, #4]
 80030f2:	f8df c168 	ldr.w	ip, [pc, #360]	; 800325c <invoke_inf+0x340>
 80030f6:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
 80030fa:	e9cd 0503 	strd	r0, r5, [sp, #12]
 80030fe:	f8cd c000 	str.w	ip, [sp]
 8003102:	4640      	mov	r0, r8
/* layer 7:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000],5,25,64,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-88,0,-128,127,&buffer0[8000],5,25,64,sbuf,0);
 8003104:	2500      	movs	r5, #0
convolve_1x1_s8_fpreq(&buffer0[0],5,25,64,(const q7_t*) weight6,bias6,scales6,-127,0,-128,127,&buffer0[8000],5,25,64,sbuf);
 8003106:	e9cd ba05 	strd	fp, sl, [sp, #20]
 800310a:	f000 f8b9 	bl	8003280 <convolve_1x1_s8_fpreq>
depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000],5,25,64,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,scales7,-88,0,-128,127,&buffer0[8000],5,25,64,sbuf,0);
 800310e:	f06f 0e57 	mvn.w	lr, #87	; 0x57
 8003112:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8003260 <invoke_inf+0x344>
 8003116:	2340      	movs	r3, #64	; 0x40
 8003118:	2200      	movs	r2, #0
 800311a:	f8cd 9020 	str.w	r9, [sp, #32]
 800311e:	f8cd c00c 	str.w	ip, [sp, #12]
 8003122:	4639      	mov	r1, r7
 8003124:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8003264 <invoke_inf+0x348>
 8003128:	4648      	mov	r0, r9
 800312a:	920d      	str	r2, [sp, #52]	; 0x34
 800312c:	4632      	mov	r2, r6
 800312e:	940c      	str	r4, [sp, #48]	; 0x30
 8003130:	9709      	str	r7, [sp, #36]	; 0x24
 8003132:	e9cd e504 	strd	lr, r5, [sp, #16]
 8003136:	f8df e130 	ldr.w	lr, [pc, #304]	; 8003268 <invoke_inf+0x34c>
 800313a:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800313e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800326c <invoke_inf+0x350>
 8003142:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 8003146:	f8cd c000 	str.w	ip, [sp]
 800314a:	e9cd ba06 	strd	fp, sl, [sp, #24]
 800314e:	f7fe ff3f 	bl	8001fd0 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
/* layer 8:CONV_2D */
convolve_1x1_s8_fpreq(&buffer0[8000],5,25,64,(const q7_t*) weight8,bias8,scales8,-76,0,-128,127,&buffer0[16000],5,25,64,sbuf);
 8003152:	f06f 0e4b 	mvn.w	lr, #75	; 0x4b
 8003156:	4648      	mov	r0, r9
 8003158:	f8df c114 	ldr.w	ip, [pc, #276]	; 8003270 <invoke_inf+0x354>
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	940b      	str	r4, [sp, #44]	; 0x2c
 8003160:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003274 <invoke_inf+0x358>
 8003164:	f500 54fa 	add.w	r4, r0, #8000	; 0x1f40
 8003168:	4632      	mov	r2, r6
 800316a:	930a      	str	r3, [sp, #40]	; 0x28
 800316c:	4639      	mov	r1, r7
 800316e:	9504      	str	r5, [sp, #16]
 8003170:	9407      	str	r4, [sp, #28]
/* layer 9:AVERAGE_POOL_2D */
avg_pooling(&buffer0[16000],25,5,64,25,5,1,1,-128,127,&buffer0[0]);
/* layer 10:CONV_2D */
convolve_1x1_s8_fpreq_bitmask(&buffer0[0],1,1,64,(const q7_t*) weight9,bias9,scales9,0,0,-128,127,&buffer0[68],&buffer0[64],1,1,10,sbuf);
 8003172:	4d23      	ldr	r5, [pc, #140]	; (8003200 <invoke_inf+0x2e4>)
convolve_1x1_s8_fpreq(&buffer0[8000],5,25,64,(const q7_t*) weight8,bias8,scales8,-76,0,-128,127,&buffer0[16000],5,25,64,sbuf);
 8003174:	e9cd ce02 	strd	ip, lr, [sp, #8]
 8003178:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8003278 <invoke_inf+0x35c>
 800317c:	e9cd 7608 	strd	r7, r6, [sp, #32]
 8003180:	e9cd c900 	strd	ip, r9, [sp]
 8003184:	e9cd ba05 	strd	fp, sl, [sp, #20]
 8003188:	f000 f87a 	bl	8003280 <convolve_1x1_s8_fpreq>
avg_pooling(&buffer0[16000],25,5,64,25,5,1,1,-128,127,&buffer0[0]);
 800318c:	4631      	mov	r1, r6
 800318e:	463a      	mov	r2, r7
 8003190:	f8cd 8018 	str.w	r8, [sp, #24]
 8003194:	4620      	mov	r0, r4
 8003196:	f8cd b010 	str.w	fp, [sp, #16]
 800319a:	f8cd a014 	str.w	sl, [sp, #20]
 800319e:	2340      	movs	r3, #64	; 0x40
 80031a0:	e9cd 6700 	strd	r6, r7, [sp]
 80031a4:	2601      	movs	r6, #1
convolve_1x1_s8_fpreq_bitmask(&buffer0[0],1,1,64,(const q7_t*) weight9,bias9,scales9,0,0,-128,127,&buffer0[68],&buffer0[64],1,1,10,sbuf);
 80031a6:	270a      	movs	r7, #10
avg_pooling(&buffer0[16000],25,5,64,25,5,1,1,-128,127,&buffer0[0]);
 80031a8:	e9cd 6602 	strd	r6, r6, [sp, #8]
 80031ac:	f001 f95c 	bl	8004468 <avg_pooling>
convolve_1x1_s8_fpreq_bitmask(&buffer0[0],1,1,64,(const q7_t*) weight9,bias9,scales9,0,0,-128,127,&buffer0[68],&buffer0[64],1,1,10,sbuf);
 80031b0:	f108 0e40 	add.w	lr, r8, #64	; 0x40
 80031b4:	2201      	movs	r2, #1
 80031b6:	f108 0c44 	add.w	ip, r8, #68	; 0x44
 80031ba:	f50e 44bb 	add.w	r4, lr, #23936	; 0x5d80
 80031be:	4e11      	ldr	r6, [pc, #68]	; (8003204 <invoke_inf+0x2e8>)
 80031c0:	4640      	mov	r0, r8
 80031c2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800327c <invoke_inf+0x360>
 80031c6:	940c      	str	r4, [sp, #48]	; 0x30
 80031c8:	2400      	movs	r4, #0
 80031ca:	2340      	movs	r3, #64	; 0x40
 80031cc:	4611      	mov	r1, r2
 80031ce:	920a      	str	r2, [sp, #40]	; 0x28
 80031d0:	9209      	str	r2, [sp, #36]	; 0x24
 80031d2:	970b      	str	r7, [sp, #44]	; 0x2c
 80031d4:	f8cd 8000 	str.w	r8, [sp]
 80031d8:	e9cd ba05 	strd	fp, sl, [sp, #20]
 80031dc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80031e0:	e9cd ce07 	strd	ip, lr, [sp, #28]
 80031e4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80031e8:	f000 f92e 	bl	8003448 <convolve_1x1_s8_fpreq_bitmask>
}
 80031ec:	b00f      	add	sp, #60	; 0x3c
 80031ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	08006e40 	.word	0x08006e40
 80031f8:	08006140 	.word	0x08006140
 80031fc:	08007768 	.word	0x08007768
 8003200:	20001474 	.word	0x20001474
 8003204:	08007740 	.word	0x08007740
 8003208:	2000149c 	.word	0x2000149c
 800320c:	08006f40 	.word	0x08006f40
 8003210:	08006a40 	.word	0x08006a40
 8003214:	08004e40 	.word	0x08004e40
 8003218:	08006640 	.word	0x08006640
 800321c:	08006240 	.word	0x08006240
 8003220:	08007040 	.word	0x08007040
 8003224:	080079a8 	.word	0x080079a8
 8003228:	08007140 	.word	0x08007140
 800322c:	08006b40 	.word	0x08006b40
 8003230:	08006740 	.word	0x08006740
 8003234:	08005a80 	.word	0x08005a80
 8003238:	08007240 	.word	0x08007240
 800323c:	08006340 	.word	0x08006340
 8003240:	080089a8 	.word	0x080089a8
 8003244:	08007340 	.word	0x08007340
 8003248:	08006c40 	.word	0x08006c40
 800324c:	08006840 	.word	0x08006840
 8003250:	08005cc0 	.word	0x08005cc0
 8003254:	08007440 	.word	0x08007440
 8003258:	08006440 	.word	0x08006440
 800325c:	080099a8 	.word	0x080099a8
 8003260:	08007540 	.word	0x08007540
 8003264:	08006940 	.word	0x08006940
 8003268:	08006d40 	.word	0x08006d40
 800326c:	08005f00 	.word	0x08005f00
 8003270:	08007640 	.word	0x08007640
 8003274:	08006540 	.word	0x08006540
 8003278:	0800a9a8 	.word	0x0800a9a8
 800327c:	200007c0 	.word	0x200007c0

08003280 <convolve_1x1_s8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8003284:	f013 0603 	ands.w	r6, r3, #3
		const uint16_t output_ch, q15_t *runtime_buf) {
 8003288:	b091      	sub	sp, #68	; 0x44
 800328a:	4604      	mov	r4, r0
 800328c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800328e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003290:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 8003294:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8003298:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 800329c:	f040 80cf 	bne.w	800343e <convolve_1x1_s8_fpreq+0x1be>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 80032a0:	fb01 f202 	mul.w	r2, r1, r2
 80032a4:	4698      	mov	r8, r3
	const int channel_div4 = (input_ch >> 2);
 80032a6:	089b      	lsrs	r3, r3, #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80032a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80032aa:	4627      	mov	r7, r4
 80032ac:	940f      	str	r4, [sp, #60]	; 0x3c
	const int channel_div4 = (input_ch >> 2);
 80032ae:	fa1f f983 	uxth.w	r9, r3
 80032b2:	930c      	str	r3, [sp, #48]	; 0x30

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80032b4:	1053      	asrs	r3, r2, #1
	const int32_t num_elements = output_x * output_y;
 80032b6:	920d      	str	r2, [sp, #52]	; 0x34
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80032b8:	b20c      	sxth	r4, r1
	const int channel_div4 = (input_ch >> 2);
 80032ba:	46cb      	mov	fp, r9
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80032bc:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80032c0:	9308      	str	r3, [sp, #32]
 80032c2:	d054      	beq.n	800336e <convolve_1x1_s8_fpreq+0xee>
 80032c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80032c6:	46ab      	mov	fp, r5
 80032c8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80032cc:	464d      	mov	r5, r9
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	9407      	str	r4, [sp, #28]
 80032d2:	9309      	str	r3, [sp, #36]	; 0x24
 80032d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032dc:	b21b      	sxth	r3, r3
 80032de:	930a      	str	r3, [sp, #40]	; 0x28
 80032e0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80032e4:	4699      	mov	r9, r3
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 80032e6:	4639      	mov	r1, r7
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
		while (cnt > 0) {
 80032e8:	b335      	cbz	r5, 8003338 <convolve_1x1_s8_fpreq+0xb8>
		q15_t *dst = two_column_buffer;
 80032ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
		while (cnt > 0) {
 80032ec:	46ae      	mov	lr, r5
 80032ee:	9c07      	ldr	r4, [sp, #28]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 80032f0:	680b      	ldr	r3, [r1, #0]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80032f2:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80032f6:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80032fa:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80032fe:	fa93 f304 	sadd16	r3, r3, r4
 8003302:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8003306:	f8c2 c000 	str.w	ip, [r2]
 800330a:	3108      	adds	r1, #8
 800330c:	6053      	str	r3, [r2, #4]
 800330e:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003312:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8003316:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800331a:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800331e:	fa93 f304 	sadd16	r3, r3, r4
 8003322:	fa9c fc04 	sadd16	ip, ip, r4
 8003326:	f1be 0e01 	subs.w	lr, lr, #1
 800332a:	f8c2 c008 	str.w	ip, [r2, #8]
 800332e:	60d3      	str	r3, [r2, #12]
 8003330:	f102 0210 	add.w	r2, r2, #16
 8003334:	d1dc      	bne.n	80032f0 <convolve_1x1_s8_fpreq+0x70>
 8003336:	9407      	str	r4, [sp, #28]
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8003338:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800333a:	4652      	mov	r2, sl
 800333c:	990a      	ldr	r1, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800333e:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 8003340:	9005      	str	r0, [sp, #20]
 8003342:	444f      	add	r7, r9
 8003344:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003346:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003348:	9304      	str	r3, [sp, #16]
 800334a:	9102      	str	r1, [sp, #8]
 800334c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800334e:	9001      	str	r0, [sp, #4]
 8003350:	4658      	mov	r0, fp
 8003352:	f8cd 800c 	str.w	r8, [sp, #12]
 8003356:	9925      	ldr	r1, [sp, #148]	; 0x94
 8003358:	9400      	str	r4, [sp, #0]
 800335a:	f000 fc6b 	bl	8003c34 <mat_mult_kernel_s8_s16_reordered_fpreq>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800335e:	9b08      	ldr	r3, [sp, #32]
 8003360:	429e      	cmp	r6, r3
 8003362:	d1c0      	bne.n	80032e6 <convolve_1x1_s8_fpreq+0x66>
 8003364:	46a9      	mov	r9, r5
 8003366:	9c07      	ldr	r4, [sp, #28]
 8003368:	465d      	mov	r5, fp
 800336a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 800336e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003370:	07da      	lsls	r2, r3, #31
 8003372:	d560      	bpl.n	8003436 <convolve_1x1_s8_fpreq+0x1b6>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8003374:	3b01      	subs	r3, #1
 8003376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003378:	fb08 2803 	mla	r8, r8, r3, r2
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 800337c:	f1b9 0f00 	cmp.w	r9, #0
 8003380:	d013      	beq.n	80033aa <convolve_1x1_s8_fpreq+0x12a>
		q15_t *dst = two_column_buffer;
 8003382:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8003384:	f858 3b04 	ldr.w	r3, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003388:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800338c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003390:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003394:	fa93 f304 	sadd16	r3, r3, r4
 8003398:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 800339c:	f1bb 0b01 	subs.w	fp, fp, #1
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	6053      	str	r3, [r2, #4]
 80033a4:	f102 0208 	add.w	r2, r2, #8
 80033a8:	d1ec      	bne.n	8003384 <convolve_1x1_s8_fpreq+0x104>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80033aa:	f1ba 0f00 	cmp.w	sl, #0
 80033ae:	d042      	beq.n	8003436 <convolve_1x1_s8_fpreq+0x1b6>
 80033b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033b2:	4482      	add	sl, r0
 80033b4:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 80033b8:	f103 3eff 	add.w	lr, r3, #4294967295
 80033bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80033be:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80033c2:	fa1f fe8e 	uxth.w	lr, lr
 80033c6:	f1a3 0804 	sub.w	r8, r3, #4
 80033ca:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80033ce:	f10e 0e01 	add.w	lr, lr, #1
 80033d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80033d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			q31_t sum = bias[i_ch_out];
 80033d8:	f858 3f04 	ldr.w	r3, [r8, #4]!
			while (col_count) {
 80033dc:	b19a      	cbz	r2, 8003406 <convolve_1x1_s8_fpreq+0x186>
 80033de:	eb05 070e 	add.w	r7, r5, lr
			const q15_t *ip_as_col = runtime_buf;
 80033e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80033e4:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 80033e8:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80033ea:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80033ee:	fa2f f282 	sxtb16	r2, r2
 80033f2:	fa2f f181 	sxtb16	r1, r1

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80033f6:	fb22 3306 	smlad	r3, r2, r6, r3
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	3408      	adds	r4, #8
 80033fe:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 8003402:	42bd      	cmp	r5, r7
 8003404:	d1ee      	bne.n	80033e4 <convolve_1x1_s8_fpreq+0x164>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8003406:	ee07 3a90 	vmov	s15, r3
			sum += out_offset;
			sum = MAX(sum, out_activation_min);
 800340a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 800340c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003410:	ecfc 7a01 	vldmia	ip!, {s15}
 8003414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341c:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8003420:	445b      	add	r3, fp
			sum = MAX(sum, out_activation_min);
 8003422:	4293      	cmp	r3, r2
 8003424:	bfb8      	it	lt
 8003426:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8003428:	454b      	cmp	r3, r9
 800342a:	bfa8      	it	ge
 800342c:	464b      	movge	r3, r9
			*out++ = (q7_t) sum;
 800342e:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8003432:	4550      	cmp	r0, sl
 8003434:	d1cf      	bne.n	80033d6 <convolve_1x1_s8_fpreq+0x156>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8003436:	2000      	movs	r0, #0
}
 8003438:	b011      	add	sp, #68	; 0x44
 800343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 800343e:	2001      	movs	r0, #1
}
 8003440:	b011      	add	sp, #68	; 0x44
 8003442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003446:	bf00      	nop

08003448 <convolve_1x1_s8_fpreq_bitmask>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, q7_t *mask, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 800344c:	079f      	lsls	r7, r3, #30
		const uint16_t output_ch, q15_t *runtime_buf) {
 800344e:	b093      	sub	sp, #76	; 0x4c
 8003450:	4606      	mov	r6, r0
 8003452:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003454:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8003456:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800345a:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 800345e:	f8bd a09c 	ldrh.w	sl, [sp, #156]	; 0x9c
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8003462:	f040 80f2 	bne.w	800364a <convolve_1x1_s8_fpreq_bitmask+0x202>
		return PARAM_NO_SUPPORT;
	}
	if (output_ch % 8 != 0 && input_x > 1)
 8003466:	f01a 0f07 	tst.w	sl, #7
 800346a:	d002      	beq.n	8003472 <convolve_1x1_s8_fpreq_bitmask+0x2a>
 800346c:	2901      	cmp	r1, #1
 800346e:	f200 80ec 	bhi.w	800364a <convolve_1x1_s8_fpreq_bitmask+0x202>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 8003472:	fb04 f202 	mul.w	r2, r4, r2
 8003476:	469b      	mov	fp, r3
	const int channel_div4 = (input_ch >> 2);
 8003478:	089b      	lsrs	r3, r3, #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 800347a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800347c:	9610      	str	r6, [sp, #64]	; 0x40
	const int channel_div4 = (input_ch >> 2);
 800347e:	fa1f f983 	uxth.w	r9, r3
 8003482:	930e      	str	r3, [sp, #56]	; 0x38

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8003484:	1053      	asrs	r3, r2, #1
	const int32_t num_elements = output_x * output_y;
 8003486:	920f      	str	r2, [sp, #60]	; 0x3c
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8003488:	b20c      	sxth	r4, r1
	const int channel_div4 = (input_ch >> 2);
 800348a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 800348e:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8003492:	930b      	str	r3, [sp, #44]	; 0x2c
 8003494:	d05d      	beq.n	8003552 <convolve_1x1_s8_fpreq_bitmask+0x10a>

		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
				output_ch, scales, (q7_t) out_offset, out_activation_min,
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out, mask);
		mask += output_ch / 4;
 8003496:	ea4f 039a 	mov.w	r3, sl, lsr #2
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800349a:	951c      	str	r5, [sp, #112]	; 0x70
 800349c:	46b0      	mov	r8, r6
 800349e:	464d      	mov	r5, r9
		mask += output_ch / 4;
 80034a0:	930a      	str	r3, [sp, #40]	; 0x28
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80034a2:	2600      	movs	r6, #0
 80034a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
		mask += output_ch / 4;
 80034a6:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80034a8:	b25b      	sxtb	r3, r3
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80034aa:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 80034ae:	9409      	str	r4, [sp, #36]	; 0x24
 80034b0:	930c      	str	r3, [sp, #48]	; 0x30
 80034b2:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80034b6:	930d      	str	r3, [sp, #52]	; 0x34
		q7_t *src = &input[i_element * input_ch * 2];
 80034b8:	4641      	mov	r1, r8
		while (cnt > 0) {
 80034ba:	b335      	cbz	r5, 800350a <convolve_1x1_s8_fpreq_bitmask+0xc2>
		q15_t *dst = two_column_buffer;
 80034bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
		while (cnt > 0) {
 80034be:	46ae      	mov	lr, r5
 80034c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    memcpy(&val, *in_q7, 4);
 80034c2:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80034c4:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80034c8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80034cc:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80034d0:	fa93 f304 	sadd16	r3, r3, r4
 80034d4:	fa9c fc04 	sadd16	ip, ip, r4
 80034d8:	f8c2 c000 	str.w	ip, [r2]
 80034dc:	3108      	adds	r1, #8
 80034de:	6053      	str	r3, [r2, #4]
 80034e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80034e4:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80034e8:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80034ec:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80034f0:	fa93 f304 	sadd16	r3, r3, r4
 80034f4:	fa9c fc04 	sadd16	ip, ip, r4
 80034f8:	f1be 0e01 	subs.w	lr, lr, #1
 80034fc:	f8c2 c008 	str.w	ip, [r2, #8]
 8003500:	60d3      	str	r3, [r2, #12]
 8003502:	f102 0210 	add.w	r2, r2, #16
 8003506:	d1dc      	bne.n	80034c2 <convolve_1x1_s8_fpreq_bitmask+0x7a>
 8003508:	9409      	str	r4, [sp, #36]	; 0x24
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 800350a:	9c21      	ldr	r4, [sp, #132]	; 0x84
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800350c:	3601      	adds	r6, #1
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 800350e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003512:	9401      	str	r4, [sp, #4]
		mask += output_ch / 4;
 8003514:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 8003516:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8003518:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 800351c:	e9cd 0705 	strd	r0, r7, [sp, #20]
 8003520:	9822      	ldr	r0, [sp, #136]	; 0x88
		mask += output_ch / 4;
 8003522:	4427      	add	r7, r4
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 8003524:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003526:	9204      	str	r2, [sp, #16]
 8003528:	4652      	mov	r2, sl
 800352a:	9002      	str	r0, [sp, #8]
 800352c:	4648      	mov	r0, r9
 800352e:	9400      	str	r4, [sp, #0]
 8003530:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003532:	f000 fcd1 	bl	8003ed8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8003536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003538:	44a0      	add	r8, r4
 800353a:	429e      	cmp	r6, r3
 800353c:	d1bc      	bne.n	80034b8 <convolve_1x1_s8_fpreq_bitmask+0x70>
 800353e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003542:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8003546:	46a9      	mov	r9, r5
 8003548:	fb03 2306 	mla	r3, r3, r6, r2
 800354c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800354e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003550:	9324      	str	r3, [sp, #144]	; 0x90
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8003552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003554:	07da      	lsls	r2, r3, #31
 8003556:	d574      	bpl.n	8003642 <convolve_1x1_s8_fpreq_bitmask+0x1fa>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8003558:	1e5e      	subs	r6, r3, #1
 800355a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800355c:	fb0b 3606 	mla	r6, fp, r6, r3
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8003560:	f1b9 0f00 	cmp.w	r9, #0
 8003564:	d013      	beq.n	800358e <convolve_1x1_s8_fpreq_bitmask+0x146>
		q15_t *dst = two_column_buffer;
 8003566:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003568:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800356a:	f856 3b04 	ldr.w	r3, [r6], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800356e:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8003572:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003576:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800357a:	fa93 f304 	sadd16	r3, r3, r4
 800357e:	fa91 f104 	sadd16	r1, r1, r4
		while (cnt > 0) {
 8003582:	3f01      	subs	r7, #1
 8003584:	6011      	str	r1, [r2, #0]
 8003586:	6053      	str	r3, [r2, #4]
 8003588:	f102 0208 	add.w	r2, r2, #8
 800358c:	d1ed      	bne.n	800356a <convolve_1x1_s8_fpreq_bitmask+0x122>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		int bit_starting_idx = 0;
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 800358e:	f1ba 0f00 	cmp.w	sl, #0
 8003592:	d056      	beq.n	8003642 <convolve_1x1_s8_fpreq_bitmask+0x1fa>
 8003594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003596:	f04f 0901 	mov.w	r9, #1
 800359a:	4482      	add	sl, r0
 800359c:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
 80035a0:	f103 3bff 	add.w	fp, r3, #4294967295
 80035a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		int bit_starting_idx = 0;
 80035a6:	f04f 0e00 	mov.w	lr, #0
 80035aa:	f1a3 0804 	sub.w	r8, r3, #4
			}
			if (sum > out_activation_max){
				sum = out_activation_max;
				mask_value = 0;
			}
			*out++ = (q7_t) sum;
 80035ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035b0:	fa1f fb8b 	uxth.w	fp, fp
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	44cb      	add	fp, r9
 80035b8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	930a      	str	r3, [sp, #40]	; 0x28
			while (col_count) {
 80035c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			q31_t sum = bias[i_ch_out];
 80035c6:	f858 3f04 	ldr.w	r3, [r8, #4]!
			while (col_count) {
 80035ca:	b19a      	cbz	r2, 80035f4 <convolve_1x1_s8_fpreq_bitmask+0x1ac>
 80035cc:	eb05 070b 	add.w	r7, r5, fp
			const q15_t *ip_as_col = runtime_buf;
 80035d0:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80035d2:	f855 2b04 	ldr.w	r2, [r5], #4
    memcpy(&val, *in_q15, 4);
 80035d6:	6826      	ldr	r6, [r4, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 80035d8:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80035dc:	fa2f f282 	sxtb16	r2, r2
 80035e0:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80035e4:	fb22 3306 	smlad	r3, r2, r6, r3
 80035e8:	6862      	ldr	r2, [r4, #4]
 80035ea:	3408      	adds	r4, #8
 80035ec:	fb21 3302 	smlad	r3, r1, r2, r3
			while (col_count) {
 80035f0:	42bd      	cmp	r5, r7
 80035f2:	d1ee      	bne.n	80035d2 <convolve_1x1_s8_fpreq_bitmask+0x18a>
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	fa09 f30e 	lsl.w	r3, r9, lr
			sum += out_offset;
 80035fc:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80035fe:	3001      	adds	r0, #1
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8003600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003604:	ecfc 7a01 	vldmia	ip!, {s15}
 8003608:	b2da      	uxtb	r2, r3
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003612:	ee17 3a90 	vmov	r3, s15
			sum += out_offset;
 8003616:	440b      	add	r3, r1
			if (sum < out_activation_min){
 8003618:	9921      	ldr	r1, [sp, #132]	; 0x84
 800361a:	428b      	cmp	r3, r1
 800361c:	db30      	blt.n	8003680 <convolve_1x1_s8_fpreq_bitmask+0x238>
			if (sum > out_activation_max){
 800361e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003620:	428b      	cmp	r3, r1
 8003622:	dc16      	bgt.n	8003652 <convolve_1x1_s8_fpreq_bitmask+0x20a>
			*out++ = (q7_t) sum;
 8003624:	f800 3c01 	strb.w	r3, [r0, #-1]
			if (mask_value == 1)
				BIT_SET(*mask, bit_starting_idx);
			else
				BIT_CLEAR(*mask, bit_starting_idx);

			bit_starting_idx += 1;
 8003628:	f10e 0e01 	add.w	lr, lr, #1
				BIT_SET(*mask, bit_starting_idx);
 800362c:	9b24      	ldr	r3, [sp, #144]	; 0x90
			if(bit_starting_idx == 8){
 800362e:	f1be 0f08 	cmp.w	lr, #8
				BIT_SET(*mask, bit_starting_idx);
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	ea43 0302 	orr.w	r3, r3, r2
 8003638:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800363a:	7013      	strb	r3, [r2, #0]
			if(bit_starting_idx == 8){
 800363c:	d017      	beq.n	800366e <convolve_1x1_s8_fpreq_bitmask+0x226>
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 800363e:	4582      	cmp	sl, r0
 8003640:	d1c0      	bne.n	80035c4 <convolve_1x1_s8_fpreq_bitmask+0x17c>
			}
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8003642:	2000      	movs	r0, #0
}
 8003644:	b013      	add	sp, #76	; 0x4c
 8003646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 800364a:	2001      	movs	r0, #1
}
 800364c:	b013      	add	sp, #76	; 0x4c
 800364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*out++ = (q7_t) sum;
 8003652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003654:	f800 3c01 	strb.w	r3, [r0, #-1]
			bit_starting_idx += 1;
 8003658:	f10e 0e01 	add.w	lr, lr, #1
				BIT_CLEAR(*mask, bit_starting_idx);
 800365c:	9b24      	ldr	r3, [sp, #144]	; 0x90
			if(bit_starting_idx == 8){
 800365e:	f1be 0f08 	cmp.w	lr, #8
				BIT_CLEAR(*mask, bit_starting_idx);
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	ea23 0302 	bic.w	r3, r3, r2
 8003668:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800366a:	7013      	strb	r3, [r2, #0]
			if(bit_starting_idx == 8){
 800366c:	d1e7      	bne.n	800363e <convolve_1x1_s8_fpreq_bitmask+0x1f6>
				mask++;
 800366e:	9b24      	ldr	r3, [sp, #144]	; 0x90
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8003670:	4582      	cmp	sl, r0
				mask++;
 8003672:	f103 0301 	add.w	r3, r3, #1
 8003676:	9324      	str	r3, [sp, #144]	; 0x90
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8003678:	d0e3      	beq.n	8003642 <convolve_1x1_s8_fpreq_bitmask+0x1fa>
				bit_starting_idx = 0;
 800367a:	f04f 0e00 	mov.w	lr, #0
 800367e:	e7a1      	b.n	80035c4 <convolve_1x1_s8_fpreq_bitmask+0x17c>
 8003680:	460b      	mov	r3, r1
			if (sum > out_activation_max){
 8003682:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003684:	428b      	cmp	r3, r1
 8003686:	dce4      	bgt.n	8003652 <convolve_1x1_s8_fpreq_bitmask+0x20a>
			*out++ = (q7_t) sum;
 8003688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800368a:	e7e3      	b.n	8003654 <convolve_1x1_s8_fpreq_bitmask+0x20c>

0800368c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq>:
		const float *scales, const int32_t output_offset,
		const int32_t input_offset, const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf,
		q7_t pad_value) {
 800368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003690:	b09b      	sub	sp, #108	; 0x6c
 8003692:	468c      	mov	ip, r1
 8003694:	469a      	mov	sl, r3
 8003696:	4686      	mov	lr, r0
	q15_t *two_column_buf = runtime_buf;
	q7_t *out = output;

	q15_t pad16 = pad_value;
	const int16_t inoff16 = input_offset;
	q15_t pad_out = pad16 + inoff16;
 8003698:	9928      	ldr	r1, [sp, #160]	; 0xa0
		q7_t pad_value) {
 800369a:	f99d 20c4 	ldrsb.w	r2, [sp, #196]	; 0xc4
	q15_t pad_out = pad16 + inoff16;
 800369e:	fa1f f881 	uxth.w	r8, r1
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80036a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
		q7_t pad_value) {
 80036a4:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
	q15_t pad_out = pad16 + inoff16;
 80036a8:	4442      	add	r2, r8
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80036aa:	b21c      	sxth	r4, r3
		q7_t pad_value) {
 80036ac:	9116      	str	r1, [sp, #88]	; 0x58
	q15_t pad_out = pad16 + inoff16;
 80036ae:	b217      	sxth	r7, r2
		q7_t pad_value) {
 80036b0:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 80036b4:	eac7 4307 	pkhbt	r3, r7, r7, lsl #16
 80036b8:	9314      	str	r3, [sp, #80]	; 0x50
		q7_t pad_value) {
 80036ba:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80036be:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		q7_t pad_value) {
 80036c2:	9309      	str	r3, [sp, #36]	; 0x24
 80036c4:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 80036c8:	9315      	str	r3, [sp, #84]	; 0x54

	const q7_t *ip_a0 = kernel;

	//This for loop takes the entire weight tensor for one layer from [Out_Ch, In_Ch, K, K] to [Out_Ch/2, In_Ch*K*K] organized in two columns of In_Ch*K*K each
	for (int i = 0; i < output_ch; i += 2) {
 80036ca:	2900      	cmp	r1, #0
 80036cc:	d046      	beq.n	800375c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0xd0>
 80036ce:	1e4d      	subs	r5, r1, #1
 80036d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
	const q7_t *ip_a0 = kernel;
 80036d2:	4648      	mov	r0, r9
 80036d4:	086d      	lsrs	r5, r5, #1
 80036d6:	3501      	adds	r5, #1
 80036d8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80036dc:	eb09 0545 	add.w	r5, r9, r5, lsl #1
    memcpy(&val, *in_q7, 4);
 80036e0:	6802      	ldr	r2, [r0, #0]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80036e2:	fa2f f192 	sxtb16	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80036e6:	fa2f f282 	sxtb16	r2, r2
    q31_t inA = arm_nn_read_q7x4_ia(&source);
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
    q31_t inAbuf2 = __SXTB16(inA);

#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80036ea:	eac1 4622 	pkhtb	r6, r1, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80036ee:	eac2 4201 	pkhbt	r2, r2, r1, lsl #16
 80036f2:	e9c3 2600 	strd	r2, r6, [r3]
    memcpy(&val, *in_q7, 4);
 80036f6:	f8d0 2009 	ldr.w	r2, [r0, #9]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 80036fa:	fa2f f192 	sxtb16	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80036fe:	fa2f f282 	sxtb16	r2, r2
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8003702:	eac1 4622 	pkhtb	r6, r1, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8003706:	eac2 4201 	pkhbt	r2, r2, r1, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800370a:	f8c3 6016 	str.w	r6, [r3, #22]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800370e:	f8c3 2012 	str.w	r2, [r3, #18]
    memcpy(&val, *in_q7, 4);
 8003712:	6842      	ldr	r2, [r0, #4]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 8003714:	fa2f f192 	sxtb16	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003718:	fa2f f282 	sxtb16	r2, r2
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800371c:	eac1 4622 	pkhtb	r6, r1, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8003720:	eac2 4201 	pkhbt	r2, r2, r1, lsl #16
 8003724:	e9c3 2602 	strd	r2, r6, [r3, #8]
    memcpy(&val, *in_q7, 4);
 8003728:	f8d0 200d 	ldr.w	r2, [r0, #13]
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800372c:	fa2f f192 	sxtb16	r1, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003730:	fa2f f282 	sxtb16	r2, r2
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8003734:	eac1 4622 	pkhtb	r6, r1, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8003738:	eac2 4201 	pkhbt	r2, r2, r1, lsl #16
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 800373c:	f8c3 601e 	str.w	r6, [r3, #30]
 8003740:	3012      	adds	r0, #18
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8003742:	f8c3 201a 	str.w	r2, [r3, #26]
 8003746:	3324      	adds	r3, #36	; 0x24

		//25, 26, 27
		//9
		dst1 = dst1_31;
		dst2 = dst2_31;
		dst1[0] = *ip_a0++;
 8003748:	f910 2c0a 	ldrsb.w	r2, [r0, #-10]
 800374c:	f823 2c14 	strh.w	r2, [r3, #-20]
		//dst1[1] = *ip_a0++;
		//dst1[2] = *ip_a0++;
		dst2[0] = *ip_a1++;
 8003750:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
	for (int i = 0; i < output_ch; i += 2) {
 8003754:	42a8      	cmp	r0, r5
		dst2[0] = *ip_a1++;
 8003756:	f823 2c02 	strh.w	r2, [r3, #-2]
	for (int i = 0; i < output_ch; i += 2) {
 800375a:	d1c1      	bne.n	80036e0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x54>

		/* skip row */
		ip_a0 += 9;
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 800375c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8151 	beq.w	8003a06 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x37a>
 8003764:	4652      	mov	r2, sl
 8003766:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34

			two_column_buf += 9;
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 9) {

				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 800376a:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 800376e:	f64f 75ff 	movw	r5, #65535	; 0xffff
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8003772:	00d3      	lsls	r3, r2, #3
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8003774:	2100      	movs	r1, #0
 8003776:	4666      	mov	r6, ip
 8003778:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 800377c:	9319      	str	r3, [sp, #100]	; 0x64
 800377e:	4413      	add	r3, r2
 8003780:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8003784:	9317      	str	r3, [sp, #92]	; 0x5c
 8003786:	4653      	mov	r3, sl
 8003788:	3324      	adds	r3, #36	; 0x24
 800378a:	930a      	str	r3, [sp, #40]	; 0x28
					src3 = src2 + input_row_offset;
 800378c:	4673      	mov	r3, lr
 800378e:	4463      	add	r3, ip
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8003790:	e9cd 510f 	strd	r5, r1, [sp, #60]	; 0x3c
					src3 = src2 + input_row_offset;
 8003794:	9318      	str	r3, [sp, #96]	; 0x60
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8003796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80b3 	beq.w	8003904 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x278>
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 800379e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
					src3 = src2 + input_row_offset;
 80037a2:	4653      	mov	r3, sl
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80037a4:	2500      	movs	r5, #0
 80037a6:	960b      	str	r6, [sp, #44]	; 0x2c
					src = input + (base_idx_y * input_x) * input_ch;
 80037a8:	fb06 f209 	mul.w	r2, r6, r9
 80037ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037b0:	920e      	str	r2, [sp, #56]	; 0x38
 80037b2:	fb02 0201 	mla	r2, r2, r1, r0
 80037b6:	9211      	str	r2, [sp, #68]	; 0x44
					src2 = src + input_row_offset;
 80037b8:	4432      	add	r2, r6
 80037ba:	9212      	str	r2, [sp, #72]	; 0x48
					src3 = src2 + input_row_offset;
 80037bc:	4432      	add	r2, r6
 80037be:	9213      	str	r2, [sp, #76]	; 0x4c
 80037c0:	b2ad      	uxth	r5, r5
			if (base_idx_y != -1) {
 80037c2:	f1b9 3fff 	cmp.w	r9, #4294967295
			dst2 = dst + 9;
 80037c6:	f10a 0a12 	add.w	sl, sl, #18
 80037ca:	ea4f 0245 	mov.w	r2, r5, lsl #1
 80037ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80037d2:	b212      	sxth	r2, r2
			if (base_idx_y != -1) {
 80037d4:	f000 811b 	beq.w	8003a0e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x382>
				if (base_idx_x != -1) { //load all for now and unroll all
 80037d8:	1c50      	adds	r0, r2, #1
 80037da:	f000 81a1 	beq.w	8003b20 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x494>
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 80037de:	990e      	ldr	r1, [sp, #56]	; 0x38
					src2 = src + input_row_offset;
 80037e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 80037e2:	440a      	add	r2, r1
 80037e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037e8:	fb01 0202 	mla	r2, r1, r2, r0
    memcpy(&val, *in_q7, 4);
 80037ec:	6811      	ldr	r1, [r2, #0]
					src2 = src + input_row_offset;
 80037ee:	eb02 0c06 	add.w	ip, r2, r6
 80037f2:	fa2f f081 	sxtb16	r0, r1
					src3 = src2 + input_row_offset;
 80037f6:	eb0c 0e06 	add.w	lr, ip, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 80037fa:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80037fe:	fa2f f181 	sxtb16	r1, r1
					q7_q15_offset_ele(src, dst)
 8003802:	eac1 4b20 	pkhtb	fp, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003806:	fa9b fb04 	sadd16	fp, fp, r4
 800380a:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 800380e:	fa91 f104 	sadd16	r1, r1, r4
 8003812:	f8c3 b004 	str.w	fp, [r3, #4]
 8003816:	6019      	str	r1, [r3, #0]
 8003818:	6851      	ldr	r1, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800381a:	fa2f f081 	sxtb16	r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 800381e:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003822:	fa2f f181 	sxtb16	r1, r1
					q7_q15_offset_ele(src, dst)
 8003826:	eac1 4b20 	pkhtb	fp, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800382a:	fa9b fb04 	sadd16	fp, fp, r4
 800382e:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 8003832:	fa91 f104 	sadd16	r1, r1, r4
 8003836:	6099      	str	r1, [r3, #8]
 8003838:	f8c3 b00c 	str.w	fp, [r3, #12]
					*dst++ = *src++ + input_offset;
 800383c:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8003840:	4442      	add	r2, r8
 8003842:	821a      	strh	r2, [r3, #16]
 8003844:	f8dc 2000 	ldr.w	r2, [ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003848:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 800384c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003850:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8003854:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003858:	fa90 f004 	sadd16	r0, r0, r4
 800385c:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8003860:	fa92 f204 	sadd16	r2, r2, r4
 8003864:	f8c3 0016 	str.w	r0, [r3, #22]
 8003868:	f8c3 2012 	str.w	r2, [r3, #18]
 800386c:	f8dc 2004 	ldr.w	r2, [ip, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003870:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003874:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003878:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 800387c:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003880:	fa90 f004 	sadd16	r0, r0, r4
 8003884:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8003888:	fa92 f204 	sadd16	r2, r2, r4
 800388c:	f8c3 001e 	str.w	r0, [r3, #30]
 8003890:	f8c3 201a 	str.w	r2, [r3, #26]
					*dst2++ = *src2++ + input_offset;
 8003894:	f99c 2008 	ldrsb.w	r2, [ip, #8]
 8003898:	4442      	add	r2, r8
 800389a:	845a      	strh	r2, [r3, #34]	; 0x22
 800389c:	f8de 2000 	ldr.w	r2, [lr]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80038a0:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80038a4:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80038a8:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 80038ac:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038b0:	fa90 f004 	sadd16	r0, r0, r4
 80038b4:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 80038b8:	fa92 f204 	sadd16	r2, r2, r4
 80038bc:	6298      	str	r0, [r3, #40]	; 0x28
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
 80038c0:	f8de 2004 	ldr.w	r2, [lr, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80038c4:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 80038c8:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80038cc:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 80038d0:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038d4:	fa90 f004 	sadd16	r0, r0, r4
 80038d8:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 80038dc:	fa92 f204 	sadd16	r2, r2, r4
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80038e2:	6318      	str	r0, [r3, #48]	; 0x30
					*dst3++ = *src3++ + input_offset;
 80038e4:	f99e 2008 	ldrsb.w	r2, [lr, #8]
 80038e8:	4442      	add	r2, r8
 80038ea:	869a      	strh	r2, [r3, #52]	; 0x34
			if (two_column_buf == runtime_buf + 2 * 9) {
 80038ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ee:	459a      	cmp	sl, r3
 80038f0:	f000 80f7 	beq.w	8003ae2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x456>
 80038f4:	3501      	adds	r5, #1
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80038f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f8:	b22d      	sxth	r5, r5
 80038fa:	429d      	cmp	r5, r3
 80038fc:	da01      	bge.n	8003902 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x276>
 80038fe:	4653      	mov	r3, sl
 8003900:	e75e      	b.n	80037c0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x134>
 8003902:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003906:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003908:	3302      	adds	r3, #2
 800390a:	3201      	adds	r2, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	b212      	sxth	r2, r2
 8003910:	930f      	str	r3, [sp, #60]	; 0x3c
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8003912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003914:	9210      	str	r2, [sp, #64]	; 0x40
 8003916:	429a      	cmp	r2, r3
 8003918:	f6ff af3d 	blt.w	8003796 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x10a>
			}
		}
	}

	/* left-over because odd number of output pixels */
	if (two_column_buf != runtime_buf) {
 800391c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800391e:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8003922:	459a      	cmp	sl, r3
 8003924:	d06f      	beq.n	8003a06 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x37a>
		const q7_t *ker_a = kernel;
		int i;

		for (i = 0; i < output_ch; i++) {
 8003926:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003928:	2b00      	cmp	r3, #0
 800392a:	d06c      	beq.n	8003a06 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x37a>

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 800392c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800392e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003930:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8003932:	440a      	add	r2, r1
 8003934:	4617      	mov	r7, r2
 8003936:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8003938:	f3c7 088f 	ubfx	r8, r7, #2, #16
 800393c:	f1a2 0c04 	sub.w	ip, r2, #4
 8003940:	9a2b      	ldr	r2, [sp, #172]	; 0xac
				sum = __SMLAD(ker_a2, ip_b2, sum);

				col_count--;
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 8003942:	f007 0703 	and.w	r7, r7, #3
 8003946:	f108 3eff 	add.w	lr, r8, #4294967295
 800394a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800394e:	4413      	add	r3, r2
 8003950:	fa1f fe8e 	uxth.w	lr, lr
 8003954:	469b      	mov	fp, r3
 8003956:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8003958:	f10e 0e01 	add.w	lr, lr, #1
 800395c:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 8003960:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8003964:	46f0      	mov	r8, lr
 8003966:	4696      	mov	lr, r2
			while (col_count) {
 8003968:	9b09      	ldr	r3, [sp, #36]	; 0x24
			q31_t sum = bias[i];
 800396a:	f85c 1f04 	ldr.w	r1, [ip, #4]!
			while (col_count) {
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 815b 	beq.w	8003c2a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x59e>
 8003974:	eb09 050a 	add.w	r5, r9, sl
 8003978:	982f      	ldr	r0, [sp, #188]	; 0xbc
 800397a:	f859 3b04 	ldr.w	r3, [r9], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800397e:	fa2f f293 	sxtb16	r2, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003982:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8003986:	eac2 4423 	pkhtb	r4, r2, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 800398a:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
    memcpy(&val, *in_q15, 4);
 800398e:	6802      	ldr	r2, [r0, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003990:	fb23 1102 	smlad	r1, r3, r2, r1
 8003994:	6843      	ldr	r3, [r0, #4]
 8003996:	3008      	adds	r0, #8
 8003998:	fb24 1103 	smlad	r1, r4, r3, r1
 800399c:	45a9      	cmp	r9, r5
 800399e:	d1ec      	bne.n	800397a <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2ee>
    *in_q15 += 2;
 80039a0:	4643      	mov	r3, r8
			while (col_count) {
 80039a2:	b1b7      	cbz	r7, 80039d2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x346>
				q7_t ker_a1 = *ker_a++;
				q15_t ip_b1 = *ip_as_col++;
				sum += ker_a1 * ip_b1;
 80039a4:	f999 2000 	ldrsb.w	r2, [r9]
			while (col_count) {
 80039a8:	2f01      	cmp	r7, #1
				sum += ker_a1 * ip_b1;
 80039aa:	8818      	ldrh	r0, [r3, #0]
 80039ac:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 80039b0:	f000 8138 	beq.w	8003c24 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x598>
				sum += ker_a1 * ip_b1;
 80039b4:	f999 2001 	ldrsb.w	r2, [r9, #1]
			while (col_count) {
 80039b8:	2f02      	cmp	r7, #2
				sum += ker_a1 * ip_b1;
 80039ba:	8858      	ldrh	r0, [r3, #2]
 80039bc:	fb10 1102 	smlabb	r1, r0, r2, r1
			while (col_count) {
 80039c0:	f000 8135 	beq.w	8003c2e <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x5a2>
				sum += ker_a1 * ip_b1;
 80039c4:	889a      	ldrh	r2, [r3, #4]
				q7_t ker_a1 = *ker_a++;
 80039c6:	f109 0903 	add.w	r9, r9, #3
				sum += ker_a1 * ip_b1;
 80039ca:	f919 3c01 	ldrsb.w	r3, [r9, #-1]
 80039ce:	fb12 1103 	smlabb	r1, r2, r3, r1
				col_count--;
			}

			sum = (float) sum * scales[i];
 80039d2:	ee07 1a90 	vmov	s15, r1
			sum += output_offset;
 80039d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
			sum = (float) sum * scales[i];
 80039d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039dc:	ecf6 7a01 	vldmia	r6!, {s15}
 80039e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e8:	ee17 3a90 	vmov	r3, s15
			sum += output_offset;
 80039ec:	4413      	add	r3, r2
			sum = MAX(sum, output_activation_min);
 80039ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bfb8      	it	lt
 80039f4:	4613      	movlt	r3, r2
			sum = MIN(sum, output_activation_max);
 80039f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bfa8      	it	ge
 80039fc:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 80039fe:	f80e 3b01 	strb.w	r3, [lr], #1
		for (i = 0; i < output_ch; i++) {
 8003a02:	45de      	cmp	lr, fp
 8003a04:	d1b0      	bne.n	8003968 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x2dc>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8003a06:	2000      	movs	r0, #0
 8003a08:	b01b      	add	sp, #108	; 0x6c
 8003a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				*dst_31++ = pad_out_q15x2;
 8003a0e:	9914      	ldr	r1, [sp, #80]	; 0x50
				*dst++ = pad_out;
 8003a10:	801f      	strh	r7, [r3, #0]
				*dst_31++ = pad_out_q15x2;
 8003a12:	f8c3 1002 	str.w	r1, [r3, #2]
				*dst_31++ = pad_out_q15x2;
 8003a16:	f8c3 1006 	str.w	r1, [r3, #6]
				*dst_31++ = pad_out_q15x2;
 8003a1a:	f8c3 100a 	str.w	r1, [r3, #10]
				*dst_31++ = pad_out_q15x2;
 8003a1e:	f8c3 100e 	str.w	r1, [r3, #14]
				if (base_idx_x != -1) {	//load all for now and unroll all
 8003a22:	1c51      	adds	r1, r2, #1
 8003a24:	f000 80d8 	beq.w	8003bd8 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x54c>
					src2 = input + (base_idx_x) * input_ch;
 8003a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a2c:	fb01 0202 	mla	r2, r1, r2, r0
					src3 = src2 + input_row_offset;
 8003a30:	980b      	ldr	r0, [sp, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 8003a32:	6811      	ldr	r1, [r2, #0]
 8003a34:	eb02 0c00 	add.w	ip, r2, r0
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a38:	fa2f f081 	sxtb16	r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8003a3c:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a40:	fa2f f181 	sxtb16	r1, r1
					q7_q15_offset_ele(src2, dst2)
 8003a44:	eac1 4e20 	pkhtb	lr, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a48:	fa9e fe04 	sadd16	lr, lr, r4
 8003a4c:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 8003a50:	fa91 f104 	sadd16	r1, r1, r4
 8003a54:	f8c3 e016 	str.w	lr, [r3, #22]
 8003a58:	f8c3 1012 	str.w	r1, [r3, #18]
 8003a5c:	6851      	ldr	r1, [r2, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a5e:	fa2f f081 	sxtb16	r0, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8003a62:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a66:	fa2f f181 	sxtb16	r1, r1
					q7_q15_offset_ele(src2, dst2)
 8003a6a:	eac1 4e20 	pkhtb	lr, r1, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a6e:	fa9e fe04 	sadd16	lr, lr, r4
 8003a72:	eac0 4101 	pkhbt	r1, r0, r1, lsl #16
 8003a76:	fa91 f104 	sadd16	r1, r1, r4
 8003a7a:	f8c3 101a 	str.w	r1, [r3, #26]
 8003a7e:	f8c3 e01e 	str.w	lr, [r3, #30]
					*dst2++ = *src2++ + input_offset;
 8003a82:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8003a86:	4442      	add	r2, r8
 8003a88:	845a      	strh	r2, [r3, #34]	; 0x22
 8003a8a:	f8dc 2000 	ldr.w	r2, [ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a8e:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003a92:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a96:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8003a9a:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a9e:	fa90 f004 	sadd16	r0, r0, r4
 8003aa2:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8003aa6:	fa92 f204 	sadd16	r2, r2, r4
 8003aaa:	6298      	str	r0, [r3, #40]	; 0x28
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
 8003aae:	f8dc 2004 	ldr.w	r2, [ip, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003ab2:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003ab6:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003aba:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8003abe:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003ac2:	fa90 f004 	sadd16	r0, r0, r4
 8003ac6:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8003aca:	fa92 f204 	sadd16	r2, r2, r4
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ad0:	6318      	str	r0, [r3, #48]	; 0x30
					*dst3++ = *src3++ + input_offset;
 8003ad2:	f99c 2008 	ldrsb.w	r2, [ip, #8]
 8003ad6:	4442      	add	r2, r8
 8003ad8:	869a      	strh	r2, [r3, #52]	; 0x34
			if (two_column_buf == runtime_buf + 2 * 9) {
 8003ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003adc:	459a      	cmp	sl, r3
 8003ade:	f47f af09 	bne.w	80038f4 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x268>
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8003ae2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8003ae4:	3501      	adds	r5, #1
 8003ae6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003ae8:	9602      	str	r6, [sp, #8]
 8003aea:	b22d      	sxth	r5, r5
 8003aec:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8003aee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8003af0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8003af2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003af4:	9601      	str	r6, [sp, #4]
 8003af6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8003af8:	9306      	str	r3, [sp, #24]
 8003afa:	9205      	str	r2, [sp, #20]
 8003afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003afe:	9104      	str	r1, [sp, #16]
 8003b00:	9003      	str	r0, [sp, #12]
 8003b02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b04:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8003b06:	9824      	ldr	r0, [sp, #144]	; 0x90
 8003b08:	9600      	str	r6, [sp, #0]
 8003b0a:	f000 fb43 	bl	8004194 <mat_mult_kernel3_input3_s8_s16_fpreq>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8003b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8003b10:	902b      	str	r0, [sp, #172]	; 0xac
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8003b12:	429d      	cmp	r5, r3
 8003b14:	f280 8082 	bge.w	8003c1c <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x590>
 8003b18:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 8003b1c:	4653      	mov	r3, sl
 8003b1e:	e64f      	b.n	80037c0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x134>
 8003b20:	9e11      	ldr	r6, [sp, #68]	; 0x44
					*dst++ = pad_out;
 8003b22:	801f      	strh	r7, [r3, #0]
					*dst++ = pad_out;
 8003b24:	805f      	strh	r7, [r3, #2]
					*dst++ = pad_out;
 8003b26:	809f      	strh	r7, [r3, #4]
					*dst2++ = pad_out;
 8003b28:	825f      	strh	r7, [r3, #18]
					*dst2++ = pad_out;
 8003b2a:	829f      	strh	r7, [r3, #20]
					*dst2++ = pad_out;
 8003b2c:	82df      	strh	r7, [r3, #22]
					*dst3++ = pad_out;
 8003b2e:	849f      	strh	r7, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 8003b30:	84df      	strh	r7, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 8003b32:	851f      	strh	r7, [r3, #40]	; 0x28
 8003b34:	6832      	ldr	r2, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003b36:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003b3a:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003b3e:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src, dst)
 8003b42:	eac2 4120 	pkhtb	r1, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003b46:	fa91 f104 	sadd16	r1, r1, r4
 8003b4a:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8003b4e:	fa92 f204 	sadd16	r2, r2, r4
 8003b52:	f8c3 100a 	str.w	r1, [r3, #10]
 8003b56:	f8c3 2006 	str.w	r2, [r3, #6]
					*dst++ = *src++ + input_offset;
 8003b5a:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8003b5e:	4442      	add	r2, r8
 8003b60:	81da      	strh	r2, [r3, #14]
					*dst++ = *src++ + input_offset;
 8003b62:	f996 2005 	ldrsb.w	r2, [r6, #5]
 8003b66:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003b68:	4442      	add	r2, r8
 8003b6a:	821a      	strh	r2, [r3, #16]
 8003b6c:	6832      	ldr	r2, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003b6e:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003b72:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003b76:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8003b7a:	eac2 4120 	pkhtb	r1, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003b7e:	fa91 f104 	sadd16	r1, r1, r4
 8003b82:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8003b86:	fa92 f204 	sadd16	r2, r2, r4
 8003b8a:	619a      	str	r2, [r3, #24]
 8003b8c:	61d9      	str	r1, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8003b8e:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8003b92:	4442      	add	r2, r8
 8003b94:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8003b96:	f996 2005 	ldrsb.w	r2, [r6, #5]
 8003b9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8003b9c:	4442      	add	r2, r8
 8003b9e:	845a      	strh	r2, [r3, #34]	; 0x22
 8003ba0:	6832      	ldr	r2, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003ba2:	fa2f f182 	sxtb16	r1, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003ba6:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003baa:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src3, dst3)
 8003bae:	eac2 4021 	pkhtb	r0, r2, r1, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bb2:	fa90 f004 	sadd16	r0, r0, r4
 8003bb6:	eac1 4202 	pkhbt	r2, r1, r2, lsl #16
 8003bba:	fa92 f204 	sadd16	r2, r2, r4
 8003bbe:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 8003bc2:	f8c3 002e 	str.w	r0, [r3, #46]	; 0x2e
					*dst3++ = *src3++ + input_offset;
 8003bc6:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8003bca:	4442      	add	r2, r8
 8003bcc:	865a      	strh	r2, [r3, #50]	; 0x32
					*dst3++ = *src3++ + input_offset;
 8003bce:	f996 2005 	ldrsb.w	r2, [r6, #5]
 8003bd2:	4442      	add	r2, r8
 8003bd4:	869a      	strh	r2, [r3, #52]	; 0x34
 8003bd6:	e689      	b.n	80038ec <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x260>
 8003bd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
					*dst2++ = pad_out;
 8003bda:	825f      	strh	r7, [r3, #18]
					*dst2++ = pad_out;
 8003bdc:	829f      	strh	r7, [r3, #20]
					*dst2++ = pad_out;
 8003bde:	82df      	strh	r7, [r3, #22]
					*dst3++ = pad_out;
 8003be0:	849f      	strh	r7, [r3, #36]	; 0x24
					*dst3++ = pad_out;
 8003be2:	84df      	strh	r7, [r3, #38]	; 0x26
					*dst3++ = pad_out;
 8003be4:	851f      	strh	r7, [r3, #40]	; 0x28
 8003be6:	6832      	ldr	r2, [r6, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003be8:	fa2f f082 	sxtb16	r0, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 8003bec:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003bf0:	fa2f f282 	sxtb16	r2, r2
					q7_q15_offset_ele(src2, dst2)
 8003bf4:	eac2 4120 	pkhtb	r1, r2, r0, asr #16
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bf8:	fa91 f104 	sadd16	r1, r1, r4
 8003bfc:	eac0 4202 	pkhbt	r2, r0, r2, lsl #16
 8003c00:	fa92 f204 	sadd16	r2, r2, r4
 8003c04:	619a      	str	r2, [r3, #24]
 8003c06:	61d9      	str	r1, [r3, #28]
					*dst2++ = *src2++ + input_offset;
 8003c08:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8003c0c:	4442      	add	r2, r8
 8003c0e:	841a      	strh	r2, [r3, #32]
					*dst2++ = *src2++ + input_offset;
 8003c10:	f996 2005 	ldrsb.w	r2, [r6, #5]
 8003c14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8003c16:	4442      	add	r2, r8
 8003c18:	845a      	strh	r2, [r3, #34]	; 0x22
 8003c1a:	e7c1      	b.n	8003ba0 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x514>
 8003c1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8003c1e:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
 8003c22:	e66f      	b.n	8003904 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x278>
				q7_t ker_a1 = *ker_a++;
 8003c24:	f109 0901 	add.w	r9, r9, #1
 8003c28:	e6d3      	b.n	80039d2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x346>
			while (col_count) {
 8003c2a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8003c2c:	e6b9      	b.n	80039a2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x316>
				q7_t ker_a1 = *ker_a++;
 8003c2e:	f109 0902 	add.w	r9, r9, #2
 8003c32:	e6ce      	b.n	80039d2 <convolve_s8_kernel3_inputch3_stride2_pad1_fpreq+0x346>

08003c34 <mat_mult_kernel_s8_s16_reordered_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	b093      	sub	sp, #76	; 0x4c
 8003c3a:	4683      	mov	fp, r0
 8003c3c:	460e      	mov	r6, r1
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8003c3e:	9821      	ldr	r0, [sp, #132]	; 0x84
		const int32_t *const output_bias, q7_t *out_0) {
 8003c40:	910b      	str	r1, [sp, #44]	; 0x2c
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	/* this loop over rows in A */
	while (row_count) {
 8003c42:	0851      	lsrs	r1, r2, #1
	q7_t *out_1 = out_0 + output_ch;
 8003c44:	eb00 0402 	add.w	r4, r0, r2
		const int32_t *const output_bias, q7_t *out_0) {
 8003c48:	f9bd 0074 	ldrsh.w	r0, [sp, #116]	; 0x74
 8003c4c:	9210      	str	r2, [sp, #64]	; 0x40
 8003c4e:	9007      	str	r0, [sp, #28]
 8003c50:	f9bd 0078 	ldrsh.w	r0, [sp, #120]	; 0x78
 8003c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c56:	9008      	str	r0, [sp, #32]
 8003c58:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
	q7_t *out_1 = out_0 + output_ch;
 8003c5c:	940e      	str	r4, [sp, #56]	; 0x38
		const int32_t *const output_bias, q7_t *out_0) {
 8003c5e:	9006      	str	r0, [sp, #24]
	while (row_count) {
 8003c60:	f000 80d8 	beq.w	8003e14 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1e0>
		q31_t ch_0_out_0 = *bias;
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		uint16_t col_count = num_col_a / 4;
 8003c64:	0885      	lsrs	r5, r0, #2
 8003c66:	3901      	subs	r1, #1
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8003c68:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8003c6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c6e:	461f      	mov	r7, r3
 8003c70:	b289      	uxth	r1, r1
 8003c72:	900c      	str	r0, [sp, #48]	; 0x30
 8003c74:	3210      	adds	r2, #16
 8003c76:	9820      	ldr	r0, [sp, #128]	; 0x80
 8003c78:	1e6b      	subs	r3, r5, #1
 8003c7a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		uint16_t col_count = num_col_a / 4;
 8003c7e:	950a      	str	r5, [sp, #40]	; 0x28
 8003c80:	3008      	adds	r0, #8
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	9209      	str	r2, [sp, #36]	; 0x24
 8003c86:	463a      	mov	r2, r7
 8003c88:	9003      	str	r0, [sp, #12]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003c8e:	3208      	adds	r2, #8
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	9111      	str	r1, [sp, #68]	; 0x44
 8003c94:	3002      	adds	r0, #2
 8003c96:	9202      	str	r2, [sp, #8]
 8003c98:	930d      	str	r3, [sp, #52]	; 0x34
 8003c9a:	9005      	str	r0, [sp, #20]
 8003c9c:	1ca0      	adds	r0, r4, #2
 8003c9e:	9004      	str	r0, [sp, #16]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8003ca0:	9b06      	ldr	r3, [sp, #24]
 8003ca2:	eb0b 0903 	add.w	r9, fp, r3
		const float scale_0 = scales[0];
 8003ca6:	9b02      	ldr	r3, [sp, #8]
 8003ca8:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 8003cac:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	f853 cc08 	ldr.w	ip, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 8003cb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
		/* accumulate over the vector */
		while (col_count) {
 8003cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8107 	beq.w	8003ed0 <mat_mult_kernel_s8_s16_reordered_fpreq+0x29c>
 8003cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		q31_t ch_1_out_1 = *bias++;
 8003cc4:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8003cc6:	4665      	mov	r5, ip
 8003cc8:	46ca      	mov	sl, r9
 8003cca:	445b      	add	r3, fp
		const q15_t *ip_b0 = input_b;
 8003ccc:	e9dd e80b 	ldrd	lr, r8, [sp, #44]	; 0x2c
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	f85b 2b04 	ldr.w	r2, [fp], #4
    memcpy(&val, *in_q15, 4);
 8003cd6:	f8de 7000 	ldr.w	r7, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
 8003cda:	ea4f 2632 	mov.w	r6, r2, ror #8
 8003cde:	f8d8 9000 	ldr.w	r9, [r8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003ce2:	fa2f f686 	sxtb16	r6, r6
 8003ce6:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003cea:	fb22 cc07 	smlad	ip, r2, r7, ip
    memcpy(&val, *in_q7, 4);
 8003cee:	f85a 3b04 	ldr.w	r3, [sl], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003cf2:	fa2f f483 	sxtb16	r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8003cf6:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003cfa:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003cfe:	fb22 5209 	smlad	r2, r2, r9, r5
 8003d02:	fb24 0007 	smlad	r0, r4, r7, r0
    memcpy(&val, *in_q15, 4);
 8003d06:	f8de 7004 	ldr.w	r7, [lr, #4]
 8003d0a:	f10e 0e08 	add.w	lr, lr, #8
 8003d0e:	fb24 1109 	smlad	r1, r4, r9, r1
 8003d12:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8003d16:	f108 0808 	add.w	r8, r8, #8
 8003d1a:	fb26 cc07 	smlad	ip, r6, r7, ip
 8003d1e:	fb26 2504 	smlad	r5, r6, r4, r2
 8003d22:	fb23 0007 	smlad	r0, r3, r7, r0
 8003d26:	fb23 1104 	smlad	r1, r3, r4, r1
		while (col_count) {
 8003d2a:	9b01      	ldr	r3, [sp, #4]
 8003d2c:	459b      	cmp	fp, r3
 8003d2e:	d1d0      	bne.n	8003cd2 <mat_mult_kernel_s8_s16_reordered_fpreq+0x9e>
 8003d30:	9b06      	ldr	r3, [sp, #24]
 8003d32:	449b      	add	fp, r3
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003d34:	ee07 ca10 	vmov	s14, ip
		ch_0_out_0 += out_offset;
 8003d38:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8003d3a:	9b02      	ldr	r3, [sp, #8]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003d3c:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8003d40:	ee07 5a10 	vmov	s14, r5
 8003d44:	3308      	adds	r3, #8
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
		ch_1_out_1 += out_offset;
 8003d46:	9d1c      	ldr	r5, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8003d48:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8003d4c:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003d50:	ee25 5a26 	vmul.f32	s10, s10, s13
 8003d54:	9302      	str	r3, [sp, #8]
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8003d56:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8003d5a:	ee07 1a10 	vmov	s14, r1
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8003d5e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003d62:	9f03      	ldr	r7, [sp, #12]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8003d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8003d68:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8003d6c:	3708      	adds	r7, #8
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	9703      	str	r7, [sp, #12]
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003d74:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8003d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003d7c:	ee17 0a10 	vmov	r0, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8003d80:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 8003d84:	4420      	add	r0, r4
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8003d86:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8003d8a:	ee17 1a10 	vmov	r1, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8003d8e:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_1_out_1 += out_offset;
 8003d92:	442b      	add	r3, r5
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8003d94:	9d08      	ldr	r5, [sp, #32]
		ch_0_out_1 += out_offset;
 8003d96:	4421      	add	r1, r4
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8003d98:	ee17 2a10 	vmov	r2, s14
		ch_1_out_0 += out_offset;
 8003d9c:	4422      	add	r2, r4
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8003d9e:	9c07      	ldr	r4, [sp, #28]
 8003da0:	42a0      	cmp	r0, r4
 8003da2:	bfb8      	it	lt
 8003da4:	4620      	movlt	r0, r4
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8003da6:	42a1      	cmp	r1, r4
 8003da8:	bfb8      	it	lt
 8003daa:	4621      	movlt	r1, r4
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8003dac:	42a2      	cmp	r2, r4
 8003dae:	bfb8      	it	lt
 8003db0:	4622      	movlt	r2, r4
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8003db2:	42a8      	cmp	r0, r5
 8003db4:	bfa8      	it	ge
 8003db6:	4628      	movge	r0, r5
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	bfb8      	it	lt
 8003dbc:	4623      	movlt	r3, r4
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8003dbe:	42a9      	cmp	r1, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8003dc0:	9c05      	ldr	r4, [sp, #20]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8003dc2:	bfa8      	it	ge
 8003dc4:	4629      	movge	r1, r5
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8003dc6:	42aa      	cmp	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8003dc8:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8003dcc:	bfa8      	it	ge
 8003dce:	462a      	movge	r2, r5
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8003dd0:	42ab      	cmp	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 8003dd2:	9804      	ldr	r0, [sp, #16]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8003dd4:	bfa8      	it	ge
 8003dd6:	462b      	movge	r3, r5
		*out_1++ = (q7_t) ch_0_out_1;
 8003dd8:	f800 1c02 	strb.w	r1, [r0, #-2]
		*out_0++ = (q7_t) ch_1_out_0;
 8003ddc:	f804 2c01 	strb.w	r2, [r4, #-1]
 8003de0:	1ca2      	adds	r2, r4, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8003de2:	f800 3c01 	strb.w	r3, [r0, #-1]
 8003de6:	1c83      	adds	r3, r0, #2
 8003de8:	9205      	str	r2, [sp, #20]
 8003dea:	9304      	str	r3, [sp, #16]
	while (row_count) {
 8003dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dee:	42bb      	cmp	r3, r7
 8003df0:	f47f af56 	bne.w	8003ca0 <mat_mult_kernel_s8_s16_reordered_fpreq+0x6c>
 8003df4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003df8:	3101      	adds	r1, #1
 8003dfa:	00cb      	lsls	r3, r1, #3
 8003dfc:	0049      	lsls	r1, r1, #1
 8003dfe:	441a      	add	r2, r3
 8003e00:	920f      	str	r2, [sp, #60]	; 0x3c
 8003e02:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e04:	441a      	add	r2, r3
 8003e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e08:	440b      	add	r3, r1
 8003e0a:	9220      	str	r2, [sp, #128]	; 0x80
 8003e0c:	9321      	str	r3, [sp, #132]	; 0x84
 8003e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e10:	440b      	add	r3, r1
 8003e12:	930e      	str	r3, [sp, #56]	; 0x38
		/* skip row */
		ip_a0 += num_col_a;
		row_count--;
	}

	if (output_ch & 1) {
 8003e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e16:	07da      	lsls	r2, r3, #31
 8003e18:	d554      	bpl.n	8003ec4 <mat_mult_kernel_s8_s16_reordered_fpreq+0x290>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;

		/* Init accumulator with bias for channel N + 1 */
		q31_t ch_0_out_0 = *bias;
 8003e1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8003e1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		q31_t ch_0_out_0 = *bias;
 8003e1e:	6819      	ldr	r1, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8003e20:	9b06      	ldr	r3, [sp, #24]
		q31_t ch_0_out_1 = ch_0_out_0;
 8003e22:	460a      	mov	r2, r1

		int32_t col_count = num_col_a / 4;
		while (col_count) {
 8003e24:	089d      	lsrs	r5, r3, #2
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8003e26:	eb06 0443 	add.w	r4, r6, r3, lsl #1
		while (col_count) {
 8003e2a:	d018      	beq.n	8003e5e <mat_mult_kernel_s8_s16_reordered_fpreq+0x22a>
    memcpy(&val, *in_q7, 4);
 8003e2c:	f85b 3b04 	ldr.w	r3, [fp], #4
    memcpy(&val, *in_q15, 4);
 8003e30:	6837      	ldr	r7, [r6, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 8003e32:	ea4f 2033 	mov.w	r0, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003e36:	fa2f f383 	sxtb16	r3, r3
 8003e3a:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003e3e:	fb23 1107 	smlad	r1, r3, r7, r1
 8003e42:	6827      	ldr	r7, [r4, #0]
 8003e44:	fb23 2207 	smlad	r2, r3, r7, r2
 8003e48:	6877      	ldr	r7, [r6, #4]
 8003e4a:	3408      	adds	r4, #8
 8003e4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003e50:	3608      	adds	r6, #8
 8003e52:	fb20 1107 	smlad	r1, r0, r7, r1
 8003e56:	fb20 2203 	smlad	r2, r0, r3, r2
 8003e5a:	3d01      	subs	r5, #1
 8003e5c:	d1e6      	bne.n	8003e2c <mat_mult_kernel_s8_s16_reordered_fpreq+0x1f8>
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8003e5e:	ee07 1a90 	vmov	s15, r1
 8003e62:	990f      	ldr	r1, [sp, #60]	; 0x3c
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8003e64:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 += out_offset;
 8003e68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8003e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e6e:	edd1 6a00 	vldr	s13, [r1]
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8003e72:	9808      	ldr	r0, [sp, #32]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8003e74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		*out_0++ = (q7_t) ch_0_out_0;
 8003e78:	9c21      	ldr	r4, [sp, #132]	; 0x84
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 8003e7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e82:	ee17 3a90 	vmov	r3, s15
		ch_0_out_0 += out_offset;
 8003e86:	4413      	add	r3, r2
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8003e88:	9a07      	ldr	r2, [sp, #28]
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bfb8      	it	lt
 8003e8e:	4613      	movlt	r3, r2
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8003e90:	4283      	cmp	r3, r0
 8003e92:	bfa8      	it	ge
 8003e94:	4603      	movge	r3, r0
		*out_0++ = (q7_t) ch_0_out_0;
 8003e96:	7023      	strb	r3, [r4, #0]
 8003e98:	4623      	mov	r3, r4
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8003e9a:	edd1 7a00 	vldr	s15, [r1]
		*out_0++ = (q7_t) ch_0_out_0;
 8003e9e:	3301      	adds	r3, #1
		ch_0_out_1 += out_offset;
 8003ea0:	991c      	ldr	r1, [sp, #112]	; 0x70
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_0_out_0;
 8003ea6:	9321      	str	r3, [sp, #132]	; 0x84
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 8003ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eac:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 += out_offset;
 8003eb0:	440b      	add	r3, r1
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	bfb8      	it	lt
 8003eb6:	4613      	movlt	r3, r2
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;
 8003eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8003eba:	4283      	cmp	r3, r0
 8003ebc:	bfa8      	it	ge
 8003ebe:	4603      	movge	r3, r0
		*out_1++ = (q7_t) ch_0_out_1;
 8003ec0:	7013      	strb	r3, [r2, #0]
 8003ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8003ec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ec6:	4413      	add	r3, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	b013      	add	sp, #76	; 0x4c
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (col_count) {
 8003ed0:	46cb      	mov	fp, r9
		q31_t ch_1_out_1 = *bias++;
 8003ed2:	4601      	mov	r1, r0
		q31_t ch_0_out_1 = *bias++;
 8003ed4:	4665      	mov	r5, ip
 8003ed6:	e72d      	b.n	8003d34 <mat_mult_kernel_s8_s16_reordered_fpreq+0x100>

08003ed8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	b095      	sub	sp, #84	; 0x54
 8003ede:	468c      	mov	ip, r1
 8003ee0:	900a      	str	r0, [sp, #40]	; 0x28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
	q7_t *mask1 = mask + output_ch / 8;
 8003ee2:	9c24      	ldr	r4, [sp, #144]	; 0x90
	q7_t *out_1 = out_0 + output_ch;
 8003ee4:	9823      	ldr	r0, [sp, #140]	; 0x8c
	q7_t *mask1 = mask + output_ch / 8;
 8003ee6:	eb04 04d2 	add.w	r4, r4, r2, lsr #3
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8003eea:	9212      	str	r2, [sp, #72]	; 0x48
	q7_t *out_1 = out_0 + output_ch;
 8003eec:	4410      	add	r0, r2
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8003eee:	f9bd 607c 	ldrsh.w	r6, [sp, #124]	; 0x7c
 8003ef2:	f9bd 7080 	ldrsh.w	r7, [sp, #128]	; 0x80

	uint16_t row_count = output_ch / 2;
	const q7_t *ip_a0 = input_a;
	int bit_starting_idx = 0;
	/* this loop over rows in A */
	while (row_count) {
 8003ef6:	0852      	lsrs	r2, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8003ef8:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
	q7_t *mask1 = mask + output_ch / 8;
 8003efc:	9402      	str	r4, [sp, #8]
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 8003efe:	910f      	str	r1, [sp, #60]	; 0x3c
 8003f00:	9604      	str	r6, [sp, #16]
 8003f02:	9707      	str	r7, [sp, #28]
 8003f04:	950d      	str	r5, [sp, #52]	; 0x34
 8003f06:	9c22      	ldr	r4, [sp, #136]	; 0x88
	while (row_count) {
 8003f08:	f000 8102 	beq.w	8004110 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x238>
		q31_t ch_0_out_0 = *bias;
		q31_t ch_0_out_1 = *bias++;
		q31_t ch_1_out_0 = *bias;
		q31_t ch_1_out_1 = *bias++;

		uint16_t col_count = num_col_a / 4;
 8003f0c:	08a9      	lsrs	r1, r5, #2
 8003f0e:	3a01      	subs	r2, #1
 8003f10:	3002      	adds	r0, #2
 8003f12:	3308      	adds	r3, #8
 8003f14:	910c      	str	r1, [sp, #48]	; 0x30
 8003f16:	b292      	uxth	r2, r2
 8003f18:	f104 0110 	add.w	r1, r4, #16
 8003f1c:	9005      	str	r0, [sp, #20]
 8003f1e:	9213      	str	r2, [sp, #76]	; 0x4c
 8003f20:	42b7      	cmp	r7, r6
 8003f22:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8003f26:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f28:	9308      	str	r3, [sp, #32]
 8003f2a:	bfa8      	it	ge
 8003f2c:	4637      	movge	r7, r6
 8003f2e:	920e      	str	r2, [sp, #56]	; 0x38
 8003f30:	3801      	subs	r0, #1
 8003f32:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003f34:	b283      	uxth	r3, r0
 8003f36:	f104 0008 	add.w	r0, r4, #8
 8003f3a:	3202      	adds	r2, #2
 8003f3c:	970b      	str	r7, [sp, #44]	; 0x2c
 8003f3e:	3301      	adds	r3, #1
 8003f40:	9009      	str	r0, [sp, #36]	; 0x24
 8003f42:	9206      	str	r2, [sp, #24]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8003f44:	eb0c 0245 	add.w	r2, ip, r5, lsl #1
 8003f48:	9210      	str	r2, [sp, #64]	; 0x40
	int bit_starting_idx = 0;
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	9203      	str	r2, [sp, #12]
 8003f4e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
 8003f52:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003f56:	9201      	str	r2, [sp, #4]
 8003f58:	9311      	str	r3, [sp, #68]	; 0x44
		const float scale_0 = scales[0];
 8003f5a:	9b08      	ldr	r3, [sp, #32]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8003f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		const float scale_0 = scales[0];
 8003f5e:	ed13 7a02 	vldr	s14, [r3, #-8]
		const float scale_1 = scales[1];
 8003f62:	ed53 7a01 	vldr	s15, [r3, #-4]
		q31_t ch_0_out_0 = *bias;
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8003f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		q31_t ch_0_out_0 = *bias;
 8003f6a:	f853 1c08 	ldr.w	r1, [r3, #-8]
		q31_t ch_1_out_0 = *bias;
 8003f6e:	f853 5c04 	ldr.w	r5, [r3, #-4]
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8003f72:	eb04 0802 	add.w	r8, r4, r2
		/* accumulate over the vector */
		while (col_count) {
 8003f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8106 	beq.w	800418a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2b2>
		q31_t ch_1_out_1 = *bias++;
 8003f7e:	46ab      	mov	fp, r5
		q31_t ch_0_out_1 = *bias++;
 8003f80:	4608      	mov	r0, r1
		while (col_count) {
 8003f82:	46a2      	mov	sl, r4
		const q15_t *ip_b0 = input_b;
 8003f84:	e9dd 7e0f 	ldrd	r7, lr, [sp, #60]	; 0x3c
    memcpy(&val, *in_q7, 4);
 8003f88:	f85a 2b04 	ldr.w	r2, [sl], #4
    memcpy(&val, *in_q15, 4);
 8003f8c:	f8d7 c000 	ldr.w	ip, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 8003f90:	ea4f 2632 	mov.w	r6, r2, ror #8
 8003f94:	f8de 9000 	ldr.w	r9, [lr]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f98:	fa2f f686 	sxtb16	r6, r6
 8003f9c:	fa2f f282 	sxtb16	r2, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003fa0:	fb22 110c 	smlad	r1, r2, ip, r1
    memcpy(&val, *in_q7, 4);
 8003fa4:	f858 3b04 	ldr.w	r3, [r8], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003fa8:	fa2f f483 	sxtb16	r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8003fac:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003fb0:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003fb4:	fb22 0209 	smlad	r2, r2, r9, r0
 8003fb8:	fb24 550c 	smlad	r5, r4, ip, r5
    memcpy(&val, *in_q15, 4);
 8003fbc:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	fb24 bb09 	smlad	fp, r4, r9, fp
 8003fc6:	f8de 4004 	ldr.w	r4, [lr, #4]
 8003fca:	f10e 0e08 	add.w	lr, lr, #8
 8003fce:	fb26 110c 	smlad	r1, r6, ip, r1
 8003fd2:	fb26 2004 	smlad	r0, r6, r4, r2
 8003fd6:	fb23 550c 	smlad	r5, r3, ip, r5
 8003fda:	fb23 bb04 	smlad	fp, r3, r4, fp
		while (col_count) {
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	429f      	cmp	r7, r3
 8003fe2:	d1d1      	bne.n	8003f88 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xb0>
 8003fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003fe8:	4413      	add	r3, r2
 8003fea:	930a      	str	r3, [sp, #40]	; 0x28
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

			col_count--;
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003fec:	ee06 1a90 	vmov	s13, r1
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	2201      	movs	r2, #1
		ch_0_out_0 += out_offset;
 8003ff4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8003ff6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003ffe:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004002:	7819      	ldrb	r1, [r3, #0]
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800400a:	ee16 3a90 	vmov	r3, s13
		ch_0_out_0 += out_offset;
 800400e:	4423      	add	r3, r4
		q7_t mask_value = 1;
		if (ch_0_out_0 < activation_min){
 8004010:	9c04      	ldr	r4, [sp, #16]
 8004012:	429c      	cmp	r4, r3
 8004014:	f300 8087 	bgt.w	8004126 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x24e>
			ch_0_out_0 = activation_min;
			mask_value = 0;
		}
		if (ch_0_out_0 > activation_max){
 8004018:	9c07      	ldr	r4, [sp, #28]
 800401a:	429c      	cmp	r4, r3
 800401c:	f2c0 80af 	blt.w	800417e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2a6>
			ch_0_out_0 = activation_max;
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx);
 8004020:	4311      	orrs	r1, r2
 8004022:	b249      	sxtb	r1, r1
		else
			BIT_CLEAR(*mask, bit_starting_idx);
		*out_0++ = (q7_t) ch_0_out_0;


		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8004024:	ee06 0a90 	vmov	s13, r0
 8004028:	9824      	ldr	r0, [sp, #144]	; 0x90
 800402a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800402e:	7001      	strb	r1, [r0, #0]
		*out_0++ = (q7_t) ch_0_out_0;
 8004030:	9906      	ldr	r1, [sp, #24]
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8004032:	ee26 7a87 	vmul.f32	s14, s13, s14
		*out_0++ = (q7_t) ch_0_out_0;
 8004036:	f801 3c02 	strb.w	r3, [r1, #-2]
		ch_0_out_1 += out_offset;
 800403a:	991e      	ldr	r1, [sp, #120]	; 0x78
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 800403c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004040:	ee17 3a10 	vmov	r3, s14
		ch_0_out_1 += out_offset;
 8004044:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_0_out_1 < activation_min){
 8004046:	9904      	ldr	r1, [sp, #16]
 8004048:	4299      	cmp	r1, r3
 800404a:	dd79      	ble.n	8004140 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x268>
 800404c:	9902      	ldr	r1, [sp, #8]
 800404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004050:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx);
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 8004052:	ea21 0102 	bic.w	r1, r1, r2
 8004056:	b249      	sxtb	r1, r1
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8004058:	ee07 5a10 	vmov	s14, r5
 800405c:	9a03      	ldr	r2, [sp, #12]
 800405e:	9802      	ldr	r0, [sp, #8]
 8004060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004064:	3201      	adds	r2, #1
 8004066:	7001      	strb	r1, [r0, #0]
 8004068:	2101      	movs	r1, #1
 800406a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
		*out_1++ = (q7_t) ch_0_out_1;
 8004072:	9905      	ldr	r1, [sp, #20]
 8004074:	b2d2      	uxtb	r2, r2
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8004076:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		*out_1++ = (q7_t) ch_0_out_1;
 800407a:	f801 3c02 	strb.w	r3, [r1, #-2]
		ch_1_out_0 += out_offset;
 800407e:	991e      	ldr	r1, [sp, #120]	; 0x78
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8004080:	ee17 3a10 	vmov	r3, s14
		ch_1_out_0 += out_offset;
 8004084:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_0 < activation_min){
 8004086:	9904      	ldr	r1, [sp, #16]
 8004088:	4299      	cmp	r1, r3
 800408a:	dd51      	ble.n	8004130 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x258>
 800408c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800408e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004090:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 8004092:	ea21 0102 	bic.w	r1, r1, r2
 8004096:	b249      	sxtb	r1, r1
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8004098:	ee07 ba10 	vmov	s14, fp
 800409c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800409e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040a2:	7001      	strb	r1, [r0, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 80040a4:	9906      	ldr	r1, [sp, #24]
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
		*out_0++ = (q7_t) ch_1_out_0;
 80040aa:	f801 3c01 	strb.w	r3, [r1, #-1]
		ch_1_out_1 += out_offset;
 80040ae:	991e      	ldr	r1, [sp, #120]	; 0x78
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80040b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b4:	ee17 3a90 	vmov	r3, s15
		ch_1_out_1 += out_offset;
 80040b8:	440b      	add	r3, r1
		mask_value = 1;
		if (ch_1_out_1 < activation_min){
 80040ba:	9904      	ldr	r1, [sp, #16]
 80040bc:	4299      	cmp	r1, r3
 80040be:	dd2a      	ble.n	8004116 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x23e>
 80040c0:	9902      	ldr	r1, [sp, #8]
 80040c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c4:	7809      	ldrb	r1, [r1, #0]
			mask_value = 0;
		}
		if (mask_value == 1)
			BIT_SET(*mask1, bit_starting_idx+1);
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 80040c6:	ea21 0202 	bic.w	r2, r1, r2
 80040ca:	b252      	sxtb	r2, r2
 80040cc:	9802      	ldr	r0, [sp, #8]
		*out_1++ = (q7_t) ch_1_out_1;
		scales += 2;

		bit_starting_idx += 2;
 80040ce:	9903      	ldr	r1, [sp, #12]
 80040d0:	7002      	strb	r2, [r0, #0]
		*out_1++ = (q7_t) ch_1_out_1;
 80040d2:	9a05      	ldr	r2, [sp, #20]
		bit_starting_idx += 2;
 80040d4:	3102      	adds	r1, #2
		*out_1++ = (q7_t) ch_1_out_1;
 80040d6:	f802 3c01 	strb.w	r3, [r2, #-1]
		if(bit_starting_idx == 8){
 80040da:	2908      	cmp	r1, #8
 80040dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
		bit_starting_idx += 2;
 80040de:	9103      	str	r1, [sp, #12]
 80040e0:	f103 0308 	add.w	r3, r3, #8
 80040e4:	9309      	str	r3, [sp, #36]	; 0x24
		if(bit_starting_idx == 8){
 80040e6:	d033      	beq.n	8004150 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x278>
 80040e8:	9a06      	ldr	r2, [sp, #24]
 80040ea:	3202      	adds	r2, #2
 80040ec:	9206      	str	r2, [sp, #24]
 80040ee:	9a05      	ldr	r2, [sp, #20]
 80040f0:	3202      	adds	r2, #2
 80040f2:	9205      	str	r2, [sp, #20]
 80040f4:	9a08      	ldr	r2, [sp, #32]
 80040f6:	3208      	adds	r2, #8
 80040f8:	9208      	str	r2, [sp, #32]
	while (row_count) {
 80040fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f47f af2c 	bne.w	8003f5a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x82>
 8004102:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004106:	3001      	adds	r0, #1
 8004108:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800410c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800410e:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8004110:	b015      	add	sp, #84	; 0x54
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ch_1_out_1 > activation_max){
 8004116:	9807      	ldr	r0, [sp, #28]
 8004118:	9902      	ldr	r1, [sp, #8]
 800411a:	4298      	cmp	r0, r3
 800411c:	7809      	ldrb	r1, [r1, #0]
 800411e:	db30      	blt.n	8004182 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2aa>
			BIT_SET(*mask1, bit_starting_idx+1);
 8004120:	430a      	orrs	r2, r1
 8004122:	b252      	sxtb	r2, r2
 8004124:	e7d2      	b.n	80040cc <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1f4>
 8004126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			BIT_CLEAR(*mask, bit_starting_idx);
 8004128:	ea21 0102 	bic.w	r1, r1, r2
 800412c:	b249      	sxtb	r1, r1
 800412e:	e779      	b.n	8004024 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x14c>
		if (ch_1_out_0 > activation_max){
 8004130:	9807      	ldr	r0, [sp, #28]
 8004132:	9924      	ldr	r1, [sp, #144]	; 0x90
 8004134:	4298      	cmp	r0, r3
 8004136:	7809      	ldrb	r1, [r1, #0]
 8004138:	db1f      	blt.n	800417a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2a2>
			BIT_SET(*mask, bit_starting_idx+1);
 800413a:	4311      	orrs	r1, r2
 800413c:	b249      	sxtb	r1, r1
 800413e:	e7ab      	b.n	8004098 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1c0>
		if (ch_0_out_1 > activation_max){
 8004140:	9807      	ldr	r0, [sp, #28]
 8004142:	9902      	ldr	r1, [sp, #8]
 8004144:	4298      	cmp	r0, r3
 8004146:	7809      	ldrb	r1, [r1, #0]
 8004148:	db1d      	blt.n	8004186 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2ae>
			BIT_SET(*mask1, bit_starting_idx);
 800414a:	4311      	orrs	r1, r2
 800414c:	b249      	sxtb	r1, r1
 800414e:	e783      	b.n	8004058 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x180>
			mask++;
 8004150:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004152:	3201      	adds	r2, #1
 8004154:	9224      	str	r2, [sp, #144]	; 0x90
			mask1++;
 8004156:	4602      	mov	r2, r0
 8004158:	3201      	adds	r2, #1
 800415a:	9202      	str	r2, [sp, #8]
 800415c:	9a06      	ldr	r2, [sp, #24]
 800415e:	3202      	adds	r2, #2
 8004160:	9206      	str	r2, [sp, #24]
 8004162:	9a05      	ldr	r2, [sp, #20]
 8004164:	3202      	adds	r2, #2
 8004166:	9205      	str	r2, [sp, #20]
 8004168:	9a08      	ldr	r2, [sp, #32]
 800416a:	3208      	adds	r2, #8
 800416c:	9208      	str	r2, [sp, #32]
	while (row_count) {
 800416e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004170:	429a      	cmp	r2, r3
 8004172:	d0c6      	beq.n	8004102 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x22a>
			bit_starting_idx = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	e6ef      	b.n	8003f5a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x82>
 800417a:	4603      	mov	r3, r0
 800417c:	e789      	b.n	8004092 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1ba>
 800417e:	4623      	mov	r3, r4
 8004180:	e7d2      	b.n	8004128 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x250>
 8004182:	4603      	mov	r3, r0
 8004184:	e79f      	b.n	80040c6 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1ee>
 8004186:	4603      	mov	r3, r0
 8004188:	e763      	b.n	8004052 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x17a>
		while (col_count) {
 800418a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		q31_t ch_1_out_1 = *bias++;
 800418e:	46ab      	mov	fp, r5
		q31_t ch_0_out_1 = *bias++;
 8004190:	4608      	mov	r0, r1
 8004192:	e72b      	b.n	8003fec <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x114>

08004194 <mat_mult_kernel3_input3_s8_s16_fpreq>:

q7_t* mat_mult_kernel3_input3_s8_s16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	b087      	sub	sp, #28
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 800419a:	9815      	ldr	r0, [sp, #84]	; 0x54
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 800419c:	9204      	str	r2, [sp, #16]
	q7_t *out_1 = out_0 + output_ch;
 800419e:	4410      	add	r0, r2
	const int32_t *bias = output_bias;

	uint16_t row_count = output_ch / 2;
	const q15_t *ksrc = &kbuf[0];
	/* this loop over rows in A */
	while (row_count) {
 80041a0:	0852      	lsrs	r2, r2, #1
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 80041a2:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80041a6:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 80041aa:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
 80041ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
	while (row_count) {
 80041b0:	f000 8157 	beq.w	8004462 <mat_mult_kernel3_input3_s8_s16_fpreq+0x2ce>
 80041b4:	3308      	adds	r3, #8
 80041b6:	3a01      	subs	r2, #1
 80041b8:	f105 0410 	add.w	r4, r5, #16
 80041bc:	3002      	adds	r0, #2
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	b292      	uxth	r2, r2
 80041c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 80041c4:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 80041c8:	f105 0908 	add.w	r9, r5, #8
 80041cc:	9001      	str	r0, [sp, #4]
 80041ce:	3302      	adds	r3, #2
 80041d0:	9205      	str	r2, [sp, #20]
 80041d2:	9302      	str	r3, [sp, #8]
 80041d4:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 80041d8:	9303      	str	r3, [sp, #12]
 80041da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80041dc:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
		const q31_t *ip31_b0 = ip_b0;
		const q31_t *ip31_b1 = ip_b1;
		const float scale_0 = scales[0];
 80041e0:	9b00      	ldr	r3, [sp, #0]
 80041e2:	6808      	ldr	r0, [r1, #0]
 80041e4:	ed53 6a02 	vldr	s13, [r3, #-8]
		const float scale_1 = scales[1];
 80041e8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80041ec:	f8d8 2000 	ldr.w	r2, [r8]
		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 80041f0:	f85e 4c6c 	ldr.w	r4, [lr, #-108]
 80041f4:	f859 5c08 	ldr.w	r5, [r9, #-8]
 80041f8:	fb24 5300 	smlad	r3, r4, r0, r5
 80041fc:	fb24 5402 	smlad	r4, r4, r2, r5
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 8004200:	f85e 7c36 	ldr.w	r7, [lr, #-54]
 8004204:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8004208:	fb27 6000 	smlad	r0, r7, r0, r6
 800420c:	fb27 6202 	smlad	r2, r7, r2, r6
 8004210:	684d      	ldr	r5, [r1, #4]
 8004212:	f8d8 7004 	ldr.w	r7, [r8, #4]
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 8004216:	f85e 6c68 	ldr.w	r6, [lr, #-104]
 800421a:	fb26 3305 	smlad	r3, r6, r5, r3
 800421e:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 8004222:	f85e 6c32 	ldr.w	r6, [lr, #-50]
 8004226:	fb26 0005 	smlad	r0, r6, r5, r0
 800422a:	fb26 2707 	smlad	r7, r6, r7, r2
 800422e:	688a      	ldr	r2, [r1, #8]
 8004230:	f8d8 c008 	ldr.w	ip, [r8, #8]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 8004234:	f85e 5c64 	ldr.w	r5, [lr, #-100]
 8004238:	fb25 3302 	smlad	r3, r5, r2, r3
 800423c:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 8004240:	f85e 6c2e 	ldr.w	r6, [lr, #-46]
 8004244:	fb26 0002 	smlad	r0, r6, r2, r0
 8004248:	fb26 760c 	smlad	r6, r6, ip, r7
 800424c:	68ca      	ldr	r2, [r1, #12]
 800424e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 8004252:	f85e 5c60 	ldr.w	r5, [lr, #-96]
 8004256:	fb25 3302 	smlad	r3, r5, r2, r3
 800425a:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 800425e:	f85e 5c2a 	ldr.w	r5, [lr, #-42]
 8004262:	fb25 0002 	smlad	r0, r5, r2, r0
 8004266:	fb25 6c0c 	smlad	ip, r5, ip, r6
 800426a:	690e      	ldr	r6, [r1, #16]
 800426c:	f8d8 5010 	ldr.w	r5, [r8, #16]

		//------------------12
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[4], b0, ch_0_out_0);
 8004270:	f85e 2c5c 	ldr.w	r2, [lr, #-92]
 8004274:	fb22 3306 	smlad	r3, r2, r6, r3
 8004278:	fb22 4405 	smlad	r4, r2, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[4], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[4], b0, ch_1_out_0);
 800427c:	f85e 2c26 	ldr.w	r2, [lr, #-38]
 8004280:	fb22 0006 	smlad	r0, r2, r6, r0
 8004284:	fb22 c505 	smlad	r5, r2, r5, ip
 8004288:	694e      	ldr	r6, [r1, #20]
 800428a:	f8d8 2014 	ldr.w	r2, [r8, #20]
		ch_1_out_1 = __SMLAD(ksrc2_31[4], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[5], b0, ch_0_out_0);
 800428e:	f85e 7c58 	ldr.w	r7, [lr, #-88]
 8004292:	fb27 3306 	smlad	r3, r7, r6, r3
 8004296:	fb27 4402 	smlad	r4, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[5], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[5], b0, ch_1_out_0);
 800429a:	f85e 7c22 	ldr.w	r7, [lr, #-34]
 800429e:	fb27 0006 	smlad	r0, r7, r6, r0
 80042a2:	fb27 5202 	smlad	r2, r7, r2, r5
 80042a6:	698d      	ldr	r5, [r1, #24]
 80042a8:	f8d8 7018 	ldr.w	r7, [r8, #24]
		ch_1_out_1 = __SMLAD(ksrc2_31[5], b1, ch_1_out_1);

		//------------------16
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[6], b0, ch_0_out_0);
 80042ac:	f85e 6c54 	ldr.w	r6, [lr, #-84]
 80042b0:	fb26 3305 	smlad	r3, r6, r5, r3
 80042b4:	fb26 4407 	smlad	r4, r6, r7, r4
		ch_0_out_1 = __SMLAD(ksrc_31[6], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[6], b0, ch_1_out_0);
 80042b8:	f85e 6c1e 	ldr.w	r6, [lr, #-30]
 80042bc:	fb26 0005 	smlad	r0, r6, r5, r0
 80042c0:	fb26 2707 	smlad	r7, r6, r7, r2
 80042c4:	69ca      	ldr	r2, [r1, #28]
 80042c6:	f8d8 c01c 	ldr.w	ip, [r8, #28]
		ch_1_out_1 = __SMLAD(ksrc2_31[6], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[7], b0, ch_0_out_0);
 80042ca:	f85e 5c50 	ldr.w	r5, [lr, #-80]
 80042ce:	fb25 3302 	smlad	r3, r5, r2, r3
 80042d2:	fb25 440c 	smlad	r4, r5, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[7], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[7], b0, ch_1_out_0);
 80042d6:	f85e 6c1a 	ldr.w	r6, [lr, #-26]
 80042da:	fb26 0002 	smlad	r0, r6, r2, r0
 80042de:	fb26 760c 	smlad	r6, r6, ip, r7
 80042e2:	6a0a      	ldr	r2, [r1, #32]
 80042e4:	f8d8 c020 	ldr.w	ip, [r8, #32]
		ch_1_out_1 = __SMLAD(ksrc2_31[7], b1, ch_1_out_1);

		//------------------20
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[8], b0, ch_0_out_0);
 80042e8:	f85e 7c4c 	ldr.w	r7, [lr, #-76]
 80042ec:	fb27 3302 	smlad	r3, r7, r2, r3
 80042f0:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[8], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[8], b0, ch_1_out_0);
 80042f4:	f85e 5c16 	ldr.w	r5, [lr, #-22]
 80042f8:	fb25 0002 	smlad	r0, r5, r2, r0
 80042fc:	fb25 6c0c 	smlad	ip, r5, ip, r6
 8004300:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004302:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
		ch_1_out_1 = __SMLAD(ksrc2_31[8], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[9], b0, ch_0_out_0);
 8004306:	f85e 7c48 	ldr.w	r7, [lr, #-72]
 800430a:	fb27 3306 	smlad	r3, r7, r6, r3
 800430e:	fb27 4405 	smlad	r4, r7, r5, r4
		ch_0_out_1 = __SMLAD(ksrc_31[9], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[9], b0, ch_1_out_0);
 8004312:	f85e 2c12 	ldr.w	r2, [lr, #-18]
 8004316:	fb22 0006 	smlad	r0, r2, r6, r0
 800431a:	fb22 c505 	smlad	r5, r2, r5, ip
 800431e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004320:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
		ch_1_out_1 = __SMLAD(ksrc2_31[9], b1, ch_1_out_1);

		//------------------24
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[10], b0, ch_0_out_0);
 8004324:	f85e 7c44 	ldr.w	r7, [lr, #-68]
 8004328:	fb27 3306 	smlad	r3, r7, r6, r3
 800432c:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[10], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[10], b0, ch_1_out_0);
 8004330:	f85e 2c0e 	ldr.w	r2, [lr, #-14]
 8004334:	fb22 0006 	smlad	r0, r2, r6, r0
 8004338:	fb22 520c 	smlad	r2, r2, ip, r5
 800433c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 800433e:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
		ch_1_out_1 = __SMLAD(ksrc2_31[10], b1, ch_1_out_1);

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);

		ch_0_out_0 = __SMLAD(ksrc_31[11], b0, ch_0_out_0);
 8004342:	f85e 7c40 	ldr.w	r7, [lr, #-64]
 8004346:	fb27 3306 	smlad	r3, r7, r6, r3
 800434a:	fb27 440c 	smlad	r4, r7, ip, r4
		ch_0_out_1 = __SMLAD(ksrc_31[11], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[11], b0, ch_1_out_0);
 800434e:	f85e 5c0a 	ldr.w	r5, [lr, #-10]
 8004352:	fb25 0006 	smlad	r0, r5, r6, r0
 8004356:	fb25 2c0c 	smlad	ip, r5, ip, r2
 800435a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800435c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
		ch_1_out_1 = __SMLAD(ksrc2_31[11], b1, ch_1_out_1);

		//------------------25,26,27
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
		ch_0_out_0 = __SMLAD(ksrc_31[12], b0, ch_0_out_0);
 8004360:	f85e 7c3c 	ldr.w	r7, [lr, #-60]
 8004364:	fb27 3306 	smlad	r3, r7, r6, r3
 8004368:	fb27 4702 	smlad	r7, r7, r2, r4
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
 800436c:	f85e 5c06 	ldr.w	r5, [lr, #-6]
 8004370:	fb25 0606 	smlad	r6, r5, r6, r0
 8004374:	fb25 c502 	smlad	r5, r5, r2, ip
 8004378:	9a00      	ldr	r2, [sp, #0]
 800437a:	f109 0908 	add.w	r9, r9, #8
		ch_1_out_1 = __SMLAD(ksrc2_31[12], b1, ch_1_out_1);
		q15_t _b0 = *ip_b0++;
		q15_t _b1 = *ip_b1++;

		ch_0_out_0 += ksrc[26] * _b0;
 800437e:	f93e 4c38 	ldrsh.w	r4, [lr, #-56]
 8004382:	f10e 0e6c 	add.w	lr, lr, #108	; 0x6c
		q15_t _b0 = *ip_b0++;
 8004386:	f9b1 0034 	ldrsh.w	r0, [r1, #52]	; 0x34
 800438a:	3208      	adds	r2, #8
		q15_t _b1 = *ip_b1++;
 800438c:	f9b8 c034 	ldrsh.w	ip, [r8, #52]	; 0x34
		ch_0_out_0 += ksrc[26] * _b0;
 8004390:	fb04 3300 	mla	r3, r4, r0, r3
 8004394:	9200      	str	r2, [sp, #0]
		ch_0_out_1 += ksrc[26] * _b1;
 8004396:	fb04 740c 	mla	r4, r4, ip, r7
		ch_1_out_0 += ksrc2[26] * _b0;
 800439a:	f93e 2c6e 	ldrsh.w	r2, [lr, #-110]
		ch_0_out_0 += ksrc[26] * _b0;
 800439e:	ee05 3a10 	vmov	s10, r3
		ch_1_out_0 += ksrc2[26] * _b0;
 80043a2:	fb00 6002 	mla	r0, r0, r2, r6
		ch_0_out_0 += out_offset;
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
		*out_0++ = (q7_t) ch_0_out_0;

		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80043a6:	ee07 4a10 	vmov	s14, r4
		ch_1_out_1 += ksrc2[26] * _b1;
 80043aa:	fb0c 5202 	mla	r2, ip, r2, r5
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80043ae:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80043b2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		ch_0_out_1 += out_offset;
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
		*out_1++ = (q7_t) ch_0_out_1;

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80043b6:	ee07 0a10 	vmov	s14, r0
		ch_0_out_0 += out_offset;
 80043ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80043bc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
		ch_1_out_0 += out_offset;
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
		*out_0++ = (q7_t) ch_1_out_0;

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80043c0:	ee07 2a10 	vmov	s14, r2
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80043c4:	ee25 5a26 	vmul.f32	s10, s10, s13
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80043c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80043cc:	ee66 6a26 	vmul.f32	s13, s12, s13
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80043d0:	ee25 6aa7 	vmul.f32	s12, s11, s15
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80043d4:	ee67 7a27 	vmul.f32	s15, s14, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80043d8:	eebd 7ac5 	vcvt.s32.f32	s14, s10
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80043dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80043e0:	ee17 4a10 	vmov	r4, s14
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80043e4:	eebd 7ae6 	vcvt.s32.f32	s14, s13
		ch_0_out_0 += out_offset;
 80043e8:	442c      	add	r4, r5
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 80043ea:	ee17 3a90 	vmov	r3, s15
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 80043ee:	ee17 0a10 	vmov	r0, s14
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80043f2:	eebd 7ac6 	vcvt.s32.f32	s14, s12
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80043f6:	4554      	cmp	r4, sl
		ch_1_out_1 += out_offset;
 80043f8:	442b      	add	r3, r5
		ch_0_out_1 += out_offset;
 80043fa:	4428      	add	r0, r5
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80043fc:	ee17 2a10 	vmov	r2, s14
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8004400:	bfb8      	it	lt
 8004402:	4654      	movlt	r4, sl
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8004404:	4550      	cmp	r0, sl
		ch_1_out_0 += out_offset;
 8004406:	442a      	add	r2, r5
		*out_0++ = (q7_t) ch_0_out_0;
 8004408:	9d02      	ldr	r5, [sp, #8]
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800440a:	bfb8      	it	lt
 800440c:	4650      	movlt	r0, sl
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800440e:	4552      	cmp	r2, sl
 8004410:	bfb8      	it	lt
 8004412:	4652      	movlt	r2, sl
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8004414:	455c      	cmp	r4, fp
 8004416:	bfa8      	it	ge
 8004418:	465c      	movge	r4, fp
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800441a:	4553      	cmp	r3, sl
 800441c:	bfb8      	it	lt
 800441e:	4653      	movlt	r3, sl
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8004420:	4558      	cmp	r0, fp
		*out_0++ = (q7_t) ch_0_out_0;
 8004422:	f805 4c02 	strb.w	r4, [r5, #-2]
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8004426:	bfa8      	it	ge
 8004428:	4658      	movge	r0, fp
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800442a:	455a      	cmp	r2, fp
		*out_1++ = (q7_t) ch_0_out_1;
 800442c:	9c01      	ldr	r4, [sp, #4]
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800442e:	bfa8      	it	ge
 8004430:	465a      	movge	r2, fp
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8004432:	455b      	cmp	r3, fp
		*out_1++ = (q7_t) ch_0_out_1;
 8004434:	f804 0c02 	strb.w	r0, [r4, #-2]
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8004438:	bfa8      	it	ge
 800443a:	465b      	movge	r3, fp
		*out_0++ = (q7_t) ch_1_out_0;
 800443c:	f805 2c01 	strb.w	r2, [r5, #-1]
 8004440:	1caa      	adds	r2, r5, #2
		*out_1++ = (q7_t) ch_1_out_1;
 8004442:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004446:	1ca3      	adds	r3, r4, #2
 8004448:	9202      	str	r2, [sp, #8]
 800444a:	9301      	str	r3, [sp, #4]
	while (row_count) {
 800444c:	9b03      	ldr	r3, [sp, #12]
 800444e:	454b      	cmp	r3, r9
 8004450:	f47f aec6 	bne.w	80041e0 <mat_mult_kernel3_input3_s8_s16_fpreq+0x4c>
 8004454:	9805      	ldr	r0, [sp, #20]
 8004456:	9b04      	ldr	r3, [sp, #16]
 8004458:	3001      	adds	r0, #1
 800445a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800445e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004460:	4418      	add	r0, r3

	out_0 += output_ch;

	/* return the new output pointer with offset */
	return out_0;
}
 8004462:	b007      	add	sp, #28
 8004464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004468 <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	b089      	sub	sp, #36	; 0x24
 800446e:	f8bd c048 	ldrh.w	ip, [sp, #72]	; 0x48
 8004472:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8004476:	9006      	str	r0, [sp, #24]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 8004478:	fb05 f00c 	mul.w	r0, r5, ip
{
 800447c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8004480:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
	const int divider_half = ((sample_h * sample_w) / 2);
 8004484:	9001      	str	r0, [sp, #4]
 8004486:	1040      	asrs	r0, r0, #1
{
 8004488:	9107      	str	r1, [sp, #28]
	const int divider_half = ((sample_h * sample_w) / 2);
 800448a:	9003      	str	r0, [sp, #12]
	for(c = 0; c < input_c; c++){
 800448c:	2b00      	cmp	r3, #0
 800448e:	d053      	beq.n	8004538 <avg_pooling+0xd0>
 8004490:	2900      	cmp	r1, #0
 8004492:	d051      	beq.n	8004538 <avg_pooling+0xd0>
 8004494:	f1bb 0f00 	cmp.w	fp, #0
 8004498:	d04e      	beq.n	8004538 <avg_pooling+0xd0>
 800449a:	fb02 fe03 	mul.w	lr, r2, r3
 800449e:	2200      	movs	r2, #0
 80044a0:	9205      	str	r2, [sp, #20]
 80044a2:	fb03 f205 	mul.w	r2, r3, r5
 80044a6:	9202      	str	r2, [sp, #8]
		for(h = 0; h < output_h; h++){
 80044a8:	2200      	movs	r2, #0
 80044aa:	9204      	str	r2, [sp, #16]
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
				out = TN_MAX(out, out_activation_min);
				out = TN_MIN(out, out_activation_max);
				output[(w + h * output_w) * input_c + c] = out;
 80044ac:	fb02 f80b 	mul.w	r8, r2, fp
			for(w = 0; w < output_w; w++){
 80044b0:	f04f 0a00 	mov.w	sl, #0
					int height = sh + h * sample_h;
 80044b4:	fb02 f90c 	mul.w	r9, r2, ip
 80044b8:	9a05      	ldr	r2, [sp, #20]
 80044ba:	fb03 2808 	mla	r8, r3, r8, r2
 80044be:	fb0e 2909 	mla	r9, lr, r9, r2
 80044c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80044c4:	4490      	add	r8, r2
 80044c6:	9a06      	ldr	r2, [sp, #24]
 80044c8:	4491      	add	r9, r2
				for(sh = 0; sh < sample_h; sh++){
 80044ca:	f1bc 0f00 	cmp.w	ip, #0
 80044ce:	d036      	beq.n	800453e <avg_pooling+0xd6>
				int avg = 0;
 80044d0:	2000      	movs	r0, #0
				for(sh = 0; sh < sample_h; sh++){
 80044d2:	464f      	mov	r7, r9
 80044d4:	4606      	mov	r6, r0
					for(sw = 0; sw < sample_w; sw++){
 80044d6:	b145      	cbz	r5, 80044ea <avg_pooling+0x82>
 80044d8:	4639      	mov	r1, r7
 80044da:	2200      	movs	r2, #0
 80044dc:	3201      	adds	r2, #1
						avg += input[(width + height * input_w) * input_c + c];
 80044de:	f991 4000 	ldrsb.w	r4, [r1]
 80044e2:	4419      	add	r1, r3
					for(sw = 0; sw < sample_w; sw++){
 80044e4:	4295      	cmp	r5, r2
						avg += input[(width + height * input_w) * input_c + c];
 80044e6:	4420      	add	r0, r4
					for(sw = 0; sw < sample_w; sw++){
 80044e8:	d1f8      	bne.n	80044dc <avg_pooling+0x74>
				for(sh = 0; sh < sample_h; sh++){
 80044ea:	3601      	adds	r6, #1
 80044ec:	4477      	add	r7, lr
 80044ee:	45b4      	cmp	ip, r6
 80044f0:	d1f1      	bne.n	80044d6 <avg_pooling+0x6e>
				if (avg > 0)
 80044f2:	2800      	cmp	r0, #0
 80044f4:	dd24      	ble.n	8004540 <avg_pooling+0xd8>
					avg += divider_half;
 80044f6:	9a03      	ldr	r2, [sp, #12]
 80044f8:	4402      	add	r2, r0
 80044fa:	9902      	ldr	r1, [sp, #8]
			for(w = 0; w < output_w; w++){
 80044fc:	f10a 0a01 	add.w	sl, sl, #1
 8004500:	4489      	add	r9, r1
				int out = avg / (sample_h * sample_w);
 8004502:	9901      	ldr	r1, [sp, #4]
 8004504:	fb92 f2f1 	sdiv	r2, r2, r1
				out = TN_MAX(out, out_activation_min);
 8004508:	9916      	ldr	r1, [sp, #88]	; 0x58
 800450a:	428a      	cmp	r2, r1
 800450c:	bfb8      	it	lt
 800450e:	460a      	movlt	r2, r1
				out = TN_MIN(out, out_activation_max);
 8004510:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004512:	428a      	cmp	r2, r1
 8004514:	bfa8      	it	ge
 8004516:	460a      	movge	r2, r1
			for(w = 0; w < output_w; w++){
 8004518:	45da      	cmp	sl, fp
				output[(w + h * output_w) * input_c + c] = out;
 800451a:	f888 2000 	strb.w	r2, [r8]
 800451e:	4498      	add	r8, r3
			for(w = 0; w < output_w; w++){
 8004520:	d1d3      	bne.n	80044ca <avg_pooling+0x62>
		for(h = 0; h < output_h; h++){
 8004522:	9a04      	ldr	r2, [sp, #16]
 8004524:	9907      	ldr	r1, [sp, #28]
 8004526:	3201      	adds	r2, #1
 8004528:	428a      	cmp	r2, r1
 800452a:	9204      	str	r2, [sp, #16]
 800452c:	dbbe      	blt.n	80044ac <avg_pooling+0x44>
	for(c = 0; c < input_c; c++){
 800452e:	9a05      	ldr	r2, [sp, #20]
 8004530:	3201      	adds	r2, #1
 8004532:	429a      	cmp	r2, r3
 8004534:	9205      	str	r2, [sp, #20]
 8004536:	d1b7      	bne.n	80044a8 <avg_pooling+0x40>
			}
		}
	}
}
 8004538:	b009      	add	sp, #36	; 0x24
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int avg = 0;
 800453e:	4660      	mov	r0, ip
					avg -= divider_half;
 8004540:	9a03      	ldr	r2, [sp, #12]
 8004542:	1a82      	subs	r2, r0, r2
 8004544:	e7d9      	b.n	80044fa <avg_pooling+0x92>
 8004546:	bf00      	nop

08004548 <_ZdaPv>:
 8004548:	f000 b800 	b.w	800454c <_ZdlPv>

0800454c <_ZdlPv>:
 800454c:	f000 b848 	b.w	80045e0 <free>

08004550 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4c08      	ldr	r4, [pc, #32]	; (8004574 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8004554:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8004558:	4628      	mov	r0, r5
 800455a:	60e5      	str	r5, [r4, #12]
 800455c:	f000 f838 	bl	80045d0 <malloc>
 8004560:	60a0      	str	r0, [r4, #8]
 8004562:	b120      	cbz	r0, 800456e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8004564:	2300      	movs	r3, #0
 8004566:	6060      	str	r0, [r4, #4]
 8004568:	e9c0 5300 	strd	r5, r3, [r0]
 800456c:	bd38      	pop	{r3, r4, r5, pc}
 800456e:	60e0      	str	r0, [r4, #12]
 8004570:	6060      	str	r0, [r4, #4]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	20007988 	.word	0x20007988

08004578 <__errno>:
 8004578:	4b01      	ldr	r3, [pc, #4]	; (8004580 <__errno+0x8>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000a40 	.word	0x20000a40

08004584 <__libc_init_array>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	4e0d      	ldr	r6, [pc, #52]	; (80045bc <__libc_init_array+0x38>)
 8004588:	4c0d      	ldr	r4, [pc, #52]	; (80045c0 <__libc_init_array+0x3c>)
 800458a:	1ba4      	subs	r4, r4, r6
 800458c:	10a4      	asrs	r4, r4, #2
 800458e:	2500      	movs	r5, #0
 8004590:	42a5      	cmp	r5, r4
 8004592:	d109      	bne.n	80045a8 <__libc_init_array+0x24>
 8004594:	4e0b      	ldr	r6, [pc, #44]	; (80045c4 <__libc_init_array+0x40>)
 8004596:	4c0c      	ldr	r4, [pc, #48]	; (80045c8 <__libc_init_array+0x44>)
 8004598:	f000 fc22 	bl	8004de0 <_init>
 800459c:	1ba4      	subs	r4, r4, r6
 800459e:	10a4      	asrs	r4, r4, #2
 80045a0:	2500      	movs	r5, #0
 80045a2:	42a5      	cmp	r5, r4
 80045a4:	d105      	bne.n	80045b2 <__libc_init_array+0x2e>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ac:	4798      	blx	r3
 80045ae:	3501      	adds	r5, #1
 80045b0:	e7ee      	b.n	8004590 <__libc_init_array+0xc>
 80045b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045b6:	4798      	blx	r3
 80045b8:	3501      	adds	r5, #1
 80045ba:	e7f2      	b.n	80045a2 <__libc_init_array+0x1e>
 80045bc:	0800b9b4 	.word	0x0800b9b4
 80045c0:	0800b9b4 	.word	0x0800b9b4
 80045c4:	0800b9b4 	.word	0x0800b9b4
 80045c8:	0800b9c4 	.word	0x0800b9c4

080045cc <__retarget_lock_acquire_recursive>:
 80045cc:	4770      	bx	lr

080045ce <__retarget_lock_release_recursive>:
 80045ce:	4770      	bx	lr

080045d0 <malloc>:
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <malloc+0xc>)
 80045d2:	4601      	mov	r1, r0
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	f000 b80b 	b.w	80045f0 <_malloc_r>
 80045da:	bf00      	nop
 80045dc:	20000a40 	.word	0x20000a40

080045e0 <free>:
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <free+0xc>)
 80045e2:	4601      	mov	r1, r0
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	f000 badb 	b.w	8004ba0 <_free_r>
 80045ea:	bf00      	nop
 80045ec:	20000a40 	.word	0x20000a40

080045f0 <_malloc_r>:
 80045f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	f101 050b 	add.w	r5, r1, #11
 80045f8:	2d16      	cmp	r5, #22
 80045fa:	4606      	mov	r6, r0
 80045fc:	d906      	bls.n	800460c <_malloc_r+0x1c>
 80045fe:	f035 0507 	bics.w	r5, r5, #7
 8004602:	d504      	bpl.n	800460e <_malloc_r+0x1e>
 8004604:	230c      	movs	r3, #12
 8004606:	6033      	str	r3, [r6, #0]
 8004608:	2400      	movs	r4, #0
 800460a:	e1a8      	b.n	800495e <_malloc_r+0x36e>
 800460c:	2510      	movs	r5, #16
 800460e:	428d      	cmp	r5, r1
 8004610:	d3f8      	bcc.n	8004604 <_malloc_r+0x14>
 8004612:	4630      	mov	r0, r6
 8004614:	f000 fa22 	bl	8004a5c <__malloc_lock>
 8004618:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800461c:	4fc0      	ldr	r7, [pc, #768]	; (8004920 <_malloc_r+0x330>)
 800461e:	d238      	bcs.n	8004692 <_malloc_r+0xa2>
 8004620:	f105 0208 	add.w	r2, r5, #8
 8004624:	443a      	add	r2, r7
 8004626:	f1a2 0108 	sub.w	r1, r2, #8
 800462a:	6854      	ldr	r4, [r2, #4]
 800462c:	428c      	cmp	r4, r1
 800462e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8004632:	d102      	bne.n	800463a <_malloc_r+0x4a>
 8004634:	68d4      	ldr	r4, [r2, #12]
 8004636:	42a2      	cmp	r2, r4
 8004638:	d010      	beq.n	800465c <_malloc_r+0x6c>
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	60ca      	str	r2, [r1, #12]
 8004646:	4423      	add	r3, r4
 8004648:	6091      	str	r1, [r2, #8]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	4630      	mov	r0, r6
 8004654:	f000 fa08 	bl	8004a68 <__malloc_unlock>
 8004658:	3408      	adds	r4, #8
 800465a:	e180      	b.n	800495e <_malloc_r+0x36e>
 800465c:	3302      	adds	r3, #2
 800465e:	4ab1      	ldr	r2, [pc, #708]	; (8004924 <_malloc_r+0x334>)
 8004660:	693c      	ldr	r4, [r7, #16]
 8004662:	4294      	cmp	r4, r2
 8004664:	4611      	mov	r1, r2
 8004666:	d075      	beq.n	8004754 <_malloc_r+0x164>
 8004668:	6860      	ldr	r0, [r4, #4]
 800466a:	f020 0c03 	bic.w	ip, r0, #3
 800466e:	ebac 0005 	sub.w	r0, ip, r5
 8004672:	280f      	cmp	r0, #15
 8004674:	dd48      	ble.n	8004708 <_malloc_r+0x118>
 8004676:	1963      	adds	r3, r4, r5
 8004678:	f045 0501 	orr.w	r5, r5, #1
 800467c:	6065      	str	r5, [r4, #4]
 800467e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004682:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8004686:	f040 0201 	orr.w	r2, r0, #1
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	f844 000c 	str.w	r0, [r4, ip]
 8004690:	e7df      	b.n	8004652 <_malloc_r+0x62>
 8004692:	0a6b      	lsrs	r3, r5, #9
 8004694:	d02a      	beq.n	80046ec <_malloc_r+0xfc>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d812      	bhi.n	80046c0 <_malloc_r+0xd0>
 800469a:	09ab      	lsrs	r3, r5, #6
 800469c:	3338      	adds	r3, #56	; 0x38
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80046a4:	f1a2 0c08 	sub.w	ip, r2, #8
 80046a8:	6854      	ldr	r4, [r2, #4]
 80046aa:	4564      	cmp	r4, ip
 80046ac:	d006      	beq.n	80046bc <_malloc_r+0xcc>
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	f022 0203 	bic.w	r2, r2, #3
 80046b4:	1b50      	subs	r0, r2, r5
 80046b6:	280f      	cmp	r0, #15
 80046b8:	dd1c      	ble.n	80046f4 <_malloc_r+0x104>
 80046ba:	3b01      	subs	r3, #1
 80046bc:	3301      	adds	r3, #1
 80046be:	e7ce      	b.n	800465e <_malloc_r+0x6e>
 80046c0:	2b14      	cmp	r3, #20
 80046c2:	d801      	bhi.n	80046c8 <_malloc_r+0xd8>
 80046c4:	335b      	adds	r3, #91	; 0x5b
 80046c6:	e7ea      	b.n	800469e <_malloc_r+0xae>
 80046c8:	2b54      	cmp	r3, #84	; 0x54
 80046ca:	d802      	bhi.n	80046d2 <_malloc_r+0xe2>
 80046cc:	0b2b      	lsrs	r3, r5, #12
 80046ce:	336e      	adds	r3, #110	; 0x6e
 80046d0:	e7e5      	b.n	800469e <_malloc_r+0xae>
 80046d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80046d6:	d802      	bhi.n	80046de <_malloc_r+0xee>
 80046d8:	0beb      	lsrs	r3, r5, #15
 80046da:	3377      	adds	r3, #119	; 0x77
 80046dc:	e7df      	b.n	800469e <_malloc_r+0xae>
 80046de:	f240 5254 	movw	r2, #1364	; 0x554
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d804      	bhi.n	80046f0 <_malloc_r+0x100>
 80046e6:	0cab      	lsrs	r3, r5, #18
 80046e8:	337c      	adds	r3, #124	; 0x7c
 80046ea:	e7d8      	b.n	800469e <_malloc_r+0xae>
 80046ec:	233f      	movs	r3, #63	; 0x3f
 80046ee:	e7d6      	b.n	800469e <_malloc_r+0xae>
 80046f0:	237e      	movs	r3, #126	; 0x7e
 80046f2:	e7d4      	b.n	800469e <_malloc_r+0xae>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	68e1      	ldr	r1, [r4, #12]
 80046f8:	db04      	blt.n	8004704 <_malloc_r+0x114>
 80046fa:	68a3      	ldr	r3, [r4, #8]
 80046fc:	60d9      	str	r1, [r3, #12]
 80046fe:	608b      	str	r3, [r1, #8]
 8004700:	18a3      	adds	r3, r4, r2
 8004702:	e7a2      	b.n	800464a <_malloc_r+0x5a>
 8004704:	460c      	mov	r4, r1
 8004706:	e7d0      	b.n	80046aa <_malloc_r+0xba>
 8004708:	2800      	cmp	r0, #0
 800470a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800470e:	db07      	blt.n	8004720 <_malloc_r+0x130>
 8004710:	44a4      	add	ip, r4
 8004712:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	f8cc 3004 	str.w	r3, [ip, #4]
 800471e:	e798      	b.n	8004652 <_malloc_r+0x62>
 8004720:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f080 8099 	bcs.w	800485c <_malloc_r+0x26c>
 800472a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800472e:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8004732:	2201      	movs	r2, #1
 8004734:	f10c 0c01 	add.w	ip, ip, #1
 8004738:	fa02 f20e 	lsl.w	r2, r2, lr
 800473c:	4310      	orrs	r0, r2
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8004744:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8004748:	3a08      	subs	r2, #8
 800474a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800474e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8004752:	60c4      	str	r4, [r0, #12]
 8004754:	2001      	movs	r0, #1
 8004756:	109a      	asrs	r2, r3, #2
 8004758:	fa00 f202 	lsl.w	r2, r0, r2
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4290      	cmp	r0, r2
 8004760:	d326      	bcc.n	80047b0 <_malloc_r+0x1c0>
 8004762:	4210      	tst	r0, r2
 8004764:	d106      	bne.n	8004774 <_malloc_r+0x184>
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	0052      	lsls	r2, r2, #1
 800476c:	4210      	tst	r0, r2
 800476e:	f103 0304 	add.w	r3, r3, #4
 8004772:	d0fa      	beq.n	800476a <_malloc_r+0x17a>
 8004774:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8004778:	46e1      	mov	r9, ip
 800477a:	4698      	mov	r8, r3
 800477c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004780:	454c      	cmp	r4, r9
 8004782:	f040 80af 	bne.w	80048e4 <_malloc_r+0x2f4>
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	f018 0f03 	tst.w	r8, #3
 800478e:	f109 0908 	add.w	r9, r9, #8
 8004792:	d1f3      	bne.n	800477c <_malloc_r+0x18c>
 8004794:	0798      	lsls	r0, r3, #30
 8004796:	f040 80e8 	bne.w	800496a <_malloc_r+0x37a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	ea23 0302 	bic.w	r3, r3, r2
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	0052      	lsls	r2, r2, #1
 80047a6:	4290      	cmp	r0, r2
 80047a8:	d302      	bcc.n	80047b0 <_malloc_r+0x1c0>
 80047aa:	2a00      	cmp	r2, #0
 80047ac:	f040 80ec 	bne.w	8004988 <_malloc_r+0x398>
 80047b0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80047b4:	f8da 4004 	ldr.w	r4, [sl, #4]
 80047b8:	f024 0203 	bic.w	r2, r4, #3
 80047bc:	42aa      	cmp	r2, r5
 80047be:	d303      	bcc.n	80047c8 <_malloc_r+0x1d8>
 80047c0:	1b53      	subs	r3, r2, r5
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	f300 8140 	bgt.w	8004a48 <_malloc_r+0x458>
 80047c8:	4b57      	ldr	r3, [pc, #348]	; (8004928 <_malloc_r+0x338>)
 80047ca:	9200      	str	r2, [sp, #0]
 80047cc:	2008      	movs	r0, #8
 80047ce:	681c      	ldr	r4, [r3, #0]
 80047d0:	f000 f960 	bl	8004a94 <sysconf>
 80047d4:	4b55      	ldr	r3, [pc, #340]	; (800492c <_malloc_r+0x33c>)
 80047d6:	9a00      	ldr	r2, [sp, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	3410      	adds	r4, #16
 80047dc:	3101      	adds	r1, #1
 80047de:	442c      	add	r4, r5
 80047e0:	bf1f      	itttt	ne
 80047e2:	f104 34ff 	addne.w	r4, r4, #4294967295
 80047e6:	1824      	addne	r4, r4, r0
 80047e8:	4241      	negne	r1, r0
 80047ea:	400c      	andne	r4, r1
 80047ec:	4680      	mov	r8, r0
 80047ee:	4621      	mov	r1, r4
 80047f0:	4630      	mov	r0, r6
 80047f2:	e9cd 2300 	strd	r2, r3, [sp]
 80047f6:	f000 f93d 	bl	8004a74 <_sbrk_r>
 80047fa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80047fe:	4683      	mov	fp, r0
 8004800:	f000 80fb 	beq.w	80049fa <_malloc_r+0x40a>
 8004804:	9a00      	ldr	r2, [sp, #0]
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	eb0a 0102 	add.w	r1, sl, r2
 800480c:	4281      	cmp	r1, r0
 800480e:	d902      	bls.n	8004816 <_malloc_r+0x226>
 8004810:	45ba      	cmp	sl, r7
 8004812:	f040 80f2 	bne.w	80049fa <_malloc_r+0x40a>
 8004816:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8004938 <_malloc_r+0x348>
 800481a:	f8d9 0000 	ldr.w	r0, [r9]
 800481e:	4559      	cmp	r1, fp
 8004820:	eb00 0e04 	add.w	lr, r0, r4
 8004824:	f8c9 e000 	str.w	lr, [r9]
 8004828:	f108 3cff 	add.w	ip, r8, #4294967295
 800482c:	f040 80ae 	bne.w	800498c <_malloc_r+0x39c>
 8004830:	ea11 0f0c 	tst.w	r1, ip
 8004834:	f040 80aa 	bne.w	800498c <_malloc_r+0x39c>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4414      	add	r4, r2
 800483c:	f044 0401 	orr.w	r4, r4, #1
 8004840:	605c      	str	r4, [r3, #4]
 8004842:	4a3b      	ldr	r2, [pc, #236]	; (8004930 <_malloc_r+0x340>)
 8004844:	f8d9 3000 	ldr.w	r3, [r9]
 8004848:	6811      	ldr	r1, [r2, #0]
 800484a:	428b      	cmp	r3, r1
 800484c:	bf88      	it	hi
 800484e:	6013      	strhi	r3, [r2, #0]
 8004850:	4a38      	ldr	r2, [pc, #224]	; (8004934 <_malloc_r+0x344>)
 8004852:	6811      	ldr	r1, [r2, #0]
 8004854:	428b      	cmp	r3, r1
 8004856:	bf88      	it	hi
 8004858:	6013      	strhi	r3, [r2, #0]
 800485a:	e0ce      	b.n	80049fa <_malloc_r+0x40a>
 800485c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8004860:	2a04      	cmp	r2, #4
 8004862:	d818      	bhi.n	8004896 <_malloc_r+0x2a6>
 8004864:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8004868:	3238      	adds	r2, #56	; 0x38
 800486a:	f102 0e01 	add.w	lr, r2, #1
 800486e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8004872:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8004876:	45f0      	cmp	r8, lr
 8004878:	d12b      	bne.n	80048d2 <_malloc_r+0x2e2>
 800487a:	1092      	asrs	r2, r2, #2
 800487c:	f04f 0c01 	mov.w	ip, #1
 8004880:	fa0c f202 	lsl.w	r2, ip, r2
 8004884:	4310      	orrs	r0, r2
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800488c:	f8c8 4008 	str.w	r4, [r8, #8]
 8004890:	f8ce 400c 	str.w	r4, [lr, #12]
 8004894:	e75e      	b.n	8004754 <_malloc_r+0x164>
 8004896:	2a14      	cmp	r2, #20
 8004898:	d801      	bhi.n	800489e <_malloc_r+0x2ae>
 800489a:	325b      	adds	r2, #91	; 0x5b
 800489c:	e7e5      	b.n	800486a <_malloc_r+0x27a>
 800489e:	2a54      	cmp	r2, #84	; 0x54
 80048a0:	d803      	bhi.n	80048aa <_malloc_r+0x2ba>
 80048a2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80048a6:	326e      	adds	r2, #110	; 0x6e
 80048a8:	e7df      	b.n	800486a <_malloc_r+0x27a>
 80048aa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80048ae:	d803      	bhi.n	80048b8 <_malloc_r+0x2c8>
 80048b0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80048b4:	3277      	adds	r2, #119	; 0x77
 80048b6:	e7d8      	b.n	800486a <_malloc_r+0x27a>
 80048b8:	f240 5e54 	movw	lr, #1364	; 0x554
 80048bc:	4572      	cmp	r2, lr
 80048be:	bf9a      	itte	ls
 80048c0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80048c4:	327c      	addls	r2, #124	; 0x7c
 80048c6:	227e      	movhi	r2, #126	; 0x7e
 80048c8:	e7cf      	b.n	800486a <_malloc_r+0x27a>
 80048ca:	f8de e008 	ldr.w	lr, [lr, #8]
 80048ce:	45f0      	cmp	r8, lr
 80048d0:	d005      	beq.n	80048de <_malloc_r+0x2ee>
 80048d2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80048d6:	f022 0203 	bic.w	r2, r2, #3
 80048da:	4562      	cmp	r2, ip
 80048dc:	d8f5      	bhi.n	80048ca <_malloc_r+0x2da>
 80048de:	f8de 800c 	ldr.w	r8, [lr, #12]
 80048e2:	e7d1      	b.n	8004888 <_malloc_r+0x298>
 80048e4:	6860      	ldr	r0, [r4, #4]
 80048e6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80048ea:	f020 0003 	bic.w	r0, r0, #3
 80048ee:	eba0 0a05 	sub.w	sl, r0, r5
 80048f2:	f1ba 0f0f 	cmp.w	sl, #15
 80048f6:	dd21      	ble.n	800493c <_malloc_r+0x34c>
 80048f8:	68a2      	ldr	r2, [r4, #8]
 80048fa:	1963      	adds	r3, r4, r5
 80048fc:	f045 0501 	orr.w	r5, r5, #1
 8004900:	6065      	str	r5, [r4, #4]
 8004902:	f8c2 e00c 	str.w	lr, [r2, #12]
 8004906:	f8ce 2008 	str.w	r2, [lr, #8]
 800490a:	f04a 0201 	orr.w	r2, sl, #1
 800490e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8004912:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	f844 a000 	str.w	sl, [r4, r0]
 800491c:	e699      	b.n	8004652 <_malloc_r+0x62>
 800491e:	bf00      	nop
 8004920:	20000e70 	.word	0x20000e70
 8004924:	20000e78 	.word	0x20000e78
 8004928:	200079c8 	.word	0x200079c8
 800492c:	20001278 	.word	0x20001278
 8004930:	200079c0 	.word	0x200079c0
 8004934:	200079c4 	.word	0x200079c4
 8004938:	20007998 	.word	0x20007998
 800493c:	f1ba 0f00 	cmp.w	sl, #0
 8004940:	db11      	blt.n	8004966 <_malloc_r+0x376>
 8004942:	4420      	add	r0, r4
 8004944:	6843      	ldr	r3, [r0, #4]
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6043      	str	r3, [r0, #4]
 800494c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8004950:	4630      	mov	r0, r6
 8004952:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004956:	f8ce 3008 	str.w	r3, [lr, #8]
 800495a:	f000 f885 	bl	8004a68 <__malloc_unlock>
 800495e:	4620      	mov	r0, r4
 8004960:	b003      	add	sp, #12
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	4674      	mov	r4, lr
 8004968:	e70a      	b.n	8004780 <_malloc_r+0x190>
 800496a:	f1ac 0008 	sub.w	r0, ip, #8
 800496e:	f8dc c000 	ldr.w	ip, [ip]
 8004972:	4584      	cmp	ip, r0
 8004974:	f103 33ff 	add.w	r3, r3, #4294967295
 8004978:	f43f af0c 	beq.w	8004794 <_malloc_r+0x1a4>
 800497c:	e711      	b.n	80047a2 <_malloc_r+0x1b2>
 800497e:	3304      	adds	r3, #4
 8004980:	0052      	lsls	r2, r2, #1
 8004982:	4210      	tst	r0, r2
 8004984:	d0fb      	beq.n	800497e <_malloc_r+0x38e>
 8004986:	e6f5      	b.n	8004774 <_malloc_r+0x184>
 8004988:	4643      	mov	r3, r8
 800498a:	e7fa      	b.n	8004982 <_malloc_r+0x392>
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	9200      	str	r2, [sp, #0]
 8004990:	3001      	adds	r0, #1
 8004992:	bf1b      	ittet	ne
 8004994:	ebab 0101 	subne.w	r1, fp, r1
 8004998:	4471      	addne	r1, lr
 800499a:	f8c3 b000 	streq.w	fp, [r3]
 800499e:	f8c9 1000 	strne.w	r1, [r9]
 80049a2:	f01b 0307 	ands.w	r3, fp, #7
 80049a6:	bf1c      	itt	ne
 80049a8:	f1c3 0308 	rsbne	r3, r3, #8
 80049ac:	449b      	addne	fp, r3
 80049ae:	445c      	add	r4, fp
 80049b0:	4498      	add	r8, r3
 80049b2:	ea04 030c 	and.w	r3, r4, ip
 80049b6:	eba8 0803 	sub.w	r8, r8, r3
 80049ba:	4641      	mov	r1, r8
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f859 	bl	8004a74 <_sbrk_r>
 80049c2:	1c43      	adds	r3, r0, #1
 80049c4:	bf04      	itt	eq
 80049c6:	4658      	moveq	r0, fp
 80049c8:	f04f 0800 	moveq.w	r8, #0
 80049cc:	f8d9 3000 	ldr.w	r3, [r9]
 80049d0:	f8c7 b008 	str.w	fp, [r7, #8]
 80049d4:	eba0 000b 	sub.w	r0, r0, fp
 80049d8:	4440      	add	r0, r8
 80049da:	4443      	add	r3, r8
 80049dc:	f040 0001 	orr.w	r0, r0, #1
 80049e0:	45ba      	cmp	sl, r7
 80049e2:	9a00      	ldr	r2, [sp, #0]
 80049e4:	f8c9 3000 	str.w	r3, [r9]
 80049e8:	f8cb 0004 	str.w	r0, [fp, #4]
 80049ec:	f43f af29 	beq.w	8004842 <_malloc_r+0x252>
 80049f0:	2a0f      	cmp	r2, #15
 80049f2:	d810      	bhi.n	8004a16 <_malloc_r+0x426>
 80049f4:	2301      	movs	r3, #1
 80049f6:	f8cb 3004 	str.w	r3, [fp, #4]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	f022 0203 	bic.w	r2, r2, #3
 8004a02:	42aa      	cmp	r2, r5
 8004a04:	eba2 0305 	sub.w	r3, r2, r5
 8004a08:	d301      	bcc.n	8004a0e <_malloc_r+0x41e>
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	dc1c      	bgt.n	8004a48 <_malloc_r+0x458>
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f82a 	bl	8004a68 <__malloc_unlock>
 8004a14:	e5f8      	b.n	8004608 <_malloc_r+0x18>
 8004a16:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004a1a:	f1a2 040c 	sub.w	r4, r2, #12
 8004a1e:	f024 0407 	bic.w	r4, r4, #7
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	4323      	orrs	r3, r4
 8004a28:	f8ca 3004 	str.w	r3, [sl, #4]
 8004a2c:	2205      	movs	r2, #5
 8004a2e:	eb0a 0304 	add.w	r3, sl, r4
 8004a32:	2c0f      	cmp	r4, #15
 8004a34:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8004a38:	f67f af03 	bls.w	8004842 <_malloc_r+0x252>
 8004a3c:	f10a 0108 	add.w	r1, sl, #8
 8004a40:	4630      	mov	r0, r6
 8004a42:	f000 f8ad 	bl	8004ba0 <_free_r>
 8004a46:	e6fc      	b.n	8004842 <_malloc_r+0x252>
 8004a48:	68bc      	ldr	r4, [r7, #8]
 8004a4a:	f045 0201 	orr.w	r2, r5, #1
 8004a4e:	4425      	add	r5, r4
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6062      	str	r2, [r4, #4]
 8004a56:	60bd      	str	r5, [r7, #8]
 8004a58:	606b      	str	r3, [r5, #4]
 8004a5a:	e5fa      	b.n	8004652 <_malloc_r+0x62>

08004a5c <__malloc_lock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_lock+0x8>)
 8004a5e:	f7ff bdb5 	b.w	80045cc <__retarget_lock_acquire_recursive>
 8004a62:	bf00      	nop
 8004a64:	200079d8 	.word	0x200079d8

08004a68 <__malloc_unlock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_unlock+0x8>)
 8004a6a:	f7ff bdb0 	b.w	80045ce <__retarget_lock_release_recursive>
 8004a6e:	bf00      	nop
 8004a70:	200079d8 	.word	0x200079d8

08004a74 <_sbrk_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4c06      	ldr	r4, [pc, #24]	; (8004a90 <_sbrk_r+0x1c>)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	f000 f9a0 	bl	8004dc4 <_sbrk>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_sbrk_r+0x1a>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_sbrk_r+0x1a>
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	200079e0 	.word	0x200079e0

08004a94 <sysconf>:
 8004a94:	2808      	cmp	r0, #8
 8004a96:	b508      	push	{r3, lr}
 8004a98:	d006      	beq.n	8004aa8 <sysconf+0x14>
 8004a9a:	f7ff fd6d 	bl	8004578 <__errno>
 8004a9e:	2316      	movs	r3, #22
 8004aa0:	6003      	str	r3, [r0, #0]
 8004aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa6:	bd08      	pop	{r3, pc}
 8004aa8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004aac:	e7fb      	b.n	8004aa6 <sysconf+0x12>
	...

08004ab0 <register_fini>:
 8004ab0:	4b02      	ldr	r3, [pc, #8]	; (8004abc <register_fini+0xc>)
 8004ab2:	b113      	cbz	r3, 8004aba <register_fini+0xa>
 8004ab4:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <register_fini+0x10>)
 8004ab6:	f000 b805 	b.w	8004ac4 <atexit>
 8004aba:	4770      	bx	lr
 8004abc:	00000000 	.word	0x00000000
 8004ac0:	08004ad1 	.word	0x08004ad1

08004ac4 <atexit>:
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 b924 	b.w	8004d18 <__register_exitproc>

08004ad0 <__libc_fini_array>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d07      	ldr	r5, [pc, #28]	; (8004af0 <__libc_fini_array+0x20>)
 8004ad4:	4c07      	ldr	r4, [pc, #28]	; (8004af4 <__libc_fini_array+0x24>)
 8004ad6:	1b64      	subs	r4, r4, r5
 8004ad8:	10a4      	asrs	r4, r4, #2
 8004ada:	b91c      	cbnz	r4, 8004ae4 <__libc_fini_array+0x14>
 8004adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae0:	f000 b984 	b.w	8004dec <_fini>
 8004ae4:	3c01      	subs	r4, #1
 8004ae6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004aea:	4798      	blx	r3
 8004aec:	e7f5      	b.n	8004ada <__libc_fini_array+0xa>
 8004aee:	bf00      	nop
 8004af0:	0800b9c4 	.word	0x0800b9c4
 8004af4:	0800b9cc 	.word	0x0800b9cc

08004af8 <_malloc_trim_r>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	4605      	mov	r5, r0
 8004afe:	2008      	movs	r0, #8
 8004b00:	460c      	mov	r4, r1
 8004b02:	f7ff ffc7 	bl	8004a94 <sysconf>
 8004b06:	4f23      	ldr	r7, [pc, #140]	; (8004b94 <_malloc_trim_r+0x9c>)
 8004b08:	4680      	mov	r8, r0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff ffa6 	bl	8004a5c <__malloc_lock>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	685e      	ldr	r6, [r3, #4]
 8004b14:	f026 0603 	bic.w	r6, r6, #3
 8004b18:	1b34      	subs	r4, r6, r4
 8004b1a:	3c11      	subs	r4, #17
 8004b1c:	4444      	add	r4, r8
 8004b1e:	fbb4 f4f8 	udiv	r4, r4, r8
 8004b22:	3c01      	subs	r4, #1
 8004b24:	fb08 f404 	mul.w	r4, r8, r4
 8004b28:	45a0      	cmp	r8, r4
 8004b2a:	dd05      	ble.n	8004b38 <_malloc_trim_r+0x40>
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f7ff ff9b 	bl	8004a68 <__malloc_unlock>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f7ff ff9a 	bl	8004a74 <_sbrk_r>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4433      	add	r3, r6
 8004b44:	4298      	cmp	r0, r3
 8004b46:	d1f1      	bne.n	8004b2c <_malloc_trim_r+0x34>
 8004b48:	4261      	negs	r1, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f7ff ff92 	bl	8004a74 <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d110      	bne.n	8004b76 <_malloc_trim_r+0x7e>
 8004b54:	2100      	movs	r1, #0
 8004b56:	4628      	mov	r0, r5
 8004b58:	f7ff ff8c 	bl	8004a74 <_sbrk_r>
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	1a83      	subs	r3, r0, r2
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	dde3      	ble.n	8004b2c <_malloc_trim_r+0x34>
 8004b64:	490c      	ldr	r1, [pc, #48]	; (8004b98 <_malloc_trim_r+0xa0>)
 8004b66:	6809      	ldr	r1, [r1, #0]
 8004b68:	1a40      	subs	r0, r0, r1
 8004b6a:	490c      	ldr	r1, [pc, #48]	; (8004b9c <_malloc_trim_r+0xa4>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6008      	str	r0, [r1, #0]
 8004b72:	6053      	str	r3, [r2, #4]
 8004b74:	e7da      	b.n	8004b2c <_malloc_trim_r+0x34>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <_malloc_trim_r+0xa4>)
 8004b7a:	1b36      	subs	r6, r6, r4
 8004b7c:	f046 0601 	orr.w	r6, r6, #1
 8004b80:	605e      	str	r6, [r3, #4]
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	4628      	mov	r0, r5
 8004b86:	1b1c      	subs	r4, r3, r4
 8004b88:	6014      	str	r4, [r2, #0]
 8004b8a:	f7ff ff6d 	bl	8004a68 <__malloc_unlock>
 8004b8e:	2001      	movs	r0, #1
 8004b90:	e7d0      	b.n	8004b34 <_malloc_trim_r+0x3c>
 8004b92:	bf00      	nop
 8004b94:	20000e70 	.word	0x20000e70
 8004b98:	20001278 	.word	0x20001278
 8004b9c:	20007998 	.word	0x20007998

08004ba0 <_free_r>:
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	4688      	mov	r8, r1
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	f000 80ab 	beq.w	8004d04 <_free_r+0x164>
 8004bae:	f7ff ff55 	bl	8004a5c <__malloc_lock>
 8004bb2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004bb6:	4d54      	ldr	r5, [pc, #336]	; (8004d08 <_free_r+0x168>)
 8004bb8:	f022 0001 	bic.w	r0, r2, #1
 8004bbc:	f1a8 0308 	sub.w	r3, r8, #8
 8004bc0:	181f      	adds	r7, r3, r0
 8004bc2:	68a9      	ldr	r1, [r5, #8]
 8004bc4:	687e      	ldr	r6, [r7, #4]
 8004bc6:	42b9      	cmp	r1, r7
 8004bc8:	f026 0603 	bic.w	r6, r6, #3
 8004bcc:	f002 0201 	and.w	r2, r2, #1
 8004bd0:	d11b      	bne.n	8004c0a <_free_r+0x6a>
 8004bd2:	4430      	add	r0, r6
 8004bd4:	b93a      	cbnz	r2, 8004be6 <_free_r+0x46>
 8004bd6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	4410      	add	r0, r2
 8004bde:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004be2:	60ca      	str	r2, [r1, #12]
 8004be4:	6091      	str	r1, [r2, #8]
 8004be6:	f040 0201 	orr.w	r2, r0, #1
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	60ab      	str	r3, [r5, #8]
 8004bee:	4b47      	ldr	r3, [pc, #284]	; (8004d0c <_free_r+0x16c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4283      	cmp	r3, r0
 8004bf4:	d804      	bhi.n	8004c00 <_free_r+0x60>
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <_free_r+0x170>)
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	6819      	ldr	r1, [r3, #0]
 8004bfc:	f7ff ff7c 	bl	8004af8 <_malloc_trim_r>
 8004c00:	4620      	mov	r0, r4
 8004c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c06:	f7ff bf2f 	b.w	8004a68 <__malloc_unlock>
 8004c0a:	607e      	str	r6, [r7, #4]
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	d139      	bne.n	8004c84 <_free_r+0xe4>
 8004c10:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004c14:	1a5b      	subs	r3, r3, r1
 8004c16:	4408      	add	r0, r1
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	f105 0c08 	add.w	ip, r5, #8
 8004c1e:	4561      	cmp	r1, ip
 8004c20:	d032      	beq.n	8004c88 <_free_r+0xe8>
 8004c22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004c26:	f8c1 c00c 	str.w	ip, [r1, #12]
 8004c2a:	f8cc 1008 	str.w	r1, [ip, #8]
 8004c2e:	19b9      	adds	r1, r7, r6
 8004c30:	6849      	ldr	r1, [r1, #4]
 8004c32:	07c9      	lsls	r1, r1, #31
 8004c34:	d40a      	bmi.n	8004c4c <_free_r+0xac>
 8004c36:	4430      	add	r0, r6
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	bb3a      	cbnz	r2, 8004c8c <_free_r+0xec>
 8004c3c:	4e35      	ldr	r6, [pc, #212]	; (8004d14 <_free_r+0x174>)
 8004c3e:	42b1      	cmp	r1, r6
 8004c40:	d124      	bne.n	8004c8c <_free_r+0xec>
 8004c42:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8004c46:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f040 0101 	orr.w	r1, r0, #1
 8004c50:	6059      	str	r1, [r3, #4]
 8004c52:	5018      	str	r0, [r3, r0]
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	d1d3      	bne.n	8004c00 <_free_r+0x60>
 8004c58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004c5c:	d21a      	bcs.n	8004c94 <_free_r+0xf4>
 8004c5e:	08c0      	lsrs	r0, r0, #3
 8004c60:	1081      	asrs	r1, r0, #2
 8004c62:	2201      	movs	r2, #1
 8004c64:	408a      	lsls	r2, r1
 8004c66:	6869      	ldr	r1, [r5, #4]
 8004c68:	3001      	adds	r0, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	606a      	str	r2, [r5, #4]
 8004c6e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004c72:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004c76:	3a08      	subs	r2, #8
 8004c78:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004c7c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004c80:	60cb      	str	r3, [r1, #12]
 8004c82:	e7bd      	b.n	8004c00 <_free_r+0x60>
 8004c84:	2200      	movs	r2, #0
 8004c86:	e7d2      	b.n	8004c2e <_free_r+0x8e>
 8004c88:	2201      	movs	r2, #1
 8004c8a:	e7d0      	b.n	8004c2e <_free_r+0x8e>
 8004c8c:	68fe      	ldr	r6, [r7, #12]
 8004c8e:	60ce      	str	r6, [r1, #12]
 8004c90:	60b1      	str	r1, [r6, #8]
 8004c92:	e7db      	b.n	8004c4c <_free_r+0xac>
 8004c94:	0a42      	lsrs	r2, r0, #9
 8004c96:	2a04      	cmp	r2, #4
 8004c98:	d813      	bhi.n	8004cc2 <_free_r+0x122>
 8004c9a:	0982      	lsrs	r2, r0, #6
 8004c9c:	3238      	adds	r2, #56	; 0x38
 8004c9e:	1c51      	adds	r1, r2, #1
 8004ca0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004ca4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004ca8:	428e      	cmp	r6, r1
 8004caa:	d124      	bne.n	8004cf6 <_free_r+0x156>
 8004cac:	2001      	movs	r0, #1
 8004cae:	1092      	asrs	r2, r2, #2
 8004cb0:	fa00 f202 	lsl.w	r2, r0, r2
 8004cb4:	6868      	ldr	r0, [r5, #4]
 8004cb6:	4302      	orrs	r2, r0
 8004cb8:	606a      	str	r2, [r5, #4]
 8004cba:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8004cbe:	60b3      	str	r3, [r6, #8]
 8004cc0:	e7de      	b.n	8004c80 <_free_r+0xe0>
 8004cc2:	2a14      	cmp	r2, #20
 8004cc4:	d801      	bhi.n	8004cca <_free_r+0x12a>
 8004cc6:	325b      	adds	r2, #91	; 0x5b
 8004cc8:	e7e9      	b.n	8004c9e <_free_r+0xfe>
 8004cca:	2a54      	cmp	r2, #84	; 0x54
 8004ccc:	d802      	bhi.n	8004cd4 <_free_r+0x134>
 8004cce:	0b02      	lsrs	r2, r0, #12
 8004cd0:	326e      	adds	r2, #110	; 0x6e
 8004cd2:	e7e4      	b.n	8004c9e <_free_r+0xfe>
 8004cd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004cd8:	d802      	bhi.n	8004ce0 <_free_r+0x140>
 8004cda:	0bc2      	lsrs	r2, r0, #15
 8004cdc:	3277      	adds	r2, #119	; 0x77
 8004cde:	e7de      	b.n	8004c9e <_free_r+0xfe>
 8004ce0:	f240 5154 	movw	r1, #1364	; 0x554
 8004ce4:	428a      	cmp	r2, r1
 8004ce6:	bf9a      	itte	ls
 8004ce8:	0c82      	lsrls	r2, r0, #18
 8004cea:	327c      	addls	r2, #124	; 0x7c
 8004cec:	227e      	movhi	r2, #126	; 0x7e
 8004cee:	e7d6      	b.n	8004c9e <_free_r+0xfe>
 8004cf0:	6889      	ldr	r1, [r1, #8]
 8004cf2:	428e      	cmp	r6, r1
 8004cf4:	d004      	beq.n	8004d00 <_free_r+0x160>
 8004cf6:	684a      	ldr	r2, [r1, #4]
 8004cf8:	f022 0203 	bic.w	r2, r2, #3
 8004cfc:	4282      	cmp	r2, r0
 8004cfe:	d8f7      	bhi.n	8004cf0 <_free_r+0x150>
 8004d00:	68ce      	ldr	r6, [r1, #12]
 8004d02:	e7da      	b.n	8004cba <_free_r+0x11a>
 8004d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d08:	20000e70 	.word	0x20000e70
 8004d0c:	2000127c 	.word	0x2000127c
 8004d10:	200079c8 	.word	0x200079c8
 8004d14:	20000e78 	.word	0x20000e78

08004d18 <__register_exitproc>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	4c26      	ldr	r4, [pc, #152]	; (8004db8 <__register_exitproc+0xa0>)
 8004d1e:	4606      	mov	r6, r0
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4698      	mov	r8, r3
 8004d24:	460f      	mov	r7, r1
 8004d26:	4691      	mov	r9, r2
 8004d28:	f7ff fc50 	bl	80045cc <__retarget_lock_acquire_recursive>
 8004d2c:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <__register_exitproc+0xa4>)
 8004d2e:	681d      	ldr	r5, [r3, #0]
 8004d30:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8004d34:	b918      	cbnz	r0, 8004d3e <__register_exitproc+0x26>
 8004d36:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8004d3a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8004d3e:	6843      	ldr	r3, [r0, #4]
 8004d40:	2b1f      	cmp	r3, #31
 8004d42:	dd19      	ble.n	8004d78 <__register_exitproc+0x60>
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <__register_exitproc+0xa8>)
 8004d46:	b933      	cbnz	r3, 8004d56 <__register_exitproc+0x3e>
 8004d48:	6820      	ldr	r0, [r4, #0]
 8004d4a:	f7ff fc40 	bl	80045ce <__retarget_lock_release_recursive>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004d5a:	f7ff fc39 	bl	80045d0 <malloc>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d0f2      	beq.n	8004d48 <__register_exitproc+0x30>
 8004d62:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8004d66:	6003      	str	r3, [r0, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	6042      	str	r2, [r0, #4]
 8004d6c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8004d70:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8004d74:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8004d78:	6843      	ldr	r3, [r0, #4]
 8004d7a:	b19e      	cbz	r6, 8004da4 <__register_exitproc+0x8c>
 8004d7c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8004d80:	2201      	movs	r2, #1
 8004d82:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8004d86:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	2e02      	cmp	r6, #2
 8004d90:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8004d94:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8004d98:	bf02      	ittt	eq
 8004d9a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8004d9e:	430a      	orreq	r2, r1
 8004da0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	3302      	adds	r3, #2
 8004da8:	6042      	str	r2, [r0, #4]
 8004daa:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	f7ff fc0d 	bl	80045ce <__retarget_lock_release_recursive>
 8004db4:	2000      	movs	r0, #0
 8004db6:	e7cc      	b.n	8004d52 <__register_exitproc+0x3a>
 8004db8:	20001280 	.word	0x20001280
 8004dbc:	0800b9a8 	.word	0x0800b9a8
 8004dc0:	080045d1 	.word	0x080045d1

08004dc4 <_sbrk>:
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <_sbrk+0x14>)
 8004dc6:	6819      	ldr	r1, [r3, #0]
 8004dc8:	4602      	mov	r2, r0
 8004dca:	b909      	cbnz	r1, 8004dd0 <_sbrk+0xc>
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <_sbrk+0x18>)
 8004dce:	6019      	str	r1, [r3, #0]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	4402      	add	r2, r0
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4770      	bx	lr
 8004dd8:	200079cc 	.word	0x200079cc
 8004ddc:	200079e4 	.word	0x200079e4

08004de0 <_init>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	bf00      	nop
 8004de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de6:	bc08      	pop	{r3}
 8004de8:	469e      	mov	lr, r3
 8004dea:	4770      	bx	lr

08004dec <_fini>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

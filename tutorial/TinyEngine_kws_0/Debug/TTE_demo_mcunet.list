
TTE_demo_mcunet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a994  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d818  0801ab68  0801ab68  0002ab68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08038380  08038380  00048380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08038388  08038388  00048388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08038398  08038398  00048398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000a780  20000000  080383a0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00016bc0  2000a780  08042b20  0005a780  2**2
                  ALLOC
  8 ._user_heap_stack 00000a00  20021340  08042b20  00061340  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0005a780  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004f62b  00000000  00000000  0005a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008309  00000000  00000000  000a9ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001b70  00000000  00000000  000b20e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017d0  00000000  00000000  000b3c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000180e1  00000000  00000000  000b5428  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000b391  00000000  00000000  000cd509  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  000d889a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007b58  00000000  00000000  000d8918  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000076  00000000  00000000  000e0470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000a780 	.word	0x2000a780
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ab4c 	.word	0x0801ab4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000a784 	.word	0x2000a784
 800020c:	0801ab4c 	.word	0x0801ab4c

08000210 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000210:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000212:	2b01      	cmp	r3, #1
	IT       LS
 8000214:	bf98      	it	ls
	BXLS     lr
 8000216:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800021c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000228:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800022e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000230:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000232:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000234:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800023e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000244:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000248:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800024c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000250:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800025a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800026c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800026e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000270:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800027a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800027c:	2b01      	cmp	r3, #1
	IT       LS
 800027e:	bf98      	it	ls
	BXLS     lr
 8000280:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000286:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000292:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002b0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002be:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002c2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002c4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002c6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4603      	mov	r3, r0
 8001052:	81fb      	strh	r3, [r7, #14]
 8001054:	460b      	mov	r3, r1
 8001056:	81bb      	strh	r3, [r7, #12]
 8001058:	4613      	mov	r3, r2
 800105a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001060:	89bb      	ldrh	r3, [r7, #12]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001066:	89bb      	ldrh	r3, [r7, #12]
 8001068:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800106c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001072:	f001 fad3 	bl	800261c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2203      	movs	r2, #3
 800107c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001080:	4618      	mov	r0, r3
 8001082:	f001 f8b7 	bl	80021f4 <CODEC_IO_Write>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2200      	movs	r2, #0
 8001096:	f640 0117 	movw	r1, #2071	; 0x817
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f8aa 	bl	80021f4 <CODEC_IO_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f89d 	bl	80021f4 <CODEC_IO_Write>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	4413      	add	r3, r2
 80010c2:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	226c      	movs	r2, #108	; 0x6c
 80010ca:	2139      	movs	r1, #57	; 0x39
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f891 	bl	80021f4 <CODEC_IO_Write>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	4413      	add	r3, r2
 80010da:	61fb      	str	r3, [r7, #28]
  
  /* Enable bias generator, Enable VMID */
  counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2203      	movs	r2, #3
 80010e2:	2101      	movs	r1, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f885 	bl	80021f4 <CODEC_IO_Write>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	4413      	add	r3, r2
 80010f2:	61fb      	str	r3, [r7, #28]
  
  /* Add Delay */
  AUDIO_IO_Delay(50);
 80010f4:	2032      	movs	r0, #50	; 0x32
 80010f6:	f001 faf9 	bl	80026ec <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80010fa:	8b3b      	ldrh	r3, [r7, #24]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8115 	beq.w	800132c <wm8994_Init+0x2e4>
  {
    outputEnabled = 1;
 8001102:	4bbb      	ldr	r3, [pc, #748]	; (80013f0 <wm8994_Init+0x3a8>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8001108:	8b3b      	ldrh	r3, [r7, #24]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d047      	beq.n	800119e <wm8994_Init+0x156>
 800110e:	2b03      	cmp	r3, #3
 8001110:	f000 8087 	beq.w	8001222 <wm8994_Init+0x1da>
 8001114:	2b01      	cmp	r3, #1
 8001116:	f040 80c6 	bne.w	80012a6 <wm8994_Init+0x25e>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001122:	2105      	movs	r1, #5
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f865 	bl	80021f4 <CODEC_IO_Write>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	4413      	add	r3, r2
 8001132:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001134:	89fb      	ldrh	r3, [r7, #14]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	f240 6101 	movw	r1, #1537	; 0x601
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f858 	bl	80021f4 <CODEC_IO_Write>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2200      	movs	r2, #0
 8001154:	f240 6102 	movw	r1, #1538	; 0x602
 8001158:	4618      	mov	r0, r3
 800115a:	f001 f84b 	bl	80021f4 <CODEC_IO_Write>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2202      	movs	r2, #2
 800116e:	f240 6104 	movw	r1, #1540	; 0x604
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f83e 	bl	80021f4 <CODEC_IO_Write>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	4413      	add	r3, r2
 8001180:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2202      	movs	r2, #2
 8001188:	f240 6105 	movw	r1, #1541	; 0x605
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f831 	bl	80021f4 <CODEC_IO_Write>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	4413      	add	r3, r2
 800119a:	61fb      	str	r3, [r7, #28]
      break;
 800119c:	e0c9      	b.n	8001332 <wm8994_Init+0x2ea>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f240 3203 	movw	r2, #771	; 0x303
 80011a6:	2105      	movs	r1, #5
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f823 	bl	80021f4 <CODEC_IO_Write>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4413      	add	r3, r2
 80011b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	f240 6101 	movw	r1, #1537	; 0x601
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 f816 	bl	80021f4 <CODEC_IO_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	4413      	add	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2201      	movs	r2, #1
 80011d8:	f240 6102 	movw	r1, #1538	; 0x602
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 f809 	bl	80021f4 <CODEC_IO_Write>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	4413      	add	r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2200      	movs	r2, #0
 80011f2:	f240 6104 	movw	r1, #1540	; 0x604
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fffc 	bl	80021f4 <CODEC_IO_Write>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	f240 6105 	movw	r1, #1541	; 0x605
 8001210:	4618      	mov	r0, r3
 8001212:	f000 ffef 	bl	80021f4 <CODEC_IO_Write>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	4413      	add	r3, r2
 800121e:	61fb      	str	r3, [r7, #28]
      break;
 8001220:	e087      	b.n	8001332 <wm8994_Init+0x2ea>

    case OUTPUT_DEVICE_BOTH:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f640 720f 	movw	r2, #3855	; 0xf0f
 800122a:	2105      	movs	r1, #5
 800122c:	4618      	mov	r0, r3
 800122e:	f000 ffe1 	bl	80021f4 <CODEC_IO_Write>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	4413      	add	r3, r2
 800123a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2201      	movs	r2, #1
 8001242:	f240 6101 	movw	r1, #1537	; 0x601
 8001246:	4618      	mov	r0, r3
 8001248:	f000 ffd4 	bl	80021f4 <CODEC_IO_Write>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	4413      	add	r3, r2
 8001254:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2201      	movs	r2, #1
 800125c:	f240 6102 	movw	r1, #1538	; 0x602
 8001260:	4618      	mov	r0, r3
 8001262:	f000 ffc7 	bl	80021f4 <CODEC_IO_Write>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	4413      	add	r3, r2
 800126e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001270:	89fb      	ldrh	r3, [r7, #14]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2202      	movs	r2, #2
 8001276:	f240 6104 	movw	r1, #1540	; 0x604
 800127a:	4618      	mov	r0, r3
 800127c:	f000 ffba 	bl	80021f4 <CODEC_IO_Write>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2202      	movs	r2, #2
 8001290:	f240 6105 	movw	r1, #1541	; 0x605
 8001294:	4618      	mov	r0, r3
 8001296:	f000 ffad 	bl	80021f4 <CODEC_IO_Write>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	4413      	add	r3, r2
 80012a2:	61fb      	str	r3, [r7, #28]
      break;
 80012a4:	e045      	b.n	8001332 <wm8994_Init+0x2ea>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f240 3203 	movw	r2, #771	; 0x303
 80012ae:	2105      	movs	r1, #5
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 ff9f 	bl	80021f4 <CODEC_IO_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	4413      	add	r3, r2
 80012be:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2201      	movs	r2, #1
 80012c6:	f240 6101 	movw	r1, #1537	; 0x601
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 ff92 	bl	80021f4 <CODEC_IO_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	4413      	add	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	f240 6102 	movw	r1, #1538	; 0x602
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 ff85 	bl	80021f4 <CODEC_IO_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	f240 6104 	movw	r1, #1540	; 0x604
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 ff78 	bl	80021f4 <CODEC_IO_Write>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	4413      	add	r3, r2
 800130c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2200      	movs	r2, #0
 8001314:	f240 6105 	movw	r1, #1541	; 0x605
 8001318:	4618      	mov	r0, r3
 800131a:	f000 ff6b 	bl	80021f4 <CODEC_IO_Write>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	61fb      	str	r3, [r7, #28]
      break;
 8001328:	bf00      	nop
 800132a:	e002      	b.n	8001332 <wm8994_Init+0x2ea>
    }
  }
  else
  {
    outputEnabled = 0;
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <wm8994_Init+0x3a8>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80b3 	beq.w	80014a0 <wm8994_Init+0x458>
  {
    inputEnabled = 1;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <wm8994_Init+0x3ac>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001346:	d003      	beq.n	8001350 <wm8994_Init+0x308>
 8001348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800134c:	d054      	beq.n	80013f8 <wm8994_Init+0x3b0>
 800134e:	e0a2      	b.n	8001496 <wm8994_Init+0x44e>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8001358:	2104      	movs	r1, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f000 ff4a 	bl	80021f4 <CODEC_IO_Write>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4413      	add	r3, r2
 8001368:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	22db      	movs	r2, #219	; 0xdb
 8001370:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001374:	4618      	mov	r0, r3
 8001376:	f000 ff3d 	bl	80021f4 <CODEC_IO_Write>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800138c:	2102      	movs	r1, #2
 800138e:	4618      	mov	r0, r3
 8001390:	f000 ff30 	bl	80021f4 <CODEC_IO_Write>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	4413      	add	r3, r2
 800139c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2202      	movs	r2, #2
 80013a4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 ff23 	bl	80021f4 <CODEC_IO_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2202      	movs	r2, #2
 80013be:	f240 6109 	movw	r1, #1545	; 0x609
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 ff16 	bl	80021f4 <CODEC_IO_Write>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	4413      	add	r3, r2
 80013d0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	220e      	movs	r2, #14
 80013d8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 ff09 	bl	80021f4 <CODEC_IO_Write>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	61fb      	str	r3, [r7, #28]
      break;
 80013ec:	e05b      	b.n	80014a6 <wm8994_Init+0x45e>
 80013ee:	bf00      	nop
 80013f0:	2000a79c 	.word	0x2000a79c
 80013f4:	2000a7a0 	.word	0x2000a7a0

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f240 3203 	movw	r2, #771	; 0x303
 8001400:	2104      	movs	r1, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fef6 	bl	80021f4 <CODEC_IO_Write>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	4413      	add	r3, r2
 8001410:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	22db      	movs	r2, #219	; 0xdb
 8001418:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fee9 	bl	80021f4 <CODEC_IO_Write>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f246 3250 	movw	r2, #25424	; 0x6350
 8001434:	2102      	movs	r1, #2
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fedc 	bl	80021f4 <CODEC_IO_Write>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4413      	add	r3, r2
 8001444:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2202      	movs	r2, #2
 800144c:	f240 6106 	movw	r1, #1542	; 0x606
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fecf 	bl	80021f4 <CODEC_IO_Write>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2202      	movs	r2, #2
 8001466:	f240 6107 	movw	r1, #1543	; 0x607
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fec2 	bl	80021f4 <CODEC_IO_Write>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	220d      	movs	r2, #13
 8001480:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001484:	4618      	mov	r0, r3
 8001486:	f000 feb5 	bl	80021f4 <CODEC_IO_Write>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
      break;
 8001494:	e007      	b.n	80014a6 <wm8994_Init+0x45e>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
      break;
 800149c:	bf00      	nop
 800149e:	e002      	b.n	80014a6 <wm8994_Init+0x45e>
    }
  }
  else
  {
    inputEnabled = 0;
 80014a0:	4b42      	ldr	r3, [pc, #264]	; (80015ac <wm8994_Init+0x564>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f245 6222 	movw	r2, #22050	; 0x5622
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d060      	beq.n	8001572 <wm8994_Init+0x52a>
 80014b0:	f245 6222 	movw	r2, #22050	; 0x5622
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d80a      	bhi.n	80014ce <wm8994_Init+0x486>
 80014b8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80014bc:	4293      	cmp	r3, r2
 80014be:	d04a      	beq.n	8001556 <wm8994_Init+0x50e>
 80014c0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80014c4:	d01d      	beq.n	8001502 <wm8994_Init+0x4ba>
 80014c6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80014ca:	d00c      	beq.n	80014e6 <wm8994_Init+0x49e>
 80014cc:	e072      	b.n	80015b4 <wm8994_Init+0x56c>
 80014ce:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d023      	beq.n	800151e <wm8994_Init+0x4d6>
 80014d6:	4a36      	ldr	r2, [pc, #216]	; (80015b0 <wm8994_Init+0x568>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d02e      	beq.n	800153a <wm8994_Init+0x4f2>
 80014dc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d054      	beq.n	800158e <wm8994_Init+0x546>
 80014e4:	e066      	b.n	80015b4 <wm8994_Init+0x56c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2203      	movs	r2, #3
 80014ec:	f44f 7104 	mov.w	r1, #528	; 0x210
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fe7f 	bl	80021f4 <CODEC_IO_Write>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	61fb      	str	r3, [r7, #28]
    break;
 8001500:	e066      	b.n	80015d0 <wm8994_Init+0x588>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2233      	movs	r2, #51	; 0x33
 8001508:	f44f 7104 	mov.w	r1, #528	; 0x210
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fe71 	bl	80021f4 <CODEC_IO_Write>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	61fb      	str	r3, [r7, #28]
    break;
 800151c:	e058      	b.n	80015d0 <wm8994_Init+0x588>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2283      	movs	r2, #131	; 0x83
 8001524:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fe63 	bl	80021f4 <CODEC_IO_Write>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	61fb      	str	r3, [r7, #28]
    break;
 8001538:	e04a      	b.n	80015d0 <wm8994_Init+0x588>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	22a3      	movs	r2, #163	; 0xa3
 8001540:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fe55 	bl	80021f4 <CODEC_IO_Write>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	61fb      	str	r3, [r7, #28]
    break;
 8001554:	e03c      	b.n	80015d0 <wm8994_Init+0x588>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2213      	movs	r2, #19
 800155c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fe47 	bl	80021f4 <CODEC_IO_Write>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
    break;
 8001570:	e02e      	b.n	80015d0 <wm8994_Init+0x588>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2243      	movs	r2, #67	; 0x43
 8001578:	f44f 7104 	mov.w	r1, #528	; 0x210
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fe39 	bl	80021f4 <CODEC_IO_Write>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	61fb      	str	r3, [r7, #28]
    break;
 800158c:	e020      	b.n	80015d0 <wm8994_Init+0x588>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2273      	movs	r2, #115	; 0x73
 8001594:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fe2b 	bl	80021f4 <CODEC_IO_Write>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]
    break; 
 80015a8:	e012      	b.n	80015d0 <wm8994_Init+0x588>
 80015aa:	bf00      	nop
 80015ac:	2000a7a0 	.word	0x2000a7a0
 80015b0:	00017700 	.word	0x00017700
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2283      	movs	r2, #131	; 0x83
 80015ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fe18 	bl	80021f4 <CODEC_IO_Write>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	61fb      	str	r3, [r7, #28]
    break; 
 80015ce:	bf00      	nop
  }
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f244 0210 	movw	r2, #16400	; 0x4010
 80015d8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fe09 	bl	80021f4 <CODEC_IO_Write>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	61fb      	str	r3, [r7, #28]
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2200      	movs	r2, #0
 80015f2:	f240 3102 	movw	r1, #770	; 0x302
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fdfc 	bl	80021f4 <CODEC_IO_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	220a      	movs	r2, #10
 800160c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fdef 	bl	80021f4 <CODEC_IO_Write>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8001620:	89fb      	ldrh	r3, [r7, #14]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fde2 	bl	80021f4 <CODEC_IO_Write>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800163a:	8b3b      	ldrh	r3, [r7, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 810d 	beq.w	800185c <wm8994_Init+0x814>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001642:	89fb      	ldrh	r3, [r7, #14]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800164a:	2103      	movs	r1, #3
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fdd1 	bl	80021f4 <CODEC_IO_Write>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2200      	movs	r2, #0
 8001662:	2122      	movs	r1, #34	; 0x22
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fdc5 	bl	80021f4 <CODEC_IO_Write>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2200      	movs	r2, #0
 800167a:	2123      	movs	r1, #35	; 0x23
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fdb9 	bl	80021f4 <CODEC_IO_Write>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001694:	2136      	movs	r1, #54	; 0x36
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fdac 	bl	80021f4 <CODEC_IO_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f243 0203 	movw	r2, #12291	; 0x3003
 80016ae:	2101      	movs	r1, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fd9f 	bl	80021f4 <CODEC_IO_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2205      	movs	r2, #5
 80016c6:	2151      	movs	r1, #81	; 0x51
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd93 	bl	80021f4 <CODEC_IO_Write>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80016d8:	8b7b      	ldrh	r3, [r7, #26]
 80016da:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80016de:	f043 0303 	orr.w	r3, r3, #3
 80016e2:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	8b7a      	ldrh	r2, [r7, #26]
 80016ea:	2101      	movs	r1, #1
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fd81 	bl	80021f4 <CODEC_IO_Write>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	4413      	add	r3, r2
 80016fa:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2222      	movs	r2, #34	; 0x22
 8001702:	2160      	movs	r1, #96	; 0x60
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fd75 	bl	80021f4 <CODEC_IO_Write>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f649 7225 	movw	r2, #40741	; 0x9f25
 800171c:	214c      	movs	r1, #76	; 0x4c
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd68 	bl	80021f4 <CODEC_IO_Write>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800172e:	200f      	movs	r0, #15
 8001730:	f000 ffdc 	bl	80026ec <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2201      	movs	r2, #1
 800173a:	212d      	movs	r1, #45	; 0x2d
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fd59 	bl	80021f4 <CODEC_IO_Write>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2201      	movs	r2, #1
 8001752:	212e      	movs	r1, #46	; 0x2e
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fd4d 	bl	80021f4 <CODEC_IO_Write>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f44f 724c 	mov.w	r2, #816	; 0x330
 800176c:	2103      	movs	r1, #3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fd40 	bl	80021f4 <CODEC_IO_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2233      	movs	r2, #51	; 0x33
 8001784:	2154      	movs	r1, #84	; 0x54
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fd34 	bl	80021f4 <CODEC_IO_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8001796:	20fa      	movs	r0, #250	; 0xfa
 8001798:	f000 ffa8 	bl	80026ec <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800179c:	89fb      	ldrh	r3, [r7, #14]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	22ee      	movs	r2, #238	; 0xee
 80017a2:	2160      	movs	r1, #96	; 0x60
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fd25 	bl	80021f4 <CODEC_IO_Write>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80017b4:	89fb      	ldrh	r3, [r7, #14]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	22c0      	movs	r2, #192	; 0xc0
 80017ba:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fd18 	bl	80021f4 <CODEC_IO_Write>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	22c0      	movs	r2, #192	; 0xc0
 80017d4:	f240 6111 	movw	r1, #1553	; 0x611
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fd0b 	bl	80021f4 <CODEC_IO_Write>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80017e8:	89fb      	ldrh	r3, [r7, #14]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fcfe 	bl	80021f4 <CODEC_IO_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	22c0      	movs	r2, #192	; 0xc0
 8001808:	f240 6112 	movw	r1, #1554	; 0x612
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fcf1 	bl	80021f4 <CODEC_IO_Write>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	22c0      	movs	r2, #192	; 0xc0
 8001822:	f240 6113 	movw	r1, #1555	; 0x613
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fce4 	bl	80021f4 <CODEC_IO_Write>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2200      	movs	r2, #0
 800183c:	f240 4122 	movw	r1, #1058	; 0x422
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fcd7 	bl	80021f4 <CODEC_IO_Write>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	4413      	add	r3, r2
 800184e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001850:	7afa      	ldrb	r2, [r7, #11]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f97a 	bl	8001b50 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 809c 	beq.w	800199c <wm8994_Init+0x954>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186a:	d003      	beq.n	8001874 <wm8994_Init+0x82c>
 800186c:	8afb      	ldrh	r3, [r7, #22]
 800186e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001872:	d12b      	bne.n	80018cc <wm8994_Init+0x884>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001874:	8b7b      	ldrh	r3, [r7, #26]
 8001876:	f043 0313 	orr.w	r3, r3, #19
 800187a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	8b7a      	ldrh	r2, [r7, #26]
 8001882:	2101      	movs	r1, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fcb5 	bl	80021f4 <CODEC_IO_Write>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2202      	movs	r2, #2
 800189a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fca8 	bl	80021f4 <CODEC_IO_Write>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018b6:	f240 4111 	movw	r1, #1041	; 0x411
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fc9a 	bl	80021f4 <CODEC_IO_Write>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4413      	add	r3, r2
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e061      	b.n	8001990 <wm8994_Init+0x948>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80018cc:	8afb      	ldrh	r3, [r7, #22]
 80018ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018d2:	d003      	beq.n	80018dc <wm8994_Init+0x894>
 80018d4:	8afb      	ldrh	r3, [r7, #22]
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d159      	bne.n	8001990 <wm8994_Init+0x948>
    {
      /* Enable normal bias generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0003;
 80018dc:	8b7b      	ldrh	r3, [r7, #26]
 80018de:	f043 0303 	orr.w	r3, r3, #3
 80018e2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	8b7a      	ldrh	r2, [r7, #26]
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fc81 	bl	80021f4 <CODEC_IO_Write>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	220b      	movs	r2, #11
 8001902:	2118      	movs	r1, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fc75 	bl	80021f4 <CODEC_IO_Write>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	220b      	movs	r2, #11
 800191a:	211a      	movs	r1, #26
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fc69 	bl	80021f4 <CODEC_IO_Write>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0025);
 800192c:	89fb      	ldrh	r3, [r7, #14]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2225      	movs	r2, #37	; 0x25
 8001932:	2129      	movs	r1, #41	; 0x29
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fc5d 	bl	80021f4 <CODEC_IO_Write>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0025);
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2225      	movs	r2, #37	; 0x25
 800194a:	212a      	movs	r1, #42	; 0x2a
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fc51 	bl	80021f4 <CODEC_IO_Write>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	61fb      	str	r3, [r7, #28]

      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2211      	movs	r2, #17
 8001962:	2128      	movs	r1, #40	; 0x28
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc45 	bl	80021f4 <CODEC_IO_Write>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	4413      	add	r3, r2
 8001972:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001974:	89fb      	ldrh	r3, [r7, #14]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800197c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fc37 	bl	80021f4 <CODEC_IO_Write>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001990:	7afa      	ldrb	r2, [r7, #11]
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f8da 	bl	8001b50 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800199c:	69fb      	ldr	r3, [r7, #28]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop

080019a8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80019ac:	f000 fe40 	bl	8002630 <AUDIO_IO_DeInit>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80019be:	f000 fe2d 	bl	800261c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fe63 	bl	8002694 <AUDIO_IO_Read>
 80019ce:	4603      	mov	r3, r0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	80fb      	strh	r3, [r7, #6]
 80019e4:	4613      	mov	r3, r2
 80019e6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f9d1 	bl	8001d98 <wm8994_SetMute>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f9bc 	bl	8001d98 <wm8994_SetMute>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fbdf 	bl	80021f4 <CODEC_IO_Write>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f99b 	bl	8001d98 <wm8994_SetMute>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <wm8994_Stop+0xd8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05a      	beq.n	8001b42 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f981 	bl	8001d98 <wm8994_SetMute>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d04e      	beq.n	8001b42 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fb9f 	bl	80021f4 <CODEC_IO_Write>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac8:	f240 4122 	movw	r1, #1058	; 0x422
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fb91 	bl	80021f4 <CODEC_IO_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4413      	add	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	212d      	movs	r1, #45	; 0x2d
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fb85 	bl	80021f4 <CODEC_IO_Write>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	212e      	movs	r1, #46	; 0x2e
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fb79 	bl	80021f4 <CODEC_IO_Write>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	2105      	movs	r1, #5
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fb6d 	bl	80021f4 <CODEC_IO_Write>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fb61 	bl	80021f4 <CODEC_IO_Write>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <wm8994_Stop+0xd8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000a79c 	.word	0x2000a79c

08001b50 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	80fb      	strh	r3, [r7, #6]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d80b      	bhi.n	8001b82 <wm8994_SetVolume+0x32>
 8001b6a:	797a      	ldrb	r2, [r7, #5]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	019b      	lsls	r3, r3, #6
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	4a86      	ldr	r2, [pc, #536]	; (8001d8c <wm8994_SetVolume+0x23c>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	1152      	asrs	r2, r2, #5
 8001b7a:	17db      	asrs	r3, r3, #31
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	e000      	b.n	8001b84 <wm8994_SetVolume+0x34>
 8001b82:	2364      	movs	r3, #100	; 0x64
 8001b84:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <wm8994_SetVolume+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 809b 	beq.w	8001cc6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	2b3e      	cmp	r3, #62	; 0x3e
 8001b94:	d93d      	bls.n	8001c12 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f8fc 	bl	8001d98 <wm8994_SetMute>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f240 127f 	movw	r2, #383	; 0x17f
 8001bb0:	211c      	movs	r1, #28
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fb1e 	bl	80021f4 <CODEC_IO_Write>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f240 127f 	movw	r2, #383	; 0x17f
 8001bca:	211d      	movs	r1, #29
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fb11 	bl	80021f4 <CODEC_IO_Write>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f240 127f 	movw	r2, #383	; 0x17f
 8001be4:	2126      	movs	r1, #38	; 0x26
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fb04 	bl	80021f4 <CODEC_IO_Write>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f240 127f 	movw	r2, #383	; 0x17f
 8001bfe:	2127      	movs	r1, #39	; 0x27
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 faf7 	bl	80021f4 <CODEC_IO_Write>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e059      	b.n	8001cc6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001c12:	797b      	ldrb	r3, [r7, #5]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f8bb 	bl	8001d98 <wm8994_SetMute>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e04c      	b.n	8001cc6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f8b1 	bl	8001d98 <wm8994_SetMute>
 8001c36:	4602      	mov	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	b2d8      	uxtb	r0, r3
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	211c      	movs	r1, #28
 8001c52:	f000 facf 	bl	80021f4 <CODEC_IO_Write>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	b2d8      	uxtb	r0, r3
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	211d      	movs	r1, #29
 8001c74:	f000 fabe 	bl	80021f4 <CODEC_IO_Write>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	b2d8      	uxtb	r0, r3
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	2126      	movs	r1, #38	; 0x26
 8001c96:	f000 faad 	bl	80021f4 <CODEC_IO_Write>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2127      	movs	r1, #39	; 0x27
 8001cb8:	f000 fa9c 	bl	80021f4 <CODEC_IO_Write>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <wm8994_SetVolume+0x244>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d059      	beq.n	8001d82 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	2b63      	cmp	r3, #99	; 0x63
 8001cd2:	d80c      	bhi.n	8001cee <wm8994_SetVolume+0x19e>
 8001cd4:	797a      	ldrb	r2, [r7, #5]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <wm8994_SetVolume+0x23c>)
 8001ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce4:	1152      	asrs	r2, r2, #5
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e000      	b.n	8001cf0 <wm8994_SetVolume+0x1a0>
 8001cee:	23ef      	movs	r3, #239	; 0xef
 8001cf0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	b2d8      	uxtb	r0, r3
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d08:	f000 fa74 	bl	80021f4 <CODEC_IO_Write>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	f240 4101 	movw	r1, #1025	; 0x401
 8001d2c:	f000 fa62 	bl	80021f4 <CODEC_IO_Write>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f240 4104 	movw	r1, #1028	; 0x404
 8001d50:	f000 fa50 	bl	80021f4 <CODEC_IO_Write>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	b2d8      	uxtb	r0, r3
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f240 4105 	movw	r1, #1029	; 0x405
 8001d74:	f000 fa3e 	bl	80021f4 <CODEC_IO_Write>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	51eb851f 	.word	0x51eb851f
 8001d90:	2000a79c 	.word	0x2000a79c
 8001d94:	2000a7a0 	.word	0x2000a7a0

08001d98 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <wm8994_SetMute+0x98>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d039      	beq.n	8001e24 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d11c      	bne.n	8001df0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fa16 	bl	80021f4 <CODEC_IO_Write>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	f240 4122 	movw	r1, #1058	; 0x422
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fa08 	bl	80021f4 <CODEC_IO_Write>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e019      	b.n	8001e24 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f9fa 	bl	80021f4 <CODEC_IO_Write>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f240 4122 	movw	r1, #1058	; 0x422
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f9ed 	bl	80021f4 <CODEC_IO_Write>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000a79c 	.word	0x2000a79c

08001e34 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	80fb      	strh	r3, [r7, #6]
 8001e40:	4613      	mov	r3, r2
 8001e42:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001e48:	797b      	ldrb	r3, [r7, #5]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d047      	beq.n	8001ede <wm8994_SetOutputMode+0xaa>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	f000 8087 	beq.w	8001f62 <wm8994_SetOutputMode+0x12e>
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 80c6 	bne.w	8001fe6 <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001e62:	2105      	movs	r1, #5
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f9c5 	bl	80021f4 <CODEC_IO_Write>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f240 6101 	movw	r1, #1537	; 0x601
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f9b8 	bl	80021f4 <CODEC_IO_Write>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2200      	movs	r2, #0
 8001e94:	f240 6102 	movw	r1, #1538	; 0x602
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f9ab 	bl	80021f4 <CODEC_IO_Write>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2202      	movs	r2, #2
 8001eae:	f240 6104 	movw	r1, #1540	; 0x604
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f99e 	bl	80021f4 <CODEC_IO_Write>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f240 6105 	movw	r1, #1541	; 0x605
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f991 	bl	80021f4 <CODEC_IO_Write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
    break;
 8001edc:	e0c5      	b.n	800206a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f240 3203 	movw	r2, #771	; 0x303
 8001ee6:	2105      	movs	r1, #5
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f983 	bl	80021f4 <CODEC_IO_Write>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	f240 6101 	movw	r1, #1537	; 0x601
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f976 	bl	80021f4 <CODEC_IO_Write>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2201      	movs	r2, #1
 8001f18:	f240 6102 	movw	r1, #1538	; 0x602
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f969 	bl	80021f4 <CODEC_IO_Write>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	f240 6104 	movw	r1, #1540	; 0x604
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f95c 	bl	80021f4 <CODEC_IO_Write>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f240 6105 	movw	r1, #1541	; 0x605
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 f94f 	bl	80021f4 <CODEC_IO_Write>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
    break;
 8001f60:	e083      	b.n	800206a <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001f6a:	2105      	movs	r1, #5
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f941 	bl	80021f4 <CODEC_IO_Write>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2201      	movs	r2, #1
 8001f82:	f240 6101 	movw	r1, #1537	; 0x601
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f934 	bl	80021f4 <CODEC_IO_Write>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f240 6102 	movw	r1, #1538	; 0x602
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f927 	bl	80021f4 <CODEC_IO_Write>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f240 6104 	movw	r1, #1540	; 0x604
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f91a 	bl	80021f4 <CODEC_IO_Write>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f240 6105 	movw	r1, #1541	; 0x605
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f90d 	bl	80021f4 <CODEC_IO_Write>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
    break;
 8001fe4:	e041      	b.n	800206a <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f240 3203 	movw	r2, #771	; 0x303
 8001fee:	2105      	movs	r1, #5
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f8ff 	bl	80021f4 <CODEC_IO_Write>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2201      	movs	r2, #1
 8002006:	f240 6101 	movw	r1, #1537	; 0x601
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f8f2 	bl	80021f4 <CODEC_IO_Write>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2201      	movs	r2, #1
 8002020:	f240 6102 	movw	r1, #1538	; 0x602
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f8e5 	bl	80021f4 <CODEC_IO_Write>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2200      	movs	r2, #0
 800203a:	f240 6104 	movw	r1, #1540	; 0x604
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f8d8 	bl	80021f4 <CODEC_IO_Write>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2200      	movs	r2, #0
 8002054:	f240 6105 	movw	r1, #1541	; 0x605
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f8cb 	bl	80021f4 <CODEC_IO_Write>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
    break;    
 8002068:	bf00      	nop
  }  
  return counter;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f245 6222 	movw	r2, #22050	; 0x5622
 800208a:	4293      	cmp	r3, r2
 800208c:	d060      	beq.n	8002150 <wm8994_SetFrequency+0xdc>
 800208e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002092:	4293      	cmp	r3, r2
 8002094:	d80a      	bhi.n	80020ac <wm8994_SetFrequency+0x38>
 8002096:	f642 3211 	movw	r2, #11025	; 0x2b11
 800209a:	4293      	cmp	r3, r2
 800209c:	d04a      	beq.n	8002134 <wm8994_SetFrequency+0xc0>
 800209e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80020a2:	d01d      	beq.n	80020e0 <wm8994_SetFrequency+0x6c>
 80020a4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80020a8:	d00c      	beq.n	80020c4 <wm8994_SetFrequency+0x50>
 80020aa:	e06d      	b.n	8002188 <wm8994_SetFrequency+0x114>
 80020ac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d023      	beq.n	80020fc <wm8994_SetFrequency+0x88>
 80020b4:	4a3e      	ldr	r2, [pc, #248]	; (80021b0 <wm8994_SetFrequency+0x13c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02e      	beq.n	8002118 <wm8994_SetFrequency+0xa4>
 80020ba:	f64a 4244 	movw	r2, #44100	; 0xac44
 80020be:	4293      	cmp	r3, r2
 80020c0:	d054      	beq.n	800216c <wm8994_SetFrequency+0xf8>
 80020c2:	e061      	b.n	8002188 <wm8994_SetFrequency+0x114>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2203      	movs	r2, #3
 80020ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f890 	bl	80021f4 <CODEC_IO_Write>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    break;
 80020de:	e061      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2233      	movs	r2, #51	; 0x33
 80020e6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f882 	bl	80021f4 <CODEC_IO_Write>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
    break;
 80020fa:	e053      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2283      	movs	r2, #131	; 0x83
 8002102:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f874 	bl	80021f4 <CODEC_IO_Write>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
    break;
 8002116:	e045      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	22a3      	movs	r2, #163	; 0xa3
 800211e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f866 	bl	80021f4 <CODEC_IO_Write>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
    break;
 8002132:	e037      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2213      	movs	r2, #19
 800213a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f858 	bl	80021f4 <CODEC_IO_Write>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
    break;
 800214e:	e029      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2243      	movs	r2, #67	; 0x43
 8002156:	f44f 7104 	mov.w	r1, #528	; 0x210
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f84a 	bl	80021f4 <CODEC_IO_Write>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
    break;
 800216a:	e01b      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2273      	movs	r2, #115	; 0x73
 8002172:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f83c 	bl	80021f4 <CODEC_IO_Write>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    break; 
 8002186:	e00d      	b.n	80021a4 <wm8994_SetFrequency+0x130>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2283      	movs	r2, #131	; 0x83
 800218e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f82e 	bl	80021f4 <CODEC_IO_Write>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    break; 
 80021a2:	bf00      	nop
  }
  return counter;
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	00017700 	.word	0x00017700

080021b4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f812 	bl	80021f4 <CODEC_IO_Write>
 80021d0:	4603      	mov	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <wm8994_Reset+0x38>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <wm8994_Reset+0x3c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

  return counter;
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000a79c 	.word	0x2000a79c
 80021f0:	2000a7a0 	.word	0x2000a7a0

080021f4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	460b      	mov	r3, r1
 8002200:	80bb      	strh	r3, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	88b9      	ldrh	r1, [r7, #4]
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fa15 	bl	8002640 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	b2db      	uxtb	r3, r3
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <BSP_PB_Init>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	460a      	mov	r2, r1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	4613      	mov	r3, r2
 8002232:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <BSP_PB_Init+0x30>
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <BSP_PB_Init+0x100>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a39      	ldr	r2, [pc, #228]	; (8002324 <BSP_PB_Init+0x100>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b37      	ldr	r3, [pc, #220]	; (8002324 <BSP_PB_Init+0x100>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	e01b      	b.n	800228c <BSP_PB_Init+0x68>
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10c      	bne.n	8002274 <BSP_PB_Init+0x50>
 800225a:	4b32      	ldr	r3, [pc, #200]	; (8002324 <BSP_PB_Init+0x100>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a31      	ldr	r2, [pc, #196]	; (8002324 <BSP_PB_Init+0x100>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <BSP_PB_Init+0x100>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	e00b      	b.n	800228c <BSP_PB_Init+0x68>
 8002274:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <BSP_PB_Init+0x100>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <BSP_PB_Init+0x100>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <BSP_PB_Init+0x100>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d114      	bne.n	80022bc <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <BSP_PB_Init+0x104>)
 8002296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800229a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	4a20      	ldr	r2, [pc, #128]	; (800232c <BSP_PB_Init+0x108>)
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	f107 0214 	add.w	r2, r7, #20
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fefc 	bl	80050b4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80022bc:	79bb      	ldrb	r3, [r7, #6]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12c      	bne.n	800231c <BSP_PB_Init+0xf8>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <BSP_PB_Init+0x104>)
 80022c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ca:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <BSP_PB_Init+0xbc>
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <BSP_PB_Init+0x10c>)
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	e001      	b.n	80022e4 <BSP_PB_Init+0xc0>
    }
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <BSP_PB_Init+0x110>)
 80022e2:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <BSP_PB_Init+0x108>)
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	f107 0214 	add.w	r2, r7, #20
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fede 	bl	80050b4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <BSP_PB_Init+0x114>)
 80022fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002300:	b25b      	sxtb	r3, r3
 8002302:	2200      	movs	r2, #0
 8002304:	210f      	movs	r1, #15
 8002306:	4618      	mov	r0, r3
 8002308:	f001 ff3d 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <BSP_PB_Init+0x114>)
 8002310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f001 ff51 	bl	80041be <HAL_NVIC_EnableIRQ>
  }
}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	0801aef8 	.word	0x0801aef8
 800232c:	20000030 	.word	0x20000030
 8002330:	10210000 	.word	0x10210000
 8002334:	10110000 	.word	0x10110000
 8002338:	0801af00 	.word	0x0801af00

0800233c <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	4a07      	ldr	r2, [pc, #28]	; (8002368 <BSP_PB_GetState+0x2c>)
 800234a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <BSP_PB_GetState+0x30>)
 8002352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002356:	4619      	mov	r1, r3
 8002358:	f003 f960 	bl	800561c <HAL_GPIO_ReadPin>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000030 	.word	0x20000030
 800236c:	0801aef8 	.word	0x0801aef8

08002370 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <I2Cx_MspInit+0x150>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d14d      	bne.n	800241c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a4f      	ldr	r2, [pc, #316]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <I2Cx_MspInit+0x154>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800239c:	2312      	movs	r3, #18
 800239e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80023a8:	2304      	movs	r3, #4
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023ac:	f107 031c 	add.w	r3, r7, #28
 80023b0:	4619      	mov	r1, r3
 80023b2:	4845      	ldr	r0, [pc, #276]	; (80024c8 <I2Cx_MspInit+0x158>)
 80023b4:	f002 fe7e 	bl	80050b4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80023b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	4840      	ldr	r0, [pc, #256]	; (80024c8 <I2Cx_MspInit+0x158>)
 80023c6:	f002 fe75 	bl	80050b4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a37      	ldr	r2, [pc, #220]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ec:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <I2Cx_MspInit+0x154>)
 80023f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023f8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x05, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2105      	movs	r1, #5
 80023fe:	2048      	movs	r0, #72	; 0x48
 8002400:	f001 fec1 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002404:	2048      	movs	r0, #72	; 0x48
 8002406:	f001 feda 	bl	80041be <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x05, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2105      	movs	r1, #5
 800240e:	2049      	movs	r0, #73	; 0x49
 8002410:	f001 feb9 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002414:	2049      	movs	r0, #73	; 0x49
 8002416:	f001 fed2 	bl	80041be <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x05, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800241a:	e04d      	b.n	80024b8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <I2Cx_MspInit+0x154>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <I2Cx_MspInit+0x154>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002438:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800243a:	2312      	movs	r3, #18
 800243c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002446:	2304      	movs	r3, #4
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800244a:	f107 031c 	add.w	r3, r7, #28
 800244e:	4619      	mov	r1, r3
 8002450:	481e      	ldr	r0, [pc, #120]	; (80024cc <I2Cx_MspInit+0x15c>)
 8002452:	f002 fe2f 	bl	80050b4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	481a      	ldr	r0, [pc, #104]	; (80024cc <I2Cx_MspInit+0x15c>)
 8002464:	f002 fe26 	bl	80050b4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <I2Cx_MspInit+0x154>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <I2Cx_MspInit+0x154>)
 800246e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <I2Cx_MspInit+0x154>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <I2Cx_MspInit+0x154>)
 8002492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002496:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x05, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2105      	movs	r1, #5
 800249c:	201f      	movs	r0, #31
 800249e:	f001 fe72 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80024a2:	201f      	movs	r0, #31
 80024a4:	f001 fe8b 	bl	80041be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x05, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2105      	movs	r1, #5
 80024ac:	2020      	movs	r0, #32
 80024ae:	f001 fe6a 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80024b2:	2020      	movs	r0, #32
 80024b4:	f001 fe83 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 80024b8:	bf00      	nop
 80024ba:	3730      	adds	r7, #48	; 0x30
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000a7a4 	.word	0x2000a7a4
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40021c00 	.word	0x40021c00
 80024cc:	40020400 	.word	0x40020400

080024d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f003 fc01 	bl	8005ce0 <HAL_I2C_GetState>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d125      	bne.n	8002530 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a14      	ldr	r2, [pc, #80]	; (8002538 <I2Cx_Init+0x68>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d103      	bne.n	80024f4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <I2Cx_Init+0x6c>)
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e002      	b.n	80024fa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <I2Cx_Init+0x70>)
 80024f8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <I2Cx_Init+0x74>)
 80024fe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff23 	bl	8002370 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f003 f8cc 	bl	80056c8 <HAL_I2C_Init>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000a7a4 	.word	0x2000a7a4
 800253c:	40005c00 	.word	0x40005c00
 8002540:	40005400 	.word	0x40005400
 8002544:	40912732 	.word	0x40912732

08002548 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af04      	add	r7, sp, #16
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4603      	mov	r3, r0
 8002558:	72fb      	strb	r3, [r7, #11]
 800255a:	460b      	mov	r3, r1
 800255c:	813b      	strh	r3, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	b299      	uxth	r1, r3
 800256a:	88f8      	ldrh	r0, [r7, #6]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4603      	mov	r3, r0
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f003 fa88 	bl	8005a94 <HAL_I2C_Mem_Read>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800258e:	7afb      	ldrb	r3, [r7, #11]
 8002590:	4619      	mov	r1, r3
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f832 	bl	80025fc <I2Cx_Error>
  }
  return status;    
 8002598:	7dfb      	ldrb	r3, [r7, #23]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08a      	sub	sp, #40	; 0x28
 80025a6:	af04      	add	r7, sp, #16
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	4608      	mov	r0, r1
 80025ac:	4611      	mov	r1, r2
 80025ae:	461a      	mov	r2, r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	72fb      	strb	r3, [r7, #11]
 80025b4:	460b      	mov	r3, r1
 80025b6:	813b      	strh	r3, [r7, #8]
 80025b8:	4613      	mov	r3, r2
 80025ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	b299      	uxth	r1, r3
 80025c4:	88f8      	ldrh	r0, [r7, #6]
 80025c6:	893a      	ldrh	r2, [r7, #8]
 80025c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4603      	mov	r3, r0
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f003 f935 	bl	8005848 <HAL_I2C_Mem_Write>
 80025de:	4603      	mov	r3, r0
 80025e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	4619      	mov	r1, r3
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f805 	bl	80025fc <I2Cx_Error>
  }
  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f003 f8ed 	bl	80057e8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ff5e 	bl	80024d0 <I2Cx_Init>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <AUDIO_IO_Init+0x10>)
 8002622:	f7ff ff55 	bl	80024d0 <I2Cx_Init>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000a7a4 	.word	0x2000a7a4

08002630 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af02      	add	r7, sp, #8
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	460b      	mov	r3, r1
 800264c:	80bb      	strh	r3, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b29b      	uxth	r3, r3
 800265c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800265e:	89fb      	ldrh	r3, [r7, #14]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b29b      	uxth	r3, r3
 8002664:	b21a      	sxth	r2, r3
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	b21b      	sxth	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	b21b      	sxth	r3, r3
 800266e:	b29b      	uxth	r3, r3
 8002670:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002672:	88ba      	ldrh	r2, [r7, #4]
 8002674:	79f9      	ldrb	r1, [r7, #7]
 8002676:	2302      	movs	r3, #2
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	1cbb      	adds	r3, r7, #2
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2302      	movs	r3, #2
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <AUDIO_IO_Write+0x50>)
 8002682:	f7ff ff8e 	bl	80025a2 <I2Cx_WriteMultiple>
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000a7a4 	.word	0x2000a7a4

08002694 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	4603      	mov	r3, r0
 800269c:	460a      	mov	r2, r1
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	4613      	mov	r3, r2
 80026a2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	81bb      	strh	r3, [r7, #12]
 80026a8:	2300      	movs	r3, #0
 80026aa:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80026ac:	88ba      	ldrh	r2, [r7, #4]
 80026ae:	79f9      	ldrb	r1, [r7, #7]
 80026b0:	2302      	movs	r3, #2
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2302      	movs	r3, #2
 80026bc:	480a      	ldr	r0, [pc, #40]	; (80026e8 <AUDIO_IO_Read+0x54>)
 80026be:	f7ff ff43 	bl	8002548 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80026c2:	89bb      	ldrh	r3, [r7, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80026c8:	89bb      	ldrh	r3, [r7, #12]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80026de:	89bb      	ldrh	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2000a7a4 	.word	0x2000a7a4

080026ec <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f001 fc49 	bl	8003f8c <HAL_Delay>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800270c:	480e      	ldr	r0, [pc, #56]	; (8002748 <HAL_SAI_ErrorCallback+0x44>)
 800270e:	f005 fd91 	bl	8008234 <HAL_SAI_GetState>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <HAL_SAI_ErrorCallback+0x48>)
 8002718:	f005 fd8c 	bl	8008234 <HAL_SAI_GetState>
 800271c:	4603      	mov	r3, r0
 800271e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d002      	beq.n	800272c <HAL_SAI_ErrorCallback+0x28>
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b12      	cmp	r3, #18
 800272a:	d101      	bne.n	8002730 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800272c:	f00a f858 	bl	800c7e0 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d002      	beq.n	800273c <HAL_SAI_ErrorCallback+0x38>
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	2b22      	cmp	r3, #34	; 0x22
 800273a:	d101      	bne.n	8002740 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 800273c:	f00a f952 	bl	800c9e4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000a7f0 	.word	0x2000a7f0
 800274c:	2000a874 	.word	0x2000a874

08002750 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a62      	ldr	r2, [pc, #392]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b60      	ldr	r3, [pc, #384]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80027ca:	230a      	movs	r3, #10
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	4845      	ldr	r0, [pc, #276]	; (80028ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 80027d6:	f002 fc6d 	bl	80050b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80027da:	2320      	movs	r3, #32
 80027dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80027ea:	230a      	movs	r3, #10
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	483d      	ldr	r0, [pc, #244]	; (80028ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 80027f6:	f002 fc5d 	bl	80050b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80027fa:	2340      	movs	r3, #64	; 0x40
 80027fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800280a:	230a      	movs	r3, #10
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	4835      	ldr	r0, [pc, #212]	; (80028ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002816:	f002 fc4d 	bl	80050b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800281a:	2310      	movs	r3, #16
 800281c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800282a:	230a      	movs	r3, #10
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	4619      	mov	r1, r3
 8002834:	482d      	ldr	r0, [pc, #180]	; (80028ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002836:	f002 fc3d 	bl	80050b4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d138      	bne.n	80028ce <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800285e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002862:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002876:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800287a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800287e:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002886:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800288a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002896:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800289a:	2204      	movs	r2, #4
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028a0:	2203      	movs	r2, #3
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028b2:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80028b4:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028c4:	f001 fdbc 	bl	8004440 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80028c8:	480a      	ldr	r0, [pc, #40]	; (80028f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80028ca:	f001 fd0b 	bl	80042e4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	210e      	movs	r1, #14
 80028d2:	203c      	movs	r0, #60	; 0x3c
 80028d4:	f001 fc57 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80028d8:	203c      	movs	r0, #60	; 0x3c
 80028da:	f001 fc70 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3730      	adds	r7, #48	; 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40015c04 	.word	0x40015c04
 80028f4:	2000a8f8 	.word	0x2000a8f8
 80028f8:	40026470 	.word	0x40026470

080028fc <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b0a6      	sub	sp, #152	; 0x98
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4618      	mov	r0, r3
 800290e:	f004 ff95 	bl	800783c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f245 6222 	movw	r2, #22050	; 0x5622
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f64a 4244 	movw	r2, #44100	; 0xac44
 800292c:	4293      	cmp	r3, r2
 800292e:	d112      	bne.n	8002956 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002930:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002934:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800293a:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800293c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8002940:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8002942:	2302      	movs	r3, #2
 8002944:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8002946:	2313      	movs	r3, #19
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4618      	mov	r0, r3
 8002950:	f004 fb86 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
 8002954:	e011      	b.n	800297a <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002956:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800295a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800295c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002960:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8002962:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002966:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8002968:	2307      	movs	r3, #7
 800296a:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800296c:	2301      	movs	r3, #1
 800296e:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4618      	mov	r0, r3
 8002976:	f004 fb73 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800297a:	bf00      	nop
 800297c:	3798      	adds	r7, #152	; 0x98
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002998:	f000 f806 	bl	80029a8 <BSP_AUDIO_IN_InitEx>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4603      	mov	r3, r0
 80029b6:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029c6:	d006      	beq.n	80029d6 <BSP_AUDIO_IN_InitEx+0x2e>
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ce:	d002      	beq.n	80029d6 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e046      	b.n	8002a64 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80029d6:	f000 fa09 	bl	8002dec <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80029da:	2200      	movs	r2, #0
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4824      	ldr	r0, [pc, #144]	; (8002a70 <BSP_AUDIO_IN_InitEx+0xc8>)
 80029e0:	f7ff ff8c 	bl	80028fc <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <BSP_AUDIO_IN_InitEx+0xc8>)
 80029e6:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <BSP_AUDIO_IN_InitEx+0xcc>)
 80029e8:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80029ea:	4821      	ldr	r0, [pc, #132]	; (8002a70 <BSP_AUDIO_IN_InitEx+0xc8>)
 80029ec:	f005 fc22 	bl	8008234 <HAL_SAI_GetState>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80029f6:	2100      	movs	r1, #0
 80029f8:	481d      	ldr	r0, [pc, #116]	; (8002a70 <BSP_AUDIO_IN_InitEx+0xc8>)
 80029fa:	f7ff fea9 	bl	8002750 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80029fe:	2100      	movs	r1, #0
 8002a00:	481b      	ldr	r0, [pc, #108]	; (8002a70 <BSP_AUDIO_IN_InitEx+0xc8>)
 8002a02:	f000 f88b 	bl	8002b1c <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a0c:	d102      	bne.n	8002a14 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8002a0e:	230a      	movs	r3, #10
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e001      	b.n	8002a18 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002a14:	2305      	movs	r3, #5
 8002a16:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f000 f92f 	bl	8002c80 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <BSP_AUDIO_IN_InitEx+0xd0>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	4798      	blx	r3
 8002a2a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f648 1294 	movw	r2, #35220	; 0x8994
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d109      	bne.n	8002a4a <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <BSP_AUDIO_IN_InitEx+0xd0>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	2034      	movs	r0, #52	; 0x34
 8002a3c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <BSP_AUDIO_IN_InitEx+0xd4>)
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <BSP_AUDIO_IN_InitEx+0xd0>)
 8002a42:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
 8002a48:	e001      	b.n	8002a4e <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <BSP_AUDIO_IN_InitEx+0xd4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681c      	ldr	r4, [r3, #0]
 8002a5a:	89f9      	ldrh	r1, [r7, #14]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2264      	movs	r2, #100	; 0x64
 8002a60:	2034      	movs	r0, #52	; 0x34
 8002a62:	47a0      	blx	r4
    }
  }
  return ret;
 8002a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000a874 	.word	0x2000a874
 8002a74:	40015c24 	.word	0x40015c24
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	200212cc 	.word	0x200212cc

08002a80 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <BSP_AUDIO_IN_Record+0x2c>)
 8002a98:	f005 fb3e 	bl	8008118 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	b2db      	uxtb	r3, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000a874 	.word	0x2000a874

08002ab0 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <BSP_AUDIO_IN_Stop+0x3c>)
 8002aba:	f005 faba 	bl	8008032 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <BSP_AUDIO_IN_Stop+0x40>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	2034      	movs	r0, #52	; 0x34
 8002ac8:	4798      	blx	r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e006      	b.n	8002ae2 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f001 fa56 	bl	8003f8c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8002ae0:	2300      	movs	r3, #0
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000a874 	.word	0x2000a874
 8002af0:	200212cc 	.word	0x200212cc

08002af4 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002afc:	f009 ff5a 	bl	800c9b4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002b10:	f009 ff5c 	bl	800c9cc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002b26:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002b64:	2302      	movs	r3, #2
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002b68:	230a      	movs	r3, #10
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	4619      	mov	r1, r3
 8002b72:	483e      	ldr	r0, [pc, #248]	; (8002c6c <BSP_AUDIO_IN_MspInit+0x150>)
 8002b74:	f002 fa9e 	bl	80050b4 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4831      	ldr	r0, [pc, #196]	; (8002c70 <BSP_AUDIO_IN_MspInit+0x154>)
 8002baa:	f002 fa83 	bl	80050b4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <BSP_AUDIO_IN_MspInit+0x158>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d137      	bne.n	8002c40 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002bdc:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be8:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf0:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bf8:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c00:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c08:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c12:	2203      	movs	r2, #3
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <BSP_AUDIO_IN_MspInit+0x160>)
 8002c26:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002c34:	4810      	ldr	r0, [pc, #64]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c36:	f001 fc03 	bl	8004440 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002c3a:	480f      	ldr	r0, [pc, #60]	; (8002c78 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002c3c:	f001 fb52 	bl	80042e4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	210f      	movs	r1, #15
 8002c44:	2046      	movs	r0, #70	; 0x46
 8002c46:	f001 fa9e 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002c4a:	2046      	movs	r0, #70	; 0x46
 8002c4c:	f001 fab7 	bl	80041be <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	210f      	movs	r1, #15
 8002c54:	2028      	movs	r0, #40	; 0x28
 8002c56:	f001 fa96 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002c5a:	2028      	movs	r0, #40	; 0x28
 8002c5c:	f001 faaf 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 8002c60:	bf00      	nop
 8002c62:	3730      	adds	r7, #48	; 0x30
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40021c00 	.word	0x40021c00
 8002c74:	40015c24 	.word	0x40015c24
 8002c78:	2000a958 	.word	0x2000a958
 8002c7c:	400264b8 	.word	0x400264b8

08002c80 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002c8e:	4a54      	ldr	r2, [pc, #336]	; (8002de0 <SAIx_In_Init+0x160>)
 8002c90:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002c92:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002ca2:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002cae:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002cb4:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002cba:	4b48      	ldr	r3, [pc, #288]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002cc0:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002cc6:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd8:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002cda:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8002ce0:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002ce8:	2220      	movs	r2, #32
 8002cea:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cf2:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002cfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002d08:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002d0e:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002d10:	2204      	movs	r2, #4
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002d14:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002d1a:	4830      	ldr	r0, [pc, #192]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002d1c:	f004 ffce 	bl	8007cbc <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d22:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <SAIx_In_Init+0x168>)
 8002d24:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d34:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002d36:	4a2b      	ldr	r2, [pc, #172]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002d3c:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d3e:	2203      	movs	r2, #3
 8002d40:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002d5a:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002d66:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002d7e:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d84:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d8e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <SAIx_In_Init+0x164>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <SAIx_In_Init+0x164>)
 8002da2:	2204      	movs	r2, #4
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8002da6:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <SAIx_In_Init+0x164>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <SAIx_In_Init+0x164>)
 8002dae:	f004 ff85 	bl	8007cbc <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <SAIx_In_Init+0x15c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <SAIx_In_Init+0x164>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <SAIx_In_Init+0x164>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000a7f0 	.word	0x2000a7f0
 8002de0:	40015c04 	.word	0x40015c04
 8002de4:	2000a874 	.word	0x2000a874
 8002de8:	40015c24 	.word	0x40015c24

08002dec <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <SAIx_In_DeInit+0x24>)
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <SAIx_In_DeInit+0x28>)
 8002df4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <SAIx_In_DeInit+0x24>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <SAIx_In_DeInit+0x24>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e04:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002e06:	4802      	ldr	r0, [pc, #8]	; (8002e10 <SAIx_In_DeInit+0x24>)
 8002e08:	f005 f8ca 	bl	8007fa0 <HAL_SAI_DeInit>
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000a874 	.word	0x2000a874
 8002e14:	40015c24 	.word	0x40015c24

08002e18 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e1e:	2228      	movs	r2, #40	; 0x28
 8002e20:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002e22:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e24:	2209      	movs	r2, #9
 8002e26:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e2a:	2235      	movs	r2, #53	; 0x35
 8002e2c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e30:	220b      	movs	r2, #11
 8002e32:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e36:	f240 121b 	movw	r2, #283	; 0x11b
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002e3c:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e3e:	f240 2215 	movw	r2, #533	; 0x215
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e46:	f240 121d 	movw	r2, #285	; 0x11d
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e4e:	f240 2235 	movw	r2, #565	; 0x235
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002e54:	2100      	movs	r1, #0
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e58:	f000 fd4e 	bl	80038f8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e62:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e66:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002e6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <BSP_LCD_Init+0xd0>)
 8002ea0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002ea2:	4810      	ldr	r0, [pc, #64]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002ea4:	f003 faa0 	bl	80063e8 <HAL_LTDC_GetState>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002eb2:	f000 fc47 	bl	8003744 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002eb6:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <BSP_LCD_Init+0xcc>)
 8002eb8:	f003 f946 	bl	8006148 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ec2:	480a      	ldr	r0, [pc, #40]	; (8002eec <BSP_LCD_Init+0xd4>)
 8002ec4:	f002 fbc2 	bl	800564c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002ec8:	2201      	movs	r2, #1
 8002eca:	2108      	movs	r1, #8
 8002ecc:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <BSP_LCD_Init+0xd8>)
 8002ece:	f002 fbbd 	bl	800564c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002ed2:	f000 fe31 	bl	8003b38 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ed6:	4807      	ldr	r0, [pc, #28]	; (8002ef4 <BSP_LCD_Init+0xdc>)
 8002ed8:	f000 f8ea 	bl	80030b0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000a9b8 	.word	0x2000a9b8
 8002ee8:	40016800 	.word	0x40016800
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40022800 	.word	0x40022800
 8002ef4:	20009dc4 	.word	0x20009dc4

08002ef8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <BSP_LCD_GetXSize+0x20>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <BSP_LCD_GetXSize+0x24>)
 8002f02:	2134      	movs	r1, #52	; 0x34
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3360      	adds	r3, #96	; 0x60
 8002f0c:	681b      	ldr	r3, [r3, #0]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	2000aaa0 	.word	0x2000aaa0
 8002f1c:	2000a9b8 	.word	0x2000a9b8

08002f20 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <BSP_LCD_GetYSize+0x20>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <BSP_LCD_GetYSize+0x24>)
 8002f2a:	2134      	movs	r1, #52	; 0x34
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3364      	adds	r3, #100	; 0x64
 8002f34:	681b      	ldr	r3, [r3, #0]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	2000aaa0 	.word	0x2000aaa0
 8002f44:	2000a9b8 	.word	0x2000a9b8

08002f48 <BSP_LCD_LayerRgb565Init>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b090      	sub	sp, #64	; 0x40
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002f58:	f7ff ffce 	bl	8002ef8 <BSP_LCD_GetXSize>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002f64:	f7ff ffdc 	bl	8002f20 <BSP_LCD_GetYSize>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002f74:	23ff      	movs	r3, #255	; 0xff
 8002f76:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002f8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f94:	2307      	movs	r3, #7
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002f98:	f7ff ffae 	bl	8002ef8 <BSP_LCD_GetXSize>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002fa0:	f7ff ffbe 	bl	8002f20 <BSP_LCD_GetYSize>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4812      	ldr	r0, [pc, #72]	; (8002ffc <BSP_LCD_LayerRgb565Init+0xb4>)
 8002fb2:	f003 f9a5 	bl	8006300 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	4911      	ldr	r1, [pc, #68]	; (8003000 <BSP_LCD_LayerRgb565Init+0xb8>)
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	490c      	ldr	r1, [pc, #48]	; (8003000 <BSP_LCD_LayerRgb565Init+0xb8>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3308      	adds	r3, #8
 8002fdc:	4a09      	ldr	r2, [pc, #36]	; (8003004 <BSP_LCD_LayerRgb565Init+0xbc>)
 8002fde:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	4907      	ldr	r1, [pc, #28]	; (8003000 <BSP_LCD_LayerRgb565Init+0xb8>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	3740      	adds	r7, #64	; 0x40
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000a9b8 	.word	0x2000a9b8
 8003000:	2000aaa4 	.word	0x2000aaa4
 8003004:	20009dc4 	.word	0x20009dc4

08003008 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <BSP_LCD_SelectLayer+0x1c>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6013      	str	r3, [r2, #0]
} 
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000aaa0 	.word	0x2000aaa0

08003028 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	4803      	ldr	r0, [pc, #12]	; (8003048 <BSP_LCD_SetTransparency+0x20>)
 800303c:	f003 f99e 	bl	800637c <HAL_LTDC_SetAlpha>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	2000a9b8 	.word	0x2000a9b8

0800304c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <BSP_LCD_SetTextColor+0x28>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <BSP_LCD_SetTextColor+0x2c>)
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	2000aaa0 	.word	0x2000aaa0
 8003078:	2000aaa4 	.word	0x2000aaa4

0800307c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <BSP_LCD_SetBackColor+0x2c>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4908      	ldr	r1, [pc, #32]	; (80030ac <BSP_LCD_SetBackColor+0x30>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3304      	adds	r3, #4
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	601a      	str	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000aaa0 	.word	0x2000aaa0
 80030ac:	2000aaa4 	.word	0x2000aaa4

080030b0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <BSP_LCD_SetFont+0x2c>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4908      	ldr	r1, [pc, #32]	; (80030e0 <BSP_LCD_SetFont+0x30>)
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3308      	adds	r3, #8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000aaa0 	.word	0x2000aaa0
 80030e0:	2000aaa4 	.word	0x2000aaa4

080030e4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <BSP_LCD_GetFont+0x24>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <BSP_LCD_GetFont+0x28>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3308      	adds	r3, #8
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	2000aaa0 	.word	0x2000aaa0
 800310c:	2000aaa4 	.word	0x2000aaa4

08003110 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003112:	b085      	sub	sp, #20
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <BSP_LCD_Clear+0x48>)
 800311a:	681c      	ldr	r4, [r3, #0]
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <BSP_LCD_Clear+0x48>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0e      	ldr	r2, [pc, #56]	; (800315c <BSP_LCD_Clear+0x4c>)
 8003122:	2134      	movs	r1, #52	; 0x34
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	335c      	adds	r3, #92	; 0x5c
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461d      	mov	r5, r3
 8003130:	f7ff fee2 	bl	8002ef8 <BSP_LCD_GetXSize>
 8003134:	4606      	mov	r6, r0
 8003136:	f7ff fef3 	bl	8002f20 <BSP_LCD_GetYSize>
 800313a:	4602      	mov	r2, r0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	4632      	mov	r2, r6
 8003148:	4629      	mov	r1, r5
 800314a:	4620      	mov	r0, r4
 800314c:	f000 fca8 	bl	8003aa0 <LL_FillBuffer>
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003158:	2000aaa0 	.word	0x2000aaa0
 800315c:	2000a9b8 	.word	0x2000a9b8

08003160 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
 800316a:	460b      	mov	r3, r1
 800316c:	80bb      	strh	r3, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <BSP_LCD_DisplayChar+0x80>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	491b      	ldr	r1, [pc, #108]	; (80031e4 <BSP_LCD_DisplayChar+0x84>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3308      	adds	r3, #8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <BSP_LCD_DisplayChar+0x80>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4c14      	ldr	r4, [pc, #80]	; (80031e4 <BSP_LCD_DisplayChar+0x84>)
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4423      	add	r3, r4
 800319e:	3308      	adds	r3, #8
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031a4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <BSP_LCD_DisplayChar+0x80>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4c0d      	ldr	r4, [pc, #52]	; (80031e4 <BSP_LCD_DisplayChar+0x84>)
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4423      	add	r3, r4
 80031b8:	3308      	adds	r3, #8
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	889b      	ldrh	r3, [r3, #4]
 80031be:	3307      	adds	r3, #7
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	da00      	bge.n	80031c6 <BSP_LCD_DisplayChar+0x66>
 80031c4:	3307      	adds	r3, #7
 80031c6:	10db      	asrs	r3, r3, #3
 80031c8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031cc:	18ca      	adds	r2, r1, r3
 80031ce:	88b9      	ldrh	r1, [r7, #4]
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fbac 	bl	8003930 <DrawChar>
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	2000aaa0 	.word	0x2000aaa0
 80031e4:	2000aaa4 	.word	0x2000aaa4

080031e8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, const char* Text, Text_AlignModeTypdef Mode)
{
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60ba      	str	r2, [r7, #8]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	81fb      	strh	r3, [r7, #14]
 80031f6:	460b      	mov	r3, r1
 80031f8:	81bb      	strh	r3, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80031fe:	2301      	movs	r3, #1
 8003200:	83fb      	strh	r3, [r7, #30]
 8003202:	2300      	movs	r3, #0
 8003204:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003212:	e002      	b.n	800321a <BSP_LCD_DisplayStringAt+0x32>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	3301      	adds	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	617a      	str	r2, [r7, #20]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f6      	bne.n	8003214 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003226:	f7ff fe67 	bl	8002ef8 <BSP_LCD_GetXSize>
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <BSP_LCD_DisplayStringAt+0x180>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	494f      	ldr	r1, [pc, #316]	; (800336c <BSP_LCD_DisplayStringAt+0x184>)
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	3308      	adds	r3, #8
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	889b      	ldrh	r3, [r3, #4]
 8003240:	fbb0 f3f3 	udiv	r3, r0, r3
 8003244:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d01c      	beq.n	8003286 <BSP_LCD_DisplayStringAt+0x9e>
 800324c:	2b03      	cmp	r3, #3
 800324e:	d017      	beq.n	8003280 <BSP_LCD_DisplayStringAt+0x98>
 8003250:	2b01      	cmp	r3, #1
 8003252:	d12e      	bne.n	80032b2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad1      	subs	r1, r2, r3
 800325a:	4b43      	ldr	r3, [pc, #268]	; (8003368 <BSP_LCD_DisplayStringAt+0x180>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4843      	ldr	r0, [pc, #268]	; (800336c <BSP_LCD_DisplayStringAt+0x184>)
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4403      	add	r3, r0
 800326a:	3308      	adds	r3, #8
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	889b      	ldrh	r3, [r3, #4]
 8003270:	fb03 f301 	mul.w	r3, r3, r1
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	89fb      	ldrh	r3, [r7, #14]
 800327a:	4413      	add	r3, r2
 800327c:	83fb      	strh	r3, [r7, #30]
      break;
 800327e:	e01b      	b.n	80032b8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	83fb      	strh	r3, [r7, #30]
      break;
 8003284:	e018      	b.n	80032b8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	b299      	uxth	r1, r3
 800328e:	4b36      	ldr	r3, [pc, #216]	; (8003368 <BSP_LCD_DisplayStringAt+0x180>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4836      	ldr	r0, [pc, #216]	; (800336c <BSP_LCD_DisplayStringAt+0x184>)
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4403      	add	r3, r0
 800329e:	3308      	adds	r3, #8
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	889b      	ldrh	r3, [r3, #4]
 80032a4:	fb11 f303 	smulbb	r3, r1, r3
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	83fb      	strh	r3, [r7, #30]
      break;
 80032b0:	e002      	b.n	80032b8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	83fb      	strh	r3, [r7, #30]
      break;
 80032b6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80032b8:	8bfb      	ldrh	r3, [r7, #30]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <BSP_LCD_DisplayStringAt+0xde>
 80032be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da1d      	bge.n	8003302 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80032ca:	e01a      	b.n	8003302 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	89b9      	ldrh	r1, [r7, #12]
 80032d2:	8bfb      	ldrh	r3, [r7, #30]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff43 	bl	8003160 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80032da:	4b23      	ldr	r3, [pc, #140]	; (8003368 <BSP_LCD_DisplayStringAt+0x180>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4923      	ldr	r1, [pc, #140]	; (800336c <BSP_LCD_DisplayStringAt+0x184>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3308      	adds	r3, #8
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	889a      	ldrh	r2, [r3, #4]
 80032f0:	8bfb      	ldrh	r3, [r7, #30]
 80032f2:	4413      	add	r3, r2
 80032f4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
    i++;
 80032fc:	8bbb      	ldrh	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2dc      	uxtb	r4, r3
 8003310:	f7ff fdf2 	bl	8002ef8 <BSP_LCD_GetXSize>
 8003314:	4605      	mov	r5, r0
 8003316:	8bb9      	ldrh	r1, [r7, #28]
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <BSP_LCD_DisplayStringAt+0x180>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4813      	ldr	r0, [pc, #76]	; (800336c <BSP_LCD_DisplayStringAt+0x184>)
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4403      	add	r3, r0
 8003328:	3308      	adds	r3, #8
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	889b      	ldrh	r3, [r3, #4]
 800332e:	fb03 f301 	mul.w	r3, r3, r1
 8003332:	1aeb      	subs	r3, r5, r3
 8003334:	b299      	uxth	r1, r3
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <BSP_LCD_DisplayStringAt+0x180>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	480c      	ldr	r0, [pc, #48]	; (800336c <BSP_LCD_DisplayStringAt+0x184>)
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4403      	add	r3, r0
 8003346:	3308      	adds	r3, #8
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	889b      	ldrh	r3, [r3, #4]
 800334c:	4299      	cmp	r1, r3
 800334e:	bf2c      	ite	cs
 8003350:	2301      	movcs	r3, #1
 8003352:	2300      	movcc	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4023      	ands	r3, r4
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1b6      	bne.n	80032cc <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800335e:	bf00      	nop
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	bf00      	nop
 8003368:	2000aaa0 	.word	0x2000aaa0
 800336c:	2000aaa4 	.word	0x2000aaa4

08003370 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800337c:	f7ff feb2 	bl	80030e4 <BSP_LCD_GetFont>
 8003380:	4603      	mov	r3, r0
 8003382:	88db      	ldrh	r3, [r3, #6]
 8003384:	88fa      	ldrh	r2, [r7, #6]
 8003386:	fb12 f303 	smulbb	r3, r2, r3
 800338a:	b299      	uxth	r1, r3
 800338c:	2303      	movs	r3, #3
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff ff29 	bl	80031e8 <BSP_LCD_DisplayStringAt>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
 80033aa:	460b      	mov	r3, r1
 80033ac:	80bb      	strh	r3, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <BSP_LCD_DrawHLine+0xb0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a26      	ldr	r2, [pc, #152]	; (8003454 <BSP_LCD_DrawHLine+0xb4>)
 80033bc:	2134      	movs	r1, #52	; 0x34
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3348      	adds	r3, #72	; 0x48
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d114      	bne.n	80033f6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <BSP_LCD_DrawHLine+0xb0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <BSP_LCD_DrawHLine+0xb4>)
 80033d2:	2134      	movs	r1, #52	; 0x34
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	335c      	adds	r3, #92	; 0x5c
 80033dc:	681c      	ldr	r4, [r3, #0]
 80033de:	f7ff fd8b 	bl	8002ef8 <BSP_LCD_GetXSize>
 80033e2:	4602      	mov	r2, r0
 80033e4:	88bb      	ldrh	r3, [r7, #4]
 80033e6:	fb03 f202 	mul.w	r2, r3, r2
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	4413      	add	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4423      	add	r3, r4
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e013      	b.n	800341e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <BSP_LCD_DrawHLine+0xb0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <BSP_LCD_DrawHLine+0xb4>)
 80033fc:	2134      	movs	r1, #52	; 0x34
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	335c      	adds	r3, #92	; 0x5c
 8003406:	681c      	ldr	r4, [r3, #0]
 8003408:	f7ff fd76 	bl	8002ef8 <BSP_LCD_GetXSize>
 800340c:	4602      	mov	r2, r0
 800340e:	88bb      	ldrh	r3, [r7, #4]
 8003410:	fb03 f202 	mul.w	r2, r3, r2
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4423      	add	r3, r4
 800341c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <BSP_LCD_DrawHLine+0xb0>)
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	68fc      	ldr	r4, [r7, #12]
 8003424:	887d      	ldrh	r5, [r7, #2]
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <BSP_LCD_DrawHLine+0xb0>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	490b      	ldr	r1, [pc, #44]	; (8003458 <BSP_LCD_DrawHLine+0xb8>)
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2300      	movs	r3, #0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2301      	movs	r3, #1
 8003440:	462a      	mov	r2, r5
 8003442:	4621      	mov	r1, r4
 8003444:	f000 fb2c 	bl	8003aa0 <LL_FillBuffer>
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bdb0      	pop	{r4, r5, r7, pc}
 8003450:	2000aaa0 	.word	0x2000aaa0
 8003454:	2000a9b8 	.word	0x2000a9b8
 8003458:	2000aaa4 	.word	0x2000aaa4

0800345c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af02      	add	r7, sp, #8
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
 8003466:	460b      	mov	r3, r1
 8003468:	80bb      	strh	r3, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <BSP_LCD_DrawVLine+0xb8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <BSP_LCD_DrawVLine+0xbc>)
 8003478:	2134      	movs	r1, #52	; 0x34
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	3348      	adds	r3, #72	; 0x48
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d114      	bne.n	80034b2 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003488:	4b22      	ldr	r3, [pc, #136]	; (8003514 <BSP_LCD_DrawVLine+0xb8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a22      	ldr	r2, [pc, #136]	; (8003518 <BSP_LCD_DrawVLine+0xbc>)
 800348e:	2134      	movs	r1, #52	; 0x34
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	335c      	adds	r3, #92	; 0x5c
 8003498:	681c      	ldr	r4, [r3, #0]
 800349a:	f7ff fd2d 	bl	8002ef8 <BSP_LCD_GetXSize>
 800349e:	4602      	mov	r2, r0
 80034a0:	88bb      	ldrh	r3, [r7, #4]
 80034a2:	fb03 f202 	mul.w	r2, r3, r2
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	4413      	add	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4423      	add	r3, r4
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e013      	b.n	80034da <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <BSP_LCD_DrawVLine+0xb8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a18      	ldr	r2, [pc, #96]	; (8003518 <BSP_LCD_DrawVLine+0xbc>)
 80034b8:	2134      	movs	r1, #52	; 0x34
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	335c      	adds	r3, #92	; 0x5c
 80034c2:	681c      	ldr	r4, [r3, #0]
 80034c4:	f7ff fd18 	bl	8002ef8 <BSP_LCD_GetXSize>
 80034c8:	4602      	mov	r2, r0
 80034ca:	88bb      	ldrh	r3, [r7, #4]
 80034cc:	fb03 f202 	mul.w	r2, r3, r2
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4423      	add	r3, r4
 80034d8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <BSP_LCD_DrawVLine+0xb8>)
 80034dc:	681c      	ldr	r4, [r3, #0]
 80034de:	68fd      	ldr	r5, [r7, #12]
 80034e0:	887e      	ldrh	r6, [r7, #2]
 80034e2:	f7ff fd09 	bl	8002ef8 <BSP_LCD_GetXSize>
 80034e6:	4603      	mov	r3, r0
 80034e8:	1e59      	subs	r1, r3, #1
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <BSP_LCD_DrawVLine+0xb8>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	480b      	ldr	r0, [pc, #44]	; (800351c <BSP_LCD_DrawVLine+0xc0>)
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4403      	add	r3, r0
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	9100      	str	r1, [sp, #0]
 8003500:	4633      	mov	r3, r6
 8003502:	2201      	movs	r2, #1
 8003504:	4629      	mov	r1, r5
 8003506:	4620      	mov	r0, r4
 8003508:	f000 faca 	bl	8003aa0 <LL_FillBuffer>
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003514:	2000aaa0 	.word	0x2000aaa0
 8003518:	2000a9b8 	.word	0x2000a9b8
 800351c:	2000aaa4 	.word	0x2000aaa4

08003520 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4604      	mov	r4, r0
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4623      	mov	r3, r4
 8003530:	80fb      	strh	r3, [r7, #6]
 8003532:	4603      	mov	r3, r0
 8003534:	80bb      	strh	r3, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	807b      	strh	r3, [r7, #2]
 800353a:	4613      	mov	r3, r2
 800353c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	88b9      	ldrh	r1, [r7, #4]
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff2b 	bl	80033a0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800354a:	88ba      	ldrh	r2, [r7, #4]
 800354c:	883b      	ldrh	r3, [r7, #0]
 800354e:	4413      	add	r3, r2
 8003550:	b299      	uxth	r1, r3
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff22 	bl	80033a0 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800355c:	883a      	ldrh	r2, [r7, #0]
 800355e:	88b9      	ldrh	r1, [r7, #4]
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff7a 	bl	800345c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003568:	88fa      	ldrh	r2, [r7, #6]
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	4413      	add	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	883a      	ldrh	r2, [r7, #0]
 8003572:	88b9      	ldrh	r1, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff71 	bl	800345c <BSP_LCD_DrawVLine>
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bd90      	pop	{r4, r7, pc}
	...

08003584 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	603a      	str	r2, [r7, #0]
 800358e:	80fb      	strh	r3, [r7, #6]
 8003590:	460b      	mov	r3, r1
 8003592:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <BSP_LCD_DrawPixel+0x88>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <BSP_LCD_DrawPixel+0x8c>)
 800359a:	2134      	movs	r1, #52	; 0x34
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3348      	adds	r3, #72	; 0x48
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d116      	bne.n	80035d8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <BSP_LCD_DrawPixel+0x88>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	; (8003610 <BSP_LCD_DrawPixel+0x8c>)
 80035b0:	2134      	movs	r1, #52	; 0x34
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	335c      	adds	r3, #92	; 0x5c
 80035ba:	681c      	ldr	r4, [r3, #0]
 80035bc:	88bd      	ldrh	r5, [r7, #4]
 80035be:	f7ff fc9b 	bl	8002ef8 <BSP_LCD_GetXSize>
 80035c2:	4603      	mov	r3, r0
 80035c4:	fb03 f205 	mul.w	r2, r3, r5
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4413      	add	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	4423      	add	r3, r4
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b292      	uxth	r2, r2
 80035d4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80035d6:	e015      	b.n	8003604 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <BSP_LCD_DrawPixel+0x88>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <BSP_LCD_DrawPixel+0x8c>)
 80035de:	2134      	movs	r1, #52	; 0x34
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	335c      	adds	r3, #92	; 0x5c
 80035e8:	681c      	ldr	r4, [r3, #0]
 80035ea:	88bd      	ldrh	r5, [r7, #4]
 80035ec:	f7ff fc84 	bl	8002ef8 <BSP_LCD_GetXSize>
 80035f0:	4603      	mov	r3, r0
 80035f2:	fb03 f205 	mul.w	r2, r3, r5
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4423      	add	r3, r4
 80035fe:	461a      	mov	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bdb0      	pop	{r4, r5, r7, pc}
 800360c:	2000aaa0 	.word	0x2000aaa0
 8003610:	2000a9b8 	.word	0x2000a9b8

08003614 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af02      	add	r7, sp, #8
 800361c:	4604      	mov	r4, r0
 800361e:	4608      	mov	r0, r1
 8003620:	4611      	mov	r1, r2
 8003622:	461a      	mov	r2, r3
 8003624:	4623      	mov	r3, r4
 8003626:	80fb      	strh	r3, [r7, #6]
 8003628:	4603      	mov	r3, r0
 800362a:	80bb      	strh	r3, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	807b      	strh	r3, [r7, #2]
 8003630:	4613      	mov	r3, r2
 8003632:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <BSP_LCD_FillRect+0xe8>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4930      	ldr	r1, [pc, #192]	; (8003700 <BSP_LCD_FillRect+0xec>)
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fcfe 	bl	800304c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <BSP_LCD_FillRect+0xe8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <BSP_LCD_FillRect+0xf0>)
 8003656:	2134      	movs	r1, #52	; 0x34
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3348      	adds	r3, #72	; 0x48
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d114      	bne.n	8003690 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003666:	4b25      	ldr	r3, [pc, #148]	; (80036fc <BSP_LCD_FillRect+0xe8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a26      	ldr	r2, [pc, #152]	; (8003704 <BSP_LCD_FillRect+0xf0>)
 800366c:	2134      	movs	r1, #52	; 0x34
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	681c      	ldr	r4, [r3, #0]
 8003678:	f7ff fc3e 	bl	8002ef8 <BSP_LCD_GetXSize>
 800367c:	4602      	mov	r2, r0
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	fb03 f202 	mul.w	r2, r3, r2
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4423      	add	r3, r4
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e013      	b.n	80036b8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <BSP_LCD_FillRect+0xe8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <BSP_LCD_FillRect+0xf0>)
 8003696:	2134      	movs	r1, #52	; 0x34
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	335c      	adds	r3, #92	; 0x5c
 80036a0:	681c      	ldr	r4, [r3, #0]
 80036a2:	f7ff fc29 	bl	8002ef8 <BSP_LCD_GetXSize>
 80036a6:	4602      	mov	r2, r0
 80036a8:	88bb      	ldrh	r3, [r7, #4]
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4423      	add	r3, r4
 80036b6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <BSP_LCD_FillRect+0xe8>)
 80036ba:	681c      	ldr	r4, [r3, #0]
 80036bc:	68fd      	ldr	r5, [r7, #12]
 80036be:	887e      	ldrh	r6, [r7, #2]
 80036c0:	f8b7 8000 	ldrh.w	r8, [r7]
 80036c4:	f7ff fc18 	bl	8002ef8 <BSP_LCD_GetXSize>
 80036c8:	4602      	mov	r2, r0
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	1ad1      	subs	r1, r2, r3
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <BSP_LCD_FillRect+0xe8>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	480b      	ldr	r0, [pc, #44]	; (8003700 <BSP_LCD_FillRect+0xec>)
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4403      	add	r3, r0
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	9100      	str	r1, [sp, #0]
 80036e4:	4643      	mov	r3, r8
 80036e6:	4632      	mov	r2, r6
 80036e8:	4629      	mov	r1, r5
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 f9d8 	bl	8003aa0 <LL_FillBuffer>
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036fa:	bf00      	nop
 80036fc:	2000aaa0 	.word	0x2000aaa0
 8003700:	2000aaa4 	.word	0x2000aaa4
 8003704:	2000a9b8 	.word	0x2000a9b8

08003708 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <BSP_LCD_DisplayOn+0x30>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <BSP_LCD_DisplayOn+0x30>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800371c:	2201      	movs	r2, #1
 800371e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <BSP_LCD_DisplayOn+0x34>)
 8003724:	f001 ff92 	bl	800564c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003728:	2201      	movs	r2, #1
 800372a:	2108      	movs	r1, #8
 800372c:	4804      	ldr	r0, [pc, #16]	; (8003740 <BSP_LCD_DisplayOn+0x38>)
 800372e:	f001 ff8d 	bl	800564c <HAL_GPIO_WritePin>
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000a9b8 	.word	0x2000a9b8
 800373c:	40022000 	.word	0x40022000
 8003740:	40022800 	.word	0x40022800

08003744 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b090      	sub	sp, #64	; 0x40
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800374e:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003758:	6453      	str	r3, [r2, #68]	; 0x44
 800375a:	4b61      	ldr	r3, [pc, #388]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003766:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 800376c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800377e:	4b58      	ldr	r3, [pc, #352]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003784:	f043 0310 	orr.w	r3, r3, #16
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003796:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80037ae:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037c6:	4b46      	ldr	r3, [pc, #280]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a45      	ldr	r2, [pc, #276]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80037de:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a3f      	ldr	r2, [pc, #252]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	4a39      	ldr	r2, [pc, #228]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6313      	str	r3, [r2, #48]	; 0x30
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 8003814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <BSP_LCD_MspInit+0x19c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003826:	2310      	movs	r3, #16
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003832:	2302      	movs	r3, #2
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003836:	230e      	movs	r3, #14
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800383a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800383e:	4619      	mov	r1, r3
 8003840:	4828      	ldr	r0, [pc, #160]	; (80038e4 <BSP_LCD_MspInit+0x1a0>)
 8003842:	f001 fc37 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003850:	2309      	movs	r3, #9
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003858:	4619      	mov	r1, r3
 800385a:	4823      	ldr	r0, [pc, #140]	; (80038e8 <BSP_LCD_MspInit+0x1a4>)
 800385c:	f001 fc2a 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8003860:	f44f 4367 	mov.w	r3, #59136	; 0xe700
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800386a:	230e      	movs	r3, #14
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800386e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003872:	4619      	mov	r1, r3
 8003874:	481d      	ldr	r0, [pc, #116]	; (80038ec <BSP_LCD_MspInit+0x1a8>)
 8003876:	f001 fc1d 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800387a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003884:	230e      	movs	r3, #14
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388c:	4619      	mov	r1, r3
 800388e:	4818      	ldr	r0, [pc, #96]	; (80038f0 <BSP_LCD_MspInit+0x1ac>)
 8003890:	f001 fc10 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003894:	23f7      	movs	r3, #247	; 0xf7
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800389c:	230e      	movs	r3, #14
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80038a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a4:	4619      	mov	r1, r3
 80038a6:	4813      	ldr	r0, [pc, #76]	; (80038f4 <BSP_LCD_MspInit+0x1b0>)
 80038a8:	f001 fc04 	bl	80050b4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80038ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80038b2:	2301      	movs	r3, #1
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80038b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ba:	4619      	mov	r1, r3
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <BSP_LCD_MspInit+0x1a8>)
 80038be:	f001 fbf9 	bl	80050b4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80038c2:	2308      	movs	r3, #8
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80038c6:	2301      	movs	r3, #1
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80038ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ce:	4619      	mov	r1, r3
 80038d0:	4808      	ldr	r0, [pc, #32]	; (80038f4 <BSP_LCD_MspInit+0x1b0>)
 80038d2:	f001 fbef 	bl	80050b4 <HAL_GPIO_Init>
}
 80038d6:	bf00      	nop
 80038d8:	3740      	adds	r7, #64	; 0x40
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40021800 	.word	0x40021800
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40022400 	.word	0x40022400
 80038f4:	40022800 	.word	0x40022800

080038f8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <BSP_LCD_ClockConfig+0x34>)
 8003904:	2208      	movs	r2, #8
 8003906:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <BSP_LCD_ClockConfig+0x34>)
 800390a:	22c0      	movs	r2, #192	; 0xc0
 800390c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <BSP_LCD_ClockConfig+0x34>)
 8003910:	2205      	movs	r2, #5
 8003912:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <BSP_LCD_ClockConfig+0x34>)
 8003916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800391c:	4803      	ldr	r0, [pc, #12]	; (800392c <BSP_LCD_ClockConfig+0x34>)
 800391e:	f003 fb9f 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000aabc 	.word	0x2000aabc

08003930 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	603a      	str	r2, [r7, #0]
 800393a:	80fb      	strh	r3, [r7, #6]
 800393c:	460b      	mov	r3, r1
 800393e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <DrawChar+0x168>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4953      	ldr	r1, [pc, #332]	; (8003a9c <DrawChar+0x16c>)
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3308      	adds	r3, #8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	88db      	ldrh	r3, [r3, #6]
 800395e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003960:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <DrawChar+0x168>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	494d      	ldr	r1, [pc, #308]	; (8003a9c <DrawChar+0x16c>)
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3308      	adds	r3, #8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	889b      	ldrh	r3, [r3, #4]
 8003976:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003978:	8a3b      	ldrh	r3, [r7, #16]
 800397a:	3307      	adds	r3, #7
 800397c:	2b00      	cmp	r3, #0
 800397e:	da00      	bge.n	8003982 <DrawChar+0x52>
 8003980:	3307      	adds	r3, #7
 8003982:	10db      	asrs	r3, r3, #3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	b2da      	uxtb	r2, r3
 800398a:	8a3b      	ldrh	r3, [r7, #16]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e076      	b.n	8003a86 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003998:	8a3b      	ldrh	r3, [r7, #16]
 800399a:	3307      	adds	r3, #7
 800399c:	2b00      	cmp	r3, #0
 800399e:	da00      	bge.n	80039a2 <DrawChar+0x72>
 80039a0:	3307      	adds	r3, #7
 80039a2:	10db      	asrs	r3, r3, #3
 80039a4:	461a      	mov	r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fb03 f302 	mul.w	r3, r3, r2
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80039b2:	8a3b      	ldrh	r3, [r7, #16]
 80039b4:	3307      	adds	r3, #7
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da00      	bge.n	80039bc <DrawChar+0x8c>
 80039ba:	3307      	adds	r3, #7
 80039bc:	10db      	asrs	r3, r3, #3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d002      	beq.n	80039c8 <DrawChar+0x98>
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d004      	beq.n	80039d0 <DrawChar+0xa0>
 80039c6:	e00c      	b.n	80039e2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
      break;
 80039ce:	e016      	b.n	80039fe <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	3201      	adds	r2, #1
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
      break;
 80039e0:	e00d      	b.n	80039fe <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	041a      	lsls	r2, r3, #16
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3301      	adds	r3, #1
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	4313      	orrs	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	3202      	adds	r2, #2
 80039f6:	7812      	ldrb	r2, [r2, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
      break;
 80039fc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e036      	b.n	8003a72 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003a04:	8a3a      	ldrh	r2, [r7, #16]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad2      	subs	r2, r2, r3
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	2201      	movs	r2, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	4413      	add	r3, r2
 8003a28:	b298      	uxth	r0, r3
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <DrawChar+0x168>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	491b      	ldr	r1, [pc, #108]	; (8003a9c <DrawChar+0x16c>)
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	88bb      	ldrh	r3, [r7, #4]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7ff fda0 	bl	8003584 <BSP_LCD_DrawPixel>
 8003a44:	e012      	b.n	8003a6c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	b298      	uxth	r0, r3
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <DrawChar+0x168>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4911      	ldr	r1, [pc, #68]	; (8003a9c <DrawChar+0x16c>)
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3304      	adds	r3, #4
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	88bb      	ldrh	r3, [r7, #4]
 8003a66:	4619      	mov	r1, r3
 8003a68:	f7ff fd8c 	bl	8003584 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	8a3b      	ldrh	r3, [r7, #16]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3c4      	bcc.n	8003a04 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003a7a:	88bb      	ldrh	r3, [r7, #4]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	8a7b      	ldrh	r3, [r7, #18]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d384      	bcc.n	8003998 <DrawChar+0x68>
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000aaa0 	.word	0x2000aaa0
 8003a9c:	2000aaa4 	.word	0x2000aaa4

08003aa0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <LL_FillBuffer+0x88>)
 8003ab0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ab4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <LL_FillBuffer+0x8c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <LL_FillBuffer+0x90>)
 8003abc:	2134      	movs	r1, #52	; 0x34
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3348      	adds	r3, #72	; 0x48
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d103      	bne.n	8003ad4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <LL_FillBuffer+0x88>)
 8003ace:	2202      	movs	r2, #2
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	e002      	b.n	8003ada <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <LL_FillBuffer+0x88>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <LL_FillBuffer+0x88>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <LL_FillBuffer+0x88>)
 8003ae2:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <LL_FillBuffer+0x94>)
 8003ae4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003ae6:	4810      	ldr	r0, [pc, #64]	; (8003b28 <LL_FillBuffer+0x88>)
 8003ae8:	f001 f840 	bl	8004b6c <HAL_DMA2D_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d115      	bne.n	8003b1e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <LL_FillBuffer+0x88>)
 8003af6:	f001 f9a1 	bl	8004e3c <HAL_DMA2D_ConfigLayer>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10e      	bne.n	8003b1e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69f9      	ldr	r1, [r7, #28]
 8003b0a:	4807      	ldr	r0, [pc, #28]	; (8003b28 <LL_FillBuffer+0x88>)
 8003b0c:	f001 f882 	bl	8004c14 <HAL_DMA2D_Start>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003b16:	210a      	movs	r1, #10
 8003b18:	4803      	ldr	r0, [pc, #12]	; (8003b28 <LL_FillBuffer+0x88>)
 8003b1a:	f001 f8a6 	bl	8004c6a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	2000aa60 	.word	0x2000aa60
 8003b2c:	2000aaa0 	.word	0x2000aaa0
 8003b30:	2000a9b8 	.word	0x2000a9b8
 8003b34:	4002b000 	.word	0x4002b000

08003b38 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b3c:	4b29      	ldr	r3, [pc, #164]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b3e:	4a2a      	ldr	r2, [pc, #168]	; (8003be8 <BSP_SDRAM_Init+0xb0>)
 8003b40:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003b42:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b44:	2202      	movs	r2, #2
 8003b46:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b4a:	2207      	movs	r2, #7
 8003b4c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b50:	2204      	movs	r2, #4
 8003b52:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b56:	2207      	movs	r2, #7
 8003b58:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003b60:	4b22      	ldr	r3, [pc, #136]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b62:	2202      	movs	r2, #2
 8003b64:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003b68:	2202      	movs	r2, #2
 8003b6a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b80:	2210      	movs	r2, #16
 8003b82:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b90:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003bae:	2100      	movs	r1, #0
 8003bb0:	480c      	ldr	r0, [pc, #48]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003bb2:	f000 f87f 	bl	8003cb4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003bb6:	490d      	ldr	r1, [pc, #52]	; (8003bec <BSP_SDRAM_Init+0xb4>)
 8003bb8:	480a      	ldr	r0, [pc, #40]	; (8003be4 <BSP_SDRAM_Init+0xac>)
 8003bba:	f004 fc28 	bl	800840e <HAL_SDRAM_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <BSP_SDRAM_Init+0xb8>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <BSP_SDRAM_Init+0xb8>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003bd2:	f240 6003 	movw	r0, #1539	; 0x603
 8003bd6:	f000 f80d 	bl	8003bf4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <BSP_SDRAM_Init+0xb8>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000ab40 	.word	0x2000ab40
 8003be8:	a0000140 	.word	0xa0000140
 8003bec:	2000ab74 	.word	0x2000ab74
 8003bf0:	2000003c 	.word	0x2000003c

08003bf4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003c00:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c06:	4b29      	ldr	r3, [pc, #164]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c08:	2210      	movs	r2, #16
 8003c0a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c12:	4b26      	ldr	r3, [pc, #152]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1c:	4923      	ldr	r1, [pc, #140]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c1e:	4824      	ldr	r0, [pc, #144]	; (8003cb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c20:	f004 fc33 	bl	800848a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f000 f9b1 	bl	8003f8c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c30:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c32:	2210      	movs	r2, #16
 8003c34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c46:	4919      	ldr	r1, [pc, #100]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c48:	4819      	ldr	r0, [pc, #100]	; (8003cb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c4a:	f004 fc1e 	bl	800848a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c50:	2203      	movs	r2, #3
 8003c52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c56:	2210      	movs	r2, #16
 8003c58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c6a:	4910      	ldr	r1, [pc, #64]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6c:	4810      	ldr	r0, [pc, #64]	; (8003cb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c6e:	f004 fc0c 	bl	800848a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003c72:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003c76:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c80:	2210      	movs	r2, #16
 8003c82:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c8e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c94:	4905      	ldr	r1, [pc, #20]	; (8003cac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c96:	4806      	ldr	r0, [pc, #24]	; (8003cb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c98:	f004 fbf7 	bl	800848a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ca0:	f004 fc1e 	bl	80084e0 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2000ab90 	.word	0x2000ab90
 8003cb0:	2000ab40 	.word	0x2000ab40

08003cb4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b090      	sub	sp, #64	; 0x40
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003cbe:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	4a6f      	ldr	r2, [pc, #444]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6393      	str	r3, [r2, #56]	; 0x38
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a69      	ldr	r2, [pc, #420]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b67      	ldr	r3, [pc, #412]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cee:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	623b      	str	r3, [r7, #32]
 8003d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d06:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a5d      	ldr	r2, [pc, #372]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d1e:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d24:	f043 0310 	orr.w	r3, r3, #16
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d36:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a51      	ldr	r2, [pc, #324]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d3c:	f043 0320 	orr.w	r3, r3, #32
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d4e:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a4b      	ldr	r2, [pc, #300]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d66:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a45      	ldr	r2, [pc, #276]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <BSP_SDRAM_MspInit+0x1cc>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003d82:	2301      	movs	r3, #1
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d86:	2302      	movs	r3, #2
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003d8e:	2308      	movs	r3, #8
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d96:	4619      	mov	r1, r3
 8003d98:	483a      	ldr	r0, [pc, #232]	; (8003e84 <BSP_SDRAM_MspInit+0x1d0>)
 8003d9a:	f001 f98b 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003d9e:	f24c 730b 	movw	r3, #50955	; 0xc70b
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003da8:	4619      	mov	r1, r3
 8003daa:	4837      	ldr	r0, [pc, #220]	; (8003e88 <BSP_SDRAM_MspInit+0x1d4>)
 8003dac:	f001 f982 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003db0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4833      	ldr	r0, [pc, #204]	; (8003e8c <BSP_SDRAM_MspInit+0x1d8>)
 8003dbe:	f001 f979 	bl	80050b4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003dc2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4830      	ldr	r0, [pc, #192]	; (8003e90 <BSP_SDRAM_MspInit+0x1dc>)
 8003dd0:	f001 f970 	bl	80050b4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003dd4:	f248 1333 	movw	r3, #33075	; 0x8133
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dde:	4619      	mov	r1, r3
 8003de0:	482c      	ldr	r0, [pc, #176]	; (8003e94 <BSP_SDRAM_MspInit+0x1e0>)
 8003de2:	f001 f967 	bl	80050b4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003de6:	2328      	movs	r3, #40	; 0x28
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dee:	4619      	mov	r1, r3
 8003df0:	4829      	ldr	r0, [pc, #164]	; (8003e98 <BSP_SDRAM_MspInit+0x1e4>)
 8003df2:	f001 f95f 	bl	80050b4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e02:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e08:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e10:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e12:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e18:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e20:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e2e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e38:	2203      	movs	r2, #3
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e4a:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <BSP_SDRAM_MspInit+0x1ec>)
 8003e4c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
 8003e54:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003e5a:	4810      	ldr	r0, [pc, #64]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e5c:	f000 faf0 	bl	8004440 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003e60:	480e      	ldr	r0, [pc, #56]	; (8003e9c <BSP_SDRAM_MspInit+0x1e8>)
 8003e62:	f000 fa3f 	bl	80042e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2105      	movs	r1, #5
 8003e6a:	2038      	movs	r0, #56	; 0x38
 8003e6c:	f000 f98b 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003e70:	2038      	movs	r0, #56	; 0x38
 8003e72:	f000 f9a4 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 8003e76:	bf00      	nop
 8003e78:	3740      	adds	r7, #64	; 0x40
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40020800 	.word	0x40020800
 8003e88:	40020c00 	.word	0x40020c00
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40021400 	.word	0x40021400
 8003e94:	40021800 	.word	0x40021800
 8003e98:	40021c00 	.word	0x40021c00
 8003e9c:	2000aba0 	.word	0x2000aba0
 8003ea0:	40026410 	.word	0x40026410

08003ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_Init+0x34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <HAL_Init+0x34>)
 8003eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eb2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_Init+0x34>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <HAL_Init+0x34>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ec0:	2003      	movs	r0, #3
 8003ec2:	f000 f955 	bl	8004170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f000 f810 	bl	8003eec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003ecc:	f000 f806 	bl	8003edc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00

08003edc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_InitTick+0x54>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_InitTick+0x58>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f965 	bl	80041da <HAL_SYSTICK_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00e      	b.n	8003f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b0f      	cmp	r3, #15
 8003f1e:	d80a      	bhi.n	8003f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f20:	2200      	movs	r2, #0
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f000 f92d 	bl	8004186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f2c:	4a06      	ldr	r2, [pc, #24]	; (8003f48 <HAL_InitTick+0x5c>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20009af0 	.word	0x20009af0
 8003f44:	20000044 	.word	0x20000044
 8003f48:	20000040 	.word	0x20000040

08003f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_IncTick+0x20>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_IncTick+0x24>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <HAL_IncTick+0x24>)
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000044 	.word	0x20000044
 8003f70:	200212d0 	.word	0x200212d0

08003f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return uwTick;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_GetTick+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	200212d0 	.word	0x200212d0

08003f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f94:	f7ff ffee 	bl	8003f74 <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d005      	beq.n	8003fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_Delay+0x40>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fb2:	bf00      	nop
 8003fb4:	f7ff ffde 	bl	8003f74 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d8f7      	bhi.n	8003fb4 <HAL_Delay+0x28>
  {
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000044 	.word	0x20000044

08003fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <__NVIC_SetPriorityGrouping+0x40>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fec:	4013      	ands	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffe:	4a04      	ldr	r2, [pc, #16]	; (8004010 <__NVIC_SetPriorityGrouping+0x40>)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	60d3      	str	r3, [r2, #12]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00
 8004014:	05fa0000 	.word	0x05fa0000

08004018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <__NVIC_GetPriorityGrouping+0x18>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 0307 	and.w	r3, r3, #7
}
 8004026:	4618      	mov	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db0b      	blt.n	800405e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	4907      	ldr	r1, [pc, #28]	; (800406c <__NVIC_EnableIRQ+0x38>)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2001      	movs	r0, #1
 8004056:	fa00 f202 	lsl.w	r2, r0, r2
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000e100 	.word	0xe000e100

08004070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db0a      	blt.n	800409a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	490c      	ldr	r1, [pc, #48]	; (80040bc <__NVIC_SetPriority+0x4c>)
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	0112      	lsls	r2, r2, #4
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	440b      	add	r3, r1
 8004094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004098:	e00a      	b.n	80040b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	4908      	ldr	r1, [pc, #32]	; (80040c0 <__NVIC_SetPriority+0x50>)
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3b04      	subs	r3, #4
 80040a8:	0112      	lsls	r2, r2, #4
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	440b      	add	r3, r1
 80040ae:	761a      	strb	r2, [r3, #24]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000e100 	.word	0xe000e100
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f1c3 0307 	rsb	r3, r3, #7
 80040de:	2b04      	cmp	r3, #4
 80040e0:	bf28      	it	cs
 80040e2:	2304      	movcs	r3, #4
 80040e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d902      	bls.n	80040f4 <NVIC_EncodePriority+0x30>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3b03      	subs	r3, #3
 80040f2:	e000      	b.n	80040f6 <NVIC_EncodePriority+0x32>
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43da      	mvns	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	401a      	ands	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800410c:	f04f 31ff 	mov.w	r1, #4294967295
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	43d9      	mvns	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800411c:	4313      	orrs	r3, r2
         );
}
 800411e:	4618      	mov	r0, r3
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3b01      	subs	r3, #1
 8004138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413c:	d301      	bcc.n	8004142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800413e:	2301      	movs	r3, #1
 8004140:	e00f      	b.n	8004162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <SysTick_Config+0x40>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3b01      	subs	r3, #1
 8004148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414a:	210f      	movs	r1, #15
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	f7ff ff8e 	bl	8004070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <SysTick_Config+0x40>)
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <SysTick_Config+0x40>)
 800415c:	2207      	movs	r2, #7
 800415e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	e000e010 	.word	0xe000e010

08004170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff29 	bl	8003fd0 <__NVIC_SetPriorityGrouping>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af00      	add	r7, sp, #0
 800418c:	4603      	mov	r3, r0
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004198:	f7ff ff3e 	bl	8004018 <__NVIC_GetPriorityGrouping>
 800419c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f7ff ff8e 	bl	80040c4 <NVIC_EncodePriority>
 80041a8:	4602      	mov	r2, r0
 80041aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff5d 	bl	8004070 <__NVIC_SetPriority>
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff31 	bl	8004034 <__NVIC_EnableIRQ>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ffa2 	bl	800412c <SysTick_Config>
 80041e8:	4603      	mov	r3, r0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041f8:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_MPU_Disable+0x24>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	4a05      	ldr	r2, [pc, #20]	; (8004218 <HAL_MPU_Disable+0x24>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_MPU_Disable+0x28>)
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	e000ed00 	.word	0xe000ed00
 800421c:	e000ed90 	.word	0xe000ed90

08004220 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004228:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_MPU_Enable+0x34>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_MPU_Enable+0x38>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <HAL_MPU_Enable+0x38>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800423e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004242:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	e000ed90 	.word	0xe000ed90
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	785a      	ldrb	r2, [r3, #1]
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_MPU_ConfigRegion+0x84>)
 800426a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d029      	beq.n	80042c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_MPU_ConfigRegion+0x84>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	7b1b      	ldrb	r3, [r3, #12]
 8004280:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7adb      	ldrb	r3, [r3, #11]
 8004286:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004288:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7a9b      	ldrb	r3, [r3, #10]
 800428e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004290:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7b5b      	ldrb	r3, [r3, #13]
 8004296:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004298:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7b9b      	ldrb	r3, [r3, #14]
 800429e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7bdb      	ldrb	r3, [r3, #15]
 80042a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	7a5b      	ldrb	r3, [r3, #9]
 80042ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7a1b      	ldrb	r3, [r3, #8]
 80042b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80042c6:	e005      	b.n	80042d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_MPU_ConfigRegion+0x84>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_MPU_ConfigRegion+0x84>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	611a      	str	r2, [r3, #16]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed90 	.word	0xe000ed90

080042e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042f0:	f7ff fe40 	bl	8003f74 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e099      	b.n	8004434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004320:	e00f      	b.n	8004342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004322:	f7ff fe27 	bl	8003f74 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b05      	cmp	r3, #5
 800432e:	d908      	bls.n	8004342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2203      	movs	r2, #3
 800433a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e078      	b.n	8004434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e8      	bne.n	8004322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4b38      	ldr	r3, [pc, #224]	; (800443c <HAL_DMA_Init+0x158>)
 800435c:	4013      	ands	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800436e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b04      	cmp	r3, #4
 800439a:	d107      	bne.n	80043ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	4313      	orrs	r3, r2
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0307 	bic.w	r3, r3, #7
 80043c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d117      	bne.n	8004406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00e      	beq.n	8004406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fb45 	bl	8004a78 <DMA_CheckFifoParam>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004402:	2301      	movs	r3, #1
 8004404:	e016      	b.n	8004434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fafc 	bl	8004a0c <DMA_CalcBaseAndBitshift>
 8004414:	4603      	mov	r3, r0
 8004416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441c:	223f      	movs	r2, #63	; 0x3f
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	f010803f 	.word	0xf010803f

08004440 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e050      	b.n	80044f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d101      	bne.n	8004462 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
 8004460:	e048      	b.n	80044f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2221      	movs	r2, #33	; 0x21
 80044a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fab2 	bl	8004a0c <DMA_CalcBaseAndBitshift>
 80044a8:	4603      	mov	r3, r0
 80044aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	223f      	movs	r2, #63	; 0x3f
 80044b2:	409a      	lsls	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_DMA_Start_IT+0x26>
 800451e:	2302      	movs	r3, #2
 8004520:	e048      	b.n	80045b4 <HAL_DMA_Start_IT+0xb8>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d137      	bne.n	80045a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa30 	bl	80049b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	223f      	movs	r2, #63	; 0x3f
 8004556:	409a      	lsls	r2, r3
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0216 	orr.w	r2, r2, #22
 800456a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800457a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0208 	orr.w	r2, r2, #8
 8004592:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e005      	b.n	80045b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
 80045b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045ca:	f7ff fcd3 	bl	8003f74 <HAL_GetTick>
 80045ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d008      	beq.n	80045ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2280      	movs	r2, #128	; 0x80
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e052      	b.n	8004694 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0216 	bic.w	r2, r2, #22
 80045fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <HAL_DMA_Abort+0x62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0208 	bic.w	r2, r2, #8
 800462c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800463e:	e013      	b.n	8004668 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004640:	f7ff fc98 	bl	8003f74 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b05      	cmp	r3, #5
 800464c:	d90c      	bls.n	8004668 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2203      	movs	r2, #3
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e015      	b.n	8004694 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e4      	bne.n	8004640 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	223f      	movs	r2, #63	; 0x3f
 800467c:	409a      	lsls	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80046a8:	4b92      	ldr	r3, [pc, #584]	; (80048f4 <HAL_DMA_IRQHandler+0x258>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a92      	ldr	r2, [pc, #584]	; (80048f8 <HAL_DMA_IRQHandler+0x25c>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0a9b      	lsrs	r3, r3, #10
 80046b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	2208      	movs	r2, #8
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01a      	beq.n	8004708 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	2208      	movs	r2, #8
 80046f6:	409a      	lsls	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d012      	beq.n	800473e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	2201      	movs	r2, #1
 800472c:	409a      	lsls	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f043 0202 	orr.w	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	2204      	movs	r2, #4
 8004744:	409a      	lsls	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	2204      	movs	r2, #4
 8004762:	409a      	lsls	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	2210      	movs	r2, #16
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d043      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03c      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	2210      	movs	r2, #16
 8004798:	409a      	lsls	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d024      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
 80047ca:	e01f      	b.n	800480c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
 80047dc:	e016      	b.n	800480c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0208 	bic.w	r2, r2, #8
 80047fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	2220      	movs	r2, #32
 8004812:	409a      	lsls	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4013      	ands	r3, r2
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 808e 	beq.w	800493a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8086 	beq.w	800493a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	2220      	movs	r2, #32
 8004834:	409a      	lsls	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b05      	cmp	r3, #5
 8004844:	d136      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0216 	bic.w	r2, r2, #22
 8004854:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004864:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <HAL_DMA_IRQHandler+0x1da>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0208 	bic.w	r2, r2, #8
 8004884:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	223f      	movs	r2, #63	; 0x3f
 800488c:	409a      	lsls	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d07d      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
        }
        return;
 80048b2:	e078      	b.n	80049a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01c      	beq.n	80048fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d030      	beq.n	800493a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
 80048e0:	e02b      	b.n	800493a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d027      	beq.n	800493a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
 80048f2:	e022      	b.n	800493a <HAL_DMA_IRQHandler+0x29e>
 80048f4:	20009af0 	.word	0x20009af0
 80048f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10f      	bne.n	800492a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0210 	bic.w	r2, r2, #16
 8004918:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	2b00      	cmp	r3, #0
 8004940:	d032      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d022      	beq.n	8004994 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2205      	movs	r2, #5
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3301      	adds	r3, #1
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	429a      	cmp	r2, r3
 8004970:	d307      	bcc.n	8004982 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f2      	bne.n	8004966 <HAL_DMA_IRQHandler+0x2ca>
 8004980:	e000      	b.n	8004984 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004982:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
 80049a4:	e000      	b.n	80049a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80049a6:	bf00      	nop
    }
  }
}
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop

080049b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d108      	bne.n	80049f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049ee:	e007      	b.n	8004a00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	3b10      	subs	r3, #16
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <DMA_CalcBaseAndBitshift+0x60>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <DMA_CalcBaseAndBitshift+0x64>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d908      	bls.n	8004a4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <DMA_CalcBaseAndBitshift+0x68>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4a:	e006      	b.n	8004a5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <DMA_CalcBaseAndBitshift+0x68>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	aaaaaaab 	.word	0xaaaaaaab
 8004a70:	0801af08 	.word	0x0801af08
 8004a74:	fffffc00 	.word	0xfffffc00

08004a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11f      	bne.n	8004ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d855      	bhi.n	8004b44 <DMA_CheckFifoParam+0xcc>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <DMA_CheckFifoParam+0x28>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ac3 	.word	0x08004ac3
 8004aa8:	08004ab1 	.word	0x08004ab1
 8004aac:	08004b45 	.word	0x08004b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d045      	beq.n	8004b48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac0:	e042      	b.n	8004b48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aca:	d13f      	bne.n	8004b4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad0:	e03c      	b.n	8004b4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ada:	d121      	bne.n	8004b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d836      	bhi.n	8004b50 <DMA_CheckFifoParam+0xd8>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <DMA_CheckFifoParam+0x70>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004aff 	.word	0x08004aff
 8004af0:	08004af9 	.word	0x08004af9
 8004af4:	08004b11 	.word	0x08004b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      break;
 8004afc:	e02f      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d024      	beq.n	8004b54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0e:	e021      	b.n	8004b54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b18:	d11e      	bne.n	8004b58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b1e:	e01b      	b.n	8004b58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <DMA_CheckFifoParam+0xb4>
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d003      	beq.n	8004b32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b2a:	e018      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e015      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00e      	beq.n	8004b5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      break;
 8004b42:	e00b      	b.n	8004b5c <DMA_CheckFifoParam+0xe4>
      break;
 8004b44:	bf00      	nop
 8004b46:	e00a      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e008      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e006      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b50:	bf00      	nop
 8004b52:	e004      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b54:	bf00      	nop
 8004b56:	e002      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;   
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b5c:	bf00      	nop
    }
  } 
  
  return status; 
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e039      	b.n	8004bf2 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f834 	bl	8004c00 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	f023 0107 	bic.w	r1, r3, #7
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_DMA2D_Init+0x90>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68d1      	ldr	r1, [r2, #12]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	430b      	orrs	r3, r1
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	ffffc000 	.word	0xffffc000

08004c00 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_DMA2D_Start+0x1c>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e018      	b.n	8004c62 <HAL_DMA2D_Start+0x4e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f98c 	bl	8004f68 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d056      	beq.n	8004d38 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004c8a:	f7ff f973 	bl	8003f74 <HAL_GetTick>
 8004c8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8004c90:	e04b      	b.n	8004d2a <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d023      	beq.n	8004cec <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	f043 0202 	orr.w	r2, r3, #2
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	f043 0201 	orr.w	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2221      	movs	r2, #33	; 0x21
 8004cd6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0a2      	b.n	8004e32 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d01a      	beq.n	8004d2a <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_DMA2D_PollForTransfer+0xa0>
 8004cfa:	f7ff f93b 	bl	8003f74 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d20f      	bcs.n	8004d2a <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e083      	b.n	8004e32 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ac      	beq.n	8004c92 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d061      	beq.n	8004e18 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d54:	f7ff f90e 	bl	8003f74 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8004d5a:	e056      	b.n	8004e0a <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d02e      	beq.n	8004dcc <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	f043 0204 	orr.w	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	f043 0202 	orr.w	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2229      	movs	r2, #41	; 0x29
 8004db6:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2204      	movs	r2, #4
 8004dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d01a      	beq.n	8004e0a <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_DMA2D_PollForTransfer+0x180>
 8004dda:	f7ff f8cb 	bl	8003f74 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d20f      	bcs.n	8004e0a <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e013      	b.n	8004e32 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0a1      	beq.n	8004d5c <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2212      	movs	r2, #18
 8004e1e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3318      	adds	r3, #24
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_DMA2D_ConfigLayer+0x34>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e073      	b.n	8004f58 <HAL_DMA2D_ConfigLayer+0x11c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004e8e:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <HAL_DMA2D_ConfigLayer+0x128>)
 8004e90:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b0a      	cmp	r3, #10
 8004e98:	d003      	beq.n	8004ea2 <HAL_DMA2D_ConfigLayer+0x66>
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d107      	bne.n	8004eb2 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e005      	b.n	8004ebe <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d120      	bne.n	8004f06 <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	ea02 0103 	and.w	r1, r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b0a      	cmp	r3, #10
 8004eec:	d003      	beq.n	8004ef6 <HAL_DMA2D_ConfigLayer+0xba>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d127      	bne.n	8004f46 <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
 8004f04:	e01f      	b.n	8004f46 <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	ea02 0103 	and.w	r1, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b0a      	cmp	r3, #10
 8004f2e:	d003      	beq.n	8004f38 <HAL_DMA2D_ConfigLayer+0xfc>
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d106      	bne.n	8004f46 <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f44:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	ff03000f 	.word	0xff03000f

08004f68 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8004f68:	b480      	push	{r7}
 8004f6a:	b08b      	sub	sp, #44	; 0x2c
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f90:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	041a      	lsls	r2, r3, #16
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb4:	d174      	bne.n	80050a0 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004fbc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fc4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fcc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	e053      	b.n	8005096 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d106      	bne.n	8005004 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	e048      	b.n	8005096 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d111      	bne.n	8005030 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	0cdb      	lsrs	r3, r3, #19
 8005010:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	0a9b      	lsrs	r3, r3, #10
 8005016:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	08db      	lsrs	r3, r3, #3
 800501c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	02db      	lsls	r3, r3, #11
 8005026:	4313      	orrs	r3, r2
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	e032      	b.n	8005096 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d117      	bne.n	8005068 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	0fdb      	lsrs	r3, r3, #31
 800503c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	0cdb      	lsrs	r3, r3, #19
 8005042:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	0adb      	lsrs	r3, r3, #11
 8005048:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	029b      	lsls	r3, r3, #10
 8005058:	431a      	orrs	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	03db      	lsls	r3, r3, #15
 800505e:	4313      	orrs	r3, r2
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
 8005066:	e016      	b.n	8005096 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	0f1b      	lsrs	r3, r3, #28
 800506c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	0d1b      	lsrs	r3, r3, #20
 8005072:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	0b1b      	lsrs	r3, r3, #12
 8005078:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	011a      	lsls	r2, r3, #4
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	431a      	orrs	r2, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	4313      	orrs	r3, r2
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800509e:	e003      	b.n	80050a8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	60da      	str	r2, [r3, #12]
}
 80050a8:	bf00      	nop
 80050aa:	372c      	adds	r7, #44	; 0x2c
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b089      	sub	sp, #36	; 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e175      	b.n	80053c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050d4:	2201      	movs	r2, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4013      	ands	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	f040 8164 	bne.w	80053ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x4e>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b12      	cmp	r3, #18
 8005100:	d123      	bne.n	800514a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	08da      	lsrs	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3208      	adds	r2, #8
 800510a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	220f      	movs	r2, #15
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0203 	and.w	r2, r3, #3
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d00b      	beq.n	800519e <HAL_GPIO_Init+0xea>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d007      	beq.n	800519e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005192:	2b11      	cmp	r3, #17
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b12      	cmp	r3, #18
 800519c:	d130      	bne.n	8005200 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2203      	movs	r2, #3
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051d4:	2201      	movs	r2, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 0201 	and.w	r2, r3, #1
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2203      	movs	r2, #3
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80be 	beq.w	80053ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523e:	4b65      	ldr	r3, [pc, #404]	; (80053d4 <HAL_GPIO_Init+0x320>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	4a64      	ldr	r2, [pc, #400]	; (80053d4 <HAL_GPIO_Init+0x320>)
 8005244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005248:	6453      	str	r3, [r2, #68]	; 0x44
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <HAL_GPIO_Init+0x320>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005256:	4a60      	ldr	r2, [pc, #384]	; (80053d8 <HAL_GPIO_Init+0x324>)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	220f      	movs	r2, #15
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a57      	ldr	r2, [pc, #348]	; (80053dc <HAL_GPIO_Init+0x328>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d037      	beq.n	80052f2 <HAL_GPIO_Init+0x23e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_GPIO_Init+0x32c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d031      	beq.n	80052ee <HAL_GPIO_Init+0x23a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a55      	ldr	r2, [pc, #340]	; (80053e4 <HAL_GPIO_Init+0x330>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02b      	beq.n	80052ea <HAL_GPIO_Init+0x236>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a54      	ldr	r2, [pc, #336]	; (80053e8 <HAL_GPIO_Init+0x334>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d025      	beq.n	80052e6 <HAL_GPIO_Init+0x232>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a53      	ldr	r2, [pc, #332]	; (80053ec <HAL_GPIO_Init+0x338>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01f      	beq.n	80052e2 <HAL_GPIO_Init+0x22e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a52      	ldr	r2, [pc, #328]	; (80053f0 <HAL_GPIO_Init+0x33c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d019      	beq.n	80052de <HAL_GPIO_Init+0x22a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a51      	ldr	r2, [pc, #324]	; (80053f4 <HAL_GPIO_Init+0x340>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_GPIO_Init+0x226>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a50      	ldr	r2, [pc, #320]	; (80053f8 <HAL_GPIO_Init+0x344>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00d      	beq.n	80052d6 <HAL_GPIO_Init+0x222>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4f      	ldr	r2, [pc, #316]	; (80053fc <HAL_GPIO_Init+0x348>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <HAL_GPIO_Init+0x21e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4e      	ldr	r2, [pc, #312]	; (8005400 <HAL_GPIO_Init+0x34c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <HAL_GPIO_Init+0x21a>
 80052ca:	2309      	movs	r3, #9
 80052cc:	e012      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052ce:	230a      	movs	r3, #10
 80052d0:	e010      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052d2:	2308      	movs	r3, #8
 80052d4:	e00e      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052d6:	2307      	movs	r3, #7
 80052d8:	e00c      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052da:	2306      	movs	r3, #6
 80052dc:	e00a      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052de:	2305      	movs	r3, #5
 80052e0:	e008      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052e2:	2304      	movs	r3, #4
 80052e4:	e006      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052e6:	2303      	movs	r3, #3
 80052e8:	e004      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e002      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052f2:	2300      	movs	r3, #0
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f002 0203 	and.w	r2, r2, #3
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	4093      	lsls	r3, r2
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005304:	4934      	ldr	r1, [pc, #208]	; (80053d8 <HAL_GPIO_Init+0x324>)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	3302      	adds	r3, #2
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005312:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <HAL_GPIO_Init+0x350>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005336:	4a33      	ldr	r2, [pc, #204]	; (8005404 <HAL_GPIO_Init+0x350>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800533c:	4b31      	ldr	r3, [pc, #196]	; (8005404 <HAL_GPIO_Init+0x350>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005360:	4a28      	ldr	r2, [pc, #160]	; (8005404 <HAL_GPIO_Init+0x350>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005366:	4b27      	ldr	r3, [pc, #156]	; (8005404 <HAL_GPIO_Init+0x350>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_GPIO_Init+0x350>)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005390:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <HAL_GPIO_Init+0x350>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <HAL_GPIO_Init+0x350>)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	f67f ae86 	bls.w	80050d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	3724      	adds	r7, #36	; 0x24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40020000 	.word	0x40020000
 80053e0:	40020400 	.word	0x40020400
 80053e4:	40020800 	.word	0x40020800
 80053e8:	40020c00 	.word	0x40020c00
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40021400 	.word	0x40021400
 80053f4:	40021800 	.word	0x40021800
 80053f8:	40021c00 	.word	0x40021c00
 80053fc:	40022000 	.word	0x40022000
 8005400:	40022400 	.word	0x40022400
 8005404:	40013c00 	.word	0x40013c00

08005408 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e0d9      	b.n	80055d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005424:	2201      	movs	r2, #1
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	f040 80c9 	bne.w	80055d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	2103      	movs	r1, #3
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	401a      	ands	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	08da      	lsrs	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3208      	adds	r2, #8
 800545e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	220f      	movs	r2, #15
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	08d2      	lsrs	r2, r2, #3
 8005476:	4019      	ands	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3208      	adds	r2, #8
 800547c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	2103      	movs	r1, #3
 800548a:	fa01 f303 	lsl.w	r3, r1, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	401a      	ands	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	2101      	movs	r1, #1
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	401a      	ands	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	2103      	movs	r1, #3
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	401a      	ands	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80054c0:	4a4a      	ldr	r2, [pc, #296]	; (80055ec <HAL_GPIO_DeInit+0x1e4>)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	3302      	adds	r3, #2
 80054c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054cc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	220f      	movs	r2, #15
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a42      	ldr	r2, [pc, #264]	; (80055f0 <HAL_GPIO_DeInit+0x1e8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d037      	beq.n	800555a <HAL_GPIO_DeInit+0x152>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a41      	ldr	r2, [pc, #260]	; (80055f4 <HAL_GPIO_DeInit+0x1ec>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d031      	beq.n	8005556 <HAL_GPIO_DeInit+0x14e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a40      	ldr	r2, [pc, #256]	; (80055f8 <HAL_GPIO_DeInit+0x1f0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02b      	beq.n	8005552 <HAL_GPIO_DeInit+0x14a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a3f      	ldr	r2, [pc, #252]	; (80055fc <HAL_GPIO_DeInit+0x1f4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d025      	beq.n	800554e <HAL_GPIO_DeInit+0x146>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a3e      	ldr	r2, [pc, #248]	; (8005600 <HAL_GPIO_DeInit+0x1f8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01f      	beq.n	800554a <HAL_GPIO_DeInit+0x142>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a3d      	ldr	r2, [pc, #244]	; (8005604 <HAL_GPIO_DeInit+0x1fc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d019      	beq.n	8005546 <HAL_GPIO_DeInit+0x13e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <HAL_GPIO_DeInit+0x200>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_GPIO_DeInit+0x13a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a3b      	ldr	r2, [pc, #236]	; (800560c <HAL_GPIO_DeInit+0x204>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00d      	beq.n	800553e <HAL_GPIO_DeInit+0x136>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <HAL_GPIO_DeInit+0x208>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d007      	beq.n	800553a <HAL_GPIO_DeInit+0x132>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a39      	ldr	r2, [pc, #228]	; (8005614 <HAL_GPIO_DeInit+0x20c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d101      	bne.n	8005536 <HAL_GPIO_DeInit+0x12e>
 8005532:	2309      	movs	r3, #9
 8005534:	e012      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 8005536:	230a      	movs	r3, #10
 8005538:	e010      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 800553a:	2308      	movs	r3, #8
 800553c:	e00e      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 800553e:	2307      	movs	r3, #7
 8005540:	e00c      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 8005542:	2306      	movs	r3, #6
 8005544:	e00a      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 8005546:	2305      	movs	r3, #5
 8005548:	e008      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 800554a:	2304      	movs	r3, #4
 800554c:	e006      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 800554e:	2303      	movs	r3, #3
 8005550:	e004      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 8005552:	2302      	movs	r3, #2
 8005554:	e002      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_GPIO_DeInit+0x154>
 800555a:	2300      	movs	r3, #0
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	f002 0203 	and.w	r2, r2, #3
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	4093      	lsls	r3, r2
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d132      	bne.n	80055d2 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	220f      	movs	r2, #15
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_GPIO_DeInit+0x1e4>)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	089b      	lsrs	r3, r3, #2
 8005582:	3302      	adds	r3, #2
 8005584:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	43da      	mvns	r2, r3
 800558c:	4817      	ldr	r0, [pc, #92]	; (80055ec <HAL_GPIO_DeInit+0x1e4>)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	089b      	lsrs	r3, r3, #2
 8005592:	400a      	ands	r2, r1
 8005594:	3302      	adds	r3, #2
 8005596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800559a:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	491d      	ldr	r1, [pc, #116]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	4919      	ldr	r1, [pc, #100]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055b6:	4b18      	ldr	r3, [pc, #96]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	43db      	mvns	r3, r3
 80055be:	4916      	ldr	r1, [pc, #88]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	4912      	ldr	r1, [pc, #72]	; (8005618 <HAL_GPIO_DeInit+0x210>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3301      	adds	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b0f      	cmp	r3, #15
 80055dc:	f67f af22 	bls.w	8005424 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	40013800 	.word	0x40013800
 80055f0:	40020000 	.word	0x40020000
 80055f4:	40020400 	.word	0x40020400
 80055f8:	40020800 	.word	0x40020800
 80055fc:	40020c00 	.word	0x40020c00
 8005600:	40021000 	.word	0x40021000
 8005604:	40021400 	.word	0x40021400
 8005608:	40021800 	.word	0x40021800
 800560c:	40021c00 	.word	0x40021c00
 8005610:	40022000 	.word	0x40022000
 8005614:	40022400 	.word	0x40022400
 8005618:	40013c00 	.word	0x40013c00

0800561c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	887b      	ldrh	r3, [r7, #2]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e001      	b.n	800563e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	807b      	strh	r3, [r7, #2]
 8005658:	4613      	mov	r3, r2
 800565a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800565c:	787b      	ldrb	r3, [r7, #1]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005662:	887a      	ldrh	r2, [r7, #2]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005668:	e003      	b.n	8005672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	041a      	lsls	r2, r3, #16
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	619a      	str	r2, [r3, #24]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005696:	4a05      	ldr	r2, [pc, #20]	; (80056ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f806 	bl	80056b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40013c00 	.word	0x40013c00

080056b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e07f      	b.n	80057da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f008 fb34 	bl	800dd5c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	e006      	b.n	8005750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800574e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d104      	bne.n	8005762 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_I2C_Init+0x11c>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	ea42 0103 	orr.w	r1, r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	02008000 	.word	0x02008000

080057e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e021      	b.n	800583e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2224      	movs	r2, #36	; 0x24
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f008 fb00 	bl	800de18 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	4608      	mov	r0, r1
 8005852:	4611      	mov	r1, r2
 8005854:	461a      	mov	r2, r3
 8005856:	4603      	mov	r3, r0
 8005858:	817b      	strh	r3, [r7, #10]
 800585a:	460b      	mov	r3, r1
 800585c:	813b      	strh	r3, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b20      	cmp	r3, #32
 8005870:	f040 8109 	bne.w	8005a86 <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_I2C_Mem_Write+0x38>
 800587a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e101      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Mem_Write+0x4a>
 800588e:	2302      	movs	r3, #2
 8005890:	e0fa      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800589a:	f7fe fb6b 	bl	8003f74 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2319      	movs	r3, #25
 80058a6:	2201      	movs	r2, #1
 80058a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fb09 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e0e5      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2221      	movs	r2, #33	; 0x21
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058e4:	88f8      	ldrh	r0, [r7, #6]
 80058e6:	893a      	ldrh	r2, [r7, #8]
 80058e8:	8979      	ldrh	r1, [r7, #10]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4603      	mov	r3, r0
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fa01 	bl	8005cfc <I2C_RequestMemoryWrite>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00f      	beq.n	8005920 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005904:	2b04      	cmp	r3, #4
 8005906:	d105      	bne.n	8005914 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b9      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e0b3      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2bff      	cmp	r3, #255	; 0xff
 8005928:	d90e      	bls.n	8005948 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	22ff      	movs	r2, #255	; 0xff
 800592e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005934:	b2da      	uxtb	r2, r3
 8005936:	8979      	ldrh	r1, [r7, #10]
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fbd3 	bl	80060ec <I2C_TransferConfig>
 8005946:	e00f      	b.n	8005968 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	b2da      	uxtb	r2, r3
 8005958:	8979      	ldrh	r1, [r7, #10]
 800595a:	2300      	movs	r3, #0
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fbc2 	bl	80060ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fae3 	bl	8005f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	2b04      	cmp	r3, #4
 800597e:	d101      	bne.n	8005984 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e081      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e07f      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	6251      	str	r1, [r2, #36]	; 0x24
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d135      	bne.n	8005a28 <HAL_I2C_Mem_Write+0x1e0>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d030      	beq.n	8005a28 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	2200      	movs	r2, #0
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fa77 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e053      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2bff      	cmp	r3, #255	; 0xff
 80059e8:	d90e      	bls.n	8005a08 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	8979      	ldrh	r1, [r7, #10]
 80059f8:	2300      	movs	r3, #0
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fb73 	bl	80060ec <I2C_TransferConfig>
 8005a06:	e00f      	b.n	8005a28 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	8979      	ldrh	r1, [r7, #10]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fb62 	bl	80060ec <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d19a      	bne.n	8005968 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fabe 	bl	8005fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d101      	bne.n	8005a4e <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e01c      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e01a      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2220      	movs	r2, #32
 8005a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6859      	ldr	r1, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <HAL_I2C_Mem_Write+0x248>)
 8005a66:	400b      	ands	r3, r1
 8005a68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	fe00e800 	.word	0xfe00e800

08005a94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	813b      	strh	r3, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	f040 8107 	bne.w	8005cce <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_I2C_Mem_Read+0x38>
 8005ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0ff      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_I2C_Mem_Read+0x4a>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e0f8      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fe fa45 	bl	8003f74 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2319      	movs	r3, #25
 8005af2:	2201      	movs	r2, #1
 8005af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f9e3 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e0e3      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2222      	movs	r2, #34	; 0x22
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a3a      	ldr	r2, [r7, #32]
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b30:	88f8      	ldrh	r0, [r7, #6]
 8005b32:	893a      	ldrh	r2, [r7, #8]
 8005b34:	8979      	ldrh	r1, [r7, #10]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	4603      	mov	r3, r0
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f93b 	bl	8005dbc <I2C_RequestMemoryRead>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00f      	beq.n	8005b6c <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d105      	bne.n	8005b60 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0b7      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0b1      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2bff      	cmp	r3, #255	; 0xff
 8005b74:	d90e      	bls.n	8005b94 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8979      	ldrh	r1, [r7, #10]
 8005b84:	4b54      	ldr	r3, [pc, #336]	; (8005cd8 <HAL_I2C_Mem_Read+0x244>)
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 faad 	bl	80060ec <I2C_TransferConfig>
 8005b92:	e00f      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	8979      	ldrh	r1, [r7, #10]
 8005ba6:	4b4c      	ldr	r3, [pc, #304]	; (8005cd8 <HAL_I2C_Mem_Read+0x244>)
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fa9c 	bl	80060ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f980 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e080      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c59      	adds	r1, r3, #1
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	6251      	str	r1, [r2, #36]	; 0x24
 8005bde:	b2c2      	uxtb	r2, r0
 8005be0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d135      	bne.n	8005c70 <HAL_I2C_Mem_Read+0x1dc>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d030      	beq.n	8005c70 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	2200      	movs	r2, #0
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f953 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e053      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2bff      	cmp	r3, #255	; 0xff
 8005c30:	d90e      	bls.n	8005c50 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	8979      	ldrh	r1, [r7, #10]
 8005c40:	2300      	movs	r3, #0
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fa4f 	bl	80060ec <I2C_TransferConfig>
 8005c4e:	e00f      	b.n	8005c70 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	8979      	ldrh	r1, [r7, #10]
 8005c62:	2300      	movs	r3, #0
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa3e 	bl	80060ec <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d19c      	bne.n	8005bb4 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f99a 	bl	8005fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d101      	bne.n	8005c96 <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01c      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e01a      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6859      	ldr	r1, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_I2C_Mem_Read+0x248>)
 8005cae:	400b      	ands	r3, r1
 8005cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e000      	b.n	8005cd0 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
  }
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	80002400 	.word	0x80002400
 8005cdc:	fe00e800 	.word	0xfe00e800

08005ce0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cee:	b2db      	uxtb	r3, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	817b      	strh	r3, [r7, #10]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	813b      	strh	r3, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <I2C_RequestMemoryWrite+0xbc>)
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f9e1 	bl	80060ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f902 	bl	8005f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d101      	bne.n	8005d46 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e034      	b.n	8005db0 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e032      	b.n	8005db0 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d50:	893b      	ldrh	r3, [r7, #8]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
 8005d5a:	e01b      	b.n	8005d94 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d5c:	893b      	ldrh	r3, [r7, #8]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	69b9      	ldr	r1, [r7, #24]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f8e2 	bl	8005f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d101      	bne.n	8005d86 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e014      	b.n	8005db0 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e012      	b.n	8005db0 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2180      	movs	r1, #128	; 0x80
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f890 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e000      	b.n	8005db0 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	80002000 	.word	0x80002000

08005dbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	817b      	strh	r3, [r7, #10]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	813b      	strh	r3, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	8979      	ldrh	r1, [r7, #10]
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <I2C_RequestMemoryRead+0xbc>)
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2300      	movs	r3, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f982 	bl	80060ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f8a3 	bl	8005f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d101      	bne.n	8005e04 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e034      	b.n	8005e6e <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e032      	b.n	8005e6e <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d105      	bne.n	8005e1a <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e0e:	893b      	ldrh	r3, [r7, #8]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28
 8005e18:	e01b      	b.n	8005e52 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e1a:	893b      	ldrh	r3, [r7, #8]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	69b9      	ldr	r1, [r7, #24]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f883 	bl	8005f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d101      	bne.n	8005e44 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e014      	b.n	8005e6e <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e012      	b.n	8005e6e <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2140      	movs	r1, #64	; 0x40
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f831 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e000      	b.n	8005e6e <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	80002000 	.word	0x80002000

08005e7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d103      	bne.n	8005e9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d007      	beq.n	8005eb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	619a      	str	r2, [r3, #24]
  }
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ed4:	e01c      	b.n	8005f10 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d018      	beq.n	8005f10 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ee4:	f7fe f846 	bl	8003f74 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d20d      	bcs.n	8005f10 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e00f      	b.n	8005f30 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d0d3      	beq.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f44:	e02c      	b.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f870 	bl	8006030 <I2C_IsAcknowledgeFailed>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e02a      	b.n	8005fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d01e      	beq.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f68:	f7fe f804 	bl	8003f74 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d213      	bcs.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	f043 0220 	orr.w	r2, r3, #32
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e007      	b.n	8005fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d1cb      	bne.n	8005f46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fc4:	e028      	b.n	8006018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f830 	bl	8006030 <I2C_IsAcknowledgeFailed>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e026      	b.n	8006028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fe0:	f7fd ffc8 	bl	8003f74 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d213      	bcs.n	8006018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d1cf      	bne.n	8005fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b10      	cmp	r3, #16
 8006048:	d148      	bne.n	80060dc <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800604a:	e01c      	b.n	8006086 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d018      	beq.n	8006086 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <I2C_IsAcknowledgeFailed+0x3a>
 800605a:	f7fd ff8b 	bl	8003f74 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d20d      	bcs.n	8006086 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e02b      	b.n	80060de <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b20      	cmp	r3, #32
 8006092:	d1db      	bne.n	800604c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2210      	movs	r2, #16
 800609a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2220      	movs	r2, #32
 80060a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fee9 	bl	8005e7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <I2C_IsAcknowledgeFailed+0xb8>)
 80060b6:	400b      	ands	r3, r1
 80060b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2204      	movs	r2, #4
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	fe00e800 	.word	0xfe00e800

080060ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	817b      	strh	r3, [r7, #10]
 80060fa:	4613      	mov	r3, r2
 80060fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	0d5b      	lsrs	r3, r3, #21
 8006108:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <I2C_TransferConfig+0x58>)
 800610e:	430b      	orrs	r3, r1
 8006110:	43db      	mvns	r3, r3
 8006112:	ea02 0103 	and.w	r1, r2, r3
 8006116:	897b      	ldrh	r3, [r7, #10]
 8006118:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800611c:	7a7b      	ldrb	r3, [r7, #9]
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	431a      	orrs	r2, r3
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	431a      	orrs	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	03ff63ff 	.word	0x03ff63ff

08006148 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	2300      	movs	r3, #0
 8006156:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e0c7      	b.n	80062f2 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f007 ff04 	bl	800df84 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006192:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061a8:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6899      	ldr	r1, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b4e      	ldr	r3, [pc, #312]	; (80062fc <HAL_LTDC_Init+0x1b4>)
 80061c4:	400b      	ands	r3, r1
 80061c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6899      	ldr	r1, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68d9      	ldr	r1, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b42      	ldr	r3, [pc, #264]	; (80062fc <HAL_LTDC_Init+0x1b4>)
 80061f2:	400b      	ands	r3, r1
 80061f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	041b      	lsls	r3, r3, #16
 80061fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68d9      	ldr	r1, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6919      	ldr	r1, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b37      	ldr	r3, [pc, #220]	; (80062fc <HAL_LTDC_Init+0x1b4>)
 8006220:	400b      	ands	r3, r1
 8006222:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6919      	ldr	r1, [r3, #16]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6959      	ldr	r1, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <HAL_LTDC_Init+0x1b4>)
 800624e:	400b      	ands	r3, r1
 8006250:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6959      	ldr	r1, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0204 	orr.w	r2, r2, #4
 80062be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0202 	orr.w	r2, r2, #2
 80062ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	f000f800 	.word	0xf000f800

08006300 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8006300:	b5b0      	push	{r4, r5, r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_LTDC_ConfigLayer+0x1a>
 8006316:	2302      	movs	r3, #2
 8006318:	e02c      	b.n	8006374 <HAL_LTDC_ConfigLayer+0x74>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2134      	movs	r1, #52	; 0x34
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	4413      	add	r3, r2
 8006336:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4614      	mov	r4, r2
 800633e:	461d      	mov	r5, r3
 8006340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800634a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f855 	bl	8006404 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bdb0      	pop	{r4, r5, r7, pc}

0800637c <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_LTDC_SetAlpha+0x1a>
 8006392:	2302      	movs	r3, #2
 8006394:	e024      	b.n	80063e0 <HAL_LTDC_SetAlpha+0x64>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2234      	movs	r2, #52	; 0x34
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	3338      	adds	r3, #56	; 0x38
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6979      	ldr	r1, [r7, #20]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f81f 	bl	8006404 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2201      	movs	r2, #1
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80063f6:	b2db      	uxtb	r3, r3
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	0c1b      	lsrs	r3, r3, #16
 8006428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642c:	4413      	add	r3, r2
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	4413      	add	r3, r2
 800643e:	3384      	adds	r3, #132	; 0x84
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	4611      	mov	r1, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	01d2      	lsls	r2, r2, #7
 800644c:	440a      	add	r2, r1
 800644e:	3284      	adds	r2, #132	; 0x84
 8006450:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006454:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006466:	4413      	add	r3, r2
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	440b      	add	r3, r1
 8006476:	3384      	adds	r3, #132	; 0x84
 8006478:	4619      	mov	r1, r3
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4313      	orrs	r3, r2
 800647e:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800648e:	4413      	add	r3, r2
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	01db      	lsls	r3, r3, #7
 800649e:	4413      	add	r3, r2
 80064a0:	3384      	adds	r3, #132	; 0x84
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	4611      	mov	r1, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	01d2      	lsls	r2, r2, #7
 80064ae:	440a      	add	r2, r1
 80064b0:	3284      	adds	r2, #132	; 0x84
 80064b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064c6:	4413      	add	r3, r2
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4619      	mov	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	440b      	add	r3, r1
 80064d6:	3384      	adds	r3, #132	; 0x84
 80064d8:	4619      	mov	r1, r3
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	01db      	lsls	r3, r3, #7
 80064ea:	4413      	add	r3, r2
 80064ec:	3384      	adds	r3, #132	; 0x84
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	4611      	mov	r1, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	01d2      	lsls	r2, r2, #7
 80064fa:	440a      	add	r2, r1
 80064fc:	3284      	adds	r2, #132	; 0x84
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	01db      	lsls	r3, r3, #7
 800650e:	4413      	add	r3, r2
 8006510:	3384      	adds	r3, #132	; 0x84
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	061b      	lsls	r3, r3, #24
 8006534:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	4413      	add	r3, r2
 8006542:	3384      	adds	r3, #132	; 0x84
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	01db      	lsls	r3, r3, #7
 8006550:	4413      	add	r3, r2
 8006552:	3384      	adds	r3, #132	; 0x84
 8006554:	461a      	mov	r2, r3
 8006556:	2300      	movs	r3, #0
 8006558:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006560:	461a      	mov	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	431a      	orrs	r2, r3
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	431a      	orrs	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4619      	mov	r1, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	01db      	lsls	r3, r3, #7
 8006574:	440b      	add	r3, r1
 8006576:	3384      	adds	r3, #132	; 0x84
 8006578:	4619      	mov	r1, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	01db      	lsls	r3, r3, #7
 800658a:	4413      	add	r3, r2
 800658c:	3384      	adds	r3, #132	; 0x84
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	4611      	mov	r1, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	01d2      	lsls	r2, r2, #7
 800659a:	440a      	add	r2, r1
 800659c:	3284      	adds	r2, #132	; 0x84
 800659e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	01db      	lsls	r3, r3, #7
 80065ae:	4413      	add	r3, r2
 80065b0:	3384      	adds	r3, #132	; 0x84
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	01db      	lsls	r3, r3, #7
 80065c4:	4413      	add	r3, r2
 80065c6:	3384      	adds	r3, #132	; 0x84
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	01db      	lsls	r3, r3, #7
 80065d4:	440b      	add	r3, r1
 80065d6:	3384      	adds	r3, #132	; 0x84
 80065d8:	4619      	mov	r1, r3
 80065da:	4b58      	ldr	r3, [pc, #352]	; (800673c <LTDC_SetConfig+0x338>)
 80065dc:	4013      	ands	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	68f9      	ldr	r1, [r7, #12]
 80065ea:	6809      	ldr	r1, [r1, #0]
 80065ec:	4608      	mov	r0, r1
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	01c9      	lsls	r1, r1, #7
 80065f2:	4401      	add	r1, r0
 80065f4:	3184      	adds	r1, #132	; 0x84
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	01db      	lsls	r3, r3, #7
 8006604:	4413      	add	r3, r2
 8006606:	3384      	adds	r3, #132	; 0x84
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	4413      	add	r3, r2
 8006616:	3384      	adds	r3, #132	; 0x84
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	01db      	lsls	r3, r3, #7
 8006628:	4413      	add	r3, r2
 800662a:	3384      	adds	r3, #132	; 0x84
 800662c:	461a      	mov	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 800663c:	2304      	movs	r3, #4
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e01b      	b.n	800667a <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d102      	bne.n	8006650 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 800664a:	2303      	movs	r3, #3
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	e014      	b.n	800667a <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b04      	cmp	r3, #4
 8006656:	d00b      	beq.n	8006670 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800665c:	2b02      	cmp	r3, #2
 800665e:	d007      	beq.n	8006670 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006664:	2b03      	cmp	r3, #3
 8006666:	d003      	beq.n	8006670 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800666c:	2b07      	cmp	r3, #7
 800666e:	d102      	bne.n	8006676 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8006670:	2302      	movs	r3, #2
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e001      	b.n	800667a <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8006676:	2301      	movs	r3, #1
 8006678:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	4413      	add	r3, r2
 8006686:	3384      	adds	r3, #132	; 0x84
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	4611      	mov	r1, r2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	01d2      	lsls	r2, r2, #7
 8006694:	440a      	add	r2, r1
 8006696:	3284      	adds	r2, #132	; 0x84
 8006698:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800669c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	041a      	lsls	r2, r3, #16
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6859      	ldr	r1, [r3, #4]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	1acb      	subs	r3, r1, r3
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	fb01 f303 	mul.w	r3, r1, r3
 80066ba:	3303      	adds	r3, #3
 80066bc:	68f9      	ldr	r1, [r7, #12]
 80066be:	6809      	ldr	r1, [r1, #0]
 80066c0:	4608      	mov	r0, r1
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	01c9      	lsls	r1, r1, #7
 80066c6:	4401      	add	r1, r0
 80066c8:	3184      	adds	r1, #132	; 0x84
 80066ca:	4313      	orrs	r3, r2
 80066cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	01db      	lsls	r3, r3, #7
 80066d8:	4413      	add	r3, r2
 80066da:	3384      	adds	r3, #132	; 0x84
 80066dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	01db      	lsls	r3, r3, #7
 80066e8:	440b      	add	r3, r1
 80066ea:	3384      	adds	r3, #132	; 0x84
 80066ec:	4619      	mov	r1, r3
 80066ee:	4b14      	ldr	r3, [pc, #80]	; (8006740 <LTDC_SetConfig+0x33c>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	01db      	lsls	r3, r3, #7
 80066fe:	4413      	add	r3, r2
 8006700:	3384      	adds	r3, #132	; 0x84
 8006702:	461a      	mov	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	01db      	lsls	r3, r3, #7
 8006714:	4413      	add	r3, r2
 8006716:	3384      	adds	r3, #132	; 0x84
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	4611      	mov	r1, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	01d2      	lsls	r2, r2, #7
 8006724:	440a      	add	r2, r1
 8006726:	3284      	adds	r2, #132	; 0x84
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	6013      	str	r3, [r2, #0]
}
 800672e:	bf00      	nop
 8006730:	3724      	adds	r7, #36	; 0x24
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	fffff8f8 	.word	0xfffff8f8
 8006740:	fffff800 	.word	0xfffff800

08006744 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800674e:	4b23      	ldr	r3, [pc, #140]	; (80067dc <HAL_PWREx_EnableOverDrive+0x98>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	4a22      	ldr	r2, [pc, #136]	; (80067dc <HAL_PWREx_EnableOverDrive+0x98>)
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	6413      	str	r3, [r2, #64]	; 0x40
 800675a:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_PWREx_EnableOverDrive+0x98>)
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006766:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800676c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006770:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006772:	f7fd fbff 	bl	8003f74 <HAL_GetTick>
 8006776:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006778:	e009      	b.n	800678e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800677a:	f7fd fbfb 	bl	8003f74 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006788:	d901      	bls.n	800678e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e022      	b.n	80067d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800678e:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679a:	d1ee      	bne.n	800677a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067a8:	f7fd fbe4 	bl	8003f74 <HAL_GetTick>
 80067ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067ae:	e009      	b.n	80067c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067b0:	f7fd fbe0 	bl	8003f74 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067be:	d901      	bls.n	80067c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e007      	b.n	80067d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d0:	d1ee      	bne.n	80067b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40007000 	.word	0x40007000

080067e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e25c      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8087 	beq.w	8006916 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006808:	4b96      	ldr	r3, [pc, #600]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b04      	cmp	r3, #4
 8006812:	d00c      	beq.n	800682e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006814:	4b93      	ldr	r3, [pc, #588]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 030c 	and.w	r3, r3, #12
 800681c:	2b08      	cmp	r3, #8
 800681e:	d112      	bne.n	8006846 <HAL_RCC_OscConfig+0x62>
 8006820:	4b90      	ldr	r3, [pc, #576]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800682c:	d10b      	bne.n	8006846 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800682e:	4b8d      	ldr	r3, [pc, #564]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d06c      	beq.n	8006914 <HAL_RCC_OscConfig+0x130>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d168      	bne.n	8006914 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e236      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800684e:	d106      	bne.n	800685e <HAL_RCC_OscConfig+0x7a>
 8006850:	4b84      	ldr	r3, [pc, #528]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a83      	ldr	r2, [pc, #524]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e02e      	b.n	80068bc <HAL_RCC_OscConfig+0xd8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0x9c>
 8006866:	4b7f      	ldr	r3, [pc, #508]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a7e      	ldr	r2, [pc, #504]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800686c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b7c      	ldr	r3, [pc, #496]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a7b      	ldr	r2, [pc, #492]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e01d      	b.n	80068bc <HAL_RCC_OscConfig+0xd8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006888:	d10c      	bne.n	80068a4 <HAL_RCC_OscConfig+0xc0>
 800688a:	4b76      	ldr	r3, [pc, #472]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a75      	ldr	r2, [pc, #468]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	4b73      	ldr	r3, [pc, #460]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a72      	ldr	r2, [pc, #456]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800689c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	e00b      	b.n	80068bc <HAL_RCC_OscConfig+0xd8>
 80068a4:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6e      	ldr	r2, [pc, #440]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	4b6c      	ldr	r3, [pc, #432]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6b      	ldr	r2, [pc, #428]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80068b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d013      	beq.n	80068ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fd fb56 	bl	8003f74 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fd fb52 	bl	8003f74 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e1ea      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068de:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f0      	beq.n	80068cc <HAL_RCC_OscConfig+0xe8>
 80068ea:	e014      	b.n	8006916 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fd fb42 	bl	8003f74 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068f4:	f7fd fb3e 	bl	8003f74 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b64      	cmp	r3, #100	; 0x64
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e1d6      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006906:	4b57      	ldr	r3, [pc, #348]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x110>
 8006912:	e000      	b.n	8006916 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d069      	beq.n	80069f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006922:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800692e:	4b4d      	ldr	r3, [pc, #308]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b08      	cmp	r3, #8
 8006938:	d11c      	bne.n	8006974 <HAL_RCC_OscConfig+0x190>
 800693a:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d116      	bne.n	8006974 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006946:	4b47      	ldr	r3, [pc, #284]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <HAL_RCC_OscConfig+0x17a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d001      	beq.n	800695e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e1aa      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695e:	4b41      	ldr	r3, [pc, #260]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	493d      	ldr	r1, [pc, #244]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006972:	e040      	b.n	80069f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d023      	beq.n	80069c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800697c:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a38      	ldr	r2, [pc, #224]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fd faf4 	bl	8003f74 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006990:	f7fd faf0 	bl	8003f74 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e188      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a2:	4b30      	ldr	r3, [pc, #192]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ae:	4b2d      	ldr	r3, [pc, #180]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4929      	ldr	r1, [pc, #164]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]
 80069c2:	e018      	b.n	80069f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c4:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a26      	ldr	r2, [pc, #152]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fd fad0 	bl	8003f74 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d8:	f7fd facc 	bl	8003f74 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e164      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ea:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d038      	beq.n	8006a74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d019      	beq.n	8006a3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0a:	4b16      	ldr	r3, [pc, #88]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a16:	f7fd faad 	bl	8003f74 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a1e:	f7fd faa9 	bl	8003f74 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e141      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a30:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0f0      	beq.n	8006a1e <HAL_RCC_OscConfig+0x23a>
 8006a3c:	e01a      	b.n	8006a74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a42:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <HAL_RCC_OscConfig+0x280>)
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4a:	f7fd fa93 	bl	8003f74 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a50:	e00a      	b.n	8006a68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a52:	f7fd fa8f 	bl	8003f74 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d903      	bls.n	8006a68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e127      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
 8006a64:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a68:	4b94      	ldr	r3, [pc, #592]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1ee      	bne.n	8006a52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80a4 	beq.w	8006bca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a82:	4b8e      	ldr	r3, [pc, #568]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10d      	bne.n	8006aaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8e:	4b8b      	ldr	r3, [pc, #556]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	4a8a      	ldr	r2, [pc, #552]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a98:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9a:	4b88      	ldr	r3, [pc, #544]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aaa:	4b85      	ldr	r3, [pc, #532]	; (8006cc0 <HAL_RCC_OscConfig+0x4dc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d118      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ab6:	4b82      	ldr	r3, [pc, #520]	; (8006cc0 <HAL_RCC_OscConfig+0x4dc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a81      	ldr	r2, [pc, #516]	; (8006cc0 <HAL_RCC_OscConfig+0x4dc>)
 8006abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac2:	f7fd fa57 	bl	8003f74 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006aca:	f7fd fa53 	bl	8003f74 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b64      	cmp	r3, #100	; 0x64
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0eb      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006adc:	4b78      	ldr	r3, [pc, #480]	; (8006cc0 <HAL_RCC_OscConfig+0x4dc>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0f0      	beq.n	8006aca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d106      	bne.n	8006afe <HAL_RCC_OscConfig+0x31a>
 8006af0:	4b72      	ldr	r3, [pc, #456]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a71      	ldr	r2, [pc, #452]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
 8006afc:	e02d      	b.n	8006b5a <HAL_RCC_OscConfig+0x376>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <HAL_RCC_OscConfig+0x33c>
 8006b06:	4b6d      	ldr	r3, [pc, #436]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4a6c      	ldr	r2, [pc, #432]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	6713      	str	r3, [r2, #112]	; 0x70
 8006b12:	4b6a      	ldr	r3, [pc, #424]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a69      	ldr	r2, [pc, #420]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b1e:	e01c      	b.n	8006b5a <HAL_RCC_OscConfig+0x376>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b05      	cmp	r3, #5
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCC_OscConfig+0x35e>
 8006b28:	4b64      	ldr	r3, [pc, #400]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	4a63      	ldr	r2, [pc, #396]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b2e:	f043 0304 	orr.w	r3, r3, #4
 8006b32:	6713      	str	r3, [r2, #112]	; 0x70
 8006b34:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b38:	4a60      	ldr	r2, [pc, #384]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b40:	e00b      	b.n	8006b5a <HAL_RCC_OscConfig+0x376>
 8006b42:	4b5e      	ldr	r3, [pc, #376]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	4a5d      	ldr	r2, [pc, #372]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4e:	4b5b      	ldr	r3, [pc, #364]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4a5a      	ldr	r2, [pc, #360]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b54:	f023 0304 	bic.w	r3, r3, #4
 8006b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d015      	beq.n	8006b8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b62:	f7fd fa07 	bl	8003f74 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fd fa03 	bl	8003f74 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e099      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b80:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0ee      	beq.n	8006b6a <HAL_RCC_OscConfig+0x386>
 8006b8c:	e014      	b.n	8006bb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8e:	f7fd f9f1 	bl	8003f74 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b94:	e00a      	b.n	8006bac <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b96:	f7fd f9ed 	bl	8003f74 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e083      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bac:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1ee      	bne.n	8006b96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d105      	bne.n	8006bca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bbe:	4b3f      	ldr	r3, [pc, #252]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	4a3e      	ldr	r2, [pc, #248]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d06f      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d067      	beq.n	8006cae <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d149      	bne.n	8006c7a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be6:	4b35      	ldr	r3, [pc, #212]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a34      	ldr	r2, [pc, #208]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf2:	f7fd f9bf 	bl	8003f74 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfa:	f7fd f9bb 	bl	8003f74 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e053      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c0c:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1f0      	bne.n	8006bfa <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	019b      	lsls	r3, r3, #6
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	3b01      	subs	r3, #1
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	061b      	lsls	r3, r3, #24
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c44:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c46:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fd f98f 	bl	8003f74 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5a:	f7fd f98b 	bl	8003f74 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e023      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x476>
 8006c78:	e01b      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c7a:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fd f975 	bl	8003f74 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fd f971 	bl	8003f74 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e009      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <HAL_RCC_OscConfig+0x4d8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCC_OscConfig+0x4aa>
 8006cac:	e001      	b.n	8006cb2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40007000 	.word	0x40007000

08006cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0ce      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b69      	ldr	r3, [pc, #420]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d910      	bls.n	8006d0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b66      	ldr	r3, [pc, #408]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f023 020f 	bic.w	r2, r3, #15
 8006cf2:	4964      	ldr	r1, [pc, #400]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfa:	4b62      	ldr	r3, [pc, #392]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0b6      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d24:	4b58      	ldr	r3, [pc, #352]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4a57      	ldr	r2, [pc, #348]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d3c:	4b52      	ldr	r3, [pc, #328]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a51      	ldr	r2, [pc, #324]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d48:	4b4f      	ldr	r3, [pc, #316]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	494c      	ldr	r1, [pc, #304]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d040      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6e:	4b46      	ldr	r3, [pc, #280]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d115      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e07d      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	4b40      	ldr	r3, [pc, #256]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e071      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d96:	4b3c      	ldr	r3, [pc, #240]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e069      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da6:	4b38      	ldr	r3, [pc, #224]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4935      	ldr	r1, [pc, #212]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006db8:	f7fd f8dc 	bl	8003f74 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7fd f8d8 	bl	8003f74 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e051      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 020c 	and.w	r2, r3, #12
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1eb      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006de8:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d210      	bcs.n	8006e18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f023 020f 	bic.w	r2, r3, #15
 8006dfe:	4921      	ldr	r1, [pc, #132]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e06:	4b1f      	ldr	r3, [pc, #124]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e030      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e24:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4915      	ldr	r1, [pc, #84]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e42:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	490d      	ldr	r1, [pc, #52]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e56:	f000 f81d 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	091b      	lsrs	r3, r3, #4
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <HAL_RCC_ClockConfig+0x1c8>)
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
 8006e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8006e6e:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <HAL_RCC_ClockConfig+0x1cc>)
 8006e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006e72:	2000      	movs	r0, #0
 8006e74:	f7fd f83a 	bl	8003eec <HAL_InitTick>

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40023c00 	.word	0x40023c00
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	0802f440 	.word	0x0802f440
 8006e90:	20009af0 	.word	0x20009af0

08006e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eaa:	4b50      	ldr	r3, [pc, #320]	; (8006fec <HAL_RCC_GetSysClockFreq+0x158>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 030c 	and.w	r3, r3, #12
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d007      	beq.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x32>
 8006eb6:	2b08      	cmp	r3, #8
 8006eb8:	d008      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x38>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 808d 	bne.w	8006fda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec0:	4b4b      	ldr	r3, [pc, #300]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006ec2:	60bb      	str	r3, [r7, #8]
       break;
 8006ec4:	e08c      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ec6:	4b4b      	ldr	r3, [pc, #300]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ec8:	60bb      	str	r3, [r7, #8]
      break;
 8006eca:	e089      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ecc:	4b47      	ldr	r3, [pc, #284]	; (8006fec <HAL_RCC_GetSysClockFreq+0x158>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006ed6:	4b45      	ldr	r3, [pc, #276]	; (8006fec <HAL_RCC_GetSysClockFreq+0x158>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d023      	beq.n	8006f2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <HAL_RCC_GetSysClockFreq+0x158>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	f04f 0400 	mov.w	r4, #0
 8006eec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	ea03 0501 	and.w	r5, r3, r1
 8006ef8:	ea04 0602 	and.w	r6, r4, r2
 8006efc:	4a3d      	ldr	r2, [pc, #244]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006efe:	fb02 f106 	mul.w	r1, r2, r6
 8006f02:	2200      	movs	r2, #0
 8006f04:	fb02 f205 	mul.w	r2, r2, r5
 8006f08:	440a      	add	r2, r1
 8006f0a:	493a      	ldr	r1, [pc, #232]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f0c:	fba5 0101 	umull	r0, r1, r5, r1
 8006f10:	1853      	adds	r3, r2, r1
 8006f12:	4619      	mov	r1, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f04f 0400 	mov.w	r4, #0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	f7f9 ff13 	bl	8000d48 <__aeabi_uldivmod>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	e049      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f2a:	4b30      	ldr	r3, [pc, #192]	; (8006fec <HAL_RCC_GetSysClockFreq+0x158>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	099b      	lsrs	r3, r3, #6
 8006f30:	f04f 0400 	mov.w	r4, #0
 8006f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	ea03 0501 	and.w	r5, r3, r1
 8006f40:	ea04 0602 	and.w	r6, r4, r2
 8006f44:	4629      	mov	r1, r5
 8006f46:	4632      	mov	r2, r6
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	f04f 0400 	mov.w	r4, #0
 8006f50:	0154      	lsls	r4, r2, #5
 8006f52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f56:	014b      	lsls	r3, r1, #5
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	1b49      	subs	r1, r1, r5
 8006f5e:	eb62 0206 	sbc.w	r2, r2, r6
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	f04f 0400 	mov.w	r4, #0
 8006f6a:	0194      	lsls	r4, r2, #6
 8006f6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f70:	018b      	lsls	r3, r1, #6
 8006f72:	1a5b      	subs	r3, r3, r1
 8006f74:	eb64 0402 	sbc.w	r4, r4, r2
 8006f78:	f04f 0100 	mov.w	r1, #0
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	00e2      	lsls	r2, r4, #3
 8006f82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f86:	00d9      	lsls	r1, r3, #3
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4614      	mov	r4, r2
 8006f8c:	195b      	adds	r3, r3, r5
 8006f8e:	eb44 0406 	adc.w	r4, r4, r6
 8006f92:	f04f 0100 	mov.w	r1, #0
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	02a2      	lsls	r2, r4, #10
 8006f9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006fa0:	0299      	lsls	r1, r3, #10
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	4621      	mov	r1, r4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f04f 0400 	mov.w	r4, #0
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4623      	mov	r3, r4
 8006fb4:	f7f9 fec8 	bl	8000d48 <__aeabi_uldivmod>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <HAL_RCC_GetSysClockFreq+0x158>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	3301      	adds	r3, #1
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd6:	60bb      	str	r3, [r7, #8]
      break;
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006fdc:	60bb      	str	r3, [r7, #8]
      break;
 8006fde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	00f42400 	.word	0x00f42400
 8006ff4:	017d7840 	.word	0x017d7840

08006ff8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <HAL_RCC_GetHCLKFreq+0x14>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
}
 8007000:	4618      	mov	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20009af0 	.word	0x20009af0

08007010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007014:	f7ff fff0 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8007018:	4601      	mov	r1, r0
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	0a9b      	lsrs	r3, r3, #10
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	4a03      	ldr	r2, [pc, #12]	; (8007034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007026:	5cd3      	ldrb	r3, [r2, r3]
 8007028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	0802f450 	.word	0x0802f450

08007038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800703c:	f7ff ffdc 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8007040:	4601      	mov	r1, r0
 8007042:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	0b5b      	lsrs	r3, r3, #13
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4a03      	ldr	r2, [pc, #12]	; (800705c <HAL_RCC_GetPCLK2Freq+0x24>)
 800704e:	5cd3      	ldrb	r3, [r2, r3]
 8007050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40023800 	.word	0x40023800
 800705c:	0802f450 	.word	0x0802f450

08007060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d012      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007088:	4b69      	ldr	r3, [pc, #420]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	4a68      	ldr	r2, [pc, #416]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007092:	6093      	str	r3, [r2, #8]
 8007094:	4b66      	ldr	r3, [pc, #408]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709c:	4964      	ldr	r1, [pc, #400]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d017      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070ba:	4b5d      	ldr	r3, [pc, #372]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c8:	4959      	ldr	r1, [pc, #356]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d8:	d101      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80070e6:	2301      	movs	r3, #1
 80070e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d017      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070f6:	4b4e      	ldr	r3, [pc, #312]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	494a      	ldr	r1, [pc, #296]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007114:	d101      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007116:	2301      	movs	r3, #1
 8007118:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007132:	2301      	movs	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 808b 	beq.w	800725a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007144:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	4a39      	ldr	r2, [pc, #228]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800714a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714e:	6413      	str	r3, [r2, #64]	; 0x40
 8007150:	4b37      	ldr	r3, [pc, #220]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007158:	60bb      	str	r3, [r7, #8]
 800715a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a34      	ldr	r2, [pc, #208]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007168:	f7fc ff04 	bl	8003f74 <HAL_GetTick>
 800716c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800716e:	e008      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007170:	f7fc ff00 	bl	8003f74 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	; 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e355      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007182:	4b2c      	ldr	r3, [pc, #176]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800718e:	4b28      	ldr	r3, [pc, #160]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007196:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d035      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d02e      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071ac:	4b20      	ldr	r3, [pc, #128]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071b6:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071c2:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80071ce:	4a18      	ldr	r2, [pc, #96]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071d4:	4b16      	ldr	r3, [pc, #88]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d014      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fc fec8 	bl	8003f74 <HAL_GetTick>
 80071e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e6:	e00a      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071e8:	f7fc fec4 	bl	8003f74 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e317      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0ee      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007216:	d111      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007226:	400b      	ands	r3, r1
 8007228:	4901      	ldr	r1, [pc, #4]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800722a:	4313      	orrs	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	e00b      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007230:	40023800 	.word	0x40023800
 8007234:	40007000 	.word	0x40007000
 8007238:	0ffffcff 	.word	0x0ffffcff
 800723c:	4bb0      	ldr	r3, [pc, #704]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4aaf      	ldr	r2, [pc, #700]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007242:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007246:	6093      	str	r3, [r2, #8]
 8007248:	4bad      	ldr	r3, [pc, #692]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800724a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007254:	49aa      	ldr	r1, [pc, #680]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007256:	4313      	orrs	r3, r2
 8007258:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	d010      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007266:	4ba6      	ldr	r3, [pc, #664]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726c:	4aa4      	ldr	r2, [pc, #656]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800726e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007272:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007276:	4ba2      	ldr	r3, [pc, #648]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007278:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	499f      	ldr	r1, [pc, #636]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00a      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007294:	4b9a      	ldr	r3, [pc, #616]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a2:	4997      	ldr	r1, [pc, #604]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072b6:	4b92      	ldr	r3, [pc, #584]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c4:	498e      	ldr	r1, [pc, #568]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072d8:	4b89      	ldr	r3, [pc, #548]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e6:	4986      	ldr	r1, [pc, #536]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072fa:	4b81      	ldr	r3, [pc, #516]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007308:	497d      	ldr	r1, [pc, #500]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800731c:	4b78      	ldr	r3, [pc, #480]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	f023 0203 	bic.w	r2, r3, #3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	4975      	ldr	r1, [pc, #468]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800732c:	4313      	orrs	r3, r2
 800732e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800733e:	4b70      	ldr	r3, [pc, #448]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007344:	f023 020c 	bic.w	r2, r3, #12
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734c:	496c      	ldr	r1, [pc, #432]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007360:	4b67      	ldr	r3, [pc, #412]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	4964      	ldr	r1, [pc, #400]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007382:	4b5f      	ldr	r3, [pc, #380]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	495b      	ldr	r1, [pc, #364]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073a4:	4b56      	ldr	r3, [pc, #344]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	4953      	ldr	r1, [pc, #332]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80073c6:	4b4e      	ldr	r3, [pc, #312]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d4:	494a      	ldr	r1, [pc, #296]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80073e8:	4b45      	ldr	r3, [pc, #276]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	4942      	ldr	r1, [pc, #264]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800740a:	4b3d      	ldr	r3, [pc, #244]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007418:	4939      	ldr	r1, [pc, #228]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800742c:	4b34      	ldr	r3, [pc, #208]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007432:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743a:	4931      	ldr	r1, [pc, #196]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d011      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800744e:	4b2c      	ldr	r3, [pc, #176]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745c:	4928      	ldr	r1, [pc, #160]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800746c:	d101      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800746e:	2301      	movs	r3, #1
 8007470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800748e:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007494:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749c:	4918      	ldr	r1, [pc, #96]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074b0:	4b13      	ldr	r3, [pc, #76]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c0:	490f      	ldr	r1, [pc, #60]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d005      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074d6:	f040 80d8 	bne.w	800768a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a08      	ldr	r2, [pc, #32]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e6:	f7fc fd45 	bl	8003f74 <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074ec:	e00a      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074ee:	f7fc fd41 	bl	8003f74 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b64      	cmp	r3, #100	; 0x64
 80074fa:	d903      	bls.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e196      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007500:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007504:	4b6c      	ldr	r3, [pc, #432]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ee      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d021      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11d      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007524:	4b64      	ldr	r3, [pc, #400]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007532:	4b61      	ldr	r3, [pc, #388]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	019a      	lsls	r2, r3, #6
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	431a      	orrs	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	071b      	lsls	r3, r3, #28
 8007558:	4957      	ldr	r1, [pc, #348]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007574:	d00a      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800757e:	2b00      	cmp	r3, #0
 8007580:	d02e      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758a:	d129      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800758c:	4b4a      	ldr	r3, [pc, #296]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800758e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007592:	0c1b      	lsrs	r3, r3, #16
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800759a:	4b47      	ldr	r3, [pc, #284]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800759c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a0:	0f1b      	lsrs	r3, r3, #28
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	019a      	lsls	r2, r3, #6
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	061b      	lsls	r3, r3, #24
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	071b      	lsls	r3, r3, #28
 80075c0:	493d      	ldr	r1, [pc, #244]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80075c8:	4b3b      	ldr	r3, [pc, #236]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ce:	f023 021f 	bic.w	r2, r3, #31
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	3b01      	subs	r3, #1
 80075d8:	4937      	ldr	r1, [pc, #220]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01d      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075ec:	4b32      	ldr	r3, [pc, #200]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f2:	0e1b      	lsrs	r3, r3, #24
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075fa:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80075fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007600:	0f1b      	lsrs	r3, r3, #28
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	019a      	lsls	r2, r3, #6
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	431a      	orrs	r2, r3
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	061b      	lsls	r3, r3, #24
 800761a:	431a      	orrs	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	071b      	lsls	r3, r3, #28
 8007620:	4925      	ldr	r1, [pc, #148]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d011      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	019a      	lsls	r2, r3, #6
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	071b      	lsls	r3, r3, #28
 8007650:	4919      	ldr	r1, [pc, #100]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007652:	4313      	orrs	r3, r2
 8007654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007658:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800765e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007664:	f7fc fc86 	bl	8003f74 <HAL_GetTick>
 8007668:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800766a:	e008      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800766c:	f7fc fc82 	bl	8003f74 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	; 0x64
 8007678:	d901      	bls.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e0d7      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b01      	cmp	r3, #1
 800768e:	f040 80cd 	bne.w	800782c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800769c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800769e:	f7fc fc69 	bl	8003f74 <HAL_GetTick>
 80076a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076a4:	e00a      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076a6:	f7fc fc65 	bl	8003f74 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b64      	cmp	r3, #100	; 0x64
 80076b2:	d903      	bls.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e0ba      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80076b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076bc:	4b5e      	ldr	r3, [pc, #376]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c8:	d0ed      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d02e      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d12a      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076f2:	4b51      	ldr	r3, [pc, #324]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	0c1b      	lsrs	r3, r3, #16
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007700:	4b4d      	ldr	r3, [pc, #308]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	0f1b      	lsrs	r3, r3, #28
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	019a      	lsls	r2, r3, #6
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	431a      	orrs	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	071b      	lsls	r3, r3, #28
 8007726:	4944      	ldr	r1, [pc, #272]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800772e:	4b42      	ldr	r3, [pc, #264]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	3b01      	subs	r3, #1
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	493d      	ldr	r1, [pc, #244]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d022      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775c:	d11d      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800775e:	4b36      	ldr	r3, [pc, #216]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800776c:	4b32      	ldr	r3, [pc, #200]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007772:	0f1b      	lsrs	r3, r3, #28
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	019a      	lsls	r2, r3, #6
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	431a      	orrs	r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	431a      	orrs	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	071b      	lsls	r3, r3, #28
 8007792:	4929      	ldr	r1, [pc, #164]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d028      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077a6:	4b24      	ldr	r3, [pc, #144]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077b4:	4b20      	ldr	r3, [pc, #128]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ba:	0c1b      	lsrs	r3, r3, #16
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	019a      	lsls	r2, r3, #6
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	041b      	lsls	r3, r3, #16
 80077cc:	431a      	orrs	r2, r3
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	071b      	lsls	r3, r3, #28
 80077da:	4917      	ldr	r1, [pc, #92]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	4911      	ldr	r1, [pc, #68]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80077f8:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a0e      	ldr	r2, [pc, #56]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80077fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007804:	f7fc fbb6 	bl	8003f74 <HAL_GetTick>
 8007808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800780a:	e008      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800780c:	f7fc fbb2 	bl	8003f74 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b64      	cmp	r3, #100	; 0x64
 8007818:	d901      	bls.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e007      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782a:	d1ef      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3720      	adds	r7, #32
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	40023800 	.word	0x40023800

0800783c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a80      	ldr	r2, [pc, #512]	; (8007a4c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800784c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800784e:	4b80      	ldr	r3, [pc, #512]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007854:	099b      	lsrs	r3, r3, #6
 8007856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800785e:	4b7c      	ldr	r3, [pc, #496]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	f003 0203 	and.w	r2, r3, #3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800786e:	4b78      	ldr	r3, [pc, #480]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007874:	0e1b      	lsrs	r3, r3, #24
 8007876:	f003 020f 	and.w	r2, r3, #15
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800787e:	4b74      	ldr	r3, [pc, #464]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007884:	0f1b      	lsrs	r3, r3, #28
 8007886:	f003 0207 	and.w	r2, r3, #7
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800788e:	4b70      	ldr	r3, [pc, #448]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007894:	099b      	lsrs	r3, r3, #6
 8007896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800789e:	4b6c      	ldr	r3, [pc, #432]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 0203 	and.w	r2, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078ae:	4b68      	ldr	r3, [pc, #416]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b4:	0e1b      	lsrs	r3, r3, #24
 80078b6:	f003 020f 	and.w	r2, r3, #15
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078be:	4b64      	ldr	r3, [pc, #400]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	0f1b      	lsrs	r3, r3, #28
 80078c6:	f003 0207 	and.w	r2, r3, #7
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80078ce:	4b60      	ldr	r3, [pc, #384]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d4:	f003 021f 	and.w	r2, r3, #31
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80078dc:	4b5c      	ldr	r3, [pc, #368]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	f003 021f 	and.w	r2, r3, #31
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80078ec:	4b58      	ldr	r3, [pc, #352]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f2:	0c1b      	lsrs	r3, r3, #16
 80078f4:	f003 0203 	and.w	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80078fc:	4b54      	ldr	r3, [pc, #336]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007902:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800790a:	4b51      	ldr	r3, [pc, #324]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800790c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007910:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007918:	4b4d      	ldr	r3, [pc, #308]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007924:	4b4a      	ldr	r3, [pc, #296]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007932:	4b47      	ldr	r3, [pc, #284]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007938:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007940:	4b43      	ldr	r3, [pc, #268]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007946:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800794e:	4b40      	ldr	r3, [pc, #256]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007954:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800795c:	4b3c      	ldr	r3, [pc, #240]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007962:	f003 0203 	and.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800796a:	4b39      	ldr	r3, [pc, #228]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007970:	f003 020c 	and.w	r2, r3, #12
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007978:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007986:	4b32      	ldr	r3, [pc, #200]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007994:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80079a2:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80079b0:	4b27      	ldr	r3, [pc, #156]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80079be:	4b24      	ldr	r3, [pc, #144]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80079cc:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80079da:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e0:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80079e8:	4b19      	ldr	r3, [pc, #100]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007a06:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007a34:	e003      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007a3e:	bf00      	nop
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	00fffff1 	.word	0x00fffff1
 8007a50:	40023800 	.word	0x40023800

08007a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a72:	f040 8086 	bne.w	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007a76:	4b8d      	ldr	r3, [pc, #564]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007a84:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a8c:	d03e      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a92:	d073      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d000      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007a98:	e074      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a9a:	4b84      	ldr	r3, [pc, #528]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d108      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007aa6:	4b81      	ldr	r3, [pc, #516]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aae:	4a80      	ldr	r2, [pc, #512]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	e007      	b.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ab8:	4b7c      	ldr	r3, [pc, #496]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac0:	4a7c      	ldr	r2, [pc, #496]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007ac8:	4b78      	ldr	r3, [pc, #480]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ace:	0e1b      	lsrs	r3, r3, #24
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007ad6:	4b75      	ldr	r3, [pc, #468]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	099b      	lsrs	r3, r3, #6
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	fb02 f203 	mul.w	r2, r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007af0:	4b6e      	ldr	r3, [pc, #440]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	3301      	adds	r3, #1
 8007afe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b08:	617b      	str	r3, [r7, #20]
        break;
 8007b0a:	e03b      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b0c:	4b67      	ldr	r3, [pc, #412]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d108      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b18:	4b64      	ldr	r3, [pc, #400]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b20:	4a63      	ldr	r2, [pc, #396]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	e007      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b2a:	4b60      	ldr	r3, [pc, #384]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b32:	4a60      	ldr	r2, [pc, #384]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b38:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007b3a:	4b5c      	ldr	r3, [pc, #368]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b40:	0e1b      	lsrs	r3, r3, #24
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007b48:	4b58      	ldr	r3, [pc, #352]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b4e:	099b      	lsrs	r3, r3, #6
 8007b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	fb02 f203 	mul.w	r2, r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007b62:	4b52      	ldr	r3, [pc, #328]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b78:	617b      	str	r3, [r7, #20]
        break;
 8007b7a:	e003      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b7c:	4b4e      	ldr	r3, [pc, #312]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007b7e:	617b      	str	r3, [r7, #20]
        break;
 8007b80:	e000      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007b82:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8a:	f040 8086 	bne.w	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007b8e:	4b47      	ldr	r3, [pc, #284]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007b9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba4:	d03e      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007baa:	d073      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d000      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007bb0:	e074      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007bb2:	4b3e      	ldr	r3, [pc, #248]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d108      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bbe:	4b3b      	ldr	r3, [pc, #236]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc6:	4a3a      	ldr	r2, [pc, #232]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	e007      	b.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007bd0:	4b36      	ldr	r3, [pc, #216]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd8:	4a36      	ldr	r2, [pc, #216]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bde:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007be0:	4b32      	ldr	r3, [pc, #200]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007bee:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	099b      	lsrs	r3, r3, #6
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	fb02 f203 	mul.w	r2, r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007c08:	4b28      	ldr	r3, [pc, #160]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	f003 031f 	and.w	r3, r3, #31
 8007c14:	3301      	adds	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	617b      	str	r3, [r7, #20]
        break;
 8007c22:	e03b      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c24:	4b21      	ldr	r3, [pc, #132]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d108      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c30:	4b1e      	ldr	r3, [pc, #120]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c38:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e007      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c42:	4b1a      	ldr	r3, [pc, #104]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007c52:	4b16      	ldr	r3, [pc, #88]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007c60:	4b12      	ldr	r3, [pc, #72]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	fb02 f203 	mul.w	r2, r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	617b      	str	r3, [r7, #20]
        break;
 8007c92:	e003      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007c96:	617b      	str	r3, [r7, #20]
        break;
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007c9a:	bf00      	nop

  return frequency;
 8007c9c:	697b      	ldr	r3, [r7, #20]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	00f42400 	.word	0x00f42400
 8007cb4:	017d7840 	.word	0x017d7840
 8007cb8:	00bb8000 	.word	0x00bb8000

08007cbc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e149      	b.n	8007f6e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f98b 	bl	800800a <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fadd 	bl	80082bc <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d007      	beq.n	8007d1a <HAL_SAI_Init+0x5e>
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d302      	bcc.n	8007d14 <HAL_SAI_Init+0x58>
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d006      	beq.n	8007d20 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007d12:	e008      	b.n	8007d26 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]
      break;
 8007d18:	e005      	b.n	8007d26 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	61fb      	str	r3, [r7, #28]
      break;
 8007d1e:	e002      	b.n	8007d26 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007d20:	2320      	movs	r3, #32
 8007d22:	61fb      	str	r3, [r7, #28]
      break;
 8007d24:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d81d      	bhi.n	8007d6a <HAL_SAI_Init+0xae>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <HAL_SAI_Init+0x78>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d4b 	.word	0x08007d4b
 8007d3c:	08007d53 	.word	0x08007d53
 8007d40:	08007d5b 	.word	0x08007d5b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]
      }
      break;
 8007d48:	e010      	b.n	8007d6c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007d50:	e00c      	b.n	8007d6c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d56:	617b      	str	r3, [r7, #20]
      }
      break;
 8007d58:	e008      	b.n	8007d6c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d5e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007d68:	e000      	b.n	8007d6c <HAL_SAI_Init+0xb0>
  default:
    break;      
 8007d6a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a81      	ldr	r2, [pc, #516]	; (8007f78 <HAL_SAI_Init+0x2bc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d004      	beq.n	8007d80 <HAL_SAI_Init+0xc4>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a80      	ldr	r2, [pc, #512]	; (8007f7c <HAL_SAI_Init+0x2c0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d103      	bne.n	8007d88 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007d80:	4a7f      	ldr	r2, [pc, #508]	; (8007f80 <HAL_SAI_Init+0x2c4>)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	e002      	b.n	8007d8e <HAL_SAI_Init+0xd2>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8007d88:	4a7e      	ldr	r2, [pc, #504]	; (8007f84 <HAL_SAI_Init+0x2c8>)
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d043      	beq.n	8007e1e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a76      	ldr	r2, [pc, #472]	; (8007f78 <HAL_SAI_Init+0x2bc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_SAI_Init+0xf2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a74      	ldr	r2, [pc, #464]	; (8007f7c <HAL_SAI_Init+0x2c0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d104      	bne.n	8007db8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007dae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007db2:	f7ff fe4f 	bl	8007a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8007db6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a72      	ldr	r2, [pc, #456]	; (8007f88 <HAL_SAI_Init+0x2cc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d004      	beq.n	8007dcc <HAL_SAI_Init+0x110>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a71      	ldr	r2, [pc, #452]	; (8007f8c <HAL_SAI_Init+0x2d0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d104      	bne.n	8007dd6 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007dcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007dd0:	f7ff fe40 	bl	8007a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8007dd4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	461a      	mov	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	025b      	lsls	r3, r3, #9
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a67      	ldr	r2, [pc, #412]	; (8007f90 <HAL_SAI_Init+0x2d4>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	08da      	lsrs	r2, r3, #3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007dfc:	68f9      	ldr	r1, [r7, #12]
 8007dfe:	4b64      	ldr	r3, [pc, #400]	; (8007f90 <HAL_SAI_Init+0x2d4>)
 8007e00:	fba3 2301 	umull	r2, r3, r3, r1
 8007e04:	08da      	lsrs	r2, r3, #3
 8007e06:	4613      	mov	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	1aca      	subs	r2, r1, r3
 8007e10:	2a08      	cmp	r2, #8
 8007e12:	d904      	bls.n	8007e1e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_SAI_Init+0x172>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d109      	bne.n	8007e42 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_SAI_Init+0x17e>
 8007e36:	2300      	movs	r3, #0
 8007e38:	e001      	b.n	8007e3e <HAL_SAI_Init+0x182>
 8007e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	e008      	b.n	8007e54 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d102      	bne.n	8007e50 <HAL_SAI_Init+0x194>
 8007e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e4e:	e000      	b.n	8007e52 <HAL_SAI_Init+0x196>
 8007e50:	2300      	movs	r3, #0
 8007e52:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6819      	ldr	r1, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b4d      	ldr	r3, [pc, #308]	; (8007f94 <HAL_SAI_Init+0x2d8>)
 8007e60:	400b      	ands	r3, r1
 8007e62:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6819      	ldr	r1, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e78:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007e8c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e98:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	051b      	lsls	r3, r3, #20
 8007ea0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6859      	ldr	r1, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b38      	ldr	r3, [pc, #224]	; (8007f98 <HAL_SAI_Init+0x2dc>)
 8007eb6:	400b      	ands	r3, r1
 8007eb8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6859      	ldr	r1, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6899      	ldr	r1, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <HAL_SAI_Init+0x2e0>)
 8007ee4:	400b      	ands	r3, r1
 8007ee6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6899      	ldr	r1, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007ef8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007efe:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007f04:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007f0e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68d9      	ldr	r1, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007f26:	400b      	ands	r3, r1
 8007f28:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68d9      	ldr	r1, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f38:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f46:	3b01      	subs	r3, #1
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3720      	adds	r7, #32
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40015804 	.word	0x40015804
 8007f7c:	40015824 	.word	0x40015824
 8007f80:	40015800 	.word	0x40015800
 8007f84:	40015c00 	.word	0x40015c00
 8007f88:	40015c04 	.word	0x40015c04
 8007f8c:	40015c24 	.word	0x40015c24
 8007f90:	cccccccd 	.word	0xcccccccd
 8007f94:	ff05c010 	.word	0xff05c010
 8007f98:	ffff1ff0 	.word	0xffff1ff0
 8007f9c:	fff88000 	.word	0xfff88000

08007fa0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e027      	b.n	8008002 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fca:	619a      	str	r2, [r3, #24]
  
  /* Disable the SAI */
  SAI_Disable(hsai);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f975 	bl	80082bc <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0208 	orr.w	r2, r2, #8
 8007fe0:	605a      	str	r2, [r3, #4]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f81b 	bl	800801e <HAL_SAI_MspDeInit>

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_SAI_DMAStop+0x1a>
 8008048:	2302      	movs	r3, #2
 800804a:	e061      	b.n	8008110 <HAL_SAI_DMAStop+0xde>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008062:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01c      	beq.n	80080a6 <HAL_SAI_DMAStop+0x74>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b12      	cmp	r3, #18
 8008076:	d116      	bne.n	80080a6 <HAL_SAI_DMAStop+0x74>
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	4618      	mov	r0, r3
 800807e:	f7fc fa9d 	bl	80045bc <HAL_DMA_Abort>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00e      	beq.n	80080a6 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808e:	2b80      	cmp	r3, #128	; 0x80
 8008090:	d009      	beq.n	80080a6 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d01c      	beq.n	80080e8 <HAL_SAI_DMAStop+0xb6>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b22      	cmp	r3, #34	; 0x22
 80080b8:	d116      	bne.n	80080e8 <HAL_SAI_DMAStop+0xb6>
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fc fa7c 	bl	80045bc <HAL_DMA_Abort>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00e      	beq.n	80080e8 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d0:	2b80      	cmp	r3, #128	; 0x80
 80080d2:	d009      	beq.n	80080e8 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f8e7 	bl	80082bc <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0208 	orr.w	r2, r2, #8
 80080fc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <HAL_SAI_Receive_DMA+0x1a>
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e074      	b.n	8008220 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b01      	cmp	r3, #1
 8008140:	d16d      	bne.n	800821e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_SAI_Receive_DMA+0x38>
 800814c:	2302      	movs	r3, #2
 800814e:	e067      	b.n	8008220 <HAL_SAI_Receive_DMA+0x108>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	88fa      	ldrh	r2, [r7, #6]
 8008162:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	88fa      	ldrh	r2, [r7, #6]
 800816a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2222      	movs	r2, #34	; 0x22
 800817a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008182:	4a29      	ldr	r2, [pc, #164]	; (8008228 <HAL_SAI_Receive_DMA+0x110>)
 8008184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	4a28      	ldr	r2, [pc, #160]	; (800822c <HAL_SAI_Receive_DMA+0x114>)
 800818c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	4a27      	ldr	r2, [pc, #156]	; (8008230 <HAL_SAI_Receive_DMA+0x118>)
 8008194:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	2200      	movs	r2, #0
 800819c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	331c      	adds	r3, #28
 80081a8:	4619      	mov	r1, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ae:	461a      	mov	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081b6:	f7fc f9a1 	bl	80044fc <HAL_DMA_Start_IT>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e029      	b.n	8008220 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d107      	bne.n	80081ea <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80081ea:	2100      	movs	r1, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f82f 	bl	8008250 <SAI_InterruptFlag>
 80081f2:	4601      	mov	r1, r0
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008210:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800821e:	2302      	movs	r3, #2
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	0800838d 	.word	0x0800838d
 800822c:	08008329 	.word	0x08008329
 8008230:	080083a9 	.word	0x080083a9

08008234 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008242:	b2db      	uxtb	r3, r3
}
 8008244:	4618      	mov	r0, r3
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800825a:	2301      	movs	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  
  if(mode == SAI_MODE_IT)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d103      	bne.n	800826c <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f043 0308 	orr.w	r3, r3, #8
 800826a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	2b08      	cmp	r3, #8
 8008272:	d10b      	bne.n	800828c <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008278:	2b03      	cmp	r3, #3
 800827a:	d003      	beq.n	8008284 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d103      	bne.n	800828c <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f043 0310 	orr.w	r3, r3, #16
 800828a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b03      	cmp	r3, #3
 8008292:	d003      	beq.n	800829c <SAI_InterruptFlag+0x4c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d104      	bne.n	80082a6 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e003      	b.n	80082ae <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f043 0304 	orr.w	r3, r3, #4
 80082ac:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80082bc:	b490      	push	{r4, r7}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80082c4:	4b16      	ldr	r3, [pc, #88]	; (8008320 <SAI_Disable+0x64>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a16      	ldr	r2, [pc, #88]	; (8008324 <SAI_Disable+0x68>)
 80082ca:	fba2 2303 	umull	r2, r3, r2, r3
 80082ce:	0b1b      	lsrs	r3, r3, #12
 80082d0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082e4:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80082e6:	4623      	mov	r3, r4
 80082e8:	1e5c      	subs	r4, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	73fb      	strb	r3, [r7, #15]
      break;
 8008302:	e006      	b.n	8008312 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e9      	bne.n	80082e6 <SAI_Disable+0x2a>

  return status;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bc90      	pop	{r4, r7}
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20009af0 	.word	0x20009af0
 8008324:	95cbec1b 	.word	0x95cbec1b

08008328 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	60fb      	str	r3, [r7, #12]
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008340:	2b00      	cmp	r3, #0
 8008342:	d11c      	bne.n	800837e <SAI_DMARxCplt+0x56>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008352:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800835c:	2100      	movs	r1, #0
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff ff76 	bl	8008250 <SAI_InterruptFlag>
 8008364:	4603      	mov	r3, r0
 8008366:	43d9      	mvns	r1, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	400a      	ands	r2, r1
 8008374:	611a      	str	r2, [r3, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7fa fbb8 	bl	8002af4 <HAL_SAI_RxCpltCallback>
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	60fb      	str	r3, [r7, #12]

  HAL_SAI_RxHalfCpltCallback(hsai);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f7fa fbb4 	bl	8002b08 <HAL_SAI_RxHalfCpltCallback>
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d004      	beq.n	80083da <SAI_DMAError+0x32>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d112      	bne.n	8008400 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80083e8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ff66 	bl	80082bc <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7fa f97f 	bl	8002704 <HAL_SAI_ErrorCallback>
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e025      	b.n	800846e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f81d 	bl	8008476 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3304      	adds	r3, #4
 800844c:	4619      	mov	r1, r3
 800844e:	4610      	mov	r0, r2
 8008450:	f000 fd96 	bl	8008f80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	461a      	mov	r2, r3
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	f000 fe00 	bl	8009064 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d101      	bne.n	80084a6 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80084a2:	2302      	movs	r3, #2
 80084a4:	e018      	b.n	80084d8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fe54 	bl	8009164 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d104      	bne.n	80084ce <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2205      	movs	r2, #5
 80084c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80084cc:	e003      	b.n	80084d6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d101      	bne.n	80084fa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
 80084f8:	e00e      	b.n	8008518 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fe4c 	bl	80091a6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e043      	b.n	80085ba <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f005 fc88 	bl	800de5c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2224      	movs	r2, #36	; 0x24
 8008550:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f9c5 	bl	80088f4 <UART_SetConfig>
 800856a:	4603      	mov	r3, r0
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e022      	b.n	80085ba <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fc29 	bl	8008dd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085a0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0201 	orr.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fcb0 	bl	8008f18 <UART_CheckIdleState>
 80085b8:	4603      	mov	r3, r0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af02      	add	r7, sp, #8
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d176      	bne.n	80086d0 <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <HAL_UART_Transmit+0x2c>
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e06f      	b.n	80086d2 <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_UART_Transmit+0x3e>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e068      	b.n	80086d2 <HAL_UART_Transmit+0x110>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2221      	movs	r2, #33	; 0x21
 8008612:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008616:	f7fb fcad 	bl	8003f74 <HAL_GetTick>
 800861a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	88fa      	ldrh	r2, [r7, #6]
 8008620:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800862c:	e033      	b.n	8008696 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2200      	movs	r2, #0
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 f907 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e03b      	b.n	80086d2 <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008662:	d111      	bne.n	8008688 <HAL_UART_Transmit+0xc6>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10d      	bne.n	8008688 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	3302      	adds	r3, #2
 8008684:	60bb      	str	r3, [r7, #8]
 8008686:	e006      	b.n	8008696 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	60ba      	str	r2, [r7, #8]
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1c5      	bne.n	800862e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2140      	movs	r1, #64	; 0x40
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f8d6 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e00a      	b.n	80086d2 <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b08a      	sub	sp, #40	; 0x28
 80086de:	af02      	add	r7, sp, #8
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	603b      	str	r3, [r7, #0]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	f040 80ac 	bne.w	8008854 <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_UART_Receive+0x2e>
 8008702:	88fb      	ldrh	r3, [r7, #6]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0a4      	b.n	8008856 <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UART_Receive+0x40>
 8008716:	2302      	movs	r3, #2
 8008718:	e09d      	b.n	8008856 <HAL_UART_Receive+0x17c>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2222      	movs	r2, #34	; 0x22
 800872c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008730:	f7fb fc20 	bl	8003f74 <HAL_GetTick>
 8008734:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	88fa      	ldrh	r2, [r7, #6]
 800873a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874e:	d10e      	bne.n	800876e <HAL_UART_Receive+0x94>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <HAL_UART_Receive+0x8a>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800875e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008762:	e028      	b.n	80087b6 <HAL_UART_Receive+0xdc>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	22ff      	movs	r2, #255	; 0xff
 8008768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800876c:	e023      	b.n	80087b6 <HAL_UART_Receive+0xdc>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <HAL_UART_Receive+0xb8>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <HAL_UART_Receive+0xae>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	22ff      	movs	r2, #255	; 0xff
 8008782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008786:	e016      	b.n	80087b6 <HAL_UART_Receive+0xdc>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	227f      	movs	r2, #127	; 0x7f
 800878c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008790:	e011      	b.n	80087b6 <HAL_UART_Receive+0xdc>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800879a:	d10c      	bne.n	80087b6 <HAL_UART_Receive+0xdc>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d104      	bne.n	80087ae <HAL_UART_Receive+0xd4>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	227f      	movs	r2, #127	; 0x7f
 80087a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ac:	e003      	b.n	80087b6 <HAL_UART_Receive+0xdc>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	223f      	movs	r2, #63	; 0x3f
 80087b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087bc:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80087be:	e039      	b.n	8008834 <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	2200      	movs	r2, #0
 80087da:	2120      	movs	r1, #32
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 f83e 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e034      	b.n	8008856 <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f4:	d112      	bne.n	800881c <HAL_UART_Receive+0x142>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10e      	bne.n	800881c <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	b29a      	uxth	r2, r3
 800880a:	8b7b      	ldrh	r3, [r7, #26]
 800880c:	4013      	ands	r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	3302      	adds	r3, #2
 8008818:	60bb      	str	r3, [r7, #8]
 800881a:	e00b      	b.n	8008834 <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	b2d9      	uxtb	r1, r3
 8008824:	8b7b      	ldrh	r3, [r7, #26]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	1c58      	adds	r0, r3, #1
 800882c:	60b8      	str	r0, [r7, #8]
 800882e:	400a      	ands	r2, r1
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800883a:	b29b      	uxth	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1bf      	bne.n	80087c0 <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	e000      	b.n	8008856 <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 8008854:	2302      	movs	r3, #2
  }
}
 8008856:	4618      	mov	r0, r3
 8008858:	3720      	adds	r7, #32
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886e:	e02c      	b.n	80088ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	d028      	beq.n	80088ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <UART_WaitOnFlagUntilTimeout+0x30>
 800887e:	f7fb fb79 	bl	8003f74 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	429a      	cmp	r2, r3
 800888c:	d81d      	bhi.n	80088ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800889c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e00f      	b.n	80088ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69da      	ldr	r2, [r3, #28]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4013      	ands	r3, r2
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	bf0c      	ite	eq
 80088da:	2301      	moveq	r3, #1
 80088dc:	2300      	movne	r3, #0
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d0c3      	beq.n	8008870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008900:	2310      	movs	r3, #16
 8008902:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8008904:	2300      	movs	r3, #0
 8008906:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8008908:	2300      	movs	r3, #0
 800890a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	431a      	orrs	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4bad      	ldr	r3, [pc, #692]	; (8008be4 <UART_SetConfig+0x2f0>)
 8008930:	4013      	ands	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	68f9      	ldr	r1, [r7, #12]
 8008938:	430b      	orrs	r3, r1
 800893a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699a      	ldr	r2, [r3, #24]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	430a      	orrs	r2, r1
 8008970:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a9c      	ldr	r2, [pc, #624]	; (8008be8 <UART_SetConfig+0x2f4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d11f      	bne.n	80089bc <UART_SetConfig+0xc8>
 800897c:	4b9b      	ldr	r3, [pc, #620]	; (8008bec <UART_SetConfig+0x2f8>)
 800897e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	2b03      	cmp	r3, #3
 8008988:	f200 8129 	bhi.w	8008bde <UART_SetConfig+0x2ea>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0xa0>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089a5 	.word	0x080089a5
 8008998:	080089b1 	.word	0x080089b1
 800899c:	080089ab 	.word	0x080089ab
 80089a0:	080089b7 	.word	0x080089b7
 80089a4:	2301      	movs	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
 80089a8:	e119      	b.n	8008bde <UART_SetConfig+0x2ea>
 80089aa:	2302      	movs	r3, #2
 80089ac:	75fb      	strb	r3, [r7, #23]
 80089ae:	e116      	b.n	8008bde <UART_SetConfig+0x2ea>
 80089b0:	2304      	movs	r3, #4
 80089b2:	75fb      	strb	r3, [r7, #23]
 80089b4:	e113      	b.n	8008bde <UART_SetConfig+0x2ea>
 80089b6:	2308      	movs	r3, #8
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	e110      	b.n	8008bde <UART_SetConfig+0x2ea>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a8b      	ldr	r2, [pc, #556]	; (8008bf0 <UART_SetConfig+0x2fc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d130      	bne.n	8008a28 <UART_SetConfig+0x134>
 80089c6:	4b89      	ldr	r3, [pc, #548]	; (8008bec <UART_SetConfig+0x2f8>)
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089cc:	f003 030c 	and.w	r3, r3, #12
 80089d0:	2b0c      	cmp	r3, #12
 80089d2:	f200 8104 	bhi.w	8008bde <UART_SetConfig+0x2ea>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0xe8>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a11 	.word	0x08008a11
 80089e0:	08008bdf 	.word	0x08008bdf
 80089e4:	08008bdf 	.word	0x08008bdf
 80089e8:	08008bdf 	.word	0x08008bdf
 80089ec:	08008a1d 	.word	0x08008a1d
 80089f0:	08008bdf 	.word	0x08008bdf
 80089f4:	08008bdf 	.word	0x08008bdf
 80089f8:	08008bdf 	.word	0x08008bdf
 80089fc:	08008a17 	.word	0x08008a17
 8008a00:	08008bdf 	.word	0x08008bdf
 8008a04:	08008bdf 	.word	0x08008bdf
 8008a08:	08008bdf 	.word	0x08008bdf
 8008a0c:	08008a23 	.word	0x08008a23
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]
 8008a14:	e0e3      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a16:	2302      	movs	r3, #2
 8008a18:	75fb      	strb	r3, [r7, #23]
 8008a1a:	e0e0      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	75fb      	strb	r3, [r7, #23]
 8008a20:	e0dd      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a22:	2308      	movs	r3, #8
 8008a24:	75fb      	strb	r3, [r7, #23]
 8008a26:	e0da      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a71      	ldr	r2, [pc, #452]	; (8008bf4 <UART_SetConfig+0x300>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d11c      	bne.n	8008a6c <UART_SetConfig+0x178>
 8008a32:	4b6e      	ldr	r3, [pc, #440]	; (8008bec <UART_SetConfig+0x2f8>)
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d00f      	beq.n	8008a60 <UART_SetConfig+0x16c>
 8008a40:	2b10      	cmp	r3, #16
 8008a42:	d802      	bhi.n	8008a4a <UART_SetConfig+0x156>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <UART_SetConfig+0x160>
 8008a48:	e0c9      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d005      	beq.n	8008a5a <UART_SetConfig+0x166>
 8008a4e:	2b30      	cmp	r3, #48	; 0x30
 8008a50:	d009      	beq.n	8008a66 <UART_SetConfig+0x172>
 8008a52:	e0c4      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a54:	2300      	movs	r3, #0
 8008a56:	75fb      	strb	r3, [r7, #23]
 8008a58:	e0c1      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	75fb      	strb	r3, [r7, #23]
 8008a5e:	e0be      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a60:	2304      	movs	r3, #4
 8008a62:	75fb      	strb	r3, [r7, #23]
 8008a64:	e0bb      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a66:	2308      	movs	r3, #8
 8008a68:	75fb      	strb	r3, [r7, #23]
 8008a6a:	e0b8      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a61      	ldr	r2, [pc, #388]	; (8008bf8 <UART_SetConfig+0x304>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d11c      	bne.n	8008ab0 <UART_SetConfig+0x1bc>
 8008a76:	4b5d      	ldr	r3, [pc, #372]	; (8008bec <UART_SetConfig+0x2f8>)
 8008a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a80:	2b40      	cmp	r3, #64	; 0x40
 8008a82:	d00f      	beq.n	8008aa4 <UART_SetConfig+0x1b0>
 8008a84:	2b40      	cmp	r3, #64	; 0x40
 8008a86:	d802      	bhi.n	8008a8e <UART_SetConfig+0x19a>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <UART_SetConfig+0x1a4>
 8008a8c:	e0a7      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a8e:	2b80      	cmp	r3, #128	; 0x80
 8008a90:	d005      	beq.n	8008a9e <UART_SetConfig+0x1aa>
 8008a92:	2bc0      	cmp	r3, #192	; 0xc0
 8008a94:	d009      	beq.n	8008aaa <UART_SetConfig+0x1b6>
 8008a96:	e0a2      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75fb      	strb	r3, [r7, #23]
 8008a9c:	e09f      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e09c      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	75fb      	strb	r3, [r7, #23]
 8008aa8:	e099      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008aaa:	2308      	movs	r3, #8
 8008aac:	75fb      	strb	r3, [r7, #23]
 8008aae:	e096      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a51      	ldr	r2, [pc, #324]	; (8008bfc <UART_SetConfig+0x308>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d120      	bne.n	8008afc <UART_SetConfig+0x208>
 8008aba:	4b4c      	ldr	r3, [pc, #304]	; (8008bec <UART_SetConfig+0x2f8>)
 8008abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac8:	d012      	beq.n	8008af0 <UART_SetConfig+0x1fc>
 8008aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ace:	d802      	bhi.n	8008ad6 <UART_SetConfig+0x1e2>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <UART_SetConfig+0x1f0>
 8008ad4:	e083      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ada:	d006      	beq.n	8008aea <UART_SetConfig+0x1f6>
 8008adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ae0:	d009      	beq.n	8008af6 <UART_SetConfig+0x202>
 8008ae2:	e07c      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
 8008ae8:	e079      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008aea:	2302      	movs	r3, #2
 8008aec:	75fb      	strb	r3, [r7, #23]
 8008aee:	e076      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008af0:	2304      	movs	r3, #4
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	e073      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008af6:	2308      	movs	r3, #8
 8008af8:	75fb      	strb	r3, [r7, #23]
 8008afa:	e070      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a3f      	ldr	r2, [pc, #252]	; (8008c00 <UART_SetConfig+0x30c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d120      	bne.n	8008b48 <UART_SetConfig+0x254>
 8008b06:	4b39      	ldr	r3, [pc, #228]	; (8008bec <UART_SetConfig+0x2f8>)
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b14:	d012      	beq.n	8008b3c <UART_SetConfig+0x248>
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b1a:	d802      	bhi.n	8008b22 <UART_SetConfig+0x22e>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <UART_SetConfig+0x23c>
 8008b20:	e05d      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b26:	d006      	beq.n	8008b36 <UART_SetConfig+0x242>
 8008b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b2c:	d009      	beq.n	8008b42 <UART_SetConfig+0x24e>
 8008b2e:	e056      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b30:	2301      	movs	r3, #1
 8008b32:	75fb      	strb	r3, [r7, #23]
 8008b34:	e053      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b36:	2302      	movs	r3, #2
 8008b38:	75fb      	strb	r3, [r7, #23]
 8008b3a:	e050      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	75fb      	strb	r3, [r7, #23]
 8008b40:	e04d      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b42:	2308      	movs	r3, #8
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e04a      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a2d      	ldr	r2, [pc, #180]	; (8008c04 <UART_SetConfig+0x310>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d120      	bne.n	8008b94 <UART_SetConfig+0x2a0>
 8008b52:	4b26      	ldr	r3, [pc, #152]	; (8008bec <UART_SetConfig+0x2f8>)
 8008b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b60:	d012      	beq.n	8008b88 <UART_SetConfig+0x294>
 8008b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b66:	d802      	bhi.n	8008b6e <UART_SetConfig+0x27a>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <UART_SetConfig+0x288>
 8008b6c:	e037      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b72:	d006      	beq.n	8008b82 <UART_SetConfig+0x28e>
 8008b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b78:	d009      	beq.n	8008b8e <UART_SetConfig+0x29a>
 8008b7a:	e030      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	75fb      	strb	r3, [r7, #23]
 8008b80:	e02d      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b82:	2302      	movs	r3, #2
 8008b84:	75fb      	strb	r3, [r7, #23]
 8008b86:	e02a      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	75fb      	strb	r3, [r7, #23]
 8008b8c:	e027      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b8e:	2308      	movs	r3, #8
 8008b90:	75fb      	strb	r3, [r7, #23]
 8008b92:	e024      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a1b      	ldr	r2, [pc, #108]	; (8008c08 <UART_SetConfig+0x314>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d136      	bne.n	8008c0c <UART_SetConfig+0x318>
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <UART_SetConfig+0x2f8>)
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bac:	d012      	beq.n	8008bd4 <UART_SetConfig+0x2e0>
 8008bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb2:	d802      	bhi.n	8008bba <UART_SetConfig+0x2c6>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <UART_SetConfig+0x2d4>
 8008bb8:	e011      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bbe:	d006      	beq.n	8008bce <UART_SetConfig+0x2da>
 8008bc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bc4:	d009      	beq.n	8008bda <UART_SetConfig+0x2e6>
 8008bc6:	e00a      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	75fb      	strb	r3, [r7, #23]
 8008bcc:	e007      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008bce:	2302      	movs	r3, #2
 8008bd0:	75fb      	strb	r3, [r7, #23]
 8008bd2:	e004      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	75fb      	strb	r3, [r7, #23]
 8008bd8:	e001      	b.n	8008bde <UART_SetConfig+0x2ea>
 8008bda:	2308      	movs	r3, #8
 8008bdc:	75fb      	strb	r3, [r7, #23]
 8008bde:	bf00      	nop
 8008be0:	e015      	b.n	8008c0e <UART_SetConfig+0x31a>
 8008be2:	bf00      	nop
 8008be4:	efff69f3 	.word	0xefff69f3
 8008be8:	40011000 	.word	0x40011000
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	40004400 	.word	0x40004400
 8008bf4:	40004800 	.word	0x40004800
 8008bf8:	40004c00 	.word	0x40004c00
 8008bfc:	40005000 	.word	0x40005000
 8008c00:	40011400 	.word	0x40011400
 8008c04:	40007800 	.word	0x40007800
 8008c08:	40007c00 	.word	0x40007c00
 8008c0c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c16:	d16c      	bne.n	8008cf2 <UART_SetConfig+0x3fe>
  {
    switch (clocksource)
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d854      	bhi.n	8008cc8 <UART_SetConfig+0x3d4>
 8008c1e:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0x330>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008c65 	.word	0x08008c65
 8008c2c:	08008c81 	.word	0x08008c81
 8008c30:	08008cc9 	.word	0x08008cc9
 8008c34:	08008c97 	.word	0x08008c97
 8008c38:	08008cc9 	.word	0x08008cc9
 8008c3c:	08008cc9 	.word	0x08008cc9
 8008c40:	08008cc9 	.word	0x08008cc9
 8008c44:	08008cb3 	.word	0x08008cb3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008c48:	f7fe f9e2 	bl	8007010 <HAL_RCC_GetPCLK1Freq>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	005a      	lsls	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	441a      	add	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c60:	82bb      	strh	r3, [r7, #20]
      break;
 8008c62:	e034      	b.n	8008cce <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008c64:	f7fe f9e8 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	005a      	lsls	r2, r3, #1
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	441a      	add	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	82bb      	strh	r3, [r7, #20]
      break;
 8008c7e:	e026      	b.n	8008cce <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	085a      	lsrs	r2, r3, #1
 8008c86:	4b51      	ldr	r3, [pc, #324]	; (8008dcc <UART_SetConfig+0x4d8>)
 8008c88:	4413      	add	r3, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6852      	ldr	r2, [r2, #4]
 8008c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c92:	82bb      	strh	r3, [r7, #20]
      break;
 8008c94:	e01b      	b.n	8008cce <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008c96:	f7fe f8fd 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	005a      	lsls	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	441a      	add	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	82bb      	strh	r3, [r7, #20]
      break;
 8008cb0:	e00d      	b.n	8008cce <UART_SetConfig+0x3da>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc4:	82bb      	strh	r3, [r7, #20]
      break;
 8008cc6:	e002      	b.n	8008cce <UART_SetConfig+0x3da>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	74fb      	strb	r3, [r7, #19]
      break;
 8008ccc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008cce:	8abb      	ldrh	r3, [r7, #20]
 8008cd0:	f023 030f 	bic.w	r3, r3, #15
 8008cd4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cd6:	8abb      	ldrh	r3, [r7, #20]
 8008cd8:	105b      	asrs	r3, r3, #1
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	897b      	ldrh	r3, [r7, #10]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	897a      	ldrh	r2, [r7, #10]
 8008cee:	60da      	str	r2, [r3, #12]
 8008cf0:	e067      	b.n	8008dc2 <UART_SetConfig+0x4ce>
  }
  else
  {
    switch (clocksource)
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d861      	bhi.n	8008dbc <UART_SetConfig+0x4c8>
 8008cf8:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <UART_SetConfig+0x40c>)
 8008cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfe:	bf00      	nop
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d45 	.word	0x08008d45
 8008d08:	08008d65 	.word	0x08008d65
 8008d0c:	08008dbd 	.word	0x08008dbd
 8008d10:	08008d81 	.word	0x08008d81
 8008d14:	08008dbd 	.word	0x08008dbd
 8008d18:	08008dbd 	.word	0x08008dbd
 8008d1c:	08008dbd 	.word	0x08008dbd
 8008d20:	08008da1 	.word	0x08008da1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008d24:	f7fe f974 	bl	8007010 <HAL_RCC_GetPCLK1Freq>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60da      	str	r2, [r3, #12]
      break;
 8008d42:	e03e      	b.n	8008dc2 <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008d44:	f7fe f978 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	085b      	lsrs	r3, r3, #1
 8008d50:	441a      	add	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60da      	str	r2, [r3, #12]
      break;
 8008d62:	e02e      	b.n	8008dc2 <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	085a      	lsrs	r2, r3, #1
 8008d6a:	4b19      	ldr	r3, [pc, #100]	; (8008dd0 <UART_SetConfig+0x4dc>)
 8008d6c:	4413      	add	r3, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6852      	ldr	r2, [r2, #4]
 8008d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60da      	str	r2, [r3, #12]
      break;
 8008d7e:	e020      	b.n	8008dc2 <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008d80:	f7fe f888 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8008d84:	4602      	mov	r2, r0
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	441a      	add	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60da      	str	r2, [r3, #12]
      break;
 8008d9e:	e010      	b.n	8008dc2 <UART_SetConfig+0x4ce>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60da      	str	r2, [r3, #12]
      break;
 8008dba:	e002      	b.n	8008dc2 <UART_SetConfig+0x4ce>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	74fb      	strb	r3, [r7, #19]
      break;
 8008dc0:	bf00      	nop
    }
  }

  return ret;
 8008dc2:	7cfb      	ldrb	r3, [r7, #19]

}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	01e84800 	.word	0x01e84800
 8008dd0:	00f42400 	.word	0x00f42400

08008dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed2:	d10a      	bne.n	8008eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f2a:	f7fb f823 	bl	8003f74 <HAL_GetTick>
 8008f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	d10e      	bne.n	8008f5c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fc86 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e00c      	b.n	8008f76 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d027      	beq.n	8008fea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	4b2f      	ldr	r3, [pc, #188]	; (8009060 <FMC_SDRAM_Init+0xe0>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fb0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008fb6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008fbc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008fc2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008fc8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008fce:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008fd4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008fda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	e032      	b.n	8009050 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009000:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009006:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <FMC_SDRAM_Init+0xe0>)
 8009018:	4013      	ands	r3, r2
 800901a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009024:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800902a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009030:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009036:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800903c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	4313      	orrs	r3, r2
 8009042:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	ffff8000 	.word	0xffff8000

08009064 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009074:	2300      	movs	r3, #0
 8009076:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d02e      	beq.n	80090dc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800908a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	3b01      	subs	r3, #1
 8009098:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800909a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80090a4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80090ae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80090b8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	3b01      	subs	r3, #1
 80090c0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80090c2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090cc:	4313      	orrs	r3, r2
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	609a      	str	r2, [r3, #8]
 80090da:	e039      	b.n	8009150 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <FMC_SDRAM_Timing_Init+0xfc>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090fa:	4313      	orrs	r3, r2
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800910e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	3b01      	subs	r3, #1
 800911c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800911e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	3b01      	subs	r3, #1
 8009126:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009128:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	3b01      	subs	r3, #1
 8009130:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009132:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	3b01      	subs	r3, #1
 800913a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800913c:	4313      	orrs	r3, r2
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	ff0f0fff 	.word	0xff0f0fff

08009164 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800917c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	3b01      	subs	r3, #1
 8009184:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009186:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800918e:	4313      	orrs	r3, r2
 8009190:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	431a      	orrs	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <ResetTimer>:
#include "CycleCounter.h"
//#include "core_cm7.h"
void ResetTimer(){
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
	DWT_CYCCNT   = (volatile unsigned int *)0xE0001004; //address of the register
 80091d0:	4b12      	ldr	r3, [pc, #72]	; (800921c <ResetTimer+0x50>)
 80091d2:	4a13      	ldr	r2, [pc, #76]	; (8009220 <ResetTimer+0x54>)
 80091d4:	601a      	str	r2, [r3, #0]
	DWT_CONTROL  = (volatile unsigned int *)0xE0001000; //address of the register
 80091d6:	4b13      	ldr	r3, [pc, #76]	; (8009224 <ResetTimer+0x58>)
 80091d8:	4a13      	ldr	r2, [pc, #76]	; (8009228 <ResetTimer+0x5c>)
 80091da:	601a      	str	r2, [r3, #0]
	SCB_DEMCR    = (volatile unsigned int *)0xE000EDFC; //address of the register
 80091dc:	4b13      	ldr	r3, [pc, #76]	; (800922c <ResetTimer+0x60>)
 80091de:	4a14      	ldr	r2, [pc, #80]	; (8009230 <ResetTimer+0x64>)
 80091e0:	601a      	str	r2, [r3, #0]
	DWT_LAR      = (volatile unsigned int *)0xE0001FB0;
 80091e2:	4b14      	ldr	r3, [pc, #80]	; (8009234 <ResetTimer+0x68>)
 80091e4:	4a14      	ldr	r2, [pc, #80]	; (8009238 <ResetTimer+0x6c>)
 80091e6:	601a      	str	r2, [r3, #0]

	*DWT_LAR = 0xC5ACCE55; // unlock (CM7)
 80091e8:	4b12      	ldr	r3, [pc, #72]	; (8009234 <ResetTimer+0x68>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a13      	ldr	r2, [pc, #76]	; (800923c <ResetTimer+0x70>)
 80091ee:	601a      	str	r2, [r3, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 80091f0:	4b0e      	ldr	r3, [pc, #56]	; (800922c <ResetTimer+0x60>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b0d      	ldr	r3, [pc, #52]	; (800922c <ResetTimer+0x60>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80091fe:	601a      	str	r2, [r3, #0]
	*DWT_CYCCNT  = 0; // reset the counter
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <ResetTimer+0x50>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL = 0; 
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <ResetTimer+0x58>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
}
 8009210:	bf00      	nop
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	2000ac00 	.word	0x2000ac00
 8009220:	e0001004 	.word	0xe0001004
 8009224:	2000ac04 	.word	0x2000ac04
 8009228:	e0001000 	.word	0xe0001000
 800922c:	2000ac08 	.word	0x2000ac08
 8009230:	e000edfc 	.word	0xe000edfc
 8009234:	2000ac0c 	.word	0x2000ac0c
 8009238:	e0001fb0 	.word	0xe0001fb0
 800923c:	c5acce55 	.word	0xc5acce55

08009240 <_ZN11JPEGDecoderC1Ev>:
#include "picojpeg.h"
#include <string.h>

JPEGDecoder JpegDec;

JPEGDecoder::JPEGDecoder() {
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  mcu_x = 0;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	635a      	str	r2, [r3, #52]	; 0x34
  mcu_y = 0;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
  is_available = 0;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	631a      	str	r2, [r3, #48]	; 0x30
  thisPtr = this;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <_ZN11JPEGDecoderD1Ev>:

JPEGDecoder::~JPEGDecoder() {
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  if (pImage)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <_ZN11JPEGDecoderD1Ev+0x22>
    delete[] pImage;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <_ZN11JPEGDecoderD1Ev+0x22>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009292:	4618      	mov	r0, r3
 8009294:	f00c faec 	bl	8015870 <_ZdaPv>
  pImage = NULL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_Z41__static_initialization_and_destruction_0ii>:
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d107      	bne.n	80092c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092be:	4293      	cmp	r3, r2
 80092c0:	d102      	bne.n	80092c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
JPEGDecoder JpegDec;
 80092c2:	4809      	ldr	r0, [pc, #36]	; (80092e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092c4:	f7ff ffbc 	bl	8009240 <_ZN11JPEGDecoderC1Ev>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d107      	bne.n	80092de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d102      	bne.n	80092de <_Z41__static_initialization_and_destruction_0ii+0x36>
 80092d8:	4803      	ldr	r0, [pc, #12]	; (80092e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80092da:	f7ff ffcc 	bl	8009276 <_ZN11JPEGDecoderD1Ev>
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	2000ac10 	.word	0x2000ac10

080092ec <_GLOBAL__sub_I_JpegDec>:
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092f4:	2001      	movs	r0, #1
 80092f6:	f7ff ffd7 	bl	80092a8 <_Z41__static_initialization_and_destruction_0ii>
 80092fa:	bd80      	pop	{r7, pc}

080092fc <_GLOBAL__sub_D_JpegDec>:
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
 8009300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009304:	2000      	movs	r0, #0
 8009306:	f7ff ffcf 	bl	80092a8 <_Z41__static_initialization_and_destruction_0ii>
 800930a:	bd80      	pop	{r7, pc}

0800930c <LogEnergy>:
		ITM_SendChar((*ptr++));
	}
	return len;
}

float LogEnergy(uint16_t vectorSize, float *PSDSpectrum) {
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	80fb      	strh	r3, [r7, #6]
	float sum = 0.0f;
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < vectorSize; i++) {
 800931e:	2300      	movs	r3, #0
 8009320:	60bb      	str	r3, [r7, #8]
 8009322:	e00e      	b.n	8009342 <LogEnergy+0x36>
		sum += PSDSpectrum[i];
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	4413      	add	r3, r2
 800932c:	edd3 7a00 	vldr	s15, [r3]
 8009330:	ed97 7a03 	vldr	s14, [r7, #12]
 8009334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009338:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < vectorSize; i++) {
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3301      	adds	r3, #1
 8009340:	60bb      	str	r3, [r7, #8]
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	429a      	cmp	r2, r3
 8009348:	dbec      	blt.n	8009324 <LogEnergy+0x18>
	}
	if (sum > 0.0f) {
 800934a:	edd7 7a03 	vldr	s15, [r7, #12]
 800934e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009356:	dd0f      	ble.n	8009378 <LogEnergy+0x6c>
		return (logf(sum / vectorSize));
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009362:	ed97 7a03 	vldr	s14, [r7, #12]
 8009366:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800936a:	eeb0 0a66 	vmov.f32	s0, s13
 800936e:	f00c fc31 	bl	8015bd4 <logf>
 8009372:	eef0 7a40 	vmov.f32	s15, s0
 8009376:	e001      	b.n	800937c <LogEnergy+0x70>
	} else {
		return (-FLT_MAX);
 8009378:	eddf 7a03 	vldr	s15, [pc, #12]	; 8009388 <LogEnergy+0x7c>
	}
}
 800937c:	eeb0 0a67 	vmov.f32	s0, s15
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	ff7fffff 	.word	0xff7fffff

0800938c <CreateDCTMatrix>:

float* CreateDCTMatrix(uint16_t MFCCFeatureNum, int16_t filterBankBinsNum) {
 800938c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	460a      	mov	r2, r1
 8009396:	80fb      	strh	r3, [r7, #6]
 8009398:	4613      	mov	r3, r2
 800939a:	80bb      	strh	r3, [r7, #4]
	float *Matrix = (float*) calloc(filterBankBinsNum * MFCCFeatureNum,
 800939c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80093a0:	88fa      	ldrh	r2, [r7, #6]
 80093a2:	fb02 f303 	mul.w	r3, r2, r3
 80093a6:	2104      	movs	r1, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f00e f97b 	bl	80176a4 <calloc>
 80093ae:	4603      	mov	r3, r0
 80093b0:	60fb      	str	r3, [r7, #12]
			sizeof(float));
	for (int k = 0; k < MFCCFeatureNum; k++) {
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e0bc      	b.n	8009532 <CreateDCTMatrix+0x1a6>
		for (int n = 0; n < filterBankBinsNum; n++) {
 80093b8:	2300      	movs	r3, #0
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	e0b0      	b.n	8009520 <CreateDCTMatrix+0x194>
			Matrix[k * filterBankBinsNum + n] = arm_cos_f32(
					(float) ((PI) / (filterBankBinsNum) * (n + 0.5f) * (k)));
 80093be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009548 <CreateDCTMatrix+0x1bc>
 80093ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80093e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e4:	ee27 7a27 	vmul.f32	s14, s14, s15
			Matrix[k * filterBankBinsNum + n] = arm_cos_f32(
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	fb02 f203 	mul.w	r2, r2, r3
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	18d4      	adds	r4, r2, r3
 800940a:	eeb0 0a67 	vmov.f32	s0, s15
 800940e:	f002 fe03 	bl	800c018 <arm_cos_f32>
 8009412:	eef0 7a40 	vmov.f32	s15, s0
 8009416:	edc4 7a00 	vstr	s15, [r4]
			if (k == 0) {
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d13e      	bne.n	800949e <CreateDCTMatrix+0x112>
				Matrix[k * filterBankBinsNum + n] *= sqrt(
						1 / (float) filterBankBinsNum);
 8009420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009424:	ee07 3a90 	vmov	s15, r3
 8009428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800942c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009430:	eec7 6a27 	vdiv.f32	s13, s14, s15
				Matrix[k * filterBankBinsNum + n] *= sqrt(
 8009434:	ee16 0a90 	vmov	r0, s13
 8009438:	f7f7 f906 	bl	8000648 <__aeabi_f2d>
 800943c:	4603      	mov	r3, r0
 800943e:	460c      	mov	r4, r1
 8009440:	ec44 3b10 	vmov	d0, r3, r4
 8009444:	f00c fb6c 	bl	8015b20 <sqrt>
 8009448:	ec56 5b10 	vmov	r5, r6, d0
 800944c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	fb02 f203 	mul.w	r2, r2, r3
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f7f7 f8f0 	bl	8000648 <__aeabi_f2d>
 8009468:	4603      	mov	r3, r0
 800946a:	460c      	mov	r4, r1
 800946c:	461a      	mov	r2, r3
 800946e:	4623      	mov	r3, r4
 8009470:	4628      	mov	r0, r5
 8009472:	4631      	mov	r1, r6
 8009474:	f7f7 f940 	bl	80006f8 <__aeabi_dmul>
 8009478:	4603      	mov	r3, r0
 800947a:	460c      	mov	r4, r1
 800947c:	4618      	mov	r0, r3
 800947e:	4621      	mov	r1, r4
 8009480:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	fb02 f203 	mul.w	r2, r2, r3
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	18d4      	adds	r4, r2, r3
 8009494:	f7f7 fc08 	bl	8000ca8 <__aeabi_d2f>
 8009498:	4603      	mov	r3, r0
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	e03d      	b.n	800951a <CreateDCTMatrix+0x18e>
			} else {
				Matrix[k * filterBankBinsNum + n] *= sqrt(
						2 / (float) filterBankBinsNum);
 800949e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
				Matrix[k * filterBankBinsNum + n] *= sqrt(
 80094b2:	ee16 0a90 	vmov	r0, s13
 80094b6:	f7f7 f8c7 	bl	8000648 <__aeabi_f2d>
 80094ba:	4603      	mov	r3, r0
 80094bc:	460c      	mov	r4, r1
 80094be:	ec44 3b10 	vmov	d0, r3, r4
 80094c2:	f00c fb2d 	bl	8015b20 <sqrt>
 80094c6:	ec56 5b10 	vmov	r5, r6, d0
 80094ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	fb02 f203 	mul.w	r2, r2, r3
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f7 f8b1 	bl	8000648 <__aeabi_f2d>
 80094e6:	4603      	mov	r3, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	461a      	mov	r2, r3
 80094ec:	4623      	mov	r3, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	4631      	mov	r1, r6
 80094f2:	f7f7 f901 	bl	80006f8 <__aeabi_dmul>
 80094f6:	4603      	mov	r3, r0
 80094f8:	460c      	mov	r4, r1
 80094fa:	4618      	mov	r0, r3
 80094fc:	4621      	mov	r1, r4
 80094fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	fb02 f203 	mul.w	r2, r2, r3
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	18d4      	adds	r4, r2, r3
 8009512:	f7f7 fbc9 	bl	8000ca8 <__aeabi_d2f>
 8009516:	4603      	mov	r3, r0
 8009518:	6023      	str	r3, [r4, #0]
		for (int n = 0; n < filterBankBinsNum; n++) {
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3301      	adds	r3, #1
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	f6ff af49 	blt.w	80093be <CreateDCTMatrix+0x32>
	for (int k = 0; k < MFCCFeatureNum; k++) {
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	3301      	adds	r3, #1
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	88fb      	ldrh	r3, [r7, #6]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	429a      	cmp	r2, r3
 8009538:	f6ff af3e 	blt.w	80093b8 <CreateDCTMatrix+0x2c>
			}
		}
	}
	return Matrix;
 800953c:	68fb      	ldr	r3, [r7, #12]
}
 800953e:	4618      	mov	r0, r3
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009546:	bf00      	nop
 8009548:	40490fdb 	.word	0x40490fdb
 800954c:	00000000 	.word	0x00000000

08009550 <MFCCCompute>:
			vector[i] = vector[i] / sumtotal;
		}
	}
}

void MFCCCompute(const int16_t *inputVector, MFCCData data) {
 8009550:	b084      	sub	sp, #16
 8009552:	b590      	push	{r4, r7, lr}
 8009554:	b099      	sub	sp, #100	; 0x64
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800955e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint16_t start_i = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	static char fp_buf[20];
	static uint8_t power = 1; //1 if power of the FFT is used, 0 if only the magnitude is used

	if (data.fft_length != data.windowSize) { //Pads with zero if the input shape is not the same as the fft_length
 8009568:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800956c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009570:	429a      	cmp	r2, r3
 8009572:	d030      	beq.n	80095d6 <MFCCCompute+0x86>
		uint16_t diff = data.fft_length - data.windowSize;
 8009574:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8009578:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	857b      	strh	r3, [r7, #42]	; 0x2a
		start_i = diff / 2;
 8009580:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		for (uint8_t i = 0; i < diff / 2; i++) {
 8009588:	2300      	movs	r3, #0
 800958a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800958e:	e01a      	b.n	80095c6 <MFCCCompute+0x76>
			data.dataWindow[i] = 0;
 8009590:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009594:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
			data.dataWindow[data.fft_length - 1 - i] = 0;
 80095a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80095a6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80095aa:	1e59      	subs	r1, r3, #1
 80095ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80095b0:	1acb      	subs	r3, r1, r3
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	f04f 0200 	mov.w	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < diff / 2; i++) {
 80095bc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80095c0:	3301      	adds	r3, #1
 80095c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80095c6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80095ce:	085b      	lsrs	r3, r3, #1
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d3dc      	bcc.n	8009590 <MFCCCompute+0x40>
		}
	}

	for (int i = 0; i < data.windowSize; i++) {
 80095d6:	2300      	movs	r3, #0
 80095d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80095da:	e01f      	b.n	800961c <MFCCCompute+0xcc>
		data.dataWindow[i + start_i] = ((((float) inputVector[i]
 80095dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095e8:	ee07 3a90 	vmov	s15, r3
 80095ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				* data.windowFunction[i])));
 80095f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80095f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	edd3 7a00 	vldr	s15, [r3]
		data.dataWindow[i + start_i] = ((((float) inputVector[i]
 80095fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009602:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8009606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009608:	440b      	add	r3, r1
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
				* data.windowFunction[i])));
 800960e:	ee67 7a27 	vmul.f32	s15, s14, s15
		data.dataWindow[i + start_i] = ((((float) inputVector[i]
 8009612:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data.windowSize; i++) {
 8009616:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009618:	3301      	adds	r3, #1
 800961a:	65bb      	str	r3, [r7, #88]	; 0x58
 800961c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009620:	461a      	mov	r2, r3
 8009622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009624:	4293      	cmp	r3, r2
 8009626:	dbd9      	blt.n	80095dc <MFCCCompute+0x8c>
	}

	arm_rfft_fast_f32(data.RFFTInstance, data.dataWindow, data.PSDSpectrum, 0);
 8009628:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800962c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009630:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009634:	2300      	movs	r3, #0
 8009636:	f002 ff23 	bl	800c480 <arm_rfft_fast_f32>

	data.PSDSpectrum[0] = (data.PSDSpectrum[0] * data.PSDSpectrum[0]);
 800963a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800963e:	ed93 7a00 	vldr	s14, [r3]
 8009642:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009646:	edd3 7a00 	vldr	s15, [r3]
 800964a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800964e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009652:	edc3 7a00 	vstr	s15, [r3]

	float temp = data.PSDSpectrum[1];
 8009656:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24

	for (int i = 1; i < data.fft_length / 2; i++) {
 800965e:	2301      	movs	r3, #1
 8009660:	657b      	str	r3, [r7, #84]	; 0x54
 8009662:	e02d      	b.n	80096c0 <MFCCCompute+0x170>
		data.PSDSpectrum[i] = (data.PSDSpectrum[2 * i] * data.PSDSpectrum[2 * i]
 8009664:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009668:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800966a:	00d2      	lsls	r2, r2, #3
 800966c:	4413      	add	r3, r2
 800966e:	ed93 7a00 	vldr	s14, [r3]
 8009672:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009676:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009678:	00d2      	lsls	r2, r2, #3
 800967a:	4413      	add	r3, r2
 800967c:	edd3 7a00 	vldr	s15, [r3]
 8009680:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ data.PSDSpectrum[2 * i + 1] * data.PSDSpectrum[2 * i + 1]);
 8009684:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	3304      	adds	r3, #4
 800968e:	4413      	add	r3, r2
 8009690:	edd3 6a00 	vldr	s13, [r3]
 8009694:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	3304      	adds	r3, #4
 800969e:	4413      	add	r3, r2
 80096a0:	edd3 7a00 	vldr	s15, [r3]
 80096a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		data.PSDSpectrum[i] = (data.PSDSpectrum[2 * i] * data.PSDSpectrum[2 * i]
 80096a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
				+ data.PSDSpectrum[2 * i + 1] * data.PSDSpectrum[2 * i + 1]);
 80096b2:	ee77 7a27 	vadd.f32	s15, s14, s15
		data.PSDSpectrum[i] = (data.PSDSpectrum[2 * i] * data.PSDSpectrum[2 * i]
 80096b6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i < data.fft_length / 2; i++) {
 80096ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096bc:	3301      	adds	r3, #1
 80096be:	657b      	str	r3, [r7, #84]	; 0x54
 80096c0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80096c4:	085b      	lsrs	r3, r3, #1
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096cc:	4293      	cmp	r3, r2
 80096ce:	dbc9      	blt.n	8009664 <MFCCCompute+0x114>
	}

	for (int i = 1; i < data.fft_length / 2; i++) {
 80096d0:	2301      	movs	r3, #1
 80096d2:	653b      	str	r3, [r7, #80]	; 0x50
 80096d4:	e012      	b.n	80096fc <MFCCCompute+0x1ac>
		data.PSDSpectrum[data.fft_length - i] = data.PSDSpectrum[i];
 80096d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	441a      	add	r2, r3
 80096e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80096e4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80096e8:	4618      	mov	r0, r3
 80096ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ec:	1ac3      	subs	r3, r0, r3
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	440b      	add	r3, r1
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < data.fft_length / 2; i++) {
 80096f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096f8:	3301      	adds	r3, #1
 80096fa:	653b      	str	r3, [r7, #80]	; 0x50
 80096fc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009700:	085b      	lsrs	r3, r3, #1
 8009702:	b29b      	uxth	r3, r3
 8009704:	461a      	mov	r2, r3
 8009706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009708:	4293      	cmp	r3, r2
 800970a:	dbe4      	blt.n	80096d6 <MFCCCompute+0x186>
	}

	data.PSDSpectrum[data.fft_length / 2] = (temp * temp);
 800970c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009710:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009714:	085b      	lsrs	r3, r3, #1
 8009716:	b29b      	uxth	r3, r3
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009720:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009728:	edc3 7a00 	vstr	s15, [r3]

	// Keep everything squared for log energy.


	*data.logEnergy = (LogEnergy(data.fft_length, data.PSDSpectrum) + 1); // Account for numeric differences with +1 term
 800972c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009730:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff fde8 	bl	800930c <LogEnergy>
 800973c:	eeb0 7a40 	vmov.f32	s14, s0
 8009740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009742:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800974a:	edc3 7a00 	vstr	s15, [r3]


	if (power == 0) {
 800974e:	4bb6      	ldr	r3, [pc, #728]	; (8009a28 <MFCCCompute+0x4d8>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 8084 	bne.w	8009860 <MFCCCompute+0x310>
		// Calculate as few square roots as necessary -> windowSize/2 + 1
		arm_sqrt_f32(data.PSDSpectrum[0], &data.PSDSpectrum[0]);
 8009758:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009762:	617a      	str	r2, [r7, #20]
 8009764:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8009766:	edd7 7a05 	vldr	s15, [r7, #20]
 800976a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	db09      	blt.n	8009788 <MFCCCompute+0x238>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8009774:	ed97 0a05 	vldr	s0, [r7, #20]
 8009778:	f00c faa2 	bl	8015cc0 <sqrtf>
 800977c:	eef0 7a40 	vmov.f32	s15, s0
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	edc3 7a00 	vstr	s15, [r3]
 8009786:	e003      	b.n	8009790 <MFCCCompute+0x240>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f04f 0200 	mov.w	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
		arm_sqrt_f32(data.PSDSpectrum[data.fft_length / 2],
 8009790:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009794:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009798:	085b      	lsrs	r3, r3, #1
 800979a:	b29b      	uxth	r3, r3
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	681a      	ldr	r2, [r3, #0]
				&data.PSDSpectrum[data.fft_length / 2]);
 80097a2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80097a6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80097aa:	085b      	lsrs	r3, r3, #1
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	61fa      	str	r2, [r7, #28]
 80097b4:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 80097b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80097ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	db09      	blt.n	80097d8 <MFCCCompute+0x288>
      *pOut = sqrtf(in);
 80097c4:	ed97 0a07 	vldr	s0, [r7, #28]
 80097c8:	f00c fa7a 	bl	8015cc0 <sqrtf>
 80097cc:	eef0 7a40 	vmov.f32	s15, s0
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	edc3 7a00 	vstr	s15, [r3]
 80097d6:	e003      	b.n	80097e0 <MFCCCompute+0x290>
      *pOut = 0.0f;
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	601a      	str	r2, [r3, #0]

		for (int i = 1; i < data.fft_length / 2; i++) {
 80097e0:	2301      	movs	r3, #1
 80097e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097e4:	e034      	b.n	8009850 <MFCCCompute+0x300>
			arm_sqrt_f32(data.PSDSpectrum[i], &data.PSDSpectrum[i]);
 80097e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80097f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	60fa      	str	r2, [r7, #12]
 80097fe:	60bb      	str	r3, [r7, #8]
    if (in >= 0.0f)
 8009800:	edd7 7a03 	vldr	s15, [r7, #12]
 8009804:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980c:	db09      	blt.n	8009822 <MFCCCompute+0x2d2>
      *pOut = sqrtf(in);
 800980e:	ed97 0a03 	vldr	s0, [r7, #12]
 8009812:	f00c fa55 	bl	8015cc0 <sqrtf>
 8009816:	eef0 7a40 	vmov.f32	s15, s0
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	edc3 7a00 	vstr	s15, [r3]
 8009820:	e003      	b.n	800982a <MFCCCompute+0x2da>
      *pOut = 0.0f;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
			data.PSDSpectrum[data.fft_length - i] = data.PSDSpectrum[i];
 800982a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800982e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	441a      	add	r2, r3
 8009834:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8009838:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800983c:	4618      	mov	r0, r3
 800983e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009840:	1ac3      	subs	r3, r0, r3
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	601a      	str	r2, [r3, #0]
		for (int i = 1; i < data.fft_length / 2; i++) {
 800984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984c:	3301      	adds	r3, #1
 800984e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009850:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	b29b      	uxth	r3, r3
 8009858:	461a      	mov	r2, r3
 800985a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985c:	4293      	cmp	r3, r2
 800985e:	dbc2      	blt.n	80097e6 <MFCCCompute+0x296>
//		printLog(fp_buf);
//	}

	float melEnergy;
	int j;
	for (int bin = 0; bin < data.filterBankBinsNum; bin++) {
 8009860:	2300      	movs	r3, #0
 8009862:	643b      	str	r3, [r7, #64]	; 0x40
 8009864:	e044      	b.n	80098f0 <MFCCCompute+0x3a0>
		j = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	647b      	str	r3, [r7, #68]	; 0x44
		melEnergy = 0.0f;
 800986a:	f04f 0300 	mov.w	r3, #0
 800986e:	64bb      	str	r3, [r7, #72]	; 0x48
		int16_t firstIndex = data.filterBankFirst[bin];
 8009870:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	4413      	add	r3, r2
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	847b      	strh	r3, [r7, #34]	; 0x22
		int16_t lastIndex = data.filterBankLast[bin];
 800987e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	4413      	add	r3, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	843b      	strh	r3, [r7, #32]
		for (int i = firstIndex; i <= lastIndex; i++) {
 800988c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009892:	e01e      	b.n	80098d2 <MFCCCompute+0x382>
			melEnergy += data.PSDSpectrum[i] * data.melFilterBank[bin][j++];
 8009894:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	ed93 7a00 	vldr	s14, [r3]
 80098a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80098a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b0:	1c59      	adds	r1, r3, #1
 80098b2:	6479      	str	r1, [r7, #68]	; 0x44
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	edd3 7a00 	vldr	s15, [r3]
 80098bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80098c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		for (int i = firstIndex; i <= lastIndex; i++) {
 80098cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ce:	3301      	adds	r3, #1
 80098d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80098d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098d8:	429a      	cmp	r2, r3
 80098da:	dddb      	ble.n	8009894 <MFCCCompute+0x344>
		}
		data.melEnergies[bin] = melEnergy;
 80098dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80098e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098e8:	601a      	str	r2, [r3, #0]
	for (int bin = 0; bin < data.filterBankBinsNum; bin++) {
 80098ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ec:	3301      	adds	r3, #1
 80098ee:	643b      	str	r3, [r7, #64]	; 0x40
 80098f0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80098f4:	461a      	mov	r2, r3
 80098f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f8:	4293      	cmp	r3, r2
 80098fa:	dbb4      	blt.n	8009866 <MFCCCompute+0x316>
	}

	for (int bin = 0; bin < data.filterBankBinsNum; bin++) {
 80098fc:	2300      	movs	r3, #0
 80098fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009900:	e024      	b.n	800994c <MFCCCompute+0x3fc>
		data.melEnergies[bin] = logf(data.melEnergies[bin] + 1e-6);
 8009902:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4618      	mov	r0, r3
 8009910:	f7f6 fe9a 	bl	8000648 <__aeabi_f2d>
 8009914:	a342      	add	r3, pc, #264	; (adr r3, 8009a20 <MFCCCompute+0x4d0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fd37 	bl	800038c <__adddf3>
 800991e:	4603      	mov	r3, r0
 8009920:	460c      	mov	r4, r1
 8009922:	4618      	mov	r0, r3
 8009924:	4621      	mov	r1, r4
 8009926:	f7f7 f9bf 	bl	8000ca8 <__aeabi_d2f>
 800992a:	4601      	mov	r1, r0
 800992c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	18d4      	adds	r4, r2, r3
 8009936:	ee00 1a10 	vmov	s0, r1
 800993a:	f00c f94b 	bl	8015bd4 <logf>
 800993e:	eef0 7a40 	vmov.f32	s15, s0
 8009942:	edc4 7a00 	vstr	s15, [r4]
	for (int bin = 0; bin < data.filterBankBinsNum; bin++) {
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	3301      	adds	r3, #1
 800994a:	63bb      	str	r3, [r7, #56]	; 0x38
 800994c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009950:	461a      	mov	r2, r3
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	4293      	cmp	r3, r2
 8009956:	dbd4      	blt.n	8009902 <MFCCCompute+0x3b2>
//	for (int i = 0; i < (40); i++){
//		sprintf(fp_buf, "%d, ", (int)(data.melEnergies[i]) );
//		printLog(fp_buf);
//	}

	for (int i = 0; i < data.MFCCFeatureNum; i++) {
 8009958:	2300      	movs	r3, #0
 800995a:	637b      	str	r3, [r7, #52]	; 0x34
 800995c:	e053      	b.n	8009a06 <MFCCCompute+0x4b6>
		float sum = 0.0f;
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	633b      	str	r3, [r7, #48]	; 0x30
		for (int j = 0; j < data.filterBankBinsNum; j++) {
 8009964:	2300      	movs	r3, #0
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009968:	e01f      	b.n	80099aa <MFCCCompute+0x45a>
			sum += data.DCTMatrix[i * data.filterBankBinsNum + j]
 800996a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800996e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009972:	4619      	mov	r1, r3
 8009974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009976:	fb03 f101 	mul.w	r1, r3, r1
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	440b      	add	r3, r1
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	ed93 7a00 	vldr	s14, [r3]
					* data.melEnergies[j];
 8009986:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	edd3 7a00 	vldr	s15, [r3]
 8009994:	ee67 7a27 	vmul.f32	s15, s14, s15
			sum += data.DCTMatrix[i * data.filterBankBinsNum + j]
 8009998:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800999c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		for (int j = 0; j < data.filterBankBinsNum; j++) {
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	3301      	adds	r3, #1
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80099ae:	461a      	mov	r2, r3
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	4293      	cmp	r3, r2
 80099b4:	dbd9      	blt.n	800996a <MFCCCompute+0x41a>
		}
		sum += 128.; //In account for quantization
 80099b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8009a2c <MFCCCompute+0x4dc>
 80099be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if (sum > 255.) {
 80099c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099ca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009a30 <MFCCCompute+0x4e0>
 80099ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d6:	dd02      	ble.n	80099de <MFCCCompute+0x48e>
			sum = 255.;
 80099d8:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <MFCCCompute+0x4e4>)
 80099da:	633b      	str	r3, [r7, #48]	; 0x30
 80099dc:	e009      	b.n	80099f2 <MFCCCompute+0x4a2>
		} else if (sum < 0.) {
 80099de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80099e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ea:	d502      	bpl.n	80099f2 <MFCCCompute+0x4a2>
			sum = 0.;
 80099ec:	f04f 0300 	mov.w	r3, #0
 80099f0:	633b      	str	r3, [r7, #48]	; 0x30
		}
		data.melCoefficients[i] = sum;
 80099f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < data.MFCCFeatureNum; i++) {
 8009a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a02:	3301      	adds	r3, #1
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
 8009a06:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	dba5      	blt.n	800995e <MFCCCompute+0x40e>
//	for (int i = 0; i < (10); i++){
//		sprintf(fp_buf, "%d, ", (int)(data.melCoefficients[i]) );
//		printLog(fp_buf);
//	}

}
 8009a12:	bf00      	nop
 8009a14:	3764      	adds	r7, #100	; 0x64
 8009a16:	46bd      	mov	sp, r7
 8009a18:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	4770      	bx	lr
 8009a20:	a0b5ed8d 	.word	0xa0b5ed8d
 8009a24:	3eb0c6f7 	.word	0x3eb0c6f7
 8009a28:	200000e8 	.word	0x200000e8
 8009a2c:	43000000 	.word	0x43000000
 8009a30:	437f0000 	.word	0x437f0000
 8009a34:	437f0000 	.word	0x437f0000

08009a38 <MFCCInitialize>:
MFCCData MFCCInitialize(uint16_t windowSize, float sampleFrequency,
		float MFCCFeatureNum) {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b0a0      	sub	sp, #128	; 0x80
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	460b      	mov	r3, r1
 8009a42:	ed87 0a01 	vstr	s0, [r7, #4]
 8009a46:	edc7 0a00 	vstr	s1, [r7]
 8009a4a:	817b      	strh	r3, [r7, #10]

	const uint16_t fft_len = 1024;
 8009a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a50:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	const float frequencyResolution = (sampleFrequency / (fft_len));
 8009a54:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8009a58:	ee07 3a90 	vmov	s15, r3
 8009a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a60:	edd7 6a01 	vldr	s13, [r7, #4]
 8009a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a68:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	int16_t filterBankBinsNum = 40;
 8009a6c:	2328      	movs	r3, #40	; 0x28
 8009a6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
//	}
//	for (int i = 0; i < 42; i++) {
//		bandBins[i] = (uint16_t) ceil(bandEdges[i] / frequencyResolution);
//	}

	float *PSDSpectrum = (float*) calloc(fft_len, sizeof(float));
 8009a72:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8009a76:	2104      	movs	r1, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f00d fe13 	bl	80176a4 <calloc>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	673b      	str	r3, [r7, #112]	; 0x70
	float *dataWindow = (float*) calloc(fft_len, sizeof(float));
 8009a82:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8009a86:	2104      	movs	r1, #4
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f00d fe0b 	bl	80176a4 <calloc>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	66fb      	str	r3, [r7, #108]	; 0x6c
	float *melEnergies = (float*) calloc(filterBankBinsNum, sizeof(float));
 8009a92:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8009a96:	2104      	movs	r1, #4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f00d fe03 	bl	80176a4 <calloc>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	66bb      	str	r3, [r7, #104]	; 0x68
//	uint16_t *filterBankFirst = (uint16_t*) calloc(filterBankBinsNum,
//			sizeof(uint16_t));//Defined in the Header file
//	uint16_t *filterBankLast = (uint16_t*) calloc(filterBankBinsNum,
//			sizeof(uint16_t));//Defined in the Header file
	arm_rfft_fast_instance_f32 *RFFTInstance =
 8009aa2:	2118      	movs	r1, #24
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	f00d fdfd 	bl	80176a4 <calloc>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	667b      	str	r3, [r7, #100]	; 0x64
			(arm_rfft_fast_instance_f32*) calloc(1,
					sizeof(arm_rfft_fast_instance_f32));

	float *featureVector = (float*) calloc(MFCCFeatureNum - 1 + 2,
 8009aae:	edd7 7a00 	vldr	s15, [r7]
 8009ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009aba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac6:	2104      	movs	r1, #4
 8009ac8:	ee17 0a90 	vmov	r0, s15
 8009acc:	f00d fdea 	bl	80176a4 <calloc>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	663b      	str	r3, [r7, #96]	; 0x60
			sizeof(float));

	float *windowFunction = HammingWindow(windowSize);
 8009ad4:	897b      	ldrh	r3, [r7, #10]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f864 	bl	8009ba4 <HammingWindow>
 8009adc:	65f8      	str	r0, [r7, #92]	; 0x5c
	arm_rfft_fast_init_f32(RFFTInstance, fft_len);
 8009ade:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009ae6:	f002 fe1d 	bl	800c724 <arm_rfft_fast_init_f32>
	float *DCTMatrix = CreateDCTMatrix(MFCCFeatureNum, filterBankBinsNum);
 8009aea:	edd7 7a00 	vldr	s15, [r7]
 8009aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af2:	ee17 3a90 	vmov	r3, s15
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fc44 	bl	800938c <CreateDCTMatrix>
 8009b04:	65b8      	str	r0, [r7, #88]	; 0x58
//	float **melFilterBank = CreateMelFilterBank(filterBankFirst, filterBankLast,
//			sampleFrequency, fft_len, filterBankBinsNum); //Defined in the Header file

	MFCCData data = { windowSize : windowSize, sampleFrequency :
 8009b06:	f107 0314 	add.w	r3, r7, #20
 8009b0a:	2244      	movs	r2, #68	; 0x44
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f00e f894 	bl	8017c3c <memset>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	edd7 7a00 	vldr	s15, [r7]
 8009b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b20:	ee17 3a90 	vmov	r3, s15
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	833b      	strh	r3, [r7, #24]
 8009b28:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009b2c:	837b      	strh	r3, [r7, #26]
	sampleFrequency, MFCCFeatureNum : MFCCFeatureNum, filterBankBinsNum
			: filterBankBinsNum,

	logEnergy : calloc(1, sizeof(float)),
 8009b2e:	2104      	movs	r1, #4
 8009b30:	2001      	movs	r0, #1
 8009b32:	f00d fdb7 	bl	80176a4 <calloc>
 8009b36:	4603      	mov	r3, r0
	MFCCData data = { windowSize : windowSize, sampleFrequency :
 8009b38:	61fb      	str	r3, [r7, #28]

	PSDSpectrum : PSDSpectrum, dataWindow : dataWindow, melEnergies :
	melEnergies, filterBankFirst : filterBankFirst, filterBankLast
			: filterBankLast, RFFTInstance : RFFTInstance, windowFunction
			: windowFunction, DCTMatrix : DCTMatrix, melFilterBank
			: (float**) melFilterBanks, melCoefficients : (float*) calloc(
 8009b3a:	edd7 7a00 	vldr	s15, [r7]
 8009b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b42:	2104      	movs	r1, #4
 8009b44:	ee17 0a90 	vmov	r0, s15
 8009b48:	f00d fdac 	bl	80176a4 <calloc>
 8009b4c:	4603      	mov	r3, r0
	MFCCData data = { windowSize : windowSize, sampleFrequency :
 8009b4e:	623b      	str	r3, [r7, #32]
 8009b50:	897b      	ldrh	r3, [r7, #10]
 8009b52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b56:	633b      	str	r3, [r7, #48]	; 0x30
 8009b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b64:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <MFCCInitialize+0x160>)
 8009b66:	643b      	str	r3, [r7, #64]	; 0x40
 8009b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b6c:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <MFCCInitialize+0x164>)
 8009b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <MFCCInitialize+0x168>)
 8009b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b76:	653b      	str	r3, [r7, #80]	; 0x50
 8009b78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8009b7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			MFCCFeatureNum, sizeof(float)), fft_length : fft_len, };
	return data;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f107 0314 	add.w	r3, r7, #20
 8009b88:	2244      	movs	r2, #68	; 0x44
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	f00e f832 	bl	8017bf4 <memcpy>
}
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	3780      	adds	r7, #128	; 0x80
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000048 	.word	0x20000048
 8009b9c:	0801b6c4 	.word	0x0801b6c4
 8009ba0:	0801b714 	.word	0x0801b714

08009ba4 <HammingWindow>:

float* HammingWindow(int windowSize) {
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	float *ret = (float*) calloc(windowSize, sizeof(float));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2104      	movs	r1, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f00d fd77 	bl	80176a4 <calloc>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < windowSize; i++) {
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	e03b      	b.n	8009c38 <HammingWindow+0x94>
		//ret[i] = 0.54f - 0.46f * cos(2 * PI * i / (windowSize - 1)); //Hamming window
		ret[i] = 0.5f * (1 - cos(2 * PI * i / (windowSize - 1))); //Hanning Window
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009c4c <HammingWindow+0xa8>
 8009bce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009be2:	ee16 0a90 	vmov	r0, s13
 8009be6:	f7f6 fd2f 	bl	8000648 <__aeabi_f2d>
 8009bea:	4603      	mov	r3, r0
 8009bec:	460c      	mov	r4, r1
 8009bee:	ec44 3b10 	vmov	d0, r3, r4
 8009bf2:	f00b fe55 	bl	80158a0 <cos>
 8009bf6:	ec54 3b10 	vmov	r3, r4, d0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	f04f 0000 	mov.w	r0, #0
 8009c02:	4913      	ldr	r1, [pc, #76]	; (8009c50 <HammingWindow+0xac>)
 8009c04:	f7f6 fbc0 	bl	8000388 <__aeabi_dsub>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f04f 0200 	mov.w	r2, #0
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <HammingWindow+0xb0>)
 8009c16:	f7f6 fd6f 	bl	80006f8 <__aeabi_dmul>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4618      	mov	r0, r3
 8009c20:	4621      	mov	r1, r4
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	18d4      	adds	r4, r2, r3
 8009c2a:	f7f7 f83d 	bl	8000ca8 <__aeabi_d2f>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < windowSize; i++) {
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3301      	adds	r3, #1
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	dbbf      	blt.n	8009bc0 <HammingWindow+0x1c>
	}
	return ret;
 8009c40:	68bb      	ldr	r3, [r7, #8]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd90      	pop	{r4, r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	40c90fdb 	.word	0x40c90fdb
 8009c50:	3ff00000 	.word	0x3ff00000
 8009c54:	3fe00000 	.word	0x3fe00000

08009c58 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b0a0      	sub	sp, #128	; 0x80
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8009c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	4413      	add	r3, r2
 8009c70:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8009c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c7e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8009c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c82:	085b      	lsrs	r3, r3, #1
 8009c84:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8009c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8009c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c96:	4413      	add	r3, r2
 8009c98:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8009c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c9c:	089b      	lsrs	r3, r3, #2
 8009c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ca0:	e1b6      	b.n	800a010 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8009cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8009cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8009ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8009cd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8009cd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8009cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8009ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8009cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8009cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8009cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8009cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8009d02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009d06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	1d1a      	adds	r2, r3, #4
 8009d0e:	603a      	str	r2, [r7, #0]
 8009d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d14:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8009d18:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009d1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	603a      	str	r2, [r7, #0]
 8009d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d2a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8009d2e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	1d1a      	adds	r2, r3, #4
 8009d3a:	603a      	str	r2, [r7, #0]
 8009d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d40:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8009d44:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009d48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	1d1a      	adds	r2, r3, #4
 8009d50:	603a      	str	r2, [r7, #0]
 8009d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d56:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8009d5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009d5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8009d6a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009d6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8009d7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d86:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8009d8a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009d8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d96:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8009d9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009da2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009da4:	1d1a      	adds	r2, r3, #4
 8009da6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dac:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8009db0:	ed97 7a07 	vldr	s14, [r7, #28]
 8009db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8009db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dba:	1d1a      	adds	r2, r3, #4
 8009dbc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8009dc6:	ed97 7a08 	vldr	s14, [r7, #32]
 8009dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8009dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dd8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8009ddc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8009de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009de6:	1d1a      	adds	r2, r3, #4
 8009de8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dee:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8009df2:	ed97 7a02 	vldr	s14, [r7, #8]
 8009df6:	edd7 7a06 	vldr	s15, [r7, #24]
 8009dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dfe:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8009e02:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e06:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e0e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8009e12:	ed97 7a04 	vldr	s14, [r7, #16]
 8009e16:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e1e:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8009e22:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e2e:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8009e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e34:	1d1a      	adds	r2, r3, #4
 8009e36:	673a      	str	r2, [r7, #112]	; 0x70
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8009e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	673a      	str	r2, [r7, #112]	; 0x70
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8009e46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e4a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8009e56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e62:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8009e66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e6a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e72:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8009e76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e7a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e82:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8009e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e88:	1d1a      	adds	r2, r3, #4
 8009e8a:	677a      	str	r2, [r7, #116]	; 0x74
 8009e8c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009e90:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e98:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8009e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e9e:	1d1a      	adds	r2, r3, #4
 8009ea0:	677a      	str	r2, [r7, #116]	; 0x74
 8009ea2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ea6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eae:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8009eb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8009eb6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ebe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8009ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ec6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ece:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8009ed2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ed6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ede:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8009ee2:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ee6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eee:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8009ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef4:	1d1a      	adds	r2, r3, #4
 8009ef6:	67ba      	str	r2, [r7, #120]	; 0x78
 8009ef8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009efc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f04:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8009f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f12:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f1a:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8009f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	673a      	str	r2, [r7, #112]	; 0x70
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8009f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f2a:	1d1a      	adds	r2, r3, #4
 8009f2c:	673a      	str	r2, [r7, #112]	; 0x70
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8009f32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f36:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8009f42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009f46:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8009f52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009f56:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8009f62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009f66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8009f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f74:	1d1a      	adds	r2, r3, #4
 8009f76:	677a      	str	r2, [r7, #116]	; 0x74
 8009f78:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009f7c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f84:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	677a      	str	r2, [r7, #116]	; 0x74
 8009f8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f92:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f9a:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8009f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fa2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8009fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fb2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8009fbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fc2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8009fce:	edd7 7a04 	vldr	s15, [r7, #16]
 8009fd2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8009fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fe0:	1d1a      	adds	r2, r3, #4
 8009fe2:	67ba      	str	r2, [r7, #120]	; 0x78
 8009fe4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009fe8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff0:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8009ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ff6:	1d1a      	adds	r2, r3, #4
 8009ff8:	67ba      	str	r2, [r7, #120]	; 0x78
 8009ffa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ffe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a002:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a006:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800a00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00c:	3b01      	subs	r3, #1
 800a00e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a012:	2b00      	cmp	r3, #0
 800a014:	f47f ae45 	bne.w	8009ca2 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800a018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a01a:	b299      	uxth	r1, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	2302      	movs	r3, #2
 800a022:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a024:	f000 fff2 	bl	800b00c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800a028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a02a:	b299      	uxth	r1, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	2302      	movs	r3, #2
 800a032:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a034:	f000 ffea 	bl	800b00c <arm_radix8_butterfly_f32>
}
 800a038:	bf00      	nop
 800a03a:	3780      	adds	r7, #128	; 0x80
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b0ac      	sub	sp, #176	; 0xb0
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	b29b      	uxth	r3, r3
 800a052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800a056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	4413      	add	r3, r2
 800a060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800a064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a06e:	4413      	add	r3, r2
 800a070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800a074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a07e:	4413      	add	r3, r2
 800a080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800a088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a08c:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800a08e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a092:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800a094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a098:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800a09a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a09e:	3b04      	subs	r3, #4
 800a0a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800a0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800a0ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0b2:	3b04      	subs	r3, #4
 800a0b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800a0b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a0dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800a0e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a0e4:	085b      	lsrs	r3, r3, #1
 800a0e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800a0ee:	2304      	movs	r3, #4
 800a0f0:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800a0f2:	2306      	movs	r3, #6
 800a0f4:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	ed93 7a00 	vldr	s14, [r3]
 800a0fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a100:	edd3 7a00 	vldr	s15, [r3]
 800a104:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a108:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	ed93 7a00 	vldr	s14, [r3]
 800a112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a116:	edd3 7a00 	vldr	s15, [r3]
 800a11a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a11e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	ed93 7a00 	vldr	s14, [r3]
 800a12a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a12e:	3304      	adds	r3, #4
 800a130:	edd3 7a00 	vldr	s15, [r3]
 800a134:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a138:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	3304      	adds	r3, #4
 800a140:	ed93 7a00 	vldr	s14, [r3]
 800a144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a148:	3304      	adds	r3, #4
 800a14a:	edd3 7a00 	vldr	s15, [r3]
 800a14e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a152:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a15a:	3304      	adds	r3, #4
 800a15c:	ed93 7a00 	vldr	s14, [r3]
 800a160:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a164:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a16c:	3304      	adds	r3, #4
 800a16e:	edd3 7a00 	vldr	s15, [r3]
 800a172:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a176:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a17a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a17e:	edd3 7a00 	vldr	s15, [r3]
 800a182:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a186:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a18a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a18e:	edd3 7a00 	vldr	s15, [r3]
 800a192:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a196:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a19a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a19e:	edd3 7a00 	vldr	s15, [r3]
 800a1a2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a1a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1ae:	edd3 7a00 	vldr	s15, [r3]
 800a1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a1ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1be:	3304      	adds	r3, #4
 800a1c0:	edd3 7a00 	vldr	s15, [r3]
 800a1c4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a1c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	edd3 7a00 	vldr	s15, [r3]
 800a1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1da:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a1de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	edd3 7a00 	vldr	s15, [r3]
 800a1e8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a1ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	edd3 7a00 	vldr	s15, [r3]
 800a1fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1fe:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a206:	ed93 7a00 	vldr	s14, [r3]
 800a20a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a20e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a216:	edd3 7a00 	vldr	s15, [r3]
 800a21a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a21e:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a226:	ed93 7a00 	vldr	s14, [r3]
 800a22a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a22e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a236:	edd3 7a00 	vldr	s15, [r3]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	1d1a      	adds	r2, r3, #4
 800a23e:	603a      	str	r2, [r7, #0]
 800a240:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a244:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a248:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a24c:	3304      	adds	r3, #4
 800a24e:	ed93 7a00 	vldr	s14, [r3]
 800a252:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a25a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a25e:	3304      	adds	r3, #4
 800a260:	edd3 7a00 	vldr	s15, [r3]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	1d1a      	adds	r2, r3, #4
 800a268:	603a      	str	r2, [r7, #0]
 800a26a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a26e:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800a272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a276:	1d1a      	adds	r2, r3, #4
 800a278:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a27e:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800a280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a284:	1d1a      	adds	r2, r3, #4
 800a286:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a28c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800a28e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a298:	69fa      	ldr	r2, [r7, #28]
 800a29a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800a29c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2a0:	1d1a      	adds	r2, r3, #4
 800a2a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2a6:	6a3a      	ldr	r2, [r7, #32]
 800a2a8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800a2aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800a2b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2bc:	1d1a      	adds	r2, r3, #4
 800a2be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800a2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800a2d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a2dc:	4413      	add	r3, r2
 800a2de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800a2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800a2f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2f4:	3b02      	subs	r3, #2
 800a2f6:	085b      	lsrs	r3, r3, #1
 800a2f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2fc:	e31a      	b.n	800a934 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	ed93 7a00 	vldr	s14, [r3]
 800a304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a308:	edd3 7a00 	vldr	s15, [r3]
 800a30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a310:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	ed93 7a00 	vldr	s14, [r3]
 800a31a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a31e:	edd3 7a00 	vldr	s15, [r3]
 800a322:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a326:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	3304      	adds	r3, #4
 800a32e:	ed93 7a00 	vldr	s14, [r3]
 800a332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a336:	3304      	adds	r3, #4
 800a338:	edd3 7a00 	vldr	s15, [r3]
 800a33c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a340:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	3304      	adds	r3, #4
 800a348:	ed93 7a00 	vldr	s14, [r3]
 800a34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a350:	3304      	adds	r3, #4
 800a352:	edd3 7a00 	vldr	s15, [r3]
 800a356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a35a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a35e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a362:	3304      	adds	r3, #4
 800a364:	ed93 7a00 	vldr	s14, [r3]
 800a368:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a36c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a374:	3304      	adds	r3, #4
 800a376:	edd3 7a00 	vldr	s15, [r3]
 800a37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a37e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a386:	edd3 7a00 	vldr	s15, [r3]
 800a38a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a38e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a396:	edd3 7a00 	vldr	s15, [r3]
 800a39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a39e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a3a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3a6:	edd3 7a00 	vldr	s15, [r3]
 800a3aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a3ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3b6:	edd3 7a00 	vldr	s15, [r3]
 800a3ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3be:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a3c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	edd3 7a00 	vldr	s15, [r3]
 800a3cc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a3d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3d8:	3304      	adds	r3, #4
 800a3da:	edd3 7a00 	vldr	s15, [r3]
 800a3de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3e2:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a3e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	edd3 7a00 	vldr	s15, [r3]
 800a3f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a3f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	edd3 7a00 	vldr	s15, [r3]
 800a402:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a406:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a40a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a40e:	ed93 7a00 	vldr	s14, [r3]
 800a412:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a41a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a41e:	edd3 7a00 	vldr	s15, [r3]
 800a422:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a426:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a42a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a42e:	ed93 7a00 	vldr	s14, [r3]
 800a432:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a43a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a43e:	edd3 7a00 	vldr	s15, [r3]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	1d1a      	adds	r2, r3, #4
 800a446:	603a      	str	r2, [r7, #0]
 800a448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a44c:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a454:	3304      	adds	r3, #4
 800a456:	ed93 7a00 	vldr	s14, [r3]
 800a45a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a45e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a462:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a466:	3304      	adds	r3, #4
 800a468:	edd3 7a00 	vldr	s15, [r3]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	1d1a      	adds	r2, r3, #4
 800a470:	603a      	str	r2, [r7, #0]
 800a472:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a476:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800a47a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a47e:	3b04      	subs	r3, #4
 800a480:	ed93 7a00 	vldr	s14, [r3]
 800a484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a488:	3b04      	subs	r3, #4
 800a48a:	edd3 7a00 	vldr	s15, [r3]
 800a48e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a492:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800a496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a49a:	3b04      	subs	r3, #4
 800a49c:	ed93 7a00 	vldr	s14, [r3]
 800a4a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4a4:	3b04      	subs	r3, #4
 800a4a6:	edd3 7a00 	vldr	s15, [r3]
 800a4aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4ae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800a4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4b6:	ed93 7a00 	vldr	s14, [r3]
 800a4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4be:	edd3 7a00 	vldr	s15, [r3]
 800a4c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800a4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ce:	ed93 7a00 	vldr	s14, [r3]
 800a4d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4d6:	edd3 7a00 	vldr	s15, [r3]
 800a4da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4de:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800a4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4e6:	ed93 7a00 	vldr	s14, [r3]
 800a4ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a4ee:	edd3 7a00 	vldr	s15, [r3]
 800a4f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a4fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800a502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a506:	ed93 7a00 	vldr	s14, [r3]
 800a50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a50e:	edd3 7a00 	vldr	s15, [r3]
 800a512:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a51a:	3b04      	subs	r3, #4
 800a51c:	edd3 7a00 	vldr	s15, [r3]
 800a520:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a528:	3b04      	subs	r3, #4
 800a52a:	edd3 7a00 	vldr	s15, [r3]
 800a52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a532:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800a536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a53a:	3b04      	subs	r3, #4
 800a53c:	edd3 7a00 	vldr	s15, [r3]
 800a540:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a544:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a548:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a54c:	3b04      	subs	r3, #4
 800a54e:	edd3 7a00 	vldr	s15, [r3]
 800a552:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a556:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800a55a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a55e:	edd3 7a00 	vldr	s15, [r3]
 800a562:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a56a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a56e:	edd3 7a00 	vldr	s15, [r3]
 800a572:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a576:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800a57a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a57e:	ed93 7a00 	vldr	s14, [r3]
 800a582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a586:	edd3 7a00 	vldr	s15, [r3]
 800a58a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a58e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a592:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a596:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800a59a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	ed93 7a00 	vldr	s14, [r3]
 800a5a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	edd3 7a00 	vldr	s15, [r3]
 800a5ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a5b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ba:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800a5be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5c2:	ed93 7a00 	vldr	s14, [r3]
 800a5c6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a5ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5d2:	edd3 7a00 	vldr	s15, [r3]
 800a5d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5da:	1f1a      	subs	r2, r3, #4
 800a5dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e4:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800a5e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5ec:	3b04      	subs	r3, #4
 800a5ee:	ed93 7a00 	vldr	s14, [r3]
 800a5f2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a5f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5fe:	3b04      	subs	r3, #4
 800a600:	edd3 7a00 	vldr	s15, [r3]
 800a604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a608:	1f1a      	subs	r2, r3, #4
 800a60a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a60e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a612:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800a616:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a61a:	1d1a      	adds	r2, r3, #4
 800a61c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800a624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a628:	1d1a      	adds	r2, r3, #4
 800a62a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800a632:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a636:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800a642:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a646:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800a652:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a656:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800a662:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a666:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800a672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a67c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a680:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a684:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a688:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800a68c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a690:	1d1a      	adds	r2, r3, #4
 800a692:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a696:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a69a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a69e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6a2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800a6a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a6aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800a6b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a6ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800a6c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a6ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800a6d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a6da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800a6e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a6ea:	1f1a      	subs	r2, r3, #4
 800a6ec:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6f0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a6f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a6f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6fc:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800a700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a704:	1f1a      	subs	r2, r3, #4
 800a706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a70a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a70e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a712:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a716:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800a71a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800a722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800a72a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a732:	4413      	add	r3, r2
 800a734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800a738:	edd7 7a07 	vldr	s15, [r7, #28]
 800a73c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a744:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800a748:	edd7 7a08 	vldr	s15, [r7, #32]
 800a74c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a754:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800a758:	edd7 7a08 	vldr	s15, [r7, #32]
 800a75c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a764:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800a768:	edd7 7a07 	vldr	s15, [r7, #28]
 800a76c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a774:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800a778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a77c:	1d1a      	adds	r2, r3, #4
 800a77e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a782:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a786:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a78a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a78e:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800a792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a796:	1d1a      	adds	r2, r3, #4
 800a798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a79c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a7a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a7a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7a8:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800a7ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7b0:	eef1 7a67 	vneg.f32	s15, s15
 800a7b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7bc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800a7c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a7c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7cc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800a7d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a7d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800a7e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800a7f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a7f4:	1f1a      	subs	r2, r3, #4
 800a7f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a7fa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a7fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a802:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a806:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800a80a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a80e:	1f1a      	subs	r2, r3, #4
 800a810:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a814:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a818:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a81c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a820:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800a824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800a82c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800a834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a83c:	4413      	add	r3, r2
 800a83e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800a842:	edd7 7a03 	vldr	s15, [r7, #12]
 800a846:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a84e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800a852:	edd7 7a04 	vldr	s15, [r7, #16]
 800a856:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800a862:	edd7 7a04 	vldr	s15, [r7, #16]
 800a866:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800a872:	edd7 7a03 	vldr	s15, [r7, #12]
 800a876:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800a882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a88c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a890:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a894:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a898:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800a89c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8a0:	1d1a      	adds	r2, r3, #4
 800a8a2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a8a6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a8aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a8ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8b2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800a8b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8ba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800a8c6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8ca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800a8d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800a8e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800a8ea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800a8f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8fa:	1f1a      	subs	r2, r3, #4
 800a8fc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a900:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a904:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a90c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800a910:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a914:	1f1a      	subs	r2, r3, #4
 800a916:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a91a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a91e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a922:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a926:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800a92a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a92e:	3b01      	subs	r3, #1
 800a930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f47f ace0 	bne.w	800a2fe <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	ed93 7a00 	vldr	s14, [r3]
 800a944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a948:	edd3 7a00 	vldr	s15, [r3]
 800a94c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a950:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	ed93 7a00 	vldr	s14, [r3]
 800a95a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a95e:	edd3 7a00 	vldr	s15, [r3]
 800a962:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a966:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	3304      	adds	r3, #4
 800a96e:	ed93 7a00 	vldr	s14, [r3]
 800a972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a976:	3304      	adds	r3, #4
 800a978:	edd3 7a00 	vldr	s15, [r3]
 800a97c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a980:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	3304      	adds	r3, #4
 800a988:	ed93 7a00 	vldr	s14, [r3]
 800a98c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a990:	3304      	adds	r3, #4
 800a992:	edd3 7a00 	vldr	s15, [r3]
 800a996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a99a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a99e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	ed93 7a00 	vldr	s14, [r3]
 800a9a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a9ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	edd3 7a00 	vldr	s15, [r3]
 800a9ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a9c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9c6:	edd3 7a00 	vldr	s15, [r3]
 800a9ca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a9ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9d6:	edd3 7a00 	vldr	s15, [r3]
 800a9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a9e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9e6:	edd3 7a00 	vldr	s15, [r3]
 800a9ea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a9ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9f6:	edd3 7a00 	vldr	s15, [r3]
 800a9fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9fe:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800aa02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa06:	3304      	adds	r3, #4
 800aa08:	edd3 7a00 	vldr	s15, [r3]
 800aa0c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800aa10:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa18:	3304      	adds	r3, #4
 800aa1a:	edd3 7a00 	vldr	s15, [r3]
 800aa1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa22:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800aa26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	edd3 7a00 	vldr	s15, [r3]
 800aa30:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800aa34:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	edd3 7a00 	vldr	s15, [r3]
 800aa42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa46:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800aa4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa4e:	ed93 7a00 	vldr	s14, [r3]
 800aa52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800aa56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa5e:	edd3 7a00 	vldr	s15, [r3]
 800aa62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa66:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800aa6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa6e:	ed93 7a00 	vldr	s14, [r3]
 800aa72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aa76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa7e:	edd3 7a00 	vldr	s15, [r3]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	1d1a      	adds	r2, r3, #4
 800aa86:	603a      	str	r2, [r7, #0]
 800aa88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa8c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800aa90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa94:	3304      	adds	r3, #4
 800aa96:	ed93 7a00 	vldr	s14, [r3]
 800aa9a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800aa9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aaa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	edd3 7a00 	vldr	s15, [r3]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	1d1a      	adds	r2, r3, #4
 800aab0:	603a      	str	r2, [r7, #0]
 800aab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aab6:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800aaba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800aac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800aaca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aace:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800aada:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aade:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800aaea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aaee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aaf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800aafa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aafe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800ab0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab0e:	1d1a      	adds	r2, r3, #4
 800ab10:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ab14:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ab18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ab1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab20:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800ab24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ab2e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ab32:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ab36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800ab3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800ab46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800ab4e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab52:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800ab5e:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab62:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800ab6e:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab72:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800ab7e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab82:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800ab8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab92:	1d1a      	adds	r2, r3, #4
 800ab94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab98:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ab9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800aba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aba4:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800aba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abac:	1d1a      	adds	r2, r3, #4
 800abae:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800abb2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800abb6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800abba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abbe:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800abc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800abca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800abd2:	edd7 7a03 	vldr	s15, [r7, #12]
 800abd6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800abe2:	edd7 7a04 	vldr	s15, [r7, #16]
 800abe6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800abea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800abf2:	edd7 7a04 	vldr	s15, [r7, #16]
 800abf6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800abfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800ac02:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800ac12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac16:	1d1a      	adds	r2, r3, #4
 800ac18:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ac1c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ac20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ac24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac28:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800ac2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ac36:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ac3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ac3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac42:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800ac46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac4a:	b299      	uxth	r1, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	2304      	movs	r3, #4
 800ac52:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ac54:	f000 f9da 	bl	800b00c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800ac58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac5c:	b299      	uxth	r1, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	2304      	movs	r3, #4
 800ac64:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ac66:	f000 f9d1 	bl	800b00c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800ac6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac6e:	b299      	uxth	r1, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	2304      	movs	r3, #4
 800ac76:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ac78:	f000 f9c8 	bl	800b00c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800ac7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac80:	b299      	uxth	r1, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	2304      	movs	r3, #4
 800ac88:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ac8a:	f000 f9bf 	bl	800b00c <arm_radix8_butterfly_f32>
}
 800ac8e:	bf00      	nop
 800ac90:	37b0      	adds	r7, #176	; 0xb0
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b088      	sub	sp, #32
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	4611      	mov	r1, r2
 800aca2:	461a      	mov	r2, r3
 800aca4:	460b      	mov	r3, r1
 800aca6:	71fb      	strb	r3, [r7, #7]
 800aca8:	4613      	mov	r3, r2
 800acaa:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d117      	bne.n	800ace8 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	3304      	adds	r3, #4
 800acbc:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800acbe:	2300      	movs	r3, #0
 800acc0:	61fb      	str	r3, [r7, #28]
 800acc2:	e00d      	b.n	800ace0 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	edd3 7a00 	vldr	s15, [r3]
 800acca:	eef1 7a67 	vneg.f32	s15, s15
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	3308      	adds	r3, #8
 800acd8:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	3301      	adds	r3, #1
 800acde:	61fb      	str	r3, [r7, #28]
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d3ed      	bcc.n	800acc4 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acee:	d024      	beq.n	800ad3a <arm_cfft_f32+0xa4>
 800acf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acf4:	d80b      	bhi.n	800ad0e <arm_cfft_f32+0x78>
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	d01f      	beq.n	800ad3a <arm_cfft_f32+0xa4>
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d802      	bhi.n	800ad04 <arm_cfft_f32+0x6e>
 800acfe:	2b10      	cmp	r3, #16
 800ad00:	d016      	beq.n	800ad30 <arm_cfft_f32+0x9a>
 800ad02:	e028      	b.n	800ad56 <arm_cfft_f32+0xc0>
 800ad04:	2b40      	cmp	r3, #64	; 0x40
 800ad06:	d01d      	beq.n	800ad44 <arm_cfft_f32+0xae>
 800ad08:	2b80      	cmp	r3, #128	; 0x80
 800ad0a:	d011      	beq.n	800ad30 <arm_cfft_f32+0x9a>
 800ad0c:	e023      	b.n	800ad56 <arm_cfft_f32+0xc0>
 800ad0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad12:	d00d      	beq.n	800ad30 <arm_cfft_f32+0x9a>
 800ad14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad18:	d803      	bhi.n	800ad22 <arm_cfft_f32+0x8c>
 800ad1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad1e:	d011      	beq.n	800ad44 <arm_cfft_f32+0xae>
 800ad20:	e019      	b.n	800ad56 <arm_cfft_f32+0xc0>
 800ad22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad26:	d008      	beq.n	800ad3a <arm_cfft_f32+0xa4>
 800ad28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2c:	d00a      	beq.n	800ad44 <arm_cfft_f32+0xae>
 800ad2e:	e012      	b.n	800ad56 <arm_cfft_f32+0xc0>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7fe ff90 	bl	8009c58 <arm_cfft_radix8by2_f32>
    break;
 800ad38:	e00d      	b.n	800ad56 <arm_cfft_f32+0xc0>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff f97f 	bl	800a040 <arm_cfft_radix8by4_f32>
    break;
 800ad42:	e008      	b.n	800ad56 <arm_cfft_f32+0xc0>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	b299      	uxth	r1, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	68b8      	ldr	r0, [r7, #8]
 800ad50:	f000 f95c 	bl	800b00c <arm_radix8_butterfly_f32>
    break;
 800ad54:	bf00      	nop
  }

  if ( bitReverseFlag )
 800ad56:	79bb      	ldrb	r3, [r7, #6]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <arm_cfft_f32+0xd6>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8999      	ldrh	r1, [r3, #12]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	461a      	mov	r2, r3
 800ad66:	68b8      	ldr	r0, [r7, #8]
 800ad68:	f7f5 fa52 	bl	8000210 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d130      	bne.n	800add4 <arm_cfft_f32+0x13e>
  {
    invL = 1.0f / (float32_t)L;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	ee07 3a90 	vmov	s15, r3
 800ad78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad84:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	61fb      	str	r3, [r7, #28]
 800ad90:	e01c      	b.n	800adcc <arm_cfft_f32+0x136>
    {
      *pSrc++ *=   invL ;
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	1d1a      	adds	r2, r3, #4
 800ad96:	61ba      	str	r2, [r7, #24]
 800ad98:	ed93 7a00 	vldr	s14, [r3]
 800ad9c:	edd7 7a04 	vldr	s15, [r7, #16]
 800ada0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada4:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	edd3 7a00 	vldr	s15, [r3]
 800adae:	eeb1 7a67 	vneg.f32	s14, s15
 800adb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	3304      	adds	r3, #4
 800adc4:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	3301      	adds	r3, #1
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	69fa      	ldr	r2, [r7, #28]
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	d3de      	bcc.n	800ad92 <arm_cfft_f32+0xfc>
    }
  }
}
 800add4:	bf00      	nop
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024);
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	605a      	str	r2, [r3, #4]
 800adf6:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <arm_cfft_init_2048_f32+0x44>)
 800adf8:	899a      	ldrh	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	819a      	strh	r2, [r3, #12]
 800adfe:	4b08      	ldr	r3, [pc, #32]	; (800ae20 <arm_cfft_init_2048_f32+0x44>)
 800ae00:	689a      	ldr	r2, [r3, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	609a      	str	r2, [r3, #8]
 800ae06:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <arm_cfft_init_2048_f32+0x44>)
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	605a      	str	r2, [r3, #4]
 800ae0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	0802f430 	.word	0x0802f430

0800ae24 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024);
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	605a      	str	r2, [r3, #4]
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <arm_cfft_init_1024_f32+0x44>)
 800ae40:	899a      	ldrh	r2, [r3, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	819a      	strh	r2, [r3, #12]
 800ae46:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <arm_cfft_init_1024_f32+0x44>)
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	609a      	str	r2, [r3, #8]
 800ae4e:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <arm_cfft_init_1024_f32+0x44>)
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	605a      	str	r2, [r3, #4]
 800ae56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	0802f420 	.word	0x0802f420

0800ae6c <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256);
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7e:	801a      	strh	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	605a      	str	r2, [r3, #4]
 800ae86:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <arm_cfft_init_512_f32+0x44>)
 800ae88:	899a      	ldrh	r2, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	819a      	strh	r2, [r3, #12]
 800ae8e:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <arm_cfft_init_512_f32+0x44>)
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	609a      	str	r2, [r3, #8]
 800ae96:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <arm_cfft_init_512_f32+0x44>)
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	605a      	str	r2, [r3, #4]
 800ae9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aea2:	4618      	mov	r0, r3
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	0802f410 	.word	0x0802f410

0800aeb4 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256);
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aec6:	801a      	strh	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	605a      	str	r2, [r3, #4]
 800aece:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <arm_cfft_init_256_f32+0x44>)
 800aed0:	899a      	ldrh	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	819a      	strh	r2, [r3, #12]
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <arm_cfft_init_256_f32+0x44>)
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	609a      	str	r2, [r3, #8]
 800aede:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <arm_cfft_init_256_f32+0x44>)
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	605a      	str	r2, [r3, #4]
 800aee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	0802f400 	.word	0x0802f400

0800aefc <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64);
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2280      	movs	r2, #128	; 0x80
 800af0c:	801a      	strh	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	605a      	str	r2, [r3, #4]
 800af14:	4b09      	ldr	r3, [pc, #36]	; (800af3c <arm_cfft_init_128_f32+0x40>)
 800af16:	899a      	ldrh	r2, [r3, #12]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	819a      	strh	r2, [r3, #12]
 800af1c:	4b07      	ldr	r3, [pc, #28]	; (800af3c <arm_cfft_init_128_f32+0x40>)
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	609a      	str	r2, [r3, #8]
 800af24:	4b05      	ldr	r3, [pc, #20]	; (800af3c <arm_cfft_init_128_f32+0x40>)
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	605a      	str	r2, [r3, #4]
 800af2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	0802f3f0 	.word	0x0802f3f0

0800af40 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64);
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2240      	movs	r2, #64	; 0x40
 800af50:	801a      	strh	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	605a      	str	r2, [r3, #4]
 800af58:	4b09      	ldr	r3, [pc, #36]	; (800af80 <arm_cfft_init_64_f32+0x40>)
 800af5a:	899a      	ldrh	r2, [r3, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	819a      	strh	r2, [r3, #12]
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <arm_cfft_init_64_f32+0x40>)
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	609a      	str	r2, [r3, #8]
 800af68:	4b05      	ldr	r3, [pc, #20]	; (800af80 <arm_cfft_init_64_f32+0x40>)
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	605a      	str	r2, [r3, #4]
 800af70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	0802f3e0 	.word	0x0802f3e0

0800af84 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16);
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	801a      	strh	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	605a      	str	r2, [r3, #4]
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <arm_cfft_init_32_f32+0x40>)
 800af9e:	899a      	ldrh	r2, [r3, #12]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	819a      	strh	r2, [r3, #12]
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <arm_cfft_init_32_f32+0x40>)
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	609a      	str	r2, [r3, #8]
 800afac:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <arm_cfft_init_32_f32+0x40>)
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	605a      	str	r2, [r3, #4]
 800afb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	0802f3d0 	.word	0x0802f3d0

0800afc8 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16);
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	2300      	movs	r3, #0
 800afd2:	73fb      	strb	r3, [r7, #15]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2210      	movs	r2, #16
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
 800afe0:	4b09      	ldr	r3, [pc, #36]	; (800b008 <arm_cfft_init_16_f32+0x40>)
 800afe2:	899a      	ldrh	r2, [r3, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	819a      	strh	r2, [r3, #12]
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <arm_cfft_init_16_f32+0x40>)
 800afea:	689a      	ldr	r2, [r3, #8]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	609a      	str	r2, [r3, #8]
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <arm_cfft_init_16_f32+0x40>)
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	605a      	str	r2, [r3, #4]
 800aff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	0802f3c0 	.word	0x0802f3c0

0800b00c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b0bd      	sub	sp, #244	; 0xf4
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	607a      	str	r2, [r7, #4]
 800b016:	461a      	mov	r2, r3
 800b018:	460b      	mov	r3, r1
 800b01a:	817b      	strh	r3, [r7, #10]
 800b01c:	4613      	mov	r3, r2
 800b01e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800b020:	4b09      	ldr	r3, [pc, #36]	; (800b048 <arm_radix8_butterfly_f32+0x3c>)
 800b022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800b026:	897b      	ldrh	r3, [r7, #10]
 800b028:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800b02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800b034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b044:	e002      	b.n	800b04c <arm_radix8_butterfly_f32+0x40>
 800b046:	bf00      	nop
 800b048:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800b04c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b054:	4413      	add	r3, r2
 800b056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800b05a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b062:	4413      	add	r3, r2
 800b064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800b068:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b070:	4413      	add	r3, r2
 800b072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800b076:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b07e:	4413      	add	r3, r2
 800b080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800b084:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	4413      	add	r3, r2
 800b08e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800b092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	4413      	add	r3, r2
 800b09c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800b0a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800b0ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	ed93 7a00 	vldr	s14, [r3]
 800b0bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	edd3 7a00 	vldr	s15, [r3]
 800b0ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800b0d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	ed93 7a00 	vldr	s14, [r3]
 800b0e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	edd3 7a00 	vldr	s15, [r3]
 800b0ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0f2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800b0f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	ed93 7a00 	vldr	s14, [r3]
 800b104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b108:	00db      	lsls	r3, r3, #3
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	edd3 7a00 	vldr	s15, [r3]
 800b112:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b116:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800b11a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4413      	add	r3, r2
 800b124:	ed93 7a00 	vldr	s14, [r3]
 800b128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b12c:	00db      	lsls	r3, r3, #3
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4413      	add	r3, r2
 800b132:	edd3 7a00 	vldr	s15, [r3]
 800b136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b13a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800b13e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	4413      	add	r3, r2
 800b148:	ed93 7a00 	vldr	s14, [r3]
 800b14c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4413      	add	r3, r2
 800b156:	edd3 7a00 	vldr	s15, [r3]
 800b15a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b15e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800b162:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b166:	00db      	lsls	r3, r3, #3
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	ed93 7a00 	vldr	s14, [r3]
 800b170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	4413      	add	r3, r2
 800b17a:	edd3 7a00 	vldr	s15, [r3]
 800b17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b182:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800b186:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	ed93 7a00 	vldr	s14, [r3]
 800b194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4413      	add	r3, r2
 800b19e:	edd3 7a00 	vldr	s15, [r3]
 800b1a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1a6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800b1aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1ae:	00db      	lsls	r3, r3, #3
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	ed93 7a00 	vldr	s14, [r3]
 800b1b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1bc:	00db      	lsls	r3, r3, #3
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	edd3 7a00 	vldr	s15, [r3]
 800b1c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1ca:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800b1ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b1d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800b1de:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b1e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b1e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800b1ee:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b1f2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b1f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1fa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800b1fe:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b202:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b20a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800b20e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b212:	00db      	lsls	r3, r3, #3
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4413      	add	r3, r2
 800b218:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b21c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b220:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b224:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800b228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b236:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b23a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b23e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800b242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b246:	00db      	lsls	r3, r3, #3
 800b248:	3304      	adds	r3, #4
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4413      	add	r3, r2
 800b24e:	ed93 7a00 	vldr	s14, [r3]
 800b252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	3304      	adds	r3, #4
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	4413      	add	r3, r2
 800b25e:	edd3 7a00 	vldr	s15, [r3]
 800b262:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b266:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800b26a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	3304      	adds	r3, #4
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	4413      	add	r3, r2
 800b276:	ed93 7a00 	vldr	s14, [r3]
 800b27a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	3304      	adds	r3, #4
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	edd3 7a00 	vldr	s15, [r3]
 800b28a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b28e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800b292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	3304      	adds	r3, #4
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4413      	add	r3, r2
 800b29e:	ed93 7a00 	vldr	s14, [r3]
 800b2a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	edd3 7a00 	vldr	s15, [r3]
 800b2b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2b6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800b2ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	ed93 7a00 	vldr	s14, [r3]
 800b2ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	edd3 7a00 	vldr	s15, [r3]
 800b2da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2de:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800b2e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	ed93 7a00 	vldr	s14, [r3]
 800b2f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	edd3 7a00 	vldr	s15, [r3]
 800b302:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b306:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800b30a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	3304      	adds	r3, #4
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	ed93 7a00 	vldr	s14, [r3]
 800b31a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	3304      	adds	r3, #4
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	4413      	add	r3, r2
 800b326:	edd3 7a00 	vldr	s15, [r3]
 800b32a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b32e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800b332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	3304      	adds	r3, #4
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4413      	add	r3, r2
 800b33e:	ed93 7a00 	vldr	s14, [r3]
 800b342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	3304      	adds	r3, #4
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4413      	add	r3, r2
 800b34e:	edd3 7a00 	vldr	s15, [r3]
 800b352:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b356:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800b35a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b35e:	00db      	lsls	r3, r3, #3
 800b360:	3304      	adds	r3, #4
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	4413      	add	r3, r2
 800b366:	ed93 7a00 	vldr	s14, [r3]
 800b36a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	3304      	adds	r3, #4
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	edd3 7a00 	vldr	s15, [r3]
 800b37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b37e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800b382:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b386:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b38a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b38e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800b392:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b396:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800b3a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b3a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800b3b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b3b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b3ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800b3c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b3d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b3d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800b3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b3ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b3f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800b3fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b408:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b40c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b410:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800b414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4413      	add	r3, r2
 800b41e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b422:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b42a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800b42e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	3304      	adds	r3, #4
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b43e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b442:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b446:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800b44a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	3304      	adds	r3, #4
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b45a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b462:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800b466:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b46a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b46e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b472:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800b47e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b482:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b48a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b492:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800b496:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b49a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b49e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4a2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800b4ae:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b4b2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b4b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4ba:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800b4c6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b4ca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b4ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4d2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800b4d6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b4da:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b4de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800b4e6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b4ea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b4ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4f2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800b4f6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b4fa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b502:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800b506:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b50a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b50e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b512:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800b516:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b51a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b51e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b522:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800b526:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b52a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b52e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b532:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800b536:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b53a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b53e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b542:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800b546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b554:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b55c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800b560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b56e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b572:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b576:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800b57a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	4413      	add	r3, r2
 800b584:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b588:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b58c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b590:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800b594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	4413      	add	r3, r2
 800b59e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b5a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b5a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800b5ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5b2:	00db      	lsls	r3, r3, #3
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b5be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b5c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5c6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800b5ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b5da:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b5de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800b5e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b5f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b5fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800b602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	3304      	adds	r3, #4
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b612:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b61a:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800b61e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b626:	4413      	add	r3, r2
 800b628:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800b62c:	897b      	ldrh	r3, [r7, #10]
 800b62e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b632:	429a      	cmp	r2, r3
 800b634:	f4ff ad0a 	bcc.w	800b04c <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800b638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63c:	2b07      	cmp	r3, #7
 800b63e:	f240 84e3 	bls.w	800c008 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800b648:	2301      	movs	r3, #1
 800b64a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800b64e:	893b      	ldrh	r3, [r7, #8]
 800b650:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b654:	4413      	add	r3, r2
 800b656:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800b658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b65a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800b65e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b664:	4413      	add	r3, r2
 800b666:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800b668:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b66c:	4413      	add	r3, r2
 800b66e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800b670:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b674:	4413      	add	r3, r2
 800b676:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800b678:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b67a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b67c:	4413      	add	r3, r2
 800b67e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800b680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b684:	4413      	add	r3, r2
 800b686:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800b688:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b68a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b68c:	4413      	add	r3, r2
 800b68e:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800b690:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b694:	00db      	lsls	r3, r3, #3
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	4413      	add	r3, r2
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800b69e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6a0:	00db      	lsls	r3, r3, #3
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800b6aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6ac:	00db      	lsls	r3, r3, #3
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800b6b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	4413      	add	r3, r2
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800b6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800b6ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800b6da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800b6e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800b6f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	4413      	add	r3, r2
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800b704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	3304      	adds	r3, #4
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800b712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	3304      	adds	r3, #4
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	4413      	add	r3, r2
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800b720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	3304      	adds	r3, #4
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800b72e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	3304      	adds	r3, #4
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	4413      	add	r3, r2
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800b73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b73e:	00db      	lsls	r3, r3, #3
 800b740:	3304      	adds	r3, #4
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	4413      	add	r3, r2
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800b74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b74e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800b752:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	4413      	add	r3, r2
 800b75c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800b760:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b768:	4413      	add	r3, r2
 800b76a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800b76e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b776:	4413      	add	r3, r2
 800b778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800b77c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b784:	4413      	add	r3, r2
 800b786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800b78a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b792:	4413      	add	r3, r2
 800b794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800b798:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800b7a6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800b7b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	4413      	add	r3, r2
 800b7be:	ed93 7a00 	vldr	s14, [r3]
 800b7c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	edd3 7a00 	vldr	s15, [r3]
 800b7d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7d4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800b7d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	ed93 7a00 	vldr	s14, [r3]
 800b7e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	edd3 7a00 	vldr	s15, [r3]
 800b7f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7f8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800b7fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	4413      	add	r3, r2
 800b806:	ed93 7a00 	vldr	s14, [r3]
 800b80a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4413      	add	r3, r2
 800b814:	edd3 7a00 	vldr	s15, [r3]
 800b818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b81c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800b820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b824:	00db      	lsls	r3, r3, #3
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	4413      	add	r3, r2
 800b82a:	ed93 7a00 	vldr	s14, [r3]
 800b82e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	edd3 7a00 	vldr	s15, [r3]
 800b83c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b840:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800b844:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	ed93 7a00 	vldr	s14, [r3]
 800b852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	edd3 7a00 	vldr	s15, [r3]
 800b860:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b864:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800b868:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4413      	add	r3, r2
 800b872:	ed93 7a00 	vldr	s14, [r3]
 800b876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	edd3 7a00 	vldr	s15, [r3]
 800b884:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b888:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800b88c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4413      	add	r3, r2
 800b896:	ed93 7a00 	vldr	s14, [r3]
 800b89a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	edd3 7a00 	vldr	s15, [r3]
 800b8a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8ac:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800b8b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	ed93 7a00 	vldr	s14, [r3]
 800b8be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	edd3 7a00 	vldr	s15, [r3]
 800b8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8d0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800b8d4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b8d8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b8dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8e0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800b8e4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b8e8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b8ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8f0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800b8f4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b8f8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b8fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b900:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800b904:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b908:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b90c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b910:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800b914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	4413      	add	r3, r2
 800b91e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b922:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b92a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800b92e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b932:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b93a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800b93e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	3304      	adds	r3, #4
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4413      	add	r3, r2
 800b94a:	ed93 7a00 	vldr	s14, [r3]
 800b94e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	3304      	adds	r3, #4
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	4413      	add	r3, r2
 800b95a:	edd3 7a00 	vldr	s15, [r3]
 800b95e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b962:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800b966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	3304      	adds	r3, #4
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4413      	add	r3, r2
 800b972:	ed93 7a00 	vldr	s14, [r3]
 800b976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	3304      	adds	r3, #4
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	4413      	add	r3, r2
 800b982:	edd3 7a00 	vldr	s15, [r3]
 800b986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b98a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800b98e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	3304      	adds	r3, #4
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4413      	add	r3, r2
 800b99a:	ed93 7a00 	vldr	s14, [r3]
 800b99e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	edd3 7a00 	vldr	s15, [r3]
 800b9ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800b9b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	3304      	adds	r3, #4
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	ed93 7a00 	vldr	s14, [r3]
 800b9c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	edd3 7a00 	vldr	s15, [r3]
 800b9d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9da:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800b9de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	ed93 7a00 	vldr	s14, [r3]
 800b9ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	edd3 7a00 	vldr	s15, [r3]
 800b9fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba02:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800ba06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	4413      	add	r3, r2
 800ba12:	ed93 7a00 	vldr	s14, [r3]
 800ba16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	edd3 7a00 	vldr	s15, [r3]
 800ba26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba2a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800ba2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	3304      	adds	r3, #4
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	4413      	add	r3, r2
 800ba3a:	ed93 7a00 	vldr	s14, [r3]
 800ba3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	3304      	adds	r3, #4
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	4413      	add	r3, r2
 800ba4a:	edd3 7a00 	vldr	s15, [r3]
 800ba4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba52:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ba56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	4413      	add	r3, r2
 800ba62:	ed93 7a00 	vldr	s14, [r3]
 800ba66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba6a:	00db      	lsls	r3, r3, #3
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	4413      	add	r3, r2
 800ba72:	edd3 7a00 	vldr	s15, [r3]
 800ba76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba7a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800ba7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ba86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba8a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800ba8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba92:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ba96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ba9e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800baa2:	edd7 7a08 	vldr	s15, [r7, #32]
 800baa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800baaa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800baae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bab2:	edd7 7a08 	vldr	s15, [r7, #32]
 800bab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800babe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bac2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800bace:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bad2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bada:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800bade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	3304      	adds	r3, #4
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800baf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baf6:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800bafa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bafe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bb02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800bb0a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bb0e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bb12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800bb1a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bb1e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bb22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb26:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800bb2a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bb2e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bb32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb36:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800bb3a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bb3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb46:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800bb4a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bb4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bb52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb56:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800bb5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bb5e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb66:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800bb6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb6e:	00db      	lsls	r3, r3, #3
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4413      	add	r3, r2
 800bb74:	ed97 7a07 	vldr	s14, [r7, #28]
 800bb78:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb80:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800bb84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	ed97 7a05 	vldr	s14, [r7, #20]
 800bb94:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb9c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800bba0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bba4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800bbb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800bbb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbbc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800bbc0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bbc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbcc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800bbd0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800bbd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbdc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800bbe0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	4413      	add	r3, r2
 800bbea:	ed97 7a07 	vldr	s14, [r7, #28]
 800bbee:	edd7 7a06 	vldr	s15, [r7, #24]
 800bbf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbf6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800bbfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	3304      	adds	r3, #4
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4413      	add	r3, r2
 800bc06:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc0a:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc12:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800bc16:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bc1a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800bc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc22:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800bc26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800bc2a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc32:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800bc36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800bc3a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc42:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800bc46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800bc4a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800bc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc52:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800bc56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4413      	add	r3, r2
 800bc60:	ed97 7a07 	vldr	s14, [r7, #28]
 800bc64:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc6c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800bc70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc74:	00db      	lsls	r3, r3, #3
 800bc76:	3304      	adds	r3, #4
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc80:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc88:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800bc8c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800bc90:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800bc94:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc98:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800bc9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800bca4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800bca8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800bcac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcb0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800bcb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800bcbc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800bcc0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bcc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800bccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcd0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800bcd4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800bcd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bcdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bce0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800bce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800bcec:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800bcf0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bcf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcf8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800bcfc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800bd00:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bd04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd08:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800bd0c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800bd10:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800bd14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd18:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800bd1c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800bd20:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800bd24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd28:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800bd2c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800bd30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd38:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800bd3c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800bd40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd48:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800bd4c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800bd50:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800bd54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd58:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800bd5c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800bd60:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800bd64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd68:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800bd6c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800bd70:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800bd74:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd78:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800bd7c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800bd80:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800bd84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd88:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800bd8c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bd90:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bd94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd98:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800bd9c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bda0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800bda4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bda8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800bdac:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800bdb0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800bdb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800bdbc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800bdc0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800bdc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdc8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800bdcc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bdd0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800bdd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdd8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800bddc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bde0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800bde4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bde8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800bdec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800bdf0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bdf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdf8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800bdfc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800be00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be08:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800be0c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800be10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be18:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800be1c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800be20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800be24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be28:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800be2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	4413      	add	r3, r2
 800be36:	ed97 7a07 	vldr	s14, [r7, #28]
 800be3a:	edd7 7a06 	vldr	s15, [r7, #24]
 800be3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be42:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800be46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	3304      	adds	r3, #4
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	4413      	add	r3, r2
 800be52:	ed97 7a05 	vldr	s14, [r7, #20]
 800be56:	edd7 7a04 	vldr	s15, [r7, #16]
 800be5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be5e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800be62:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800be66:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800be6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be6e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800be72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800be76:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800be7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be7e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800be82:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800be86:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800be8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be8e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800be92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800be96:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800be9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800bea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	ed97 7a07 	vldr	s14, [r7, #28]
 800beb0:	edd7 7a06 	vldr	s15, [r7, #24]
 800beb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beb8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800bebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	3304      	adds	r3, #4
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	ed97 7a05 	vldr	s14, [r7, #20]
 800becc:	edd7 7a04 	vldr	s15, [r7, #16]
 800bed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bed4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800bed8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800bedc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800bee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800bee8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800beec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800bef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bef4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800bef8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800befc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800bf00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf04:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800bf08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bf0c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800bf10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf14:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800bf18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4413      	add	r3, r2
 800bf22:	ed97 7a07 	vldr	s14, [r7, #28]
 800bf26:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf2e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800bf32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	3304      	adds	r3, #4
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	ed97 7a05 	vldr	s14, [r7, #20]
 800bf42:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf4a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800bf4e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bf52:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800bf56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800bf5e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bf62:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800bf6e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800bf72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bf76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf7a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800bf7e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bf82:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800bf86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800bf8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	4413      	add	r3, r2
 800bf98:	ed97 7a07 	vldr	s14, [r7, #28]
 800bf9c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bfa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfa4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800bfa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bfac:	00db      	lsls	r3, r3, #3
 800bfae:	3304      	adds	r3, #4
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	ed97 7a05 	vldr	s14, [r7, #20]
 800bfb8:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfc0:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800bfc4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bfc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfcc:	4413      	add	r3, r2
 800bfce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800bfd2:	897b      	ldrh	r3, [r7, #10]
 800bfd4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	f4ff abba 	bcc.w	800b752 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800bfde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800bfe8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bfec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bff0:	429a      	cmp	r2, r3
 800bff2:	f4ff ab2c 	bcc.w	800b64e <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800bff6:	893b      	ldrh	r3, [r7, #8]
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800bffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c000:	2b07      	cmp	r3, #7
 800c002:	f63f a813 	bhi.w	800b02c <arm_radix8_butterfly_f32+0x20>
}
 800c006:	e000      	b.n	800c00a <arm_radix8_butterfly_f32+0xffe>
         break;
 800c008:	bf00      	nop
}
 800c00a:	bf00      	nop
 800c00c:	37f4      	adds	r7, #244	; 0xf4
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop

0800c018 <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
float32_t arm_cos_f32(
  float32_t x)
{
 800c018:	b480      	push	{r7}
 800c01a:	b08b      	sub	sp, #44	; 0x2c
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800c022:	edd7 7a01 	vldr	s15, [r7, #4]
 800c026:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800c118 <arm_cos_f32+0x100>
 800c02a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c02e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800c032:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c036:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800c03a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c042:	ee17 3a90 	vmov	r3, s15
 800c046:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800c048:	edd7 7a06 	vldr	s15, [r7, #24]
 800c04c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c054:	d502      	bpl.n	800c05c <arm_cos_f32+0x44>
  {
    n--;
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	3b01      	subs	r3, #1
 800c05a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	ee07 3a90 	vmov	s15, r3
 800c062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c066:	ed97 7a06 	vldr	s14, [r7, #24]
 800c06a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c06e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800c072:	edd7 7a06 	vldr	s15, [r7, #24]
 800c076:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c11c <arm_cos_f32+0x104>
 800c07a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c07e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800c082:	edd7 7a07 	vldr	s15, [r7, #28]
 800c086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c08a:	ee17 3a90 	vmov	r3, s15
 800c08e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800c090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c096:	d309      	bcc.n	800c0ac <arm_cos_f32+0x94>
    index = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	84fb      	strh	r3, [r7, #38]	; 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800c09c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0a0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c11c <arm_cos_f32+0x104>
 800c0a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0a8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800c0ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	ed97 7a07 	vldr	s14, [r7, #28]
 800c0ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0be:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800c0c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0c4:	4a16      	ldr	r2, [pc, #88]	; (800c120 <arm_cos_f32+0x108>)
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800c0ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	4a13      	ldr	r2, [pc, #76]	; (800c120 <arm_cos_f32+0x108>)
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 800c0dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0e0:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0f0:	edd7 6a05 	vldr	s13, [r7, #20]
 800c0f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c0f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c0fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c100:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	ee07 3a90 	vmov	s15, r3
}
 800c10a:	eeb0 0a67 	vmov.f32	s0, s15
 800c10e:	372c      	adds	r7, #44	; 0x2c
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	3e22f983 	.word	0x3e22f983
 800c11c:	44000000 	.word	0x44000000
 800c120:	0802ebbc 	.word	0x0802ebbc

0800c124 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800c124:	b480      	push	{r7}
 800c126:	b095      	sub	sp, #84	; 0x54
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	3b01      	subs	r3, #1
 800c144:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800c146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800c14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800c152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800c158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800c15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c160:	1d1a      	adds	r2, r3, #4
 800c162:	64ba      	str	r2, [r7, #72]	; 0x48
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800c168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c16a:	1d1a      	adds	r2, r3, #4
 800c16c:	64ba      	str	r2, [r7, #72]	; 0x48
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800c172:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c176:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c17a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c17e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800c182:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c186:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c18a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c18e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800c192:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c196:	edd7 7a08 	vldr	s15, [r7, #32]
 800c19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	1d1a      	adds	r2, r3, #4
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c1a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ac:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800c1b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c1b4:	edd7 7a08 	vldr	s15, [r7, #32]
 800c1b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	1d1a      	adds	r2, r3, #4
 800c1c0:	607a      	str	r2, [r7, #4]
 800c1c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c1c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ca:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800c1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800c1da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1dc:	3308      	adds	r3, #8
 800c1de:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800c1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800c1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800c1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800c1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800c1f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1fa:	1d1a      	adds	r2, r3, #4
 800c1fc:	64ba      	str	r2, [r7, #72]	; 0x48
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800c202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c204:	1d1a      	adds	r2, r3, #4
 800c206:	64ba      	str	r2, [r7, #72]	; 0x48
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800c20c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c210:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c214:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c218:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800c21c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c220:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c224:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c228:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800c22c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c230:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c238:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800c23c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c240:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c248:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800c24c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c250:	edd7 7a08 	vldr	s15, [r7, #32]
 800c254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c258:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800c25c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c260:	edd7 7a08 	vldr	s15, [r7, #32]
 800c264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c268:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800c26c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c270:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c274:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c278:	edd7 7a07 	vldr	s15, [r7, #28]
 800c27c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c280:	edd7 7a04 	vldr	s15, [r7, #16]
 800c284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	1d1a      	adds	r2, r3, #4
 800c28c:	607a      	str	r2, [r7, #4]
 800c28e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c292:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c296:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800c29a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c29e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c2a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2a6:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	1d1a      	adds	r2, r3, #4
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c2c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2c4:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800c2c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800c2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d0:	3b08      	subs	r3, #8
 800c2d2:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800c2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 800c2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f73f af7f 	bgt.w	800c1e0 <stage_rfft_f32+0xbc>
}
 800c2e2:	bf00      	nop
 800c2e4:	3754      	adds	r7, #84	; 0x54
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b095      	sub	sp, #84	; 0x54
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	60f8      	str	r0, [r7, #12]
 800c2f6:	60b9      	str	r1, [r7, #8]
 800c2f8:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800c310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800c316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800c31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c31e:	3308      	adds	r3, #8
 800c320:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800c322:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c326:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	1d1a      	adds	r2, r3, #4
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c33c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800c340:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c344:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	1d1a      	adds	r2, r3, #4
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c35a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800c35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	461a      	mov	r2, r3
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	4413      	add	r3, r2
 800c368:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800c36a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c36c:	3308      	adds	r3, #8
 800c36e:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 800c370:	e07c      	b.n	800c46c <merge_rfft_f32+0x17e>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800c372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800c378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800c37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800c384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800c38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c38c:	1d1a      	adds	r2, r3, #4
 800c38e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800c394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c396:	1d1a      	adds	r2, r3, #4
 800c398:	64ba      	str	r2, [r7, #72]	; 0x48
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800c39e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c3a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c3a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800c3ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c3b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c3b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3ba:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800c3be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c3c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ca:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800c3ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3d2:	edd7 7a08 	vldr	s15, [r7, #32]
 800c3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3da:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800c3de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ea:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800c3ee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c3f2:	edd7 7a08 	vldr	s15, [r7, #32]
 800c3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fa:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800c3fe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c402:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c40a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c40e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c412:	edd7 7a06 	vldr	s15, [r7, #24]
 800c416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	1d1a      	adds	r2, r3, #4
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c424:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c428:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800c42c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c430:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c434:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c438:	edd7 7a05 	vldr	s15, [r7, #20]
 800c43c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c440:	edd7 7a04 	vldr	s15, [r7, #16]
 800c444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	1d1a      	adds	r2, r3, #4
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c452:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c456:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800c45a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c45c:	3308      	adds	r3, #8
 800c45e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800c460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c462:	3b08      	subs	r3, #8
 800c464:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800c466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c468:	3b01      	subs	r3, #1
 800c46a:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 800c46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f73f af7f 	bgt.w	800c372 <merge_rfft_f32+0x84>
   }

}
 800c474:	bf00      	nop
 800c476:	3754      	adds	r7, #84	; 0x54
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800c492:	78fb      	ldrb	r3, [r7, #3]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00b      	beq.n	800c4b0 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff ff26 	bl	800c2ee <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800c4a2:	78fa      	ldrb	r2, [r7, #3]
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	6978      	ldr	r0, [r7, #20]
 800c4aa:	f7fe fbf4 	bl	800ac96 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800c4ae:	e00a      	b.n	800c4c6 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800c4b0:	78fa      	ldrb	r2, [r7, #3]
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	6978      	ldr	r0, [r7, #20]
 800c4b8:	f7fe fbed 	bl	800ac96 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7ff fe2f 	bl	800c124 <stage_rfft_f32>
}
 800c4c6:	bf00      	nop
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
	...

0800c4d0 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d102      	bne.n	800c4e4 <arm_rfft_fast_init_32_f32+0x14>
 800c4de:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e2:	e013      	b.n	800c50c <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fd6e 	bl	800afc8 <arm_cfft_init_16_f32>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c4f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 800c4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4fc:	e006      	b.n	800c50c <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2220      	movs	r2, #32
 800c502:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a03      	ldr	r2, [pc, #12]	; (800c514 <arm_rfft_fast_init_32_f32+0x44>)
 800c508:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	08026c3c 	.word	0x08026c3c

0800c518 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d102      	bne.n	800c52c <arm_rfft_fast_init_64_f32+0x14>
 800c526:	f04f 33ff 	mov.w	r3, #4294967295
 800c52a:	e013      	b.n	800c554 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe fd28 	bl	800af84 <arm_cfft_init_32_f32>
 800c534:	4603      	mov	r3, r0
 800c536:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 800c540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c544:	e006      	b.n	800c554 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2240      	movs	r2, #64	; 0x40
 800c54a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a03      	ldr	r2, [pc, #12]	; (800c55c <arm_rfft_fast_init_64_f32+0x44>)
 800c550:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	08026cbc 	.word	0x08026cbc

0800c560 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d102      	bne.n	800c574 <arm_rfft_fast_init_128_f32+0x14>
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295
 800c572:	e013      	b.n	800c59c <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe fce2 	bl	800af40 <arm_cfft_init_64_f32>
 800c57c:	4603      	mov	r3, r0
 800c57e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 800c588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c58c:	e006      	b.n	800c59c <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2280      	movs	r2, #128	; 0x80
 800c592:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a03      	ldr	r2, [pc, #12]	; (800c5a4 <arm_rfft_fast_init_128_f32+0x44>)
 800c598:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	08026dbc 	.word	0x08026dbc

0800c5a8 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <arm_rfft_fast_init_256_f32+0x14>
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ba:	e014      	b.n	800c5e6 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fc9c 	bl	800aefc <arm_cfft_init_128_f32>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 800c5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5d4:	e007      	b.n	800c5e6 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5dc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a03      	ldr	r2, [pc, #12]	; (800c5f0 <arm_rfft_fast_init_256_f32+0x48>)
 800c5e2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08026fbc 	.word	0x08026fbc

0800c5f4 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d102      	bne.n	800c608 <arm_rfft_fast_init_512_f32+0x14>
 800c602:	f04f 33ff 	mov.w	r3, #4294967295
 800c606:	e014      	b.n	800c632 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe fc52 	bl	800aeb4 <arm_cfft_init_256_f32>
 800c610:	4603      	mov	r3, r0
 800c612:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 800c61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c620:	e007      	b.n	800c632 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c628:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a03      	ldr	r2, [pc, #12]	; (800c63c <arm_rfft_fast_init_512_f32+0x48>)
 800c62e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	080273bc 	.word	0x080273bc

0800c640 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d102      	bne.n	800c654 <arm_rfft_fast_init_1024_f32+0x14>
 800c64e:	f04f 33ff 	mov.w	r3, #4294967295
 800c652:	e014      	b.n	800c67e <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe fc08 	bl	800ae6c <arm_cfft_init_512_f32>
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 800c668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c66c:	e007      	b.n	800c67e <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c674:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a03      	ldr	r2, [pc, #12]	; (800c688 <arm_rfft_fast_init_1024_f32+0x48>)
 800c67a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	08027bbc 	.word	0x08027bbc

0800c68c <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <arm_rfft_fast_init_2048_f32+0x14>
 800c69a:	f04f 33ff 	mov.w	r3, #4294967295
 800c69e:	e014      	b.n	800c6ca <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fbbe 	bl	800ae24 <arm_cfft_init_1024_f32>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 800c6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6b8:	e007      	b.n	800c6ca <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6c0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a03      	ldr	r2, [pc, #12]	; (800c6d4 <arm_rfft_fast_init_2048_f32+0x48>)
 800c6c6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08028bbc 	.word	0x08028bbc

0800c6d8 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d102      	bne.n	800c6ec <arm_rfft_fast_init_4096_f32+0x14>
 800c6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ea:	e014      	b.n	800c716 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe fb74 	bl	800addc <arm_cfft_init_2048_f32>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 800c700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c704:	e007      	b.n	800c716 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c70c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a03      	ldr	r2, [pc, #12]	; (800c720 <arm_rfft_fast_init_4096_f32+0x48>)
 800c712:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	0802abbc 	.word	0x0802abbc

0800c724 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 800c730:	887b      	ldrh	r3, [r7, #2]
 800c732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c736:	d031      	beq.n	800c79c <arm_rfft_fast_init_f32+0x78>
 800c738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c73c:	dc06      	bgt.n	800c74c <arm_rfft_fast_init_f32+0x28>
 800c73e:	2b40      	cmp	r3, #64	; 0x40
 800c740:	d038      	beq.n	800c7b4 <arm_rfft_fast_init_f32+0x90>
 800c742:	2b80      	cmp	r3, #128	; 0x80
 800c744:	d030      	beq.n	800c7a8 <arm_rfft_fast_init_f32+0x84>
 800c746:	2b20      	cmp	r3, #32
 800c748:	d03a      	beq.n	800c7c0 <arm_rfft_fast_init_f32+0x9c>
 800c74a:	e03f      	b.n	800c7cc <arm_rfft_fast_init_f32+0xa8>
 800c74c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c750:	d018      	beq.n	800c784 <arm_rfft_fast_init_f32+0x60>
 800c752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c756:	dc03      	bgt.n	800c760 <arm_rfft_fast_init_f32+0x3c>
 800c758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c75c:	d018      	beq.n	800c790 <arm_rfft_fast_init_f32+0x6c>
 800c75e:	e035      	b.n	800c7cc <arm_rfft_fast_init_f32+0xa8>
 800c760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c764:	d008      	beq.n	800c778 <arm_rfft_fast_init_f32+0x54>
 800c766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c76a:	d12f      	bne.n	800c7cc <arm_rfft_fast_init_f32+0xa8>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff ffb3 	bl	800c6d8 <arm_rfft_fast_init_4096_f32>
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
    break;
 800c776:	e02c      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7ff ff87 	bl	800c68c <arm_rfft_fast_init_2048_f32>
 800c77e:	4603      	mov	r3, r0
 800c780:	73fb      	strb	r3, [r7, #15]
    break;
 800c782:	e026      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff ff5b 	bl	800c640 <arm_rfft_fast_init_1024_f32>
 800c78a:	4603      	mov	r3, r0
 800c78c:	73fb      	strb	r3, [r7, #15]
    break;
 800c78e:	e020      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff ff2f 	bl	800c5f4 <arm_rfft_fast_init_512_f32>
 800c796:	4603      	mov	r3, r0
 800c798:	73fb      	strb	r3, [r7, #15]
    break;
 800c79a:	e01a      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff ff03 	bl	800c5a8 <arm_rfft_fast_init_256_f32>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a6:	e014      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff fed9 	bl	800c560 <arm_rfft_fast_init_128_f32>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b2:	e00e      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff feaf 	bl	800c518 <arm_rfft_fast_init_64_f32>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c7be:	e008      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff fe85 	bl	800c4d0 <arm_rfft_fast_init_32_f32>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ca:	e002      	b.n	800c7d2 <arm_rfft_fast_init_f32+0xae>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 800c7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d0:	e001      	b.n	800c7d6 <arm_rfft_fast_init_f32+0xb2>
    break;
  }

  return(status);
 800c7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800c7e4:	4807      	ldr	r0, [pc, #28]	; (800c804 <BSP_AUDIO_OUT_Error_CallBack+0x24>)
 800c7e6:	f7f6 fc49 	bl	800307c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 800c7ea:	4907      	ldr	r1, [pc, #28]	; (800c808 <BSP_AUDIO_OUT_Error_CallBack+0x28>)
 800c7ec:	200e      	movs	r0, #14
 800c7ee:	f7f6 fdbf 	bl	8003370 <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800c7f2:	bf00      	nop
 800c7f4:	2002      	movs	r0, #2
 800c7f6:	f7f5 fda1 	bl	800233c <BSP_PB_GetState>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
  {
    return;
 800c7fe:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	ffff0000 	.word	0xffff0000
 800c808:	0801ac1c 	.word	0x0801ac1c

0800c80c <AudioRec>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
int16_t* AudioRec (void)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
  uint32_t  block_number=0;
 800c812:	2300      	movs	r3, #0
 800c814:	60fb      	str	r3, [r7, #12]

  //AudioRec_SetHint();

  /* Initialize Audio Recorder */
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 800c816:	2202      	movs	r2, #2
 800c818:	2110      	movs	r1, #16
 800c81a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800c81e:	f7f6 f8b0 	bl	8002982 <BSP_AUDIO_IN_Init>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d112      	bne.n	800c84e <AudioRec+0x42>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c828:	f04f 30ff 	mov.w	r0, #4294967295
 800c82c:	f7f6 fc26 	bl	800307c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c830:	4855      	ldr	r0, [pc, #340]	; (800c988 <AudioRec+0x17c>)
 800c832:	f7f6 fc0b 	bl	800304c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 800c836:	f7f6 fb73 	bl	8002f20 <BSP_LCD_GetYSize>
 800c83a:	4603      	mov	r3, r0
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	3b5f      	subs	r3, #95	; 0x5f
 800c840:	b299      	uxth	r1, r3
 800c842:	2301      	movs	r3, #1
 800c844:	4a51      	ldr	r2, [pc, #324]	; (800c98c <AudioRec+0x180>)
 800c846:	2000      	movs	r0, #0
 800c848:	f7f6 fcce 	bl	80031e8 <BSP_LCD_DisplayStringAt>
 800c84c:	e01c      	b.n	800c888 <AudioRec+0x7c>
  }
  else
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295
 800c852:	f7f6 fc13 	bl	800307c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c856:	484c      	ldr	r0, [pc, #304]	; (800c988 <AudioRec+0x17c>)
 800c858:	f7f6 fbf8 	bl	800304c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 800c85c:	f7f6 fb60 	bl	8002f20 <BSP_LCD_GetYSize>
 800c860:	4603      	mov	r3, r0
 800c862:	b29b      	uxth	r3, r3
 800c864:	3b5f      	subs	r3, #95	; 0x5f
 800c866:	b299      	uxth	r1, r3
 800c868:	2301      	movs	r3, #1
 800c86a:	4a49      	ldr	r2, [pc, #292]	; (800c990 <AudioRec+0x184>)
 800c86c:	2000      	movs	r0, #0
 800c86e:	f7f6 fcbb 	bl	80031e8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800c872:	f7f6 fb55 	bl	8002f20 <BSP_LCD_GetYSize>
 800c876:	4603      	mov	r3, r0
 800c878:	b29b      	uxth	r3, r3
 800c87a:	3b50      	subs	r3, #80	; 0x50
 800c87c:	b299      	uxth	r1, r3
 800c87e:	2301      	movs	r3, #1
 800c880:	4a44      	ldr	r2, [pc, #272]	; (800c994 <AudioRec+0x188>)
 800c882:	2000      	movs	r0, #0
 800c884:	f7f6 fcb0 	bl	80031e8 <BSP_LCD_DisplayStringAt>
  }

  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800c888:	4b43      	ldr	r3, [pc, #268]	; (800c998 <AudioRec+0x18c>)
 800c88a:	2200      	movs	r2, #0
 800c88c:	601a      	str	r2, [r3, #0]

  /* Display the state on the screen */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c88e:	f04f 30ff 	mov.w	r0, #4294967295
 800c892:	f7f6 fbf3 	bl	800307c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c896:	4841      	ldr	r0, [pc, #260]	; (800c99c <AudioRec+0x190>)
 800c898:	f7f6 fbd8 	bl	800304c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 800c89c:	f7f6 fb40 	bl	8002f20 <BSP_LCD_GetYSize>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	3b50      	subs	r3, #80	; 0x50
 800c8a6:	b299      	uxth	r1, r3
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	4a3d      	ldr	r2, [pc, #244]	; (800c9a0 <AudioRec+0x194>)
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f7f6 fc9b 	bl	80031e8 <BSP_LCD_DisplayStringAt>

  /* Start Recording */
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 800c8b2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800c8b6:	483b      	ldr	r0, [pc, #236]	; (800c9a4 <AudioRec+0x198>)
 800c8b8:	f7f6 f8e2 	bl	8002a80 <BSP_AUDIO_IN_Record>

  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	e02e      	b.n	800c920 <AudioRec+0x114>
  {
    /* Wait end of half block recording */
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF){}
 800c8c2:	bf00      	nop
 800c8c4:	4b34      	ldr	r3, [pc, #208]	; (800c998 <AudioRec+0x18c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d1fb      	bne.n	800c8c4 <AudioRec+0xb8>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800c8cc:	4b32      	ldr	r3, [pc, #200]	; (800c998 <AudioRec+0x18c>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
    /* Copy recorded 1st half block in SDRAM */
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	039b      	lsls	r3, r3, #14
 800c8d8:	1a9b      	subs	r3, r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	461a      	mov	r2, r3
 800c8de:	4b32      	ldr	r3, [pc, #200]	; (800c9a8 <AudioRec+0x19c>)
 800c8e0:	4413      	add	r3, r2
 800c8e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c8e6:	492f      	ldr	r1, [pc, #188]	; (800c9a4 <AudioRec+0x198>)
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f00b f983 	bl	8017bf4 <memcpy>
           internal_buffer,
           AUDIO_BLOCK_SIZE);

    /* Wait end of one block recording */
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL){}
 800c8ee:	bf00      	nop
 800c8f0:	4b29      	ldr	r3, [pc, #164]	; (800c998 <AudioRec+0x18c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d1fb      	bne.n	800c8f0 <AudioRec+0xe4>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800c8f8:	4b27      	ldr	r3, [pc, #156]	; (800c998 <AudioRec+0x18c>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]
    /* Copy recorded 2nd half block in SDRAM */
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	4613      	mov	r3, r2
 800c902:	039b      	lsls	r3, r3, #14
 800c904:	1a9b      	subs	r3, r3, r2
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	461a      	mov	r2, r3
 800c90a:	4b28      	ldr	r3, [pc, #160]	; (800c9ac <AudioRec+0x1a0>)
 800c90c:	4413      	add	r3, r2
 800c90e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c912:	4927      	ldr	r1, [pc, #156]	; (800c9b0 <AudioRec+0x1a4>)
 800c914:	4618      	mov	r0, r3
 800c916:	f00b f96d 	bl	8017bf4 <memcpy>
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	3301      	adds	r3, #1
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0cd      	beq.n	800c8c2 <AudioRec+0xb6>
           (uint16_t *)(&internal_buffer[AUDIO_BLOCK_SIZE/2]),
           AUDIO_BLOCK_SIZE);
  }

  /* Stop recorder */
  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800c926:	2002      	movs	r0, #2
 800c928:	f7f6 f8c2 	bl	8002ab0 <BSP_AUDIO_IN_Stop>

  //Transform into mono audio
  int16_t * recorded_audio = (int16_t *)AUDIO_REC_START_ADDR;
 800c92c:	4b1e      	ldr	r3, [pc, #120]	; (800c9a8 <AudioRec+0x19c>)
 800c92e:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < AUDIO_BLOCK_SIZE/2; i++){
 800c930:	2300      	movs	r3, #0
 800c932:	60bb      	str	r3, [r7, #8]
 800c934:	e01d      	b.n	800c972 <AudioRec+0x166>
	  recorded_audio[i] = ( recorded_audio[i*2] + recorded_audio[(i*2)+1] )/2;
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	461a      	mov	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c944:	4619      	mov	r1, r3
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	3302      	adds	r3, #2
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	4413      	add	r3, r2
 800c950:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c954:	440b      	add	r3, r1
 800c956:	2b00      	cmp	r3, #0
 800c958:	da00      	bge.n	800c95c <AudioRec+0x150>
 800c95a:	3301      	adds	r3, #1
 800c95c:	105b      	asrs	r3, r3, #1
 800c95e:	4619      	mov	r1, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	4413      	add	r3, r2
 800c968:	b20a      	sxth	r2, r1
 800c96a:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < AUDIO_BLOCK_SIZE/2; i++){
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	3301      	adds	r3, #1
 800c970:	60bb      	str	r3, [r7, #8]
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 800c978:	4293      	cmp	r3, r2
 800c97a:	d9dc      	bls.n	800c936 <AudioRec+0x12a>
  }


  return (int16_t *)AUDIO_REC_START_ADDR;
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <AudioRec+0x19c>)
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	ffff0000 	.word	0xffff0000
 800c98c:	0801ac34 	.word	0x0801ac34
 800c990:	0801ac50 	.word	0x0801ac50
 800c994:	0801ac6c 	.word	0x0801ac6c
 800c998:	200212d4 	.word	0x200212d4
 800c99c:	ff0000ff 	.word	0xff0000ff
 800c9a0:	0801ac84 	.word	0x0801ac84
 800c9a4:	2000aca0 	.word	0x2000aca0
 800c9a8:	c0115800 	.word	0xc0115800
 800c9ac:	c011d7fe 	.word	0xc011d7fe
 800c9b0:	20012c9e 	.word	0x20012c9e

0800c9b4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Manages the DMA Transfer complete interrupt.
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	af00      	add	r7, sp, #0
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 800c9b8:	4b03      	ldr	r3, [pc, #12]	; (800c9c8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	601a      	str	r2, [r3, #0]
  return;
 800c9be:	bf00      	nop
}
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	200212d4 	.word	0x200212d4

0800c9cc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800c9d0:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	601a      	str	r2, [r3, #0]
  return;
 800c9d6:	bf00      	nop
}
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	200212d4 	.word	0x200212d4

0800c9e4 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800c9e8:	480c      	ldr	r0, [pc, #48]	; (800ca1c <BSP_AUDIO_IN_Error_CallBack+0x38>)
 800c9ea:	f7f6 fb47 	bl	800307c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 800c9ee:	f7f6 fb79 	bl	80030e4 <BSP_LCD_GetFont>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	88db      	ldrh	r3, [r3, #6]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	00d2      	lsls	r2, r2, #3
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	b299      	uxth	r1, r3
 800ca00:	2301      	movs	r3, #1
 800ca02:	4a07      	ldr	r2, [pc, #28]	; (800ca20 <BSP_AUDIO_IN_Error_CallBack+0x3c>)
 800ca04:	2000      	movs	r0, #0
 800ca06:	f7f6 fbef 	bl	80031e8 <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800ca0a:	bf00      	nop
 800ca0c:	2002      	movs	r0, #2
 800ca0e:	f7f5 fc95 	bl	800233c <BSP_PB_GetState>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
  {
    return;
 800ca16:	bf00      	nop
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	ffff0000 	.word	0xffff0000
 800ca20:	0801acd4 	.word	0x0801acd4

0800ca24 <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 800ca24:	b590      	push	{r4, r7, lr}
 800ca26:	b0a3      	sub	sp, #140	; 0x8c
 800ca28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800ca2a:	2308      	movs	r3, #8
 800ca2c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800ca2e:	23c0      	movs	r3, #192	; 0xc0
 800ca30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800ca32:	2305      	movs	r3, #5
 800ca34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800ca36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ca3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ca3c:	1d3b      	adds	r3, r7, #4
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fa fb0e 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 800ca44:	f7f6 f9e8 	bl	8002e18 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 800ca48:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f7f6 fa7b 	bl	8002f48 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 800ca52:	f7f6 fa51 	bl	8002ef8 <BSP_LCD_GetXSize>
 800ca56:	4604      	mov	r4, r0
 800ca58:	f7f6 fa62 	bl	8002f20 <BSP_LCD_GetYSize>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	fb03 f304 	mul.w	r3, r3, r4
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 800ca62:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4619      	mov	r1, r3
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	f7f6 fa6c 	bl	8002f48 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 800ca70:	f7f6 fe4a 	bl	8003708 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 800ca74:	2000      	movs	r0, #0
 800ca76:	f7f6 fac7 	bl	8003008 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800ca7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ca7e:	f7f6 fb47 	bl	8003110 <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 800ca82:	2001      	movs	r0, #1
 800ca84:	f7f6 fac0 	bl	8003008 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800ca88:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ca8c:	f7f6 fb40 	bl	8003110 <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 800ca90:	2100      	movs	r1, #0
 800ca92:	2000      	movs	r0, #0
 800ca94:	f7f6 fac8 	bl	8003028 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 800ca98:	2164      	movs	r1, #100	; 0x64
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	f7f6 fac4 	bl	8003028 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800caa0:	4803      	ldr	r0, [pc, #12]	; (800cab0 <_Z8lcdsetupv+0x8c>)
 800caa2:	f7f6 fad3 	bl	800304c <BSP_LCD_SetTextColor>
}
 800caa6:	bf00      	nop
 800caa8:	378c      	adds	r7, #140	; 0x8c
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd90      	pop	{r4, r7, pc}
 800caae:	bf00      	nop
 800cab0:	ff0000ff 	.word	0xff0000ff

0800cab4 <_Z8printLogPKc>:
#define RUNS 1
static int profile_i;
static int start, end;
static char buf[100];

void printLog(const char *s) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
	static int is_initialized = 0;
	if (!is_initialized) {
 800cabc:	4b1c      	ldr	r3, [pc, #112]	; (800cb30 <_Z8printLogPKc+0x7c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d126      	bne.n	800cb12 <_Z8printLogPKc+0x5e>
		UART.Instance = USART1;
 800cac4:	4b1b      	ldr	r3, [pc, #108]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cac6:	4a1c      	ldr	r2, [pc, #112]	; (800cb38 <_Z8printLogPKc+0x84>)
 800cac8:	601a      	str	r2, [r3, #0]
		UART.Init.BaudRate = 115200;
 800caca:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cacc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cad0:	605a      	str	r2, [r3, #4]
		UART.Init.WordLength = UART_WORDLENGTH_8B;
 800cad2:	4b18      	ldr	r3, [pc, #96]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	609a      	str	r2, [r3, #8]
		UART.Init.StopBits = UART_STOPBITS_1;
 800cad8:	4b16      	ldr	r3, [pc, #88]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cada:	2200      	movs	r2, #0
 800cadc:	60da      	str	r2, [r3, #12]
		UART.Init.Parity = UART_PARITY_NONE;
 800cade:	4b15      	ldr	r3, [pc, #84]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	611a      	str	r2, [r3, #16]
		UART.Init.Mode = UART_MODE_TX_RX;
 800cae4:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cae6:	220c      	movs	r2, #12
 800cae8:	615a      	str	r2, [r3, #20]
		UART.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <_Z8printLogPKc+0x80>)
 800caec:	2200      	movs	r2, #0
 800caee:	619a      	str	r2, [r3, #24]
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800caf0:	4b10      	ldr	r3, [pc, #64]	; (800cb34 <_Z8printLogPKc+0x80>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	61da      	str	r2, [r3, #28]
		UART.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800caf6:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <_Z8printLogPKc+0x80>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	621a      	str	r2, [r3, #32]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cafc:	4b0d      	ldr	r3, [pc, #52]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800cb02:	480c      	ldr	r0, [pc, #48]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cb04:	f7fb fd0c 	bl	8008520 <HAL_UART_Init>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
			//Error handling
		}
		is_initialized = 1;
 800cb0c:	4b08      	ldr	r3, [pc, #32]	; (800cb30 <_Z8printLogPKc+0x7c>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Transmit(&UART, (uint8_t*) s, strlen(s), 10);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7f3 fc2c 	bl	8000370 <strlen>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	230a      	movs	r3, #10
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	4804      	ldr	r0, [pc, #16]	; (800cb34 <_Z8printLogPKc+0x80>)
 800cb22:	f7fb fd4e 	bl	80085c2 <HAL_UART_Transmit>
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	2001ad14 	.word	0x2001ad14
 800cb34:	2001ac9c 	.word	0x2001ac9c
 800cb38:	40011000 	.word	0x40011000

0800cb3c <_Z11recieveCharPc>:

void recieveChar(char *s) {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
	static int is_initialized = 0;
	if (!is_initialized) {
 800cb44:	4b1a      	ldr	r3, [pc, #104]	; (800cbb0 <_Z11recieveCharPc+0x74>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d126      	bne.n	800cb9a <_Z11recieveCharPc+0x5e>
		UART.Instance = USART1;
 800cb4c:	4b19      	ldr	r3, [pc, #100]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb4e:	4a1a      	ldr	r2, [pc, #104]	; (800cbb8 <_Z11recieveCharPc+0x7c>)
 800cb50:	601a      	str	r2, [r3, #0]
		UART.Init.BaudRate = 115200;
 800cb52:	4b18      	ldr	r3, [pc, #96]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cb58:	605a      	str	r2, [r3, #4]
		UART.Init.WordLength = UART_WORDLENGTH_8B;
 800cb5a:	4b16      	ldr	r3, [pc, #88]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	609a      	str	r2, [r3, #8]
		UART.Init.StopBits = UART_STOPBITS_1;
 800cb60:	4b14      	ldr	r3, [pc, #80]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	60da      	str	r2, [r3, #12]
		UART.Init.Parity = UART_PARITY_NONE;
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	611a      	str	r2, [r3, #16]
		UART.Init.Mode = UART_MODE_TX_RX;
 800cb6c:	4b11      	ldr	r3, [pc, #68]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb6e:	220c      	movs	r2, #12
 800cb70:	615a      	str	r2, [r3, #20]
		UART.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb72:	4b10      	ldr	r3, [pc, #64]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	619a      	str	r2, [r3, #24]
		UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb78:	4b0e      	ldr	r3, [pc, #56]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	61da      	str	r2, [r3, #28]
		UART.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	621a      	str	r2, [r3, #32]
		UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb84:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&UART) != HAL_OK) {
 800cb8a:	480a      	ldr	r0, [pc, #40]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cb8c:	f7fb fcc8 	bl	8008520 <HAL_UART_Init>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
			//Error handling
		}
		is_initialized = 1;
 800cb94:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <_Z11recieveCharPc+0x74>)
 800cb96:	2201      	movs	r2, #1
 800cb98:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive(&UART, (uint8_t*) s, 1, 10);
 800cb9a:	230a      	movs	r3, #10
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	4804      	ldr	r0, [pc, #16]	; (800cbb4 <_Z11recieveCharPc+0x78>)
 800cba2:	f7fb fd9a 	bl	80086da <HAL_UART_Receive>
}
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	2001ad18 	.word	0x2001ad18
 800cbb4:	2001ac9c 	.word	0x2001ac9c
 800cbb8:	40011000 	.word	0x40011000

0800cbbc <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	ed87 0a01 	vstr	s0, [r7, #4]
 800cbc6:	edd7 7a01 	vldr	s15, [r7, #4]
 800cbca:	fef8 7a67 	vrinta.f32	s15, s15
 800cbce:	eeb0 0a67 	vmov.f32	s0, s15
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <_Z5traini>:
		"   KW: NO    ", "   KW: UP    ", "  KW: DOWN   ", "  KW: LEFT   ",
		"  KW: RIGHT  ", "   KW: ON    ", "  KW: OFF   " };

int in_mode = 0; // 0 is using dummy inputs; 1 is using microphone
int t_mode = 0; //0 for Inference, 1 for Training
void train(int cls) {
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) { //One-hot encoding
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	60fb      	str	r3, [r7, #12]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b09      	cmp	r3, #9
 800cbec:	dc16      	bgt.n	800cc1c <_Z5traini+0x40>
		if (i == cls) {
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d107      	bne.n	800cc06 <_Z5traini+0x2a>
			labels[i] = 1.0f;
 800cbf6:	4a0d      	ldr	r2, [pc, #52]	; (800cc2c <_Z5traini+0x50>)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	e006      	b.n	800cc14 <_Z5traini+0x38>
		} else {
			labels[i] = 0.0f;
 800cc06:	4a09      	ldr	r2, [pc, #36]	; (800cc2c <_Z5traini+0x50>)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f04f 0200 	mov.w	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++) { //One-hot encoding
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3301      	adds	r3, #1
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	e7e5      	b.n	800cbe8 <_Z5traini+0xc>
		}
	}
	invoke(labels);
 800cc1c:	4803      	ldr	r0, [pc, #12]	; (800cc2c <_Z5traini+0x50>)
 800cc1e:	f003 f869 	bl	800fcf4 <invoke>
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2001ad28 	.word	0x2001ad28

0800cc30 <_Z27invoke_new_weights_givenimgPa>:

void invoke_new_weights_givenimg(signed char *out_int8) {
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
	invoke_inf();
 800cc38:	f003 fa14 	bl	8010064 <invoke_inf>
	signed char *output = (signed char*) getOutput();
 800cc3c:	f003 f84e 	bl	800fcdc <getOutput>
 800cc40:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < 10; i++)
 800cc42:	2300      	movs	r3, #0
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b09      	cmp	r3, #9
 800cc4a:	dc0c      	bgt.n	800cc66 <_Z27invoke_new_weights_givenimgPa+0x36>
		out_int8[i] = output[i];
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	440b      	add	r3, r1
 800cc58:	f992 2000 	ldrsb.w	r2, [r2]
 800cc5c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3301      	adds	r3, #1
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	e7ef      	b.n	800cc46 <_Z27invoke_new_weights_givenimgPa+0x16>
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <main>:

#define LCD_BACKLIGHT_PIN GPIO_PIN_3
#define LCD_BACKLIGHT_PORT GPIOK

LTDC_HandleTypeDef hltdc;
int main(void) {
 800cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc72:	b0e1      	sub	sp, #388	; 0x184
 800cc74:	af0e      	add	r7, sp, #56	; 0x38
	char showbuf[150];
	static uint8_t first = 1;
	uint8_t in_idx = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	/* Configure the MPU attributes */
	MPU_Config();
 800cc7c:	f000 fcea 	bl	800d654 <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 800cc80:	f000 fc72 	bl	800d568 <_ZL16CPU_CACHE_Enablev>
	HAL_Init();
 800cc84:	f7f7 f90e 	bl	8003ea4 <HAL_Init>

	SystemClock_Config();
 800cc88:	f000 fc20 	bl	800d4cc <_ZL18SystemClock_Configv>

	MX_GPIO_Init();
 800cc8c:	f000 fd5a 	bl	800d744 <_ZL12MX_GPIO_Initv>

	ResetTimer(); //Cycle counter
 800cc90:	f7fc fa9c 	bl	80091cc <ResetTimer>

	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800cc94:	2100      	movs	r1, #0
 800cc96:	2002      	movs	r0, #2
 800cc98:	f7f5 fac4 	bl	8002224 <BSP_PB_Init>

	lcdsetup();
 800cc9c:	f7ff fec2 	bl	800ca24 <_Z8lcdsetupv>
 800cca0:	2300      	movs	r3, #0
 800cca2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800cca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccaa:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800ccae:	f3bf 8f6f 	isb	sy
//	 HAL_SuspendTick();
//	 HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
//	 while(1){}

	// Enable the clock for GPIO port G
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 800ccb2:	4bb9      	ldr	r3, [pc, #740]	; (800cf98 <main+0x328>)
 800ccb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb6:	4ab8      	ldr	r2, [pc, #736]	; (800cf98 <main+0x328>)
 800ccb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccbc:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PG7 as output
	GPIOG->MODER |= GPIO_MODER_MODER7_0;
 800ccbe:	4bb7      	ldr	r3, [pc, #732]	; (800cf9c <main+0x32c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4ab6      	ldr	r2, [pc, #728]	; (800cf9c <main+0x32c>)
 800ccc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ccc8:	6013      	str	r3, [r2, #0]

	const uint8_t shift = 20; // 20 ms
 800ccca:	2314      	movs	r3, #20
 800cccc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	const uint8_t window_length = 40; // 40 ms
 800ccd0:	2328      	movs	r3, #40	; 0x28
 800ccd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	const uint8_t num_mfcc_coef = 10;
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	const uint16_t sampFreq = 16000;
 800ccdc:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800cce0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	MFCCData mfcc_data = MFCCInitialize(window_length * 16, sampFreq,
			num_mfcc_coef); //640 samples window size, 16KHz sampling freq., and 10 MFCC features
 800cce4:	f107 0320 	add.w	r3, r7, #32
 800cce8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800ccec:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800cfa0 <main+0x330>
 800ccf0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fc fe9f 	bl	8009a38 <MFCCInitialize>

	signed char *input = getInput(); // &buffer0[8000]
 800ccfa:	f002 ffe1 	bl	800fcc0 <getInput>
 800ccfe:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	int got_input = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	int16_t *mono_audio;
	Input_Mode_Hint();
 800cd08:	f000 ff7e 	bl	800dc08 <_ZL15Input_Mode_Hintv>
	while (1) {

		uint8_t button = BSP_PB_GetState(BUTTON_KEY) != RESET;
 800cd0c:	2002      	movs	r0, #2
 800cd0e:	f7f5 fb15 	bl	800233c <BSP_PB_GetState>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	bf14      	ite	ne
 800cd18:	2301      	movne	r3, #1
 800cd1a:	2300      	moveq	r3, #0
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

		char s[1];
		s[0] = 'c';
 800cd22:	f107 031c 	add.w	r3, r7, #28
 800cd26:	2263      	movs	r2, #99	; 0x63
 800cd28:	701a      	strb	r2, [r3, #0]
		recieveChar(s);
 800cd2a:	f107 031c 	add.w	r3, r7, #28
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7ff ff04 	bl	800cb3c <_Z11recieveCharPc>
		if (s[0] == 'T') { 	//Training
 800cd34:	f107 031c 	add.w	r3, r7, #28
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b54      	cmp	r3, #84	; 0x54
 800cd3c:	d10b      	bne.n	800cd56 <main+0xe6>
			t_mode = 1;
 800cd3e:	4b99      	ldr	r3, [pc, #612]	; (800cfa4 <main+0x334>)
 800cd40:	2201      	movs	r2, #1
 800cd42:	601a      	str	r2, [r3, #0]
			first = 1;
 800cd44:	4b98      	ldr	r3, [pc, #608]	; (800cfa8 <main+0x338>)
 800cd46:	2201      	movs	r2, #1
 800cd48:	701a      	strb	r2, [r3, #0]
			got_input = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			Input_Mode_Hint();
 800cd50:	f000 ff5a 	bl	800dc08 <_ZL15Input_Mode_Hintv>
 800cd54:	e040      	b.n	800cdd8 <main+0x168>
//					(char*) "  TRAINING MODE  ", CENTER_MODE);
//			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
//			BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
//			BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95,
//					(char*) "   Training KW ?   ", CENTER_MODE);
		} else if (s[0] == 'I') { 	//Inference
 800cd56:	f107 031c 	add.w	r3, r7, #28
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	2b49      	cmp	r3, #73	; 0x49
 800cd5e:	d10e      	bne.n	800cd7e <main+0x10e>
			t_mode = 0;
 800cd60:	4b90      	ldr	r3, [pc, #576]	; (800cfa4 <main+0x334>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
			got_input = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			first = 1;
 800cd6c:	4b8e      	ldr	r3, [pc, #568]	; (800cfa8 <main+0x338>)
 800cd6e:	2201      	movs	r2, #1
 800cd70:	701a      	strb	r2, [r3, #0]
			in_idx = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			Input_Mode_Hint();
 800cd78:	f000 ff46 	bl	800dc08 <_ZL15Input_Mode_Hintv>
 800cd7c:	e02c      	b.n	800cdd8 <main+0x168>
		} else if (s[0] == '+') { 	//Go to next sample in dummy inputs
 800cd7e:	f107 031c 	add.w	r3, r7, #28
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	2b2b      	cmp	r3, #43	; 0x2b
 800cd86:	d10c      	bne.n	800cda2 <main+0x132>
			in_idx++;
 800cd88:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			if (in_idx == 28) {
 800cd92:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800cd96:	2b1c      	cmp	r3, #28
 800cd98:	d11e      	bne.n	800cdd8 <main+0x168>
				in_idx = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800cda0:	e01a      	b.n	800cdd8 <main+0x168>
			}
		} else if (s[0] == 'R') { 	//Input Mode: Record audio
 800cda2:	f107 031c 	add.w	r3, r7, #28
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b52      	cmp	r3, #82	; 0x52
 800cdaa:	d108      	bne.n	800cdbe <main+0x14e>
			in_mode = 1;
 800cdac:	4b7f      	ldr	r3, [pc, #508]	; (800cfac <main+0x33c>)
 800cdae:	2201      	movs	r2, #1
 800cdb0:	601a      	str	r2, [r3, #0]
			Input_Mode_Hint();
 800cdb2:	f000 ff29 	bl	800dc08 <_ZL15Input_Mode_Hintv>
			got_input = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800cdbc:	e00c      	b.n	800cdd8 <main+0x168>
		} else if (s[0] == 'D') {		//Input Mode: Dummy Inputs
 800cdbe:	f107 031c 	add.w	r3, r7, #28
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b44      	cmp	r3, #68	; 0x44
 800cdc6:	d107      	bne.n	800cdd8 <main+0x168>
			in_mode = 0;
 800cdc8:	4b78      	ldr	r3, [pc, #480]	; (800cfac <main+0x33c>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]
			first = 1;
 800cdce:	4b76      	ldr	r3, [pc, #472]	; (800cfa8 <main+0x338>)
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	701a      	strb	r2, [r3, #0]
			Input_Mode_Hint();
 800cdd4:	f000 ff18 	bl	800dc08 <_ZL15Input_Mode_Hintv>
		}

		static float x_scale = 0.6830914665670956; // Input scale calculated for GSC v2

		if (in_mode == 1) {
 800cdd8:	4b74      	ldr	r3, [pc, #464]	; (800cfac <main+0x33c>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	f040 8094 	bne.w	800cf0a <main+0x29a>
			if (button) {
 800cde2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f000 80e8 	beq.w	800cfbc <main+0x34c>
				got_input = 1;
 800cdec:	2301      	movs	r3, #1
 800cdee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				Input_Mode_Hint();
 800cdf2:	f000 ff09 	bl	800dc08 <_ZL15Input_Mode_Hintv>
//				int start_cycles = getCycles();
//				StartTimer();
				// Turn on the GPIO pin
				GPIO_PORT->BSRR = GPIO_PIN;
 800cdf6:	4b69      	ldr	r3, [pc, #420]	; (800cf9c <main+0x32c>)
 800cdf8:	2280      	movs	r2, #128	; 0x80
 800cdfa:	619a      	str	r2, [r3, #24]
				mono_audio = AudioRec();
 800cdfc:	f7ff fd06 	bl	800c80c <AudioRec>
 800ce00:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
				// Turn off PG7
				GPIO_PORT->BSRR = GPIO_PIN << 16;
 800ce04:	4b65      	ldr	r3, [pc, #404]	; (800cf9c <main+0x32c>)
 800ce06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ce0a:	619a      	str	r2, [r3, #24]
//				StopTimer();
//				int end_cycles = getCycles();
//				sprintf(showbuf, "%d", (end_cycles-start_cycles));
//				printLog(showbuf);
				Input_Mode_Hint();
 800ce0c:	f000 fefc 	bl	800dc08 <_ZL15Input_Mode_Hintv>
				for (int i = 0; i < 320; i++) { //To eliminate the noise caused by pressing the button
 800ce10:	2300      	movs	r3, #0
 800ce12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800ce16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ce1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800ce1e:	da0d      	bge.n	800ce3c <main+0x1cc>
					mono_audio[i] = 0;
 800ce20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ce2a:	4413      	add	r3, r2
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i < 320; i++) { //To eliminate the noise caused by pressing the button
 800ce30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ce34:	3301      	adds	r3, #1
 800ce36:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800ce3a:	e7ec      	b.n	800ce16 <main+0x1a6>
				}
				//mono_audio = &audio_array[0];
				for (uint8_t i = 0; i < 49; i++) {
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800ce42:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800ce46:	2b30      	cmp	r3, #48	; 0x30
 800ce48:	f200 80b8 	bhi.w	800cfbc <main+0x34c>
//					if (i == 25){
//						i = 25;
//					}
					MFCCCompute((int16_t*) (&mono_audio[shift * 16 * i]),
 800ce4c:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800ce50:	4613      	mov	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	01db      	lsls	r3, r3, #7
 800ce58:	461a      	mov	r2, r3
 800ce5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce5e:	eb03 0c02 	add.w	ip, r3, r2
 800ce62:	f107 0620 	add.w	r6, r7, #32
 800ce66:	466d      	mov	r5, sp
 800ce68:	f106 040c 	add.w	r4, r6, #12
 800ce6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce78:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ce7c:	e885 0003 	stmia.w	r5, {r0, r1}
 800ce80:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ce84:	4660      	mov	r0, ip
 800ce86:	f7fc fb63 	bl	8009550 <MFCCCompute>
							mfcc_data);
					for (uint8_t j = 0; j < num_mfcc_coef; j++) {
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 800ce90:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800ce94:	2b09      	cmp	r3, #9
 800ce96:	d832      	bhi.n	800cefe <main+0x28e>
						input[i * 10 + j] = (int8_t) (round(
								mfcc_data.melCoefficients[j] / x_scale) - 134);
 800ce98:	f107 0320 	add.w	r3, r7, #32
 800ce9c:	68da      	ldr	r2, [r3, #12]
 800ce9e:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	ed93 7a00 	vldr	s14, [r3]
						input[i * 10 + j] = (int8_t) (round(
 800ceaa:	4b41      	ldr	r3, [pc, #260]	; (800cfb0 <main+0x340>)
 800ceac:	edd3 7a00 	vldr	s15, [r3]
 800ceb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ceb4:	eeb0 0a66 	vmov.f32	s0, s13
 800ceb8:	f7ff fe80 	bl	800cbbc <_ZSt5roundf>
 800cebc:	eeb0 7a40 	vmov.f32	s14, s0
								mfcc_data.melCoefficients[j] / x_scale) - 134);
 800cec0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800cfb4 <main+0x344>
 800cec4:	ee77 7a67 	vsub.f32	s15, s14, s15
						input[i * 10 + j] = (int8_t) (round(
 800cec8:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	461a      	mov	r2, r3
 800ced6:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800ceda:	4413      	add	r3, r2
 800cedc:	461a      	mov	r2, r3
 800cede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cee2:	4413      	add	r3, r2
 800cee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cee8:	edc7 7a01 	vstr	s15, [r7, #4]
 800ceec:	793a      	ldrb	r2, [r7, #4]
 800ceee:	b252      	sxtb	r2, r2
 800cef0:	701a      	strb	r2, [r3, #0]
					for (uint8_t j = 0; j < num_mfcc_coef; j++) {
 800cef2:	f897 313a 	ldrb.w	r3, [r7, #314]	; 0x13a
 800cef6:	3301      	adds	r3, #1
 800cef8:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a
 800cefc:	e7c8      	b.n	800ce90 <main+0x220>
				for (uint8_t i = 0; i < 49; i++) {
 800cefe:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800cf02:	3301      	adds	r3, #1
 800cf04:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800cf08:	e79b      	b.n	800ce42 <main+0x1d2>
					}
				}
			}
		} else if (in_mode == 0) {
 800cf0a:	4b28      	ldr	r3, [pc, #160]	; (800cfac <main+0x33c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d154      	bne.n	800cfbc <main+0x34c>
			if (first || (s[0] == '+')) {
 800cf12:	4b25      	ldr	r3, [pc, #148]	; (800cfa8 <main+0x338>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d104      	bne.n	800cf24 <main+0x2b4>
 800cf1a:	f107 031c 	add.w	r3, r7, #28
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b2b      	cmp	r3, #43	; 0x2b
 800cf22:	d14b      	bne.n	800cfbc <main+0x34c>
				first = 0;
 800cf24:	4b20      	ldr	r3, [pc, #128]	; (800cfa8 <main+0x338>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	701a      	strb	r2, [r3, #0]
				got_input = 1;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				//Converts one of the dummy inputs in a 1D array to input the inference
				for (int i = 0; i < 490; i++) {
 800cf30:	2300      	movs	r3, #0
 800cf32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800cf36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf3a:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 800cf3e:	da3d      	bge.n	800cfbc <main+0x34c>
					input[i] = (int8_t) (round(ins[in_idx][i] / x_scale) - 134);
 800cf40:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800cf44:	4a1c      	ldr	r2, [pc, #112]	; (800cfb8 <main+0x348>)
 800cf46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	ed93 7a00 	vldr	s14, [r3]
 800cf56:	4b16      	ldr	r3, [pc, #88]	; (800cfb0 <main+0x340>)
 800cf58:	edd3 7a00 	vldr	s15, [r3]
 800cf5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cf60:	eeb0 0a66 	vmov.f32	s0, s13
 800cf64:	f7ff fe2a 	bl	800cbbc <_ZSt5roundf>
 800cf68:	eeb0 7a40 	vmov.f32	s14, s0
 800cf6c:	eddf 7a11 	vldr	s15, [pc, #68]	; 800cfb4 <main+0x344>
 800cf70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf78:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800cf7c:	4413      	add	r3, r2
 800cf7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf82:	edc7 7a01 	vstr	s15, [r7, #4]
 800cf86:	793a      	ldrb	r2, [r7, #4]
 800cf88:	b252      	sxtb	r2, r2
 800cf8a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 490; i++) {
 800cf8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cf90:	3301      	adds	r3, #1
 800cf92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800cf96:	e7ce      	b.n	800cf36 <main+0x2c6>
 800cf98:	40023800 	.word	0x40023800
 800cf9c:	40021800 	.word	0x40021800
 800cfa0:	467a0000 	.word	0x467a0000
 800cfa4:	2001ad54 	.word	0x2001ad54
 800cfa8:	20009ae8 	.word	0x20009ae8
 800cfac:	2001ad50 	.word	0x2001ad50
 800cfb0:	20009aec 	.word	0x20009aec
 800cfb4:	43060000 	.word	0x43060000
 800cfb8:	20009a0c 	.word	0x20009a0c
				}
			}
		}

		if (t_mode) {
 800cfbc:	4ba2      	ldr	r3, [pc, #648]	; (800d248 <main+0x5d8>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 81e5 	beq.w	800d390 <main+0x720>
			if (got_input) {
 800cfc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f43f ae9e 	beq.w	800cd0c <main+0x9c>
				if ((s[0] == '0' || s[0] == '1' || s[0] == '2' || s[0] == '3'
 800cfd0:	f107 031c 	add.w	r3, r7, #28
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b30      	cmp	r3, #48	; 0x30
 800cfd8:	d02d      	beq.n	800d036 <main+0x3c6>
 800cfda:	f107 031c 	add.w	r3, r7, #28
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	2b31      	cmp	r3, #49	; 0x31
 800cfe2:	d028      	beq.n	800d036 <main+0x3c6>
 800cfe4:	f107 031c 	add.w	r3, r7, #28
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b32      	cmp	r3, #50	; 0x32
 800cfec:	d023      	beq.n	800d036 <main+0x3c6>
 800cfee:	f107 031c 	add.w	r3, r7, #28
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b33      	cmp	r3, #51	; 0x33
 800cff6:	d01e      	beq.n	800d036 <main+0x3c6>
						|| s[0] == '4' || s[0] == '5' || s[0] == '6'
 800cff8:	f107 031c 	add.w	r3, r7, #28
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	2b34      	cmp	r3, #52	; 0x34
 800d000:	d019      	beq.n	800d036 <main+0x3c6>
 800d002:	f107 031c 	add.w	r3, r7, #28
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	2b35      	cmp	r3, #53	; 0x35
 800d00a:	d014      	beq.n	800d036 <main+0x3c6>
 800d00c:	f107 031c 	add.w	r3, r7, #28
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	2b36      	cmp	r3, #54	; 0x36
 800d014:	d00f      	beq.n	800d036 <main+0x3c6>
						|| s[0] == '7' || s[0] == '8' || s[0] == '9')) {
 800d016:	f107 031c 	add.w	r3, r7, #28
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b37      	cmp	r3, #55	; 0x37
 800d01e:	d00a      	beq.n	800d036 <main+0x3c6>
 800d020:	f107 031c 	add.w	r3, r7, #28
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b38      	cmp	r3, #56	; 0x38
 800d028:	d005      	beq.n	800d036 <main+0x3c6>
 800d02a:	f107 031c 	add.w	r3, r7, #28
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b39      	cmp	r3, #57	; 0x39
 800d032:	f040 819a 	bne.w	800d36a <main+0x6fa>
					Input_Mode_Hint();
 800d036:	f000 fde7 	bl	800dc08 <_ZL15Input_Mode_Hintv>
					BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d03a:	f04f 30ff 	mov.w	r0, #4294967295
 800d03e:	f7f6 f81d 	bl	800307c <BSP_LCD_SetBackColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d042:	4882      	ldr	r0, [pc, #520]	; (800d24c <main+0x5dc>)
 800d044:	f7f6 f802 	bl	800304c <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 115,
 800d048:	f7f5 ff6a 	bl	8002f20 <BSP_LCD_GetYSize>
 800d04c:	4603      	mov	r3, r0
 800d04e:	b29b      	uxth	r3, r3
 800d050:	3b73      	subs	r3, #115	; 0x73
 800d052:	b299      	uxth	r1, r3
 800d054:	2301      	movs	r3, #1
 800d056:	4a7e      	ldr	r2, [pc, #504]	; (800d250 <main+0x5e0>)
 800d058:	2000      	movs	r0, #0
 800d05a:	f7f6 f8c5 	bl	80031e8 <BSP_LCD_DisplayStringAt>
							(char*) "  TRAINING MODE  ", CENTER_MODE);
					int label = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

					if (s[0] == '0') {
 800d064:	f107 031c 	add.w	r3, r7, #28
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	2b30      	cmp	r3, #48	; 0x30
 800d06c:	d10b      	bne.n	800d086 <main+0x416>
						label = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 0 ");
 800d074:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d078:	4a76      	ldr	r2, [pc, #472]	; (800d254 <main+0x5e4>)
 800d07a:	461c      	mov	r4, r3
 800d07c:	4613      	mov	r3, r2
 800d07e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d084:	e097      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '1') {
 800d086:	f107 031c 	add.w	r3, r7, #28
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b31      	cmp	r3, #49	; 0x31
 800d08e:	d10b      	bne.n	800d0a8 <main+0x438>
						label = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 1 ");
 800d096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d09a:	4a6f      	ldr	r2, [pc, #444]	; (800d258 <main+0x5e8>)
 800d09c:	461c      	mov	r4, r3
 800d09e:	4613      	mov	r3, r2
 800d0a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d0a6:	e086      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '2') {
 800d0a8:	f107 031c 	add.w	r3, r7, #28
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	2b32      	cmp	r3, #50	; 0x32
 800d0b0:	d10b      	bne.n	800d0ca <main+0x45a>
						label = 2;
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 2 ");
 800d0b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d0bc:	4a67      	ldr	r2, [pc, #412]	; (800d25c <main+0x5ec>)
 800d0be:	461c      	mov	r4, r3
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d0c8:	e075      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '3') {
 800d0ca:	f107 031c 	add.w	r3, r7, #28
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b33      	cmp	r3, #51	; 0x33
 800d0d2:	d10b      	bne.n	800d0ec <main+0x47c>
						label = 3;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 3 ");
 800d0da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d0de:	4a60      	ldr	r2, [pc, #384]	; (800d260 <main+0x5f0>)
 800d0e0:	461c      	mov	r4, r3
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d0e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d0ea:	e064      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '4') {
 800d0ec:	f107 031c 	add.w	r3, r7, #28
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	2b34      	cmp	r3, #52	; 0x34
 800d0f4:	d10b      	bne.n	800d10e <main+0x49e>
						label = 4;
 800d0f6:	2304      	movs	r3, #4
 800d0f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 4 ");
 800d0fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d100:	4a58      	ldr	r2, [pc, #352]	; (800d264 <main+0x5f4>)
 800d102:	461c      	mov	r4, r3
 800d104:	4613      	mov	r3, r2
 800d106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d10c:	e053      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '5') {
 800d10e:	f107 031c 	add.w	r3, r7, #28
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b35      	cmp	r3, #53	; 0x35
 800d116:	d10b      	bne.n	800d130 <main+0x4c0>
						label = 5;
 800d118:	2305      	movs	r3, #5
 800d11a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 5 ");
 800d11e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d122:	4a51      	ldr	r2, [pc, #324]	; (800d268 <main+0x5f8>)
 800d124:	461c      	mov	r4, r3
 800d126:	4613      	mov	r3, r2
 800d128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d12a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d12e:	e042      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '6') {
 800d130:	f107 031c 	add.w	r3, r7, #28
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b36      	cmp	r3, #54	; 0x36
 800d138:	d10b      	bne.n	800d152 <main+0x4e2>
						label = 6;
 800d13a:	2306      	movs	r3, #6
 800d13c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 6 ");
 800d140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d144:	4a49      	ldr	r2, [pc, #292]	; (800d26c <main+0x5fc>)
 800d146:	461c      	mov	r4, r3
 800d148:	4613      	mov	r3, r2
 800d14a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d14c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d150:	e031      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '7') {
 800d152:	f107 031c 	add.w	r3, r7, #28
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b37      	cmp	r3, #55	; 0x37
 800d15a:	d10b      	bne.n	800d174 <main+0x504>
						label = 7;
 800d15c:	2307      	movs	r3, #7
 800d15e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 7 ");
 800d162:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d166:	4a42      	ldr	r2, [pc, #264]	; (800d270 <main+0x600>)
 800d168:	461c      	mov	r4, r3
 800d16a:	4613      	mov	r3, r2
 800d16c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d16e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d172:	e020      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '8') {
 800d174:	f107 031c 	add.w	r3, r7, #28
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	2b38      	cmp	r3, #56	; 0x38
 800d17c:	d10b      	bne.n	800d196 <main+0x526>
						label = 8;
 800d17e:	2308      	movs	r3, #8
 800d180:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 8 ");
 800d184:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d188:	4a3a      	ldr	r2, [pc, #232]	; (800d274 <main+0x604>)
 800d18a:	461c      	mov	r4, r3
 800d18c:	4613      	mov	r3, r2
 800d18e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d194:	e00f      	b.n	800d1b6 <main+0x546>
					} else if (s[0] == '9') {
 800d196:	f107 031c 	add.w	r3, r7, #28
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b39      	cmp	r3, #57	; 0x39
 800d19e:	d10a      	bne.n	800d1b6 <main+0x546>
						label = 9;
 800d1a0:	2309      	movs	r3, #9
 800d1a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
						sprintf(showbuf, " Training KW 9 ");
 800d1a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d1aa:	4a33      	ldr	r2, [pc, #204]	; (800d278 <main+0x608>)
 800d1ac:	461c      	mov	r4, r3
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					}
					start = HAL_GetTick();
 800d1b6:	f7f6 fedd 	bl	8003f74 <HAL_GetTick>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	461a      	mov	r2, r3
 800d1be:	4b2f      	ldr	r3, [pc, #188]	; (800d27c <main+0x60c>)
 800d1c0:	601a      	str	r2, [r3, #0]
					invoke_new_weights_givenimg(out_int);
 800d1c2:	482f      	ldr	r0, [pc, #188]	; (800d280 <main+0x610>)
 800d1c4:	f7ff fd34 	bl	800cc30 <_Z27invoke_new_weights_givenimgPa>
					uint8_t inf_class = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

					for (int i = 0; i < OUTPUT_CH; i++) {
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800d1d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1d8:	2b09      	cmp	r3, #9
 800d1da:	dc15      	bgt.n	800d208 <main+0x598>
						if (out_int[inf_class] < out_int[i]) {
 800d1dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d1e0:	4a27      	ldr	r2, [pc, #156]	; (800d280 <main+0x610>)
 800d1e2:	56d2      	ldrsb	r2, [r2, r3]
 800d1e4:	4926      	ldr	r1, [pc, #152]	; (800d280 <main+0x610>)
 800d1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1ea:	440b      	add	r3, r1
 800d1ec:	f993 3000 	ldrsb.w	r3, [r3]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	da03      	bge.n	800d1fc <main+0x58c>
							inf_class = i;
 800d1f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d1f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
					for (int i = 0; i < OUTPUT_CH; i++) {
 800d1fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d200:	3301      	adds	r3, #1
 800d202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800d206:	e7e5      	b.n	800d1d4 <main+0x564>
						}
					}
					char showbuf2 [20];
					for (int i = 0; i < (10); i++){
 800d208:	2300      	movs	r3, #0
 800d20a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d20e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d212:	2b09      	cmp	r3, #9
 800d214:	dc38      	bgt.n	800d288 <main+0x618>
						sprintf(showbuf2, "%d, ", (int)(out_int[i]) );
 800d216:	4a1a      	ldr	r2, [pc, #104]	; (800d280 <main+0x610>)
 800d218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d21c:	4413      	add	r3, r2
 800d21e:	f993 3000 	ldrsb.w	r3, [r3]
 800d222:	461a      	mov	r2, r3
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	4916      	ldr	r1, [pc, #88]	; (800d284 <main+0x614>)
 800d22a:	4618      	mov	r0, r3
 800d22c:	f00a fed2 	bl	8017fd4 <sprintf>
						printLog(showbuf2);
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	4618      	mov	r0, r3
 800d236:	f7ff fc3d 	bl	800cab4 <_Z8printLogPKc>
					for (int i = 0; i < (10); i++){
 800d23a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800d23e:	3301      	adds	r3, #1
 800d240:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d244:	e7e3      	b.n	800d20e <main+0x59e>
 800d246:	bf00      	nop
 800d248:	2001ad54 	.word	0x2001ad54
 800d24c:	ff0000ff 	.word	0xff0000ff
 800d250:	0801acec 	.word	0x0801acec
 800d254:	0801ad00 	.word	0x0801ad00
 800d258:	0801ad10 	.word	0x0801ad10
 800d25c:	0801ad20 	.word	0x0801ad20
 800d260:	0801ad30 	.word	0x0801ad30
 800d264:	0801ad40 	.word	0x0801ad40
 800d268:	0801ad50 	.word	0x0801ad50
 800d26c:	0801ad60 	.word	0x0801ad60
 800d270:	0801ad70 	.word	0x0801ad70
 800d274:	0801ad80 	.word	0x0801ad80
 800d278:	0801ad90 	.word	0x0801ad90
 800d27c:	2001ad0c 	.word	0x2001ad0c
 800d280:	2001ad1c 	.word	0x2001ad1c
 800d284:	0801ada0 	.word	0x0801ada0
					}
					int answer_right = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

					if (label == inf_class) {
 800d28e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d292:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d296:	429a      	cmp	r2, r3
 800d298:	d102      	bne.n	800d2a0 <main+0x630>
						answer_right = 1;
 800d29a:	2301      	movs	r3, #1
 800d29c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					}

					BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a4:	f7f5 feea 	bl	800307c <BSP_LCD_SetBackColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d2a8:	487b      	ldr	r0, [pc, #492]	; (800d498 <main+0x828>)
 800d2aa:	f7f5 fecf 	bl	800304c <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95,
 800d2ae:	f7f5 fe37 	bl	8002f20 <BSP_LCD_GetYSize>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	3b5f      	subs	r3, #95	; 0x5f
 800d2b8:	b299      	uxth	r1, r3
 800d2ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d2be:	2301      	movs	r3, #1
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	f7f5 ff91 	bl	80031e8 <BSP_LCD_DisplayStringAt>
							(char*) showbuf, CENTER_MODE);

					sprintf(showbuf, "Inferred Class: %d", inf_class);
 800d2c6:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800d2ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d2ce:	4973      	ldr	r1, [pc, #460]	; (800d49c <main+0x82c>)
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f00a fe7f 	bl	8017fd4 <sprintf>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 800d2d6:	f7f5 fe23 	bl	8002f20 <BSP_LCD_GetYSize>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	3b50      	subs	r3, #80	; 0x50
 800d2e0:	b299      	uxth	r1, r3
 800d2e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f7f5 ff7d 	bl	80031e8 <BSP_LCD_DisplayStringAt>
							(char*) showbuf, CENTER_MODE);

					sprintf(showbuf, "Ground Truth: %d", label);
 800d2ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d2f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800d2f6:	496a      	ldr	r1, [pc, #424]	; (800d4a0 <main+0x830>)
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f00a fe6b 	bl	8017fd4 <sprintf>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65,
 800d2fe:	f7f5 fe0f 	bl	8002f20 <BSP_LCD_GetYSize>
 800d302:	4603      	mov	r3, r0
 800d304:	b29b      	uxth	r3, r3
 800d306:	3b41      	subs	r3, #65	; 0x41
 800d308:	b299      	uxth	r1, r3
 800d30a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d30e:	2301      	movs	r3, #1
 800d310:	2000      	movs	r0, #0
 800d312:	f7f5 ff69 	bl	80031e8 <BSP_LCD_DisplayStringAt>
							(char*) showbuf, CENTER_MODE);

					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50,
 800d316:	f7f5 fe03 	bl	8002f20 <BSP_LCD_GetYSize>
 800d31a:	4603      	mov	r3, r0
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	3b32      	subs	r3, #50	; 0x32
 800d320:	b299      	uxth	r1, r3
 800d322:	2301      	movs	r3, #1
 800d324:	4a5f      	ldr	r2, [pc, #380]	; (800d4a4 <main+0x834>)
 800d326:	2000      	movs	r0, #0
 800d328:	f7f5 ff5e 	bl	80031e8 <BSP_LCD_DisplayStringAt>
							(char*) "Training...", CENTER_MODE);

					start = HAL_GetTick();
 800d32c:	f7f6 fe22 	bl	8003f74 <HAL_GetTick>
 800d330:	4603      	mov	r3, r0
 800d332:	461a      	mov	r2, r3
 800d334:	4b5c      	ldr	r3, [pc, #368]	; (800d4a8 <main+0x838>)
 800d336:	601a      	str	r2, [r3, #0]
					// Turn on PG7
//					GPIOG->BSRR = GPIO_PIN_7;
//					int start_cycles = getCycles();
//					StartTimer();
					train(label);
 800d338:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800d33c:	f7ff fc4e 	bl	800cbdc <_Z5traini>
//					int end_cycles = getCycles();
//					sprintf(showbuf, "%d", (end_cycles-start_cycles));
//					printLog(showbuf);
					// Turn off PG7
//					GPIOG->BSRR = GPIO_PIN_7 << 16;
					end = HAL_GetTick();
 800d340:	f7f6 fe18 	bl	8003f74 <HAL_GetTick>
 800d344:	4603      	mov	r3, r0
 800d346:	461a      	mov	r2, r3
 800d348:	4b58      	ldr	r3, [pc, #352]	; (800d4ac <main+0x83c>)
 800d34a:	601a      	str	r2, [r3, #0]

					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50,
 800d34c:	f7f5 fde8 	bl	8002f20 <BSP_LCD_GetYSize>
 800d350:	4603      	mov	r3, r0
 800d352:	b29b      	uxth	r3, r3
 800d354:	3b32      	subs	r3, #50	; 0x32
 800d356:	b299      	uxth	r1, r3
 800d358:	2301      	movs	r3, #1
 800d35a:	4a55      	ldr	r2, [pc, #340]	; (800d4b0 <main+0x840>)
 800d35c:	2000      	movs	r0, #0
 800d35e:	f7f5 ff43 	bl	80031e8 <BSP_LCD_DisplayStringAt>
							(char*) "Training Done", CENTER_MODE);
					got_input = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800d368:	e094      	b.n	800d494 <main+0x824>
				}else{
					BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d36a:	f04f 30ff 	mov.w	r0, #4294967295
 800d36e:	f7f5 fe85 	bl	800307c <BSP_LCD_SetBackColor>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d372:	4849      	ldr	r0, [pc, #292]	; (800d498 <main+0x828>)
 800d374:	f7f5 fe6a 	bl	800304c <BSP_LCD_SetTextColor>
					BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 150,
 800d378:	f7f5 fdd2 	bl	8002f20 <BSP_LCD_GetYSize>
 800d37c:	4603      	mov	r3, r0
 800d37e:	b29b      	uxth	r3, r3
 800d380:	3b96      	subs	r3, #150	; 0x96
 800d382:	b299      	uxth	r1, r3
 800d384:	2301      	movs	r3, #1
 800d386:	4a4b      	ldr	r2, [pc, #300]	; (800d4b4 <main+0x844>)
 800d388:	2000      	movs	r0, #0
 800d38a:	f7f5 ff2d 	bl	80031e8 <BSP_LCD_DisplayStringAt>
 800d38e:	e4bd      	b.n	800cd0c <main+0x9c>
							(char*) "INPUT THE CLASS NUMBER TO TRAIN", CENTER_MODE);
				}
			}
		} else {
			if (got_input) {
 800d390:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d394:	2b00      	cmp	r3, #0
 800d396:	f43f acb9 	beq.w	800cd0c <main+0x9c>
				invoke_new_weights_givenimg(out_int);
 800d39a:	4847      	ldr	r0, [pc, #284]	; (800d4b8 <main+0x848>)
 800d39c:	f7ff fc48 	bl	800cc30 <_Z27invoke_new_weights_givenimgPa>
				uint8_t inf_class = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

				for (int i = 0; i < OUTPUT_CH; i++) {
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d3ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d3b0:	2b09      	cmp	r3, #9
 800d3b2:	dc15      	bgt.n	800d3e0 <main+0x770>
					if (out_int[inf_class] < out_int[i]) {
 800d3b4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 800d3b8:	4a3f      	ldr	r2, [pc, #252]	; (800d4b8 <main+0x848>)
 800d3ba:	56d2      	ldrsb	r2, [r2, r3]
 800d3bc:	493e      	ldr	r1, [pc, #248]	; (800d4b8 <main+0x848>)
 800d3be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d3c2:	440b      	add	r3, r1
 800d3c4:	f993 3000 	ldrsb.w	r3, [r3]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	da03      	bge.n	800d3d4 <main+0x764>
						inf_class = i;
 800d3cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d3d0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
				for (int i = 0; i < OUTPUT_CH; i++) {
 800d3d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d3d8:	3301      	adds	r3, #1
 800d3da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d3de:	e7e5      	b.n	800d3ac <main+0x73c>
					}
				}
				for (int i = 0; i < (10); i++){
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d3e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d3ea:	2b09      	cmp	r3, #9
 800d3ec:	dc17      	bgt.n	800d41e <main+0x7ae>
					sprintf(showbuf, "%d, ", (int)(out_int[i]) );
 800d3ee:	4a32      	ldr	r2, [pc, #200]	; (800d4b8 <main+0x848>)
 800d3f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d3f4:	4413      	add	r3, r2
 800d3f6:	f993 3000 	ldrsb.w	r3, [r3]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d400:	492e      	ldr	r1, [pc, #184]	; (800d4bc <main+0x84c>)
 800d402:	4618      	mov	r0, r3
 800d404:	f00a fde6 	bl	8017fd4 <sprintf>
					printLog(showbuf);
 800d408:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fb51 	bl	800cab4 <_Z8printLogPKc>
				for (int i = 0; i < (10); i++){
 800d412:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d416:	3301      	adds	r3, #1
 800d418:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d41c:	e7e3      	b.n	800d3e6 <main+0x776>
				}
				BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d41e:	f04f 30ff 	mov.w	r0, #4294967295
 800d422:	f7f5 fe2b 	bl	800307c <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d426:	481c      	ldr	r0, [pc, #112]	; (800d498 <main+0x828>)
 800d428:	f7f5 fe10 	bl	800304c <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 115,
 800d42c:	f7f5 fd78 	bl	8002f20 <BSP_LCD_GetYSize>
 800d430:	4603      	mov	r3, r0
 800d432:	b29b      	uxth	r3, r3
 800d434:	3b73      	subs	r3, #115	; 0x73
 800d436:	b299      	uxth	r1, r3
 800d438:	2301      	movs	r3, #1
 800d43a:	4a21      	ldr	r2, [pc, #132]	; (800d4c0 <main+0x850>)
 800d43c:	2000      	movs	r0, #0
 800d43e:	f7f5 fed3 	bl	80031e8 <BSP_LCD_DisplayStringAt>
						(char*) "INFERENCE MODE", CENTER_MODE);

				sprintf(showbuf, "   Inferred Class: %d   ", inf_class);
 800d442:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 800d446:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d44a:	491e      	ldr	r1, [pc, #120]	; (800d4c4 <main+0x854>)
 800d44c:	4618      	mov	r0, r3
 800d44e:	f00a fdc1 	bl	8017fd4 <sprintf>
				BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95,
 800d452:	f7f5 fd65 	bl	8002f20 <BSP_LCD_GetYSize>
 800d456:	4603      	mov	r3, r0
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3b5f      	subs	r3, #95	; 0x5f
 800d45c:	b299      	uxth	r1, r3
 800d45e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d462:	2301      	movs	r3, #1
 800d464:	2000      	movs	r0, #0
 800d466:	f7f5 febf 	bl	80031e8 <BSP_LCD_DisplayStringAt>
						(char*) showbuf, CENTER_MODE);

				BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 800d46a:	f7f5 fd59 	bl	8002f20 <BSP_LCD_GetYSize>
 800d46e:	4603      	mov	r3, r0
 800d470:	b29b      	uxth	r3, r3
 800d472:	3b50      	subs	r3, #80	; 0x50
 800d474:	b299      	uxth	r1, r3
						(char*) keywords[inf_class], CENTER_MODE);
 800d476:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
				BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 800d47a:	4613      	mov	r3, r2
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	1a9b      	subs	r3, r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4a11      	ldr	r2, [pc, #68]	; (800d4c8 <main+0x858>)
 800d484:	441a      	add	r2, r3
 800d486:	2301      	movs	r3, #1
 800d488:	2000      	movs	r0, #0
 800d48a:	f7f5 fead 	bl	80031e8 <BSP_LCD_DisplayStringAt>
				got_input = 0;
 800d48e:	2300      	movs	r3, #0
 800d490:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
//
			}
		}
	}
 800d494:	e43a      	b.n	800cd0c <main+0x9c>
 800d496:	bf00      	nop
 800d498:	ff0000ff 	.word	0xff0000ff
 800d49c:	0801ada8 	.word	0x0801ada8
 800d4a0:	0801adbc 	.word	0x0801adbc
 800d4a4:	0801add0 	.word	0x0801add0
 800d4a8:	2001ad0c 	.word	0x2001ad0c
 800d4ac:	2001ad10 	.word	0x2001ad10
 800d4b0:	0801addc 	.word	0x0801addc
 800d4b4:	0801adec 	.word	0x0801adec
 800d4b8:	2001ad1c 	.word	0x2001ad1c
 800d4bc:	0801ada0 	.word	0x0801ada0
 800d4c0:	0801ae0c 	.word	0x0801ae0c
 800d4c4:	0801ae1c 	.word	0x0801ae1c
 800d4c8:	20009a5c 	.word	0x20009a5c

0800d4cc <_ZL18SystemClock_Configv>:

	while (1) {
	}
}
void SystemClock_Config(void) {
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b092      	sub	sp, #72	; 0x48
 800d4d0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;
	HAL_StatusTypeDef ret = HAL_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	603b      	str	r3, [r7, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d4dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d4e0:	607b      	str	r3, [r7, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d4e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d4ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLM = 25;
 800d4ec:	2319      	movs	r3, #25
 800d4ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLN = 432;
 800d4f0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800d4fa:	2309      	movs	r3, #9
 800d4fc:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800d4fe:	463b      	mov	r3, r7
 800d500:	4618      	mov	r0, r3
 800d502:	f7f9 f96f 	bl	80067e4 <HAL_RCC_OscConfig>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800d50c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d510:	2b00      	cmp	r3, #0
 800d512:	d000      	beq.n	800d516 <_ZL18SystemClock_Configv+0x4a>
		while (1) {
 800d514:	e7fe      	b.n	800d514 <_ZL18SystemClock_Configv+0x48>
			;
		}
	}

	ret = HAL_PWREx_EnableOverDrive();
 800d516:	f7f9 f915 	bl	8006744 <HAL_PWREx_EnableOverDrive>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800d520:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d524:	2b00      	cmp	r3, #0
 800d526:	d000      	beq.n	800d52a <_ZL18SystemClock_Configv+0x5e>
		while (1) {
 800d528:	e7fe      	b.n	800d528 <_ZL18SystemClock_Configv+0x5c>
			;
		}
	}

	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800d52a:	230f      	movs	r3, #15
 800d52c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d52e:	2302      	movs	r3, #2
 800d530:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d532:	2300      	movs	r3, #0
 800d534:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d536:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d53a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d53c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d540:	643b      	str	r3, [r7, #64]	; 0x40

	ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800d542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d546:	2107      	movs	r1, #7
 800d548:	4618      	mov	r0, r3
 800d54a:	f7f9 fbbb 	bl	8006cc4 <HAL_RCC_ClockConfig>
 800d54e:	4603      	mov	r3, r0
 800d550:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (ret != HAL_OK) {
 800d554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d000      	beq.n	800d55e <_ZL18SystemClock_Configv+0x92>
		while (1) {
 800d55c:	e7fe      	b.n	800d55c <_ZL18SystemClock_Configv+0x90>
			;
		}
	}
}
 800d55e:	bf00      	nop
 800d560:	3748      	adds	r7, #72	; 0x48
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
	...

0800d568 <_ZL16CPU_CACHE_Enablev>:
	BSP_LED_On(LED1);
	while (1) {
	}
}

static void CPU_CACHE_Enable(void) {
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800d56e:	4b38      	ldr	r3, [pc, #224]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d576:	2b00      	cmp	r3, #0
 800d578:	bf14      	ite	ne
 800d57a:	2301      	movne	r3, #1
 800d57c:	2300      	moveq	r3, #0
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d115      	bne.n	800d5b0 <_ZL16CPU_CACHE_Enablev+0x48>
  __ASM volatile ("dsb 0xF":::"memory");
 800d584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d588:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800d58c:	4b30      	ldr	r3, [pc, #192]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d58e:	2200      	movs	r2, #0
 800d590:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800d594:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d598:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800d59c:	4b2c      	ldr	r3, [pc, #176]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	4a2b      	ldr	r2, [pc, #172]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d5a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d5a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d5ac:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800d5b0:	4b27      	ldr	r3, [pc, #156]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d5b2:	695b      	ldr	r3, [r3, #20]
 800d5b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bf14      	ite	ne
 800d5bc:	2301      	movne	r3, #1
 800d5be:	2300      	moveq	r3, #0
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d13e      	bne.n	800d644 <_ZL16CPU_CACHE_Enablev+0xdc>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d5c6:	4b22      	ldr	r3, [pc, #136]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d5ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800d5d2:	4b1f      	ldr	r3, [pc, #124]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5d8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	0b5b      	lsrs	r3, r3, #13
 800d5de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d5e2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	08db      	lsrs	r3, r3, #3
 800d5e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5ec:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	015a      	lsls	r2, r3, #5
 800d5f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d5f6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d5fc:	4914      	ldr	r1, [pc, #80]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d5fe:	4313      	orrs	r3, r2
 800d600:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	1e5a      	subs	r2, r3, #1
 800d608:	607a      	str	r2, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	bf14      	ite	ne
 800d60e:	2301      	movne	r3, #1
 800d610:	2300      	moveq	r3, #0
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1ea      	bne.n	800d5ee <_ZL16CPU_CACHE_Enablev+0x86>
    } while(sets-- != 0U);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	1e5a      	subs	r2, r3, #1
 800d61c:	60ba      	str	r2, [r7, #8]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bf14      	ite	ne
 800d622:	2301      	movne	r3, #1
 800d624:	2300      	moveq	r3, #0
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1db      	bne.n	800d5e4 <_ZL16CPU_CACHE_Enablev+0x7c>
 800d62c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d630:	4b07      	ldr	r3, [pc, #28]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	4a06      	ldr	r2, [pc, #24]	; (800d650 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800d636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d63a:	6153      	str	r3, [r2, #20]
 800d63c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d640:	f3bf 8f6f 	isb	sy

	SCB_EnableICache();

	SCB_EnableDCache();
}
 800d644:	bf00      	nop
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	e000ed00 	.word	0xe000ed00

0800d654 <_ZL10MPU_Configv>:

static void MPU_Config(void) {
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 800d65a:	f7f6 fdcb 	bl	80041f4 <HAL_MPU_Disable>

	/* Configure the MPU as Strongly ordered for not defined regions */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800d65e:	2301      	movs	r3, #1
 800d660:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x00;
 800d662:	2300      	movs	r3, #0
 800d664:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800d666:	231f      	movs	r3, #31
 800d668:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800d66a:	2300      	movs	r3, #0
 800d66c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800d672:	2300      	movs	r3, #0
 800d674:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800d676:	2301      	movs	r3, #1
 800d678:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800d67e:	2300      	movs	r3, #0
 800d680:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800d682:	2387      	movs	r3, #135	; 0x87
 800d684:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800d686:	2301      	movs	r3, #1
 800d688:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d68a:	463b      	mov	r3, r7
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7f6 fde5 	bl	800425c <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800d692:	2301      	movs	r3, #1
 800d694:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 800d696:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800d69a:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800d69c:	2318      	movs	r3, #24
 800d69e:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d6c0:	463b      	mov	r3, r7
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f6 fdca 	bl	800425c <HAL_MPU_ConfigRegion>

	/* Configure the MPU QSPI flash */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x90000000;
 800d6cc:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800d6d0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800d6d2:	2319      	movs	r3, #25
 800d6d4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7f6 fdaf 	bl	800425c <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes FMC control registers */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800d6fe:	2301      	movs	r3, #1
 800d700:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0xA0000000;
 800d702:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800d706:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 800d708:	230c      	movs	r3, #12
 800d70a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800d70c:	2303      	movs	r3, #3
 800d70e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800d710:	2301      	movs	r3, #1
 800d712:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800d714:	2300      	movs	r3, #0
 800d716:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800d718:	2301      	movs	r3, #1
 800d71a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800d71c:	2303      	movs	r3, #3
 800d71e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800d720:	2300      	movs	r3, #0
 800d722:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x0;
 800d724:	2300      	movs	r3, #0
 800d726:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800d728:	2301      	movs	r3, #1
 800d72a:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800d72c:	463b      	mov	r3, r7
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f6 fd94 	bl	800425c <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800d734:	2004      	movs	r0, #4
 800d736:	f7f6 fd73 	bl	8004220 <HAL_MPU_Enable>
}
 800d73a:	bf00      	nop
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void) {
 800d744:	b580      	push	{r7, lr}
 800d746:	b090      	sub	sp, #64	; 0x40
 800d748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d74a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d74e:	2200      	movs	r2, #0
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	605a      	str	r2, [r3, #4]
 800d754:	609a      	str	r2, [r3, #8]
 800d756:	60da      	str	r2, [r3, #12]
 800d758:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 800d75a:	4baf      	ldr	r3, [pc, #700]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d75e:	4aae      	ldr	r2, [pc, #696]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d760:	f043 0310 	orr.w	r3, r3, #16
 800d764:	6313      	str	r3, [r2, #48]	; 0x30
 800d766:	4bac      	ldr	r3, [pc, #688]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76a:	f003 0310 	and.w	r3, r3, #16
 800d76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800d772:	4ba9      	ldr	r3, [pc, #676]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d776:	4aa8      	ldr	r2, [pc, #672]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d77c:	6313      	str	r3, [r2, #48]	; 0x30
 800d77e:	4ba6      	ldr	r3, [pc, #664]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d786:	627b      	str	r3, [r7, #36]	; 0x24
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d78a:	4ba3      	ldr	r3, [pc, #652]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78e:	4aa2      	ldr	r2, [pc, #648]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d790:	f043 0302 	orr.w	r3, r3, #2
 800d794:	6313      	str	r3, [r2, #48]	; 0x30
 800d796:	4ba0      	ldr	r3, [pc, #640]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	623b      	str	r3, [r7, #32]
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800d7a2:	4b9d      	ldr	r3, [pc, #628]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a6:	4a9c      	ldr	r2, [pc, #624]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7a8:	f043 0308 	orr.w	r3, r3, #8
 800d7ac:	6313      	str	r3, [r2, #48]	; 0x30
 800d7ae:	4b9a      	ldr	r3, [pc, #616]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b2:	f003 0308 	and.w	r3, r3, #8
 800d7b6:	61fb      	str	r3, [r7, #28]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800d7ba:	4b97      	ldr	r3, [pc, #604]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7be:	4a96      	ldr	r2, [pc, #600]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7c0:	f043 0304 	orr.w	r3, r3, #4
 800d7c4:	6313      	str	r3, [r2, #48]	; 0x30
 800d7c6:	4b94      	ldr	r3, [pc, #592]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ca:	f003 0304 	and.w	r3, r3, #4
 800d7ce:	61bb      	str	r3, [r7, #24]
 800d7d0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800d7d2:	4b91      	ldr	r3, [pc, #580]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d6:	4a90      	ldr	r2, [pc, #576]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d7de:	4b8e      	ldr	r3, [pc, #568]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800d7ea:	4b8b      	ldr	r3, [pc, #556]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ee:	4a8a      	ldr	r2, [pc, #552]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7f4:	6313      	str	r3, [r2, #48]	; 0x30
 800d7f6:	4b88      	ldr	r3, [pc, #544]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7fe:	613b      	str	r3, [r7, #16]
 800d800:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800d802:	4b85      	ldr	r3, [pc, #532]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d806:	4a84      	ldr	r2, [pc, #528]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d80c:	6313      	str	r3, [r2, #48]	; 0x30
 800d80e:	4b82      	ldr	r3, [pc, #520]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800d81a:	4b7f      	ldr	r3, [pc, #508]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d81e:	4a7e      	ldr	r2, [pc, #504]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d824:	6313      	str	r3, [r2, #48]	; 0x30
 800d826:	4b7c      	ldr	r3, [pc, #496]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d82a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d82e:	60bb      	str	r3, [r7, #8]
 800d830:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800d832:	4b79      	ldr	r3, [pc, #484]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d836:	4a78      	ldr	r2, [pc, #480]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d838:	f043 0320 	orr.w	r3, r3, #32
 800d83c:	6313      	str	r3, [r2, #48]	; 0x30
 800d83e:	4b76      	ldr	r3, [pc, #472]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	607b      	str	r3, [r7, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800d84a:	4b73      	ldr	r3, [pc, #460]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d84e:	4a72      	ldr	r2, [pc, #456]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d854:	6313      	str	r3, [r2, #48]	; 0x30
 800d856:	4b70      	ldr	r3, [pc, #448]	; (800da18 <_ZL12MX_GPIO_Initv+0x2d4>)
 800d858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85e:	603b      	str	r3, [r7, #0]
 800d860:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800d862:	2201      	movs	r2, #1
 800d864:	2120      	movs	r1, #32
 800d866:	486d      	ldr	r0, [pc, #436]	; (800da1c <_ZL12MX_GPIO_Initv+0x2d8>)
 800d868:	f7f7 fef0 	bl	800564c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800d86c:	2200      	movs	r2, #0
 800d86e:	210c      	movs	r1, #12
 800d870:	486b      	ldr	r0, [pc, #428]	; (800da20 <_ZL12MX_GPIO_Initv+0x2dc>)
 800d872:	f7f7 feeb 	bl	800564c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800d876:	2201      	movs	r2, #1
 800d878:	2108      	movs	r1, #8
 800d87a:	486a      	ldr	r0, [pc, #424]	; (800da24 <_ZL12MX_GPIO_Initv+0x2e0>)
 800d87c:	f7f7 fee6 	bl	800564c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800d880:	2201      	movs	r2, #1
 800d882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d886:	4866      	ldr	r0, [pc, #408]	; (800da20 <_ZL12MX_GPIO_Initv+0x2dc>)
 800d888:	f7f7 fee0 	bl	800564c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800d88c:	2200      	movs	r2, #0
 800d88e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d892:	4865      	ldr	r0, [pc, #404]	; (800da28 <_ZL12MX_GPIO_Initv+0x2e4>)
 800d894:	f7f7 feda 	bl	800564c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800d898:	2200      	movs	r2, #0
 800d89a:	21c8      	movs	r1, #200	; 0xc8
 800d89c:	4863      	ldr	r0, [pc, #396]	; (800da2c <_ZL12MX_GPIO_Initv+0x2e8>)
 800d89e:	f7f7 fed5 	bl	800564c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800d8a2:	2308      	movs	r3, #8
 800d8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d8ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	485e      	ldr	r0, [pc, #376]	; (800da30 <_ZL12MX_GPIO_Initv+0x2ec>)
 800d8b6:	f7f7 fbfd 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800d8ba:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800d8be:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8c0:	2302      	movs	r3, #2
 800d8c2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d8cc:	230b      	movs	r3, #11
 800d8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d8d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4855      	ldr	r0, [pc, #340]	; (800da2c <_ZL12MX_GPIO_Initv+0x2e8>)
 800d8d8:	f7f7 fbec 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800d8dc:	f643 4323 	movw	r3, #15395	; 0x3c23
 800d8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			|
			ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d8ee:	230a      	movs	r3, #10
 800d8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	484e      	ldr	r0, [pc, #312]	; (800da34 <_ZL12MX_GPIO_Initv+0x2f0>)
 800d8fa:	f7f7 fbdb 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800d8fe:	2380      	movs	r3, #128	; 0x80
 800d900:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d902:	2302      	movs	r3, #2
 800d904:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d906:	2300      	movs	r3, #0
 800d908:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d90a:	2300      	movs	r3, #0
 800d90c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800d90e:	2308      	movs	r3, #8
 800d910:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800d912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d916:	4619      	mov	r1, r3
 800d918:	4840      	ldr	r0, [pc, #256]	; (800da1c <_ZL12MX_GPIO_Initv+0x2d8>)
 800d91a:	f7f7 fbcb 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800d91e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d922:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d924:	2300      	movs	r3, #0
 800d926:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d928:	2300      	movs	r3, #0
 800d92a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d92c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d930:	4619      	mov	r1, r3
 800d932:	4841      	ldr	r0, [pc, #260]	; (800da38 <_ZL12MX_GPIO_Initv+0x2f4>)
 800d934:	f7f7 fbbe 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800d938:	2340      	movs	r3, #64	; 0x40
 800d93a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800d93c:	4b3f      	ldr	r3, [pc, #252]	; (800da3c <_ZL12MX_GPIO_Initv+0x2f8>)
 800d93e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d940:	2300      	movs	r3, #0
 800d942:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800d944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d948:	4619      	mov	r1, r3
 800d94a:	4834      	ldr	r0, [pc, #208]	; (800da1c <_ZL12MX_GPIO_Initv+0x2d8>)
 800d94c:	f7f7 fbb2 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800d950:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d954:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d956:	2302      	movs	r3, #2
 800d958:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d95a:	2300      	movs	r3, #0
 800d95c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d95e:	2303      	movs	r3, #3
 800d960:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d962:	230a      	movs	r3, #10
 800d964:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d96a:	4619      	mov	r1, r3
 800d96c:	4834      	ldr	r0, [pc, #208]	; (800da40 <_ZL12MX_GPIO_Initv+0x2fc>)
 800d96e:	f7f7 fba1 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800d972:	2320      	movs	r3, #32
 800d974:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d976:	2301      	movs	r3, #1
 800d978:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d97a:	2300      	movs	r3, #0
 800d97c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d97e:	2300      	movs	r3, #0
 800d980:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800d982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d986:	4619      	mov	r1, r3
 800d988:	4824      	ldr	r0, [pc, #144]	; (800da1c <_ZL12MX_GPIO_Initv+0x2d8>)
 800d98a:	f7f7 fb93 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800d98e:	f241 030c 	movw	r3, #4108	; 0x100c
 800d992:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d994:	2301      	movs	r3, #1
 800d996:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d998:	2300      	movs	r3, #0
 800d99a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d99c:	2300      	movs	r3, #0
 800d99e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d9a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	481e      	ldr	r0, [pc, #120]	; (800da20 <_ZL12MX_GPIO_Initv+0x2dc>)
 800d9a8:	f7f7 fb84 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800d9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d9ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4820      	ldr	r0, [pc, #128]	; (800da44 <_ZL12MX_GPIO_Initv+0x300>)
 800d9c2:	f7f7 fb77 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800d9c6:	2308      	movs	r3, #8
 800d9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800d9d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4811      	ldr	r0, [pc, #68]	; (800da24 <_ZL12MX_GPIO_Initv+0x2e0>)
 800d9de:	f7f7 fb69 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800d9e2:	2310      	movs	r3, #16
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d9ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	4809      	ldr	r0, [pc, #36]	; (800da1c <_ZL12MX_GPIO_Initv+0x2d8>)
 800d9f6:	f7f7 fb5d 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800d9fa:	f248 0304 	movw	r3, #32772	; 0x8004
 800d9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da00:	2300      	movs	r3, #0
 800da02:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da04:	2300      	movs	r3, #0
 800da06:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800da08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da0c:	4619      	mov	r1, r3
 800da0e:	4806      	ldr	r0, [pc, #24]	; (800da28 <_ZL12MX_GPIO_Initv+0x2e4>)
 800da10:	f7f7 fb50 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800da14:	2302      	movs	r3, #2
 800da16:	e017      	b.n	800da48 <_ZL12MX_GPIO_Initv+0x304>
 800da18:	40023800 	.word	0x40023800
 800da1c:	40020c00 	.word	0x40020c00
 800da20:	40022000 	.word	0x40022000
 800da24:	40022800 	.word	0x40022800
 800da28:	40021c00 	.word	0x40021c00
 800da2c:	40021800 	.word	0x40021800
 800da30:	40021000 	.word	0x40021000
 800da34:	40020400 	.word	0x40020400
 800da38:	40022400 	.word	0x40022400
 800da3c:	10120000 	.word	0x10120000
 800da40:	40020000 	.word	0x40020000
 800da44:	40020800 	.word	0x40020800
 800da48:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da4a:	2302      	movs	r3, #2
 800da4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da52:	2300      	movs	r3, #0
 800da54:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800da56:	2305      	movs	r3, #5
 800da58:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800da5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da5e:	4619      	mov	r1, r3
 800da60:	4861      	ldr	r0, [pc, #388]	; (800dbe8 <_ZL12MX_GPIO_Initv+0x4a4>)
 800da62:	f7f7 fb27 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800da66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800da6c:	2301      	movs	r3, #1
 800da6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da70:	2300      	movs	r3, #0
 800da72:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da74:	2300      	movs	r3, #0
 800da76:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800da78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da7c:	4619      	mov	r1, r3
 800da7e:	485b      	ldr	r0, [pc, #364]	; (800dbec <_ZL12MX_GPIO_Initv+0x4a8>)
 800da80:	f7f7 fb18 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800da84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800da8a:	2303      	movs	r3, #3
 800da8c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da8e:	2300      	movs	r3, #0
 800da90:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800da92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800da96:	4619      	mov	r1, r3
 800da98:	4853      	ldr	r0, [pc, #332]	; (800dbe8 <_ZL12MX_GPIO_Initv+0x4a4>)
 800da9a:	f7f7 fb0b 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800da9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800daa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800daa4:	4b52      	ldr	r3, [pc, #328]	; (800dbf0 <_ZL12MX_GPIO_Initv+0x4ac>)
 800daa6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daa8:	2300      	movs	r3, #0
 800daaa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800daac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dab0:	4619      	mov	r1, r3
 800dab2:	484d      	ldr	r0, [pc, #308]	; (800dbe8 <_ZL12MX_GPIO_Initv+0x4a4>)
 800dab4:	f7f7 fafe 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800dab8:	2310      	movs	r3, #16
 800daba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dabc:	2302      	movs	r3, #2
 800dabe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dac0:	2300      	movs	r3, #0
 800dac2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dac4:	2303      	movs	r3, #3
 800dac6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800dac8:	230a      	movs	r3, #10
 800daca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800dacc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dad0:	4619      	mov	r1, r3
 800dad2:	4846      	ldr	r0, [pc, #280]	; (800dbec <_ZL12MX_GPIO_Initv+0x4a8>)
 800dad4:	f7f7 faee 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800dad8:	23c8      	movs	r3, #200	; 0xc8
 800dada:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dadc:	2301      	movs	r3, #1
 800dade:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dae0:	2300      	movs	r3, #0
 800dae2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dae4:	2300      	movs	r3, #0
 800dae6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800daec:	4619      	mov	r1, r3
 800daee:	4841      	ldr	r0, [pc, #260]	; (800dbf4 <_ZL12MX_GPIO_Initv+0x4b0>)
 800daf0:	f7f7 fae0 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800daf4:	2305      	movs	r3, #5
 800daf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daf8:	2302      	movs	r3, #2
 800dafa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dafc:	2300      	movs	r3, #0
 800dafe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db00:	2303      	movs	r3, #3
 800db02:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800db04:	230a      	movs	r3, #10
 800db06:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800db08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db0c:	4619      	mov	r1, r3
 800db0e:	483a      	ldr	r0, [pc, #232]	; (800dbf8 <_ZL12MX_GPIO_Initv+0x4b4>)
 800db10:	f7f7 fad0 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800db14:	2332      	movs	r3, #50	; 0x32
 800db16:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db18:	2302      	movs	r3, #2
 800db1a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db1c:	2300      	movs	r3, #0
 800db1e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db20:	2303      	movs	r3, #3
 800db22:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800db24:	230b      	movs	r3, #11
 800db26:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800db28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db2c:	4619      	mov	r1, r3
 800db2e:	4832      	ldr	r0, [pc, #200]	; (800dbf8 <_ZL12MX_GPIO_Initv+0x4b4>)
 800db30:	f7f7 fac0 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800db34:	2304      	movs	r3, #4
 800db36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db38:	2300      	movs	r3, #0
 800db3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800db40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db44:	4619      	mov	r1, r3
 800db46:	482b      	ldr	r0, [pc, #172]	; (800dbf4 <_ZL12MX_GPIO_Initv+0x4b0>)
 800db48:	f7f7 fab4 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800db4c:	2386      	movs	r3, #134	; 0x86
 800db4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db50:	2302      	movs	r3, #2
 800db52:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db54:	2300      	movs	r3, #0
 800db56:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db58:	2303      	movs	r3, #3
 800db5a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800db5c:	230b      	movs	r3, #11
 800db5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db64:	4619      	mov	r1, r3
 800db66:	4825      	ldr	r0, [pc, #148]	; (800dbfc <_ZL12MX_GPIO_Initv+0x4b8>)
 800db68:	f7f7 faa4 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800db6c:	2328      	movs	r3, #40	; 0x28
 800db6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db70:	2302      	movs	r3, #2
 800db72:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db74:	2300      	movs	r3, #0
 800db76:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db78:	2303      	movs	r3, #3
 800db7a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800db7c:	230a      	movs	r3, #10
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db84:	4619      	mov	r1, r3
 800db86:	481d      	ldr	r0, [pc, #116]	; (800dbfc <_ZL12MX_GPIO_Initv+0x4b8>)
 800db88:	f7f7 fa94 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800db8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800db90:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db92:	2302      	movs	r3, #2
 800db94:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db96:	2300      	movs	r3, #0
 800db98:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800db9a:	2300      	movs	r3, #0
 800db9c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800db9e:	2305      	movs	r3, #5
 800dba0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dba6:	4619      	mov	r1, r3
 800dba8:	4815      	ldr	r0, [pc, #84]	; (800dc00 <_ZL12MX_GPIO_Initv+0x4bc>)
 800dbaa:	f7f7 fa83 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = BUTTON1_Pin;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800dbba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	480e      	ldr	r0, [pc, #56]	; (800dbfc <_ZL12MX_GPIO_Initv+0x4b8>)
 800dbc2:	f7f7 fa77 	bl	80050b4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = BUTTON2_Pin;
 800dbc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800dbd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dbd8:	4619      	mov	r1, r3
 800dbda:	480a      	ldr	r0, [pc, #40]	; (800dc04 <_ZL12MX_GPIO_Initv+0x4c0>)
 800dbdc:	f7f7 fa6a 	bl	80050b4 <HAL_GPIO_Init>
}
 800dbe0:	bf00      	nop
 800dbe2:	3740      	adds	r7, #64	; 0x40
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	40022000 	.word	0x40022000
 800dbec:	40021c00 	.word	0x40021c00
 800dbf0:	10120000 	.word	0x10120000
 800dbf4:	40021800 	.word	0x40021800
 800dbf8:	40020800 	.word	0x40020800
 800dbfc:	40020000 	.word	0x40020000
 800dc00:	40020400 	.word	0x40020400
 800dc04:	40021400 	.word	0x40021400

0800dc08 <_ZL15Input_Mode_Hintv>:
		return 1;
	}
	return 0;
}

static void Input_Mode_Hint(void) {
 800dc08:	b598      	push	{r3, r4, r7, lr}
 800dc0a:	af00      	add	r7, sp, #0
	/* Set LCD Foreground Layer  */
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 800dc0c:	2001      	movs	r0, #1
 800dc0e:	f7f5 f9fb 	bl	8003008 <BSP_LCD_SelectLayer>

	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800dc12:	4835      	ldr	r0, [pc, #212]	; (800dce8 <_ZL15Input_Mode_Hintv+0xe0>)
 800dc14:	f7f5 fa4c 	bl	80030b0 <BSP_LCD_SetFont>
	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800dc18:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1c:	f7f5 fa78 	bl	8003110 <BSP_LCD_Clear>

	/* Set Audio Demo description */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800dc20:	4832      	ldr	r0, [pc, #200]	; (800dcec <_ZL15Input_Mode_Hintv+0xe4>)
 800dc22:	f7f5 fa13 	bl	800304c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 800dc26:	f7f5 f967 	bl	8002ef8 <BSP_LCD_GetXSize>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	235a      	movs	r3, #90	; 0x5a
 800dc30:	2100      	movs	r1, #0
 800dc32:	2000      	movs	r0, #0
 800dc34:	f7f5 fcee 	bl	8003614 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800dc38:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3c:	f7f5 fa06 	bl	800304c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800dc40:	482a      	ldr	r0, [pc, #168]	; (800dcec <_ZL15Input_Mode_Hintv+0xe4>)
 800dc42:	f7f5 fa1b 	bl	800307c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 800dc46:	4828      	ldr	r0, [pc, #160]	; (800dce8 <_ZL15Input_Mode_Hintv+0xe0>)
 800dc48:	f7f5 fa32 	bl	80030b0 <BSP_LCD_SetFont>
	if (in_mode == 0) {
 800dc4c:	4b28      	ldr	r3, [pc, #160]	; (800dcf0 <_ZL15Input_Mode_Hintv+0xe8>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d106      	bne.n	800dc62 <_ZL15Input_Mode_Hintv+0x5a>
		BSP_LCD_DisplayStringAt(0, 0, (char*) "USING GSC v2 INPUTS",
 800dc54:	2301      	movs	r3, #1
 800dc56:	4a27      	ldr	r2, [pc, #156]	; (800dcf4 <_ZL15Input_Mode_Hintv+0xec>)
 800dc58:	2100      	movs	r1, #0
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	f7f5 fac4 	bl	80031e8 <BSP_LCD_DisplayStringAt>
 800dc60:	e011      	b.n	800dc86 <_ZL15Input_Mode_Hintv+0x7e>
				CENTER_MODE);
	} else {
		BSP_LCD_SetFont(&Font24);
 800dc62:	4821      	ldr	r0, [pc, #132]	; (800dce8 <_ZL15Input_Mode_Hintv+0xe0>)
 800dc64:	f7f5 fa24 	bl	80030b0 <BSP_LCD_SetFont>
		BSP_LCD_DisplayStringAt(0, 0, (char*) "1 SEC AUDIO RECORDING",
 800dc68:	2301      	movs	r3, #1
 800dc6a:	4a23      	ldr	r2, [pc, #140]	; (800dcf8 <_ZL15Input_Mode_Hintv+0xf0>)
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	2000      	movs	r0, #0
 800dc70:	f7f5 faba 	bl	80031e8 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_SetFont(&Font12);
 800dc74:	4821      	ldr	r0, [pc, #132]	; (800dcfc <_ZL15Input_Mode_Hintv+0xf4>)
 800dc76:	f7f5 fa1b 	bl	80030b0 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 60, (char*) "PRESS USER BUTTON TO RECORD NEW SAMPLE",
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	4a20      	ldr	r2, [pc, #128]	; (800dd00 <_ZL15Input_Mode_Hintv+0xf8>)
 800dc7e:	213c      	movs	r1, #60	; 0x3c
 800dc80:	2000      	movs	r0, #0
 800dc82:	f7f5 fab1 	bl	80031e8 <BSP_LCD_DisplayStringAt>
					CENTER_MODE);
	}
	BSP_LCD_SetFont(&Font12);
 800dc86:	481d      	ldr	r0, [pc, #116]	; (800dcfc <_ZL15Input_Mode_Hintv+0xf4>)
 800dc88:	f7f5 fa12 	bl	80030b0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 30, (char*) "ON-DEVICE KEY WORD SPOTTING",
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	4a1d      	ldr	r2, [pc, #116]	; (800dd04 <_ZL15Input_Mode_Hintv+0xfc>)
 800dc90:	211e      	movs	r1, #30
 800dc92:	2000      	movs	r0, #0
 800dc94:	f7f5 faa8 	bl	80031e8 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);

	/* Set the LCD Text Color */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800dc98:	4814      	ldr	r0, [pc, #80]	; (800dcec <_ZL15Input_Mode_Hintv+0xe4>)
 800dc9a:	f7f5 f9d7 	bl	800304c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20,
 800dc9e:	f7f5 f92b 	bl	8002ef8 <BSP_LCD_GetXSize>
 800dca2:	4603      	mov	r3, r0
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	3b14      	subs	r3, #20
 800dca8:	b29c      	uxth	r4, r3
			BSP_LCD_GetYSize() - 110);
 800dcaa:	f7f5 f939 	bl	8002f20 <BSP_LCD_GetYSize>
 800dcae:	4603      	mov	r3, r0
	BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20,
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	3b6e      	subs	r3, #110	; 0x6e
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	4622      	mov	r2, r4
 800dcb8:	2164      	movs	r1, #100	; 0x64
 800dcba:	200a      	movs	r0, #10
 800dcbc:	f7f5 fc30 	bl	8003520 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22,
 800dcc0:	f7f5 f91a 	bl	8002ef8 <BSP_LCD_GetXSize>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b16      	subs	r3, #22
 800dcca:	b29c      	uxth	r4, r3
			BSP_LCD_GetYSize() - 112);
 800dccc:	f7f5 f928 	bl	8002f20 <BSP_LCD_GetYSize>
 800dcd0:	4603      	mov	r3, r0
	BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22,
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	3b70      	subs	r3, #112	; 0x70
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4622      	mov	r2, r4
 800dcda:	2165      	movs	r1, #101	; 0x65
 800dcdc:	200b      	movs	r0, #11
 800dcde:	f7f5 fc1f 	bl	8003520 <BSP_LCD_DrawRect>

}
 800dce2:	bf00      	nop
 800dce4:	bd98      	pop	{r3, r4, r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20009dc4 	.word	0x20009dc4
 800dcec:	ff0000ff 	.word	0xff0000ff
 800dcf0:	2001ad50 	.word	0x2001ad50
 800dcf4:	0801ae38 	.word	0x0801ae38
 800dcf8:	0801ae4c 	.word	0x0801ae4c
 800dcfc:	20009dbc 	.word	0x20009dbc
 800dd00:	0801ae64 	.word	0x0801ae64
 800dd04:	0801ae8c 	.word	0x0801ae8c

0800dd08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dd08:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dd40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dd0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dd0e:	e003      	b.n	800dd18 <LoopCopyDataInit>

0800dd10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dd10:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dd12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dd14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800dd16:	3104      	adds	r1, #4

0800dd18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800dd18:	480b      	ldr	r0, [pc, #44]	; (800dd48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800dd1a:	4b0c      	ldr	r3, [pc, #48]	; (800dd4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800dd1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800dd1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800dd20:	d3f6      	bcc.n	800dd10 <CopyDataInit>
  ldr  r2, =_sbss
 800dd22:	4a0b      	ldr	r2, [pc, #44]	; (800dd50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800dd24:	e002      	b.n	800dd2c <LoopFillZerobss>

0800dd26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dd26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dd28:	f842 3b04 	str.w	r3, [r2], #4

0800dd2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800dd2c:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800dd2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800dd30:	d3f9      	bcc.n	800dd26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800dd32:	f000 fa63 	bl	800e1fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800dd36:	f009 fcf1 	bl	801771c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dd3a:	f7fe ff99 	bl	800cc70 <main>
  bx  lr    
 800dd3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dd40:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800dd44:	080383a0 	.word	0x080383a0
  ldr  r0, =_sdata
 800dd48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800dd4c:	2000a780 	.word	0x2000a780
  ldr  r2, =_sbss
 800dd50:	2000a780 	.word	0x2000a780
  ldr  r3, = _ebss
 800dd54:	20021340 	.word	0x20021340

0800dd58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dd58:	e7fe      	b.n	800dd58 <ADC_IRQHandler>
	...

0800dd5c <HAL_I2C_MspInit>:
#include "camera_spi.h"
#include "main.h"
#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"
#include "stm32f7xx_hal.h"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b0ac      	sub	sp, #176	; 0xb0
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 800dd64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dd68:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800dd6e:	f107 0318 	add.w	r3, r7, #24
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7f9 f974 	bl	8007060 <HAL_RCCEx_PeriphCLKConfig>

  I2Cx_SCL_GPIO_CLK_ENABLE();
 800dd78:	4b25      	ldr	r3, [pc, #148]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7c:	4a24      	ldr	r2, [pc, #144]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800dd7e:	f043 0302 	orr.w	r3, r3, #2
 800dd82:	6313      	str	r3, [r2, #48]	; 0x30
 800dd84:	4b22      	ldr	r3, [pc, #136]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800dd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd88:	f003 0302 	and.w	r3, r3, #2
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	697b      	ldr	r3, [r7, #20]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 800dd90:	4b1f      	ldr	r3, [pc, #124]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800dd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd94:	4a1e      	ldr	r2, [pc, #120]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800dd96:	f043 0302 	orr.w	r3, r3, #2
 800dd9a:	6313      	str	r3, [r2, #48]	; 0x30
 800dd9c:	4b1c      	ldr	r3, [pc, #112]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800dd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dda0:	f003 0302 	and.w	r3, r3, #2
 800dda4:	613b      	str	r3, [r7, #16]
 800dda6:	693b      	ldr	r3, [r7, #16]

  I2Cx_CLK_ENABLE();
 800dda8:	4b19      	ldr	r3, [pc, #100]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800ddaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddac:	4a18      	ldr	r2, [pc, #96]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800ddae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddb2:	6413      	str	r3, [r2, #64]	; 0x40
 800ddb4:	4b16      	ldr	r3, [pc, #88]	; (800de10 <HAL_I2C_MspInit+0xb4>)
 800ddb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 800ddc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ddc8:	2312      	movs	r3, #18
 800ddca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 800ddda:	2304      	movs	r3, #4
 800dddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800dde0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800dde4:	4619      	mov	r1, r3
 800dde6:	480b      	ldr	r0, [pc, #44]	; (800de14 <HAL_I2C_MspInit+0xb8>)
 800dde8:	f7f7 f964 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 800ddec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800ddfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ddfe:	4619      	mov	r1, r3
 800de00:	4804      	ldr	r0, [pc, #16]	; (800de14 <HAL_I2C_MspInit+0xb8>)
 800de02:	f7f7 f957 	bl	80050b4 <HAL_GPIO_Init>
}
 800de06:	bf00      	nop
 800de08:	37b0      	adds	r7, #176	; 0xb0
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	40023800 	.word	0x40023800
 800de14:	40020400 	.word	0x40020400

0800de18 <HAL_I2C_MspDeInit>:
void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]

  I2Cx_FORCE_RESET();
 800de20:	4b0c      	ldr	r3, [pc, #48]	; (800de54 <HAL_I2C_MspDeInit+0x3c>)
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	4a0b      	ldr	r2, [pc, #44]	; (800de54 <HAL_I2C_MspDeInit+0x3c>)
 800de26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de2a:	6213      	str	r3, [r2, #32]
  I2Cx_RELEASE_RESET();
 800de2c:	4b09      	ldr	r3, [pc, #36]	; (800de54 <HAL_I2C_MspDeInit+0x3c>)
 800de2e:	6a1b      	ldr	r3, [r3, #32]
 800de30:	4a08      	ldr	r2, [pc, #32]	; (800de54 <HAL_I2C_MspDeInit+0x3c>)
 800de32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de36:	6213      	str	r3, [r2, #32]

  HAL_GPIO_DeInit(I2Cx_SCL_GPIO_PORT, I2Cx_SCL_PIN);
 800de38:	f44f 7180 	mov.w	r1, #256	; 0x100
 800de3c:	4806      	ldr	r0, [pc, #24]	; (800de58 <HAL_I2C_MspDeInit+0x40>)
 800de3e:	f7f7 fae3 	bl	8005408 <HAL_GPIO_DeInit>

  HAL_GPIO_DeInit(I2Cx_SDA_GPIO_PORT, I2Cx_SDA_PIN);
 800de42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de46:	4804      	ldr	r0, [pc, #16]	; (800de58 <HAL_I2C_MspDeInit+0x40>)
 800de48:	f7f7 fade 	bl	8005408 <HAL_GPIO_DeInit>
}
 800de4c:	bf00      	nop
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	40023800 	.word	0x40023800
 800de58:	40020400 	.word	0x40020400

0800de5c <HAL_UART_MspInit>:

    HAL_GPIO_DeInit(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_PIN);
  }
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08c      	sub	sp, #48	; 0x30
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de64:	f107 031c 	add.w	r3, r7, #28
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]
 800de6c:	605a      	str	r2, [r3, #4]
 800de6e:	609a      	str	r2, [r3, #8]
 800de70:	60da      	str	r2, [r3, #12]
 800de72:	611a      	str	r2, [r3, #16]
  if (huart->Instance == USART1) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a3c      	ldr	r2, [pc, #240]	; (800df6c <HAL_UART_MspInit+0x110>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d145      	bne.n	800df0a <HAL_UART_MspInit+0xae>

    __HAL_RCC_USART1_CLK_ENABLE();
 800de7e:	4b3c      	ldr	r3, [pc, #240]	; (800df70 <HAL_UART_MspInit+0x114>)
 800de80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de82:	4a3b      	ldr	r2, [pc, #236]	; (800df70 <HAL_UART_MspInit+0x114>)
 800de84:	f043 0310 	orr.w	r3, r3, #16
 800de88:	6453      	str	r3, [r2, #68]	; 0x44
 800de8a:	4b39      	ldr	r3, [pc, #228]	; (800df70 <HAL_UART_MspInit+0x114>)
 800de8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8e:	f003 0310 	and.w	r3, r3, #16
 800de92:	61bb      	str	r3, [r7, #24]
 800de94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de96:	4b36      	ldr	r3, [pc, #216]	; (800df70 <HAL_UART_MspInit+0x114>)
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	4a35      	ldr	r2, [pc, #212]	; (800df70 <HAL_UART_MspInit+0x114>)
 800de9c:	f043 0302 	orr.w	r3, r3, #2
 800dea0:	6313      	str	r3, [r2, #48]	; 0x30
 800dea2:	4b33      	ldr	r3, [pc, #204]	; (800df70 <HAL_UART_MspInit+0x114>)
 800dea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea6:	f003 0302 	and.w	r3, r3, #2
 800deaa:	617b      	str	r3, [r7, #20]
 800deac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800deae:	4b30      	ldr	r3, [pc, #192]	; (800df70 <HAL_UART_MspInit+0x114>)
 800deb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb2:	4a2f      	ldr	r2, [pc, #188]	; (800df70 <HAL_UART_MspInit+0x114>)
 800deb4:	f043 0301 	orr.w	r3, r3, #1
 800deb8:	6313      	str	r3, [r2, #48]	; 0x30
 800deba:	4b2d      	ldr	r3, [pc, #180]	; (800df70 <HAL_UART_MspInit+0x114>)
 800debc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800debe:	f003 0301 	and.w	r3, r3, #1
 800dec2:	613b      	str	r3, [r7, #16]
 800dec4:	693b      	ldr	r3, [r7, #16]

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800dec6:	2380      	movs	r3, #128	; 0x80
 800dec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deca:	2302      	movs	r3, #2
 800decc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ded2:	2300      	movs	r3, #0
 800ded4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ded6:	2307      	movs	r3, #7
 800ded8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800deda:	f107 031c 	add.w	r3, r7, #28
 800dede:	4619      	mov	r1, r3
 800dee0:	4824      	ldr	r0, [pc, #144]	; (800df74 <HAL_UART_MspInit+0x118>)
 800dee2:	f7f7 f8e7 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800dee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800deea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deec:	2302      	movs	r3, #2
 800deee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800def0:	2300      	movs	r3, #0
 800def2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800def4:	2300      	movs	r3, #0
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800def8:	2307      	movs	r3, #7
 800defa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800defc:	f107 031c 	add.w	r3, r7, #28
 800df00:	4619      	mov	r1, r3
 800df02:	481d      	ldr	r0, [pc, #116]	; (800df78 <HAL_UART_MspInit+0x11c>)
 800df04:	f7f7 f8d6 	bl	80050b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}
 800df08:	e02c      	b.n	800df64 <HAL_UART_MspInit+0x108>
  } else if (huart->Instance == USART6) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a1b      	ldr	r2, [pc, #108]	; (800df7c <HAL_UART_MspInit+0x120>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d127      	bne.n	800df64 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800df14:	4b16      	ldr	r3, [pc, #88]	; (800df70 <HAL_UART_MspInit+0x114>)
 800df16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df18:	4a15      	ldr	r2, [pc, #84]	; (800df70 <HAL_UART_MspInit+0x114>)
 800df1a:	f043 0320 	orr.w	r3, r3, #32
 800df1e:	6453      	str	r3, [r2, #68]	; 0x44
 800df20:	4b13      	ldr	r3, [pc, #76]	; (800df70 <HAL_UART_MspInit+0x114>)
 800df22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df24:	f003 0320 	and.w	r3, r3, #32
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df2c:	4b10      	ldr	r3, [pc, #64]	; (800df70 <HAL_UART_MspInit+0x114>)
 800df2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df30:	4a0f      	ldr	r2, [pc, #60]	; (800df70 <HAL_UART_MspInit+0x114>)
 800df32:	f043 0304 	orr.w	r3, r3, #4
 800df36:	6313      	str	r3, [r2, #48]	; 0x30
 800df38:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <HAL_UART_MspInit+0x114>)
 800df3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	60bb      	str	r3, [r7, #8]
 800df42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800df44:	23c0      	movs	r3, #192	; 0xc0
 800df46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df48:	2302      	movs	r3, #2
 800df4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df4c:	2300      	movs	r3, #0
 800df4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df50:	2303      	movs	r3, #3
 800df52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800df54:	2308      	movs	r3, #8
 800df56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df58:	f107 031c 	add.w	r3, r7, #28
 800df5c:	4619      	mov	r1, r3
 800df5e:	4808      	ldr	r0, [pc, #32]	; (800df80 <HAL_UART_MspInit+0x124>)
 800df60:	f7f7 f8a8 	bl	80050b4 <HAL_GPIO_Init>
}
 800df64:	bf00      	nop
 800df66:	3730      	adds	r7, #48	; 0x30
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	40011000 	.word	0x40011000
 800df70:	40023800 	.word	0x40023800
 800df74:	40020400 	.word	0x40020400
 800df78:	40020000 	.word	0x40020000
 800df7c:	40011400 	.word	0x40011400
 800df80:	40020800 	.word	0x40020800

0800df84 <HAL_LTDC_MspInit>:
    __HAL_RCC_USART6_CLK_DISABLE();

    HAL_GPIO_DeInit(GPIOC, ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin);
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 800df84:	b580      	push	{r7, lr}
 800df86:	b08e      	sub	sp, #56	; 0x38
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 800df8c:	4b57      	ldr	r3, [pc, #348]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800df8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df90:	4a56      	ldr	r2, [pc, #344]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800df92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df96:	6453      	str	r3, [r2, #68]	; 0x44
 800df98:	4b54      	ldr	r3, [pc, #336]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800df9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfa0:	623b      	str	r3, [r7, #32]
 800dfa2:	6a3b      	ldr	r3, [r7, #32]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800dfa4:	4b51      	ldr	r3, [pc, #324]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa8:	4a50      	ldr	r2, [pc, #320]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfaa:	f043 0310 	orr.w	r3, r3, #16
 800dfae:	6313      	str	r3, [r2, #48]	; 0x30
 800dfb0:	4b4e      	ldr	r3, [pc, #312]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb4:	f003 0310 	and.w	r3, r3, #16
 800dfb8:	61fb      	str	r3, [r7, #28]
 800dfba:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800dfbc:	4b4b      	ldr	r3, [pc, #300]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc0:	4a4a      	ldr	r2, [pc, #296]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc6:	6313      	str	r3, [r2, #48]	; 0x30
 800dfc8:	4b48      	ldr	r3, [pc, #288]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd0:	61bb      	str	r3, [r7, #24]
 800dfd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800dfd4:	4b45      	ldr	r3, [pc, #276]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd8:	4a44      	ldr	r2, [pc, #272]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfde:	6313      	str	r3, [r2, #48]	; 0x30
 800dfe0:	4b42      	ldr	r3, [pc, #264]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfe8:	617b      	str	r3, [r7, #20]
 800dfea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800dfec:	4b3f      	ldr	r3, [pc, #252]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff0:	4a3e      	ldr	r2, [pc, #248]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dff6:	6313      	str	r3, [r2, #48]	; 0x30
 800dff8:	4b3c      	ldr	r3, [pc, #240]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800dffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e000:	613b      	str	r3, [r7, #16]
 800e002:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800e004:	4b39      	ldr	r3, [pc, #228]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800e006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e008:	4a38      	ldr	r2, [pc, #224]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800e00a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e00e:	6313      	str	r3, [r2, #48]	; 0x30
 800e010:	4b36      	ldr	r3, [pc, #216]	; (800e0ec <HAL_LTDC_MspInit+0x168>)
 800e012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	68fb      	ldr	r3, [r7, #12]

  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 800e01c:	2310      	movs	r3, #16
 800e01e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800e020:	2302      	movs	r3, #2
 800e022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 800e024:	2300      	movs	r3, #0
 800e026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 800e028:	2302      	movs	r3, #2
 800e02a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800e02c:	230e      	movs	r3, #14
 800e02e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800e030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e034:	4619      	mov	r1, r3
 800e036:	482e      	ldr	r0, [pc, #184]	; (800e0f0 <HAL_LTDC_MspInit+0x16c>)
 800e038:	f7f7 f83c 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 800e03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800e042:	2302      	movs	r3, #2
 800e044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 800e046:	2309      	movs	r3, #9
 800e048:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 800e04a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e04e:	4619      	mov	r1, r3
 800e050:	4828      	ldr	r0, [pc, #160]	; (800e0f4 <HAL_LTDC_MspInit+0x170>)
 800e052:	f7f7 f82f 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 800e056:	f44f 4367 	mov.w	r3, #59136	; 0xe700
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800e05c:	2302      	movs	r3, #2
 800e05e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800e060:	230e      	movs	r3, #14
 800e062:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 800e064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e068:	4619      	mov	r1, r3
 800e06a:	4823      	ldr	r0, [pc, #140]	; (800e0f8 <HAL_LTDC_MspInit+0x174>)
 800e06c:	f7f7 f822 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin =
 800e070:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800e074:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
      GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |
      GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800e076:	2302      	movs	r3, #2
 800e078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800e07a:	230e      	movs	r3, #14
 800e07c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 800e07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e082:	4619      	mov	r1, r3
 800e084:	481d      	ldr	r0, [pc, #116]	; (800e0fc <HAL_LTDC_MspInit+0x178>)
 800e086:	f7f7 f815 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 800e08a:	23f7      	movs	r3, #247	; 0xf7
 800e08c:	627b      	str	r3, [r7, #36]	; 0x24
                            GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 800e08e:	2302      	movs	r3, #2
 800e090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 800e092:	230e      	movs	r3, #14
 800e094:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 800e096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e09a:	4619      	mov	r1, r3
 800e09c:	4818      	ldr	r0, [pc, #96]	; (800e100 <HAL_LTDC_MspInit+0x17c>)
 800e09e:	f7f7 f809 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 800e0a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 800e0ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4811      	ldr	r0, [pc, #68]	; (800e0f8 <HAL_LTDC_MspInit+0x174>)
 800e0b4:	f7f6 fffe 	bl	80050b4 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 800e0b8:	2308      	movs	r3, #8
 800e0ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 800e0c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	480e      	ldr	r0, [pc, #56]	; (800e100 <HAL_LTDC_MspInit+0x17c>)
 800e0c8:	f7f6 fff4 	bl	80050b4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e0d2:	4809      	ldr	r0, [pc, #36]	; (800e0f8 <HAL_LTDC_MspInit+0x174>)
 800e0d4:	f7f7 faba 	bl	800564c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800e0d8:	2201      	movs	r2, #1
 800e0da:	2108      	movs	r1, #8
 800e0dc:	4808      	ldr	r0, [pc, #32]	; (800e100 <HAL_LTDC_MspInit+0x17c>)
 800e0de:	f7f7 fab5 	bl	800564c <HAL_GPIO_WritePin>
}
 800e0e2:	bf00      	nop
 800e0e4:	3738      	adds	r7, #56	; 0x38
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	40023800 	.word	0x40023800
 800e0f0:	40021000 	.word	0x40021000
 800e0f4:	40021800 	.word	0x40021800
 800e0f8:	40022000 	.word	0x40022000
 800e0fc:	40022400 	.word	0x40022400
 800e100:	40022800 	.word	0x40022800

0800e104 <NMI_Handler>:
extern SAI_HandleTypeDef haudio_in_sai;
/* SDRAM handler declared in "stm32746g_discovery_sdram.c" file */
extern SDRAM_HandleTypeDef sdramHandle;


void NMI_Handler(void) {}
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
 800e108:	bf00      	nop
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <HardFault_Handler>:

void HardFault_Handler(void) {
 800e112:	b480      	push	{r7}
 800e114:	af00      	add	r7, sp, #0

  while (1) {
 800e116:	e7fe      	b.n	800e116 <HardFault_Handler+0x4>

0800e118 <MemManage_Handler>:
  }
}

void MemManage_Handler(void) {
 800e118:	b480      	push	{r7}
 800e11a:	af00      	add	r7, sp, #0

  while (1) {
 800e11c:	e7fe      	b.n	800e11c <MemManage_Handler+0x4>

0800e11e <BusFault_Handler>:
  }
}

void BusFault_Handler(void) {
 800e11e:	b480      	push	{r7}
 800e120:	af00      	add	r7, sp, #0

  while (1) {
 800e122:	e7fe      	b.n	800e122 <BusFault_Handler+0x4>

0800e124 <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void) {
 800e124:	b480      	push	{r7}
 800e126:	af00      	add	r7, sp, #0

  while (1) {
 800e128:	e7fe      	b.n	800e128 <UsageFault_Handler+0x4>

0800e12a <SVC_Handler>:
  }
}

void SVC_Handler(void) {}
 800e12a:	b480      	push	{r7}
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	bf00      	nop
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	bf00      	nop
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <PendSV_Handler>:

void PendSV_Handler(void) {}
 800e146:	b480      	push	{r7}
 800e148:	af00      	add	r7, sp, #0
 800e14a:	bf00      	nop
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <SysTick_Handler>:

void SysTick_Handler(void) { HAL_IncTick(); }
 800e154:	b580      	push	{r7, lr}
 800e156:	af00      	add	r7, sp, #0
 800e158:	f7f5 fef8 	bl	8003f4c <HAL_IncTick>
 800e15c:	bf00      	nop
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <EXTI0_IRQHandler>:

//Added
void EXTI0_IRQHandler(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 800e164:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e168:	f7f7 fa8a 	bl	8005680 <HAL_GPIO_EXTI_IRQHandler>
}
 800e16c:	bf00      	nop
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <EXTI2_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800e174:	2004      	movs	r0, #4
 800e176:	f7f7 fa83 	bl	8005680 <HAL_GPIO_EXTI_IRQHandler>
}
 800e17a:	bf00      	nop
 800e17c:	bd80      	pop	{r7, pc}
	...

0800e180 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 800e184:	4b08      	ldr	r3, [pc, #32]	; (800e1a8 <EXTI15_10_IRQHandler+0x28>)
 800e186:	695b      	ldr	r3, [r3, #20]
 800e188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d004      	beq.n	800e19a <EXTI15_10_IRQHandler+0x1a>
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 800e190:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 800e194:	f7f7 fa74 	bl	8005680 <HAL_GPIO_EXTI_IRQHandler>
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
  }
}
 800e198:	e003      	b.n	800e1a2 <EXTI15_10_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800e19a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e19e:	f7f7 fa6f 	bl	8005680 <HAL_GPIO_EXTI_IRQHandler>
}
 800e1a2:	bf00      	nop
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	40013c00 	.word	0x40013c00

0800e1ac <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800e1b0:	4b03      	ldr	r3, [pc, #12]	; (800e1c0 <DMA2_Stream7_IRQHandler+0x14>)
 800e1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f6 fa71 	bl	800469c <HAL_DMA_IRQHandler>
}
 800e1ba:	bf00      	nop
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	2000a874 	.word	0x2000a874

0800e1c4 <DMA2_Stream1_IRQHandler>:
  * @brief  DMA interrupt handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0
//  BSP_CAMERA_DMA_IRQHandler();
}
 800e1c8:	bf00      	nop
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
	...

0800e1d4 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 6 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800e1d8:	4b03      	ldr	r3, [pc, #12]	; (800e1e8 <DMA2_Stream4_IRQHandler+0x14>)
 800e1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7f6 fa5d 	bl	800469c <HAL_DMA_IRQHandler>
}
 800e1e2:	bf00      	nop
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	2000a7f0 	.word	0x2000a7f0

0800e1ec <DCMI_IRQHandler>:
  * @brief  DCMI interrupt handler.
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	af00      	add	r7, sp, #0
//  BSP_CAMERA_IRQHandler();
}
 800e1f0:	bf00      	nop
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
	...

0800e1fc <SystemInit>:
#define VECT_TAB_OFFSET 0x00
uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0,
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 800e200:	4b15      	ldr	r3, [pc, #84]	; (800e258 <SystemInit+0x5c>)
 800e202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e206:	4a14      	ldr	r2, [pc, #80]	; (800e258 <SystemInit+0x5c>)
 800e208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e20c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CR |= (uint32_t)0x00000001;
 800e210:	4b12      	ldr	r3, [pc, #72]	; (800e25c <SystemInit+0x60>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a11      	ldr	r2, [pc, #68]	; (800e25c <SystemInit+0x60>)
 800e216:	f043 0301 	orr.w	r3, r3, #1
 800e21a:	6013      	str	r3, [r2, #0]

  RCC->CFGR = 0x00000000;
 800e21c:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <SystemInit+0x60>)
 800e21e:	2200      	movs	r2, #0
 800e220:	609a      	str	r2, [r3, #8]

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e222:	4b0e      	ldr	r3, [pc, #56]	; (800e25c <SystemInit+0x60>)
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	490d      	ldr	r1, [pc, #52]	; (800e25c <SystemInit+0x60>)
 800e228:	4b0d      	ldr	r3, [pc, #52]	; (800e260 <SystemInit+0x64>)
 800e22a:	4013      	ands	r3, r2
 800e22c:	600b      	str	r3, [r1, #0]

  RCC->PLLCFGR = 0x24003010;
 800e22e:	4b0b      	ldr	r3, [pc, #44]	; (800e25c <SystemInit+0x60>)
 800e230:	4a0c      	ldr	r2, [pc, #48]	; (800e264 <SystemInit+0x68>)
 800e232:	605a      	str	r2, [r3, #4]

  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e234:	4b09      	ldr	r3, [pc, #36]	; (800e25c <SystemInit+0x60>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a08      	ldr	r2, [pc, #32]	; (800e25c <SystemInit+0x60>)
 800e23a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e23e:	6013      	str	r3, [r2, #0]

  RCC->CIR = 0x00000000;
 800e240:	4b06      	ldr	r3, [pc, #24]	; (800e25c <SystemInit+0x60>)
 800e242:	2200      	movs	r2, #0
 800e244:	60da      	str	r2, [r3, #12]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 800e246:	4b04      	ldr	r3, [pc, #16]	; (800e258 <SystemInit+0x5c>)
 800e248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e24c:	609a      	str	r2, [r3, #8]
#endif
}
 800e24e:	bf00      	nop
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	e000ed00 	.word	0xe000ed00
 800e25c:	40023800 	.word	0x40023800
 800e260:	fef6ffff 	.word	0xfef6ffff
 800e264:	24003010 	.word	0x24003010

0800e268 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 800e268:	b5b0      	push	{r4, r5, r7, lr}
 800e26a:	b096      	sub	sp, #88	; 0x58
 800e26c:	af0a      	add	r7, sp, #40	; 0x28
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	461a      	mov	r2, r3
 800e276:	4603      	mov	r3, r0
 800e278:	817b      	strh	r3, [r7, #10]
 800e27a:	460b      	mov	r3, r1
 800e27c:	813b      	strh	r3, [r7, #8]
 800e27e:	4613      	mov	r3, r2
 800e280:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 800e282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e284:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	627b      	str	r3, [r7, #36]	; 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 800e28a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e28e:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 800e290:	2300      	movs	r3, #0
 800e292:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e294:	e007      	b.n	800e2a6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x3e>
        *cols_8b++ = PAD8;
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	627a      	str	r2, [r7, #36]	; 0x24
 800e29c:	7dfa      	ldrb	r2, [r7, #23]
 800e29e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 2; i++){
 800e2a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e2a6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e2a8:	897b      	ldrh	r3, [r7, #10]
 800e2aa:	3302      	adds	r3, #2
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	dbf2      	blt.n	800e296 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e2b4:	e010      	b.n	800e2d8 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x70>
        *cols_8b++ = PAD8;//left
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	1c5a      	adds	r2, r3, #1
 800e2ba:	627a      	str	r2, [r7, #36]	; 0x24
 800e2bc:	7dfa      	ldrb	r2, [r7, #23]
 800e2be:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 800e2c0:	897b      	ldrh	r3, [r7, #10]
 800e2c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2c4:	4413      	add	r3, r2
 800e2c6:	627b      	str	r3, [r7, #36]	; 0x24
        *cols_8b++ = PAD8;//right
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	627a      	str	r2, [r7, #36]	; 0x24
 800e2ce:	7dfa      	ldrb	r2, [r7, #23]
 800e2d0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 800e2d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e2d8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e2da:	893b      	ldrh	r3, [r7, #8]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d3ea      	bcc.n	800e2b6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x4e>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e2e4:	e007      	b.n	800e2f6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x8e>
        *cols_8b++ = PAD8;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	1c5a      	adds	r2, r3, #1
 800e2ea:	627a      	str	r2, [r7, #36]	; 0x24
 800e2ec:	7dfa      	ldrb	r2, [r7, #23]
 800e2ee:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 2; i++){
 800e2f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e2f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e2f8:	897b      	ldrh	r3, [r7, #10]
 800e2fa:	3302      	adds	r3, #2
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	dbf2      	blt.n	800e2e6 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x7e>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 800e300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e302:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 800e304:	2300      	movs	r3, #0
 800e306:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e308:	e059      	b.n	800e3be <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0x156>
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 800e30a:	897b      	ldrh	r3, [r7, #10]
 800e30c:	3302      	adds	r3, #2
 800e30e:	69ba      	ldr	r2, [r7, #24]
 800e310:	4413      	add	r3, r2
 800e312:	627b      	str	r3, [r7, #36]	; 0x24
        src = input;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 800e318:	2300      	movs	r3, #0
 800e31a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e31c:	e01d      	b.n	800e35a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xf2>
            cols_8b += 1;//skip front
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	3301      	adds	r3, #1
 800e322:	627b      	str	r3, [r7, #36]	; 0x24
            for(j = 0; j < input_x; j++){
 800e324:	2300      	movs	r3, #0
 800e326:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e328:	e00d      	b.n	800e346 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xde>
                *cols_8b++ = *src;// + input_offset; //It is important to add the input offset
 800e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32c:	1c5a      	adds	r2, r3, #1
 800e32e:	627a      	str	r2, [r7, #36]	; 0x24
 800e330:	6a3a      	ldr	r2, [r7, #32]
 800e332:	f992 2000 	ldrsb.w	r2, [r2]
 800e336:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 800e338:	88fb      	ldrh	r3, [r7, #6]
 800e33a:	6a3a      	ldr	r2, [r7, #32]
 800e33c:	4413      	add	r3, r2
 800e33e:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 800e340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e342:	3301      	adds	r3, #1
 800e344:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e346:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e348:	897b      	ldrh	r3, [r7, #10]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d3ed      	bcc.n	800e32a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xc2>
            }
            cols_8b += 1;//skip end
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e350:	3301      	adds	r3, #1
 800e352:	627b      	str	r3, [r7, #36]	; 0x24
        for(i = 0; i < input_y; i++){
 800e354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e356:	3301      	adds	r3, #1
 800e358:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e35a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e35c:	893b      	ldrh	r3, [r7, #8]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d3dd      	bcc.n	800e31e <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xb6>
        }
        q7_t *inplace_out = input;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	613b      	str	r3, [r7, #16]
        depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800e366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e368:	1d13      	adds	r3, r2, #4
 800e36a:	647b      	str	r3, [r7, #68]	; 0x44
 800e36c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e36e:	1d0b      	adds	r3, r1, #4
 800e370:	64bb      	str	r3, [r7, #72]	; 0x48
 800e372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e374:	1d18      	adds	r0, r3, #4
 800e376:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e378:	88f8      	ldrh	r0, [r7, #6]
 800e37a:	f8b7 5064 	ldrh.w	r5, [r7, #100]	; 0x64
 800e37e:	f8b7 4068 	ldrh.w	r4, [r7, #104]	; 0x68
 800e382:	9008      	str	r0, [sp, #32]
 800e384:	8978      	ldrh	r0, [r7, #10]
 800e386:	9007      	str	r0, [sp, #28]
 800e388:	69b8      	ldr	r0, [r7, #24]
 800e38a:	9006      	str	r0, [sp, #24]
 800e38c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e38e:	9005      	str	r0, [sp, #20]
 800e390:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e392:	9004      	str	r0, [sp, #16]
 800e394:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e396:	9003      	str	r0, [sp, #12]
 800e398:	6938      	ldr	r0, [r7, #16]
 800e39a:	9002      	str	r0, [sp, #8]
 800e39c:	9301      	str	r3, [sp, #4]
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f000 f812 	bl	800e3d0 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq>
        ksrc += 9;
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	3309      	adds	r3, #9
 800e3b0:	61fb      	str	r3, [r7, #28]
        input++;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 800e3b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e3be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e3c0:	88fb      	ldrh	r3, [r7, #6]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d3a1      	bcc.n	800e30a <depthwise_kernel3x3_stride1_inplace_CHW_fpreq+0xa2>
    }

}
 800e3c6:	bf00      	nop
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3730      	adds	r7, #48	; 0x30
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bdb0      	pop	{r4, r5, r7, pc}

0800e3d0 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b08d      	sub	sp, #52	; 0x34
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60ba      	str	r2, [r7, #8]
 800e3d8:	607b      	str	r3, [r7, #4]
 800e3da:	4603      	mov	r3, r0
 800e3dc:	81fb      	strh	r3, [r7, #14]
 800e3de:	460b      	mov	r3, r1
 800e3e0:	81bb      	strh	r3, [r7, #12]
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3e6:	e257      	b.n	800e898 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x4c8>
        for (j = 0; j < output_x / 2; j++) {
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3ec:	e17d      	b.n	800e6ea <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x31a>
            q7_t *cols_8b = cols_8b_iterptr;
 800e3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f0:	61fb      	str	r3, [r7, #28]

            q31_t sum0 = bias[0] + biasR[0];
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	61bb      	str	r3, [r7, #24]
            q31_t sum1 = bias[0] + biasR[0];
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4413      	add	r3, r2
 800e408:	617b      	str	r3, [r7, #20]
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	f993 3000 	ldrsb.w	r3, [r3]
 800e410:	461a      	mov	r2, r3
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	f993 3000 	ldrsb.w	r3, [r3]
 800e418:	fb03 f302 	mul.w	r3, r3, r2
 800e41c:	69ba      	ldr	r2, [r7, #24]
 800e41e:	4413      	add	r3, r2
 800e420:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[0];
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	3301      	adds	r3, #1
 800e426:	f993 3000 	ldrsb.w	r3, [r3]
 800e42a:	461a      	mov	r2, r3
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	f993 3000 	ldrsb.w	r3, [r3]
 800e432:	fb03 f302 	mul.w	r3, r3, r2
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	4413      	add	r3, r2
 800e43a:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[1];
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	3301      	adds	r3, #1
 800e440:	f993 3000 	ldrsb.w	r3, [r3]
 800e444:	461a      	mov	r2, r3
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	3301      	adds	r3, #1
 800e44a:	f993 3000 	ldrsb.w	r3, [r3]
 800e44e:	fb03 f302 	mul.w	r3, r3, r2
 800e452:	69ba      	ldr	r2, [r7, #24]
 800e454:	4413      	add	r3, r2
 800e456:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[1];
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	3302      	adds	r3, #2
 800e45c:	f993 3000 	ldrsb.w	r3, [r3]
 800e460:	461a      	mov	r2, r3
 800e462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e464:	3301      	adds	r3, #1
 800e466:	f993 3000 	ldrsb.w	r3, [r3]
 800e46a:	fb03 f302 	mul.w	r3, r3, r2
 800e46e:	697a      	ldr	r2, [r7, #20]
 800e470:	4413      	add	r3, r2
 800e472:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[2];
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	3302      	adds	r3, #2
 800e478:	f993 3000 	ldrsb.w	r3, [r3]
 800e47c:	461a      	mov	r2, r3
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	3302      	adds	r3, #2
 800e482:	f993 3000 	ldrsb.w	r3, [r3]
 800e486:	fb03 f302 	mul.w	r3, r3, r2
 800e48a:	69ba      	ldr	r2, [r7, #24]
 800e48c:	4413      	add	r3, r2
 800e48e:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[2];
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	3303      	adds	r3, #3
 800e494:	f993 3000 	ldrsb.w	r3, [r3]
 800e498:	461a      	mov	r2, r3
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	3302      	adds	r3, #2
 800e49e:	f993 3000 	ldrsb.w	r3, [r3]
 800e4a2:	fb03 f302 	mul.w	r3, r3, r2
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 2;
 800e4ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e4b0:	3302      	adds	r3, #2
 800e4b2:	69fa      	ldr	r2, [r7, #28]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[3];
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	f993 3000 	ldrsb.w	r3, [r3]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c2:	3303      	adds	r3, #3
 800e4c4:	f993 3000 	ldrsb.w	r3, [r3]
 800e4c8:	fb03 f302 	mul.w	r3, r3, r2
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[3];
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	f993 3000 	ldrsb.w	r3, [r3]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4de:	3303      	adds	r3, #3
 800e4e0:	f993 3000 	ldrsb.w	r3, [r3]
 800e4e4:	fb03 f302 	mul.w	r3, r3, r2
 800e4e8:	697a      	ldr	r2, [r7, #20]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[4];
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	f993 3000 	ldrsb.w	r3, [r3]
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	f993 3000 	ldrsb.w	r3, [r3]
 800e500:	fb03 f302 	mul.w	r3, r3, r2
 800e504:	69ba      	ldr	r2, [r7, #24]
 800e506:	4413      	add	r3, r2
 800e508:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[4];
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	3302      	adds	r3, #2
 800e50e:	f993 3000 	ldrsb.w	r3, [r3]
 800e512:	461a      	mov	r2, r3
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	3304      	adds	r3, #4
 800e518:	f993 3000 	ldrsb.w	r3, [r3]
 800e51c:	fb03 f302 	mul.w	r3, r3, r2
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	4413      	add	r3, r2
 800e524:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[5];
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	3302      	adds	r3, #2
 800e52a:	f993 3000 	ldrsb.w	r3, [r3]
 800e52e:	461a      	mov	r2, r3
 800e530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e532:	3305      	adds	r3, #5
 800e534:	f993 3000 	ldrsb.w	r3, [r3]
 800e538:	fb03 f302 	mul.w	r3, r3, r2
 800e53c:	69ba      	ldr	r2, [r7, #24]
 800e53e:	4413      	add	r3, r2
 800e540:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[5];
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	3303      	adds	r3, #3
 800e546:	f993 3000 	ldrsb.w	r3, [r3]
 800e54a:	461a      	mov	r2, r3
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	3305      	adds	r3, #5
 800e550:	f993 3000 	ldrsb.w	r3, [r3]
 800e554:	fb03 f302 	mul.w	r3, r3, r2
 800e558:	697a      	ldr	r2, [r7, #20]
 800e55a:	4413      	add	r3, r2
 800e55c:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 2;
 800e55e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e562:	3302      	adds	r3, #2
 800e564:	69fa      	ldr	r2, [r7, #28]
 800e566:	4413      	add	r3, r2
 800e568:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[6];
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	f993 3000 	ldrsb.w	r3, [r3]
 800e570:	461a      	mov	r2, r3
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	3306      	adds	r3, #6
 800e576:	f993 3000 	ldrsb.w	r3, [r3]
 800e57a:	fb03 f302 	mul.w	r3, r3, r2
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	4413      	add	r3, r2
 800e582:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[6];
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	3301      	adds	r3, #1
 800e588:	f993 3000 	ldrsb.w	r3, [r3]
 800e58c:	461a      	mov	r2, r3
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	3306      	adds	r3, #6
 800e592:	f993 3000 	ldrsb.w	r3, [r3]
 800e596:	fb03 f302 	mul.w	r3, r3, r2
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	4413      	add	r3, r2
 800e59e:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[7];
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	f993 3000 	ldrsb.w	r3, [r3]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	3307      	adds	r3, #7
 800e5ae:	f993 3000 	ldrsb.w	r3, [r3]
 800e5b2:	fb03 f302 	mul.w	r3, r3, r2
 800e5b6:	69ba      	ldr	r2, [r7, #24]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[7];
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	3302      	adds	r3, #2
 800e5c0:	f993 3000 	ldrsb.w	r3, [r3]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c8:	3307      	adds	r3, #7
 800e5ca:	f993 3000 	ldrsb.w	r3, [r3]
 800e5ce:	fb03 f302 	mul.w	r3, r3, r2
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[8];
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	3302      	adds	r3, #2
 800e5dc:	f993 3000 	ldrsb.w	r3, [r3]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	3308      	adds	r3, #8
 800e5e6:	f993 3000 	ldrsb.w	r3, [r3]
 800e5ea:	fb03 f302 	mul.w	r3, r3, r2
 800e5ee:	69ba      	ldr	r2, [r7, #24]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[8];
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	3303      	adds	r3, #3
 800e5f8:	f993 3000 	ldrsb.w	r3, [r3]
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	3308      	adds	r3, #8
 800e602:	f993 3000 	ldrsb.w	r3, [r3]
 800e606:	fb03 f302 	mul.w	r3, r3, r2
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	4413      	add	r3, r2
 800e60e:	617b      	str	r3, [r7, #20]

            /* requantize */
            sum0 = MAX(sum0, 0); //ReLU
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e616:	61bb      	str	r3, [r7, #24]
            sum0 = (float) sum0 * *scales;
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	ee07 3a90 	vmov	s15, r3
 800e61e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e624:	edd3 7a00 	vldr	s15, [r3]
 800e628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e62c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e630:	ee17 3a90 	vmov	r3, s15
 800e634:	61bb      	str	r3, [r7, #24]
            sum0 += output_offset; //Output offset is the next layer input zero
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e63a:	4413      	add	r3, r2
 800e63c:	61bb      	str	r3, [r7, #24]
            sum0 = MAX(sum0, activation_min);
 800e63e:	69ba      	ldr	r2, [r7, #24]
 800e640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e642:	4293      	cmp	r3, r2
 800e644:	bfb8      	it	lt
 800e646:	4613      	movlt	r3, r2
 800e648:	61bb      	str	r3, [r7, #24]
            sum0 = MIN(sum0, activation_max);
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e64e:	4293      	cmp	r3, r2
 800e650:	bfa8      	it	ge
 800e652:	4613      	movge	r3, r2
 800e654:	61bb      	str	r3, [r7, #24]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800e656:	89bb      	ldrh	r3, [r7, #12]
 800e658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e65a:	fb02 f203 	mul.w	r2, r2, r3
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	005b      	lsls	r3, r3, #1
 800e662:	4413      	add	r3, r2
 800e664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e666:	fb02 f303 	mul.w	r3, r2, r3
 800e66a:	461a      	mov	r2, r3
 800e66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66e:	4413      	add	r3, r2
 800e670:	69ba      	ldr	r2, [r7, #24]
 800e672:	b252      	sxtb	r2, r2
 800e674:	701a      	strb	r2, [r3, #0]

            sum1 = MAX(sum1, 0); //ReLU
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e67c:	617b      	str	r3, [r7, #20]
            sum1 = (float) sum1 * *scales;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	ee07 3a90 	vmov	s15, r3
 800e684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68a:	edd3 7a00 	vldr	s15, [r3]
 800e68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e696:	ee17 3a90 	vmov	r3, s15
 800e69a:	617b      	str	r3, [r7, #20]
            sum1 += output_offset; //Output offset is the next layer input zero
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6a0:	4413      	add	r3, r2
 800e6a2:	617b      	str	r3, [r7, #20]
            sum1 = MAX(sum1, activation_min);
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	bfb8      	it	lt
 800e6ac:	4613      	movlt	r3, r2
 800e6ae:	617b      	str	r3, [r7, #20]
            sum1 = MIN(sum1, activation_max);
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	bfa8      	it	ge
 800e6b8:	4613      	movge	r3, r2
 800e6ba:	617b      	str	r3, [r7, #20]
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800e6bc:	89bb      	ldrh	r3, [r7, #12]
 800e6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6c0:	fb02 f203 	mul.w	r2, r2, r3
 800e6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	4413      	add	r3, r2
 800e6cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6ce:	fb02 f303 	mul.w	r3, r2, r3
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d6:	4413      	add	r3, r2
 800e6d8:	697a      	ldr	r2, [r7, #20]
 800e6da:	b252      	sxtb	r2, r2
 800e6dc:	701a      	strb	r2, [r3, #0]

            cols_8b_iterptr += STRIDE * 2;
 800e6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e0:	3302      	adds	r3, #2
 800e6e2:	653b      	str	r3, [r7, #80]	; 0x50
        for (j = 0; j < output_x / 2; j++) {
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6ea:	89bb      	ldrh	r3, [r7, #12]
 800e6ec:	085b      	lsrs	r3, r3, #1
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	f6ff ae7a 	blt.w	800e3ee <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x1e>
        }
        if (output_x & 1) {
 800e6fa:	89bb      	ldrh	r3, [r7, #12]
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 80c3 	beq.w	800e88c <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x4bc>
            q7_t * cols_8b = cols_8b_iterptr;
 800e706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e708:	627b      	str	r3, [r7, #36]	; 0x24
            q31_t sum = bias[0] + biasR[0];
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4413      	add	r3, r2
 800e714:	623b      	str	r3, [r7, #32]
            sum += cols_8b[0]*ksrc[0];
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	f993 3000 	ldrsb.w	r3, [r3]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e720:	f993 3000 	ldrsb.w	r3, [r3]
 800e724:	fb03 f302 	mul.w	r3, r3, r2
 800e728:	6a3a      	ldr	r2, [r7, #32]
 800e72a:	4413      	add	r3, r2
 800e72c:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[1];
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	3301      	adds	r3, #1
 800e732:	f993 3000 	ldrsb.w	r3, [r3]
 800e736:	461a      	mov	r2, r3
 800e738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73a:	3301      	adds	r3, #1
 800e73c:	f993 3000 	ldrsb.w	r3, [r3]
 800e740:	fb03 f302 	mul.w	r3, r3, r2
 800e744:	6a3a      	ldr	r2, [r7, #32]
 800e746:	4413      	add	r3, r2
 800e748:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[2];
 800e74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74c:	3302      	adds	r3, #2
 800e74e:	f993 3000 	ldrsb.w	r3, [r3]
 800e752:	461a      	mov	r2, r3
 800e754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e756:	3302      	adds	r3, #2
 800e758:	f993 3000 	ldrsb.w	r3, [r3]
 800e75c:	fb03 f302 	mul.w	r3, r3, r2
 800e760:	6a3a      	ldr	r2, [r7, #32]
 800e762:	4413      	add	r3, r2
 800e764:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 2;
 800e766:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e76a:	3302      	adds	r3, #2
 800e76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e76e:	4413      	add	r3, r2
 800e770:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[3];
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	f993 3000 	ldrsb.w	r3, [r3]
 800e778:	461a      	mov	r2, r3
 800e77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77c:	3303      	adds	r3, #3
 800e77e:	f993 3000 	ldrsb.w	r3, [r3]
 800e782:	fb03 f302 	mul.w	r3, r3, r2
 800e786:	6a3a      	ldr	r2, [r7, #32]
 800e788:	4413      	add	r3, r2
 800e78a:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[4];
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	3301      	adds	r3, #1
 800e790:	f993 3000 	ldrsb.w	r3, [r3]
 800e794:	461a      	mov	r2, r3
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	3304      	adds	r3, #4
 800e79a:	f993 3000 	ldrsb.w	r3, [r3]
 800e79e:	fb03 f302 	mul.w	r3, r3, r2
 800e7a2:	6a3a      	ldr	r2, [r7, #32]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[5];
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7aa:	3302      	adds	r3, #2
 800e7ac:	f993 3000 	ldrsb.w	r3, [r3]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b4:	3305      	adds	r3, #5
 800e7b6:	f993 3000 	ldrsb.w	r3, [r3]
 800e7ba:	fb03 f302 	mul.w	r3, r3, r2
 800e7be:	6a3a      	ldr	r2, [r7, #32]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 2;
 800e7c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e7c8:	3302      	adds	r3, #2
 800e7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7cc:	4413      	add	r3, r2
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[6];
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	f993 3000 	ldrsb.w	r3, [r3]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7da:	3306      	adds	r3, #6
 800e7dc:	f993 3000 	ldrsb.w	r3, [r3]
 800e7e0:	fb03 f302 	mul.w	r3, r3, r2
 800e7e4:	6a3a      	ldr	r2, [r7, #32]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[7];
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	f993 3000 	ldrsb.w	r3, [r3]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	3307      	adds	r3, #7
 800e7f8:	f993 3000 	ldrsb.w	r3, [r3]
 800e7fc:	fb03 f302 	mul.w	r3, r3, r2
 800e800:	6a3a      	ldr	r2, [r7, #32]
 800e802:	4413      	add	r3, r2
 800e804:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[8];
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	3302      	adds	r3, #2
 800e80a:	f993 3000 	ldrsb.w	r3, [r3]
 800e80e:	461a      	mov	r2, r3
 800e810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e812:	3308      	adds	r3, #8
 800e814:	f993 3000 	ldrsb.w	r3, [r3]
 800e818:	fb03 f302 	mul.w	r3, r3, r2
 800e81c:	6a3a      	ldr	r2, [r7, #32]
 800e81e:	4413      	add	r3, r2
 800e820:	623b      	str	r3, [r7, #32]

            sum = MAX(sum, 0); //ReLU
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e828:	623b      	str	r3, [r7, #32]
            sum = (float) sum * *scales;
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	ee07 3a90 	vmov	s15, r3
 800e830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e836:	edd3 7a00 	vldr	s15, [r3]
 800e83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e83e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e842:	ee17 3a90 	vmov	r3, s15
 800e846:	623b      	str	r3, [r7, #32]
            sum += output_offset; //Output offset is the next layer input zero
 800e848:	6a3a      	ldr	r2, [r7, #32]
 800e84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e84c:	4413      	add	r3, r2
 800e84e:	623b      	str	r3, [r7, #32]
            sum = MAX(sum, activation_min);
 800e850:	6a3a      	ldr	r2, [r7, #32]
 800e852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e854:	4293      	cmp	r3, r2
 800e856:	bfb8      	it	lt
 800e858:	4613      	movlt	r3, r2
 800e85a:	623b      	str	r3, [r7, #32]
            sum = MIN(sum, activation_max);
 800e85c:	6a3a      	ldr	r2, [r7, #32]
 800e85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e860:	4293      	cmp	r3, r2
 800e862:	bfa8      	it	ge
 800e864:	4613      	movge	r3, r2
 800e866:	623b      	str	r3, [r7, #32]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	3301      	adds	r3, #1
 800e86c:	89ba      	ldrh	r2, [r7, #12]
 800e86e:	fb02 f303 	mul.w	r3, r2, r3
 800e872:	3b01      	subs	r3, #1
 800e874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e876:	fb02 f303 	mul.w	r3, r2, r3
 800e87a:	461a      	mov	r2, r3
 800e87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e87e:	4413      	add	r3, r2
 800e880:	6a3a      	ldr	r2, [r7, #32]
 800e882:	b252      	sxtb	r2, r2
 800e884:	701a      	strb	r2, [r3, #0]

            cols_8b_iterptr += STRIDE;
 800e886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e888:	3301      	adds	r3, #1
 800e88a:	653b      	str	r3, [r7, #80]	; 0x50
        }
        cols_8b_iterptr += 1 * 2;
 800e88c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e88e:	3302      	adds	r3, #2
 800e890:	653b      	str	r3, [r7, #80]	; 0x50
    for (i = 0; i < output_y; i++) {
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	3301      	adds	r3, #1
 800e896:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e898:	89fb      	ldrh	r3, [r7, #14]
 800e89a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e89c:	429a      	cmp	r2, r3
 800e89e:	f6ff ada3 	blt.w	800e3e8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW_fpreq+0x18>
    }
}
 800e8a2:	bf00      	nop
 800e8a4:	3734      	adds	r7, #52	; 0x34
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 800e8ae:	b5b0      	push	{r4, r5, r7, lr}
 800e8b0:	b096      	sub	sp, #88	; 0x58
 800e8b2:	af0a      	add	r7, sp, #40	; 0x28
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	4608      	mov	r0, r1
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	4603      	mov	r3, r0
 800e8be:	817b      	strh	r3, [r7, #10]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	813b      	strh	r3, [r7, #8]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 800e8c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8ca:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	627b      	str	r3, [r7, #36]	; 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 800e8d0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e8d4:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 6; i++){
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e8da:	e011      	b.n	800e900 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x52>
        *cols_8b++ = PAD8;
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	627a      	str	r2, [r7, #36]	; 0x24
 800e8e2:	7dfa      	ldrb	r2, [r7, #23]
 800e8e4:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	1c5a      	adds	r2, r3, #1
 800e8ea:	627a      	str	r2, [r7, #36]	; 0x24
 800e8ec:	7dfa      	ldrb	r2, [r7, #23]
 800e8ee:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	1c5a      	adds	r2, r3, #1
 800e8f4:	627a      	str	r2, [r7, #36]	; 0x24
 800e8f6:	7dfa      	ldrb	r2, [r7, #23]
 800e8f8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 6; i++){
 800e8fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e900:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e902:	897b      	ldrh	r3, [r7, #10]
 800e904:	3306      	adds	r3, #6
 800e906:	429a      	cmp	r2, r3
 800e908:	dbe8      	blt.n	800e8dc <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 800e90a:	2300      	movs	r3, #0
 800e90c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e90e:	e024      	b.n	800e95a <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xac>
        *cols_8b++ = PAD8;//left
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	627a      	str	r2, [r7, #36]	; 0x24
 800e916:	7dfa      	ldrb	r2, [r7, #23]
 800e918:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 800e91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	627a      	str	r2, [r7, #36]	; 0x24
 800e920:	7dfa      	ldrb	r2, [r7, #23]
 800e922:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 800e924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e926:	1c5a      	adds	r2, r3, #1
 800e928:	627a      	str	r2, [r7, #36]	; 0x24
 800e92a:	7dfa      	ldrb	r2, [r7, #23]
 800e92c:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 800e92e:	897b      	ldrh	r3, [r7, #10]
 800e930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e932:	4413      	add	r3, r2
 800e934:	627b      	str	r3, [r7, #36]	; 0x24
        *cols_8b++ = PAD8;//right
 800e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	627a      	str	r2, [r7, #36]	; 0x24
 800e93c:	7dfa      	ldrb	r2, [r7, #23]
 800e93e:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	627a      	str	r2, [r7, #36]	; 0x24
 800e946:	7dfa      	ldrb	r2, [r7, #23]
 800e948:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	627a      	str	r2, [r7, #36]	; 0x24
 800e950:	7dfa      	ldrb	r2, [r7, #23]
 800e952:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 800e954:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e956:	3301      	adds	r3, #1
 800e958:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e95a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e95c:	893b      	ldrh	r3, [r7, #8]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d3d6      	bcc.n	800e910 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x62>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 6; i++){
 800e962:	2300      	movs	r3, #0
 800e964:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e966:	e011      	b.n	800e98c <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xde>
        *cols_8b++ = PAD8;
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	627a      	str	r2, [r7, #36]	; 0x24
 800e96e:	7dfa      	ldrb	r2, [r7, #23]
 800e970:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	1c5a      	adds	r2, r3, #1
 800e976:	627a      	str	r2, [r7, #36]	; 0x24
 800e978:	7dfa      	ldrb	r2, [r7, #23]
 800e97a:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	627a      	str	r2, [r7, #36]	; 0x24
 800e982:	7dfa      	ldrb	r2, [r7, #23]
 800e984:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 6; i++){
 800e986:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e988:	3301      	adds	r3, #1
 800e98a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e98c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e98e:	897b      	ldrh	r3, [r7, #10]
 800e990:	3306      	adds	r3, #6
 800e992:	429a      	cmp	r2, r3
 800e994:	dbe8      	blt.n	800e968 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xba>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 800e996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e998:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 800e99a:	2300      	movs	r3, #0
 800e99c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e99e:	e05c      	b.n	800ea5a <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x1ac>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 800e9a0:	897a      	ldrh	r2, [r7, #10]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	4413      	add	r3, r2
 800e9a8:	3312      	adds	r3, #18
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	627b      	str	r3, [r7, #36]	; 0x24
        src = input;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e9b8:	e01d      	b.n	800e9f6 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x148>
            cols_8b += 3;//skip front
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	3303      	adds	r3, #3
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24
            for(j = 0; j < input_x; j++){
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e9c4:	e00d      	b.n	800e9e2 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x134>
                *cols_8b++ = *src;// + input_offset; //Adding the input offset is important
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	627a      	str	r2, [r7, #36]	; 0x24
 800e9cc:	6a3a      	ldr	r2, [r7, #32]
 800e9ce:	f992 2000 	ldrsb.w	r2, [r2]
 800e9d2:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 800e9d4:	88fb      	ldrh	r3, [r7, #6]
 800e9d6:	6a3a      	ldr	r2, [r7, #32]
 800e9d8:	4413      	add	r3, r2
 800e9da:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 800e9dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9de:	3301      	adds	r3, #1
 800e9e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e9e2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e9e4:	897b      	ldrh	r3, [r7, #10]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d3ed      	bcc.n	800e9c6 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x118>
            }
            cols_8b += 3;//skip end
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	3303      	adds	r3, #3
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
        for(i = 0; i < input_y; i++){
 800e9f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e9f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e9f8:	893b      	ldrh	r3, [r7, #8]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d3dd      	bcc.n	800e9ba <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0x10c>
        }
        q7_t *inplace_out = input;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	613b      	str	r3, [r7, #16]
        depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq(output_y, output_x, bias++, biasR++, ksrc, scales++, inplace_out, output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800ea02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea04:	1d13      	adds	r3, r2, #4
 800ea06:	647b      	str	r3, [r7, #68]	; 0x44
 800ea08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea0a:	1d0b      	adds	r3, r1, #4
 800ea0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea10:	1d18      	adds	r0, r3, #4
 800ea12:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ea14:	88f8      	ldrh	r0, [r7, #6]
 800ea16:	f8b7 5064 	ldrh.w	r5, [r7, #100]	; 0x64
 800ea1a:	f8b7 4068 	ldrh.w	r4, [r7, #104]	; 0x68
 800ea1e:	9008      	str	r0, [sp, #32]
 800ea20:	8978      	ldrh	r0, [r7, #10]
 800ea22:	9007      	str	r0, [sp, #28]
 800ea24:	69b8      	ldr	r0, [r7, #24]
 800ea26:	9006      	str	r0, [sp, #24]
 800ea28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ea2a:	9005      	str	r0, [sp, #20]
 800ea2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ea2e:	9004      	str	r0, [sp, #16]
 800ea30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ea32:	9003      	str	r0, [sp, #12]
 800ea34:	6938      	ldr	r0, [r7, #16]
 800ea36:	9002      	str	r0, [sp, #8]
 800ea38:	9301      	str	r3, [sp, #4]
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	4629      	mov	r1, r5
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 f812 	bl	800ea6c <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>
        ksrc += 49;
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	3331      	adds	r3, #49	; 0x31
 800ea4c:	61fb      	str	r3, [r7, #28]
        input++;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3301      	adds	r3, #1
 800ea52:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 800ea54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea56:	3301      	adds	r3, #1
 800ea58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ea5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea5c:	88fb      	ldrh	r3, [r7, #6]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d39e      	bcc.n	800e9a0 <depthwise_kernel7x7_stride1_inplace_CHW_fpreq+0xf2>
    }

}
 800ea62:	bf00      	nop
 800ea64:	4618      	mov	r0, r3
 800ea66:	3730      	adds	r7, #48	; 0x30
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ea6c <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const float *scales,
        q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b08d      	sub	sp, #52	; 0x34
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60ba      	str	r2, [r7, #8]
 800ea74:	607b      	str	r3, [r7, #4]
 800ea76:	4603      	mov	r3, r0
 800ea78:	81fb      	strh	r3, [r7, #14]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	81bb      	strh	r3, [r7, #12]
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 800ea7e:	2300      	movs	r3, #0
 800ea80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea82:	f001 b911 	b.w	800fca8 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x123c>
        for (j = 0; j < output_x / 2; j++) {
 800ea86:	2300      	movs	r3, #0
 800ea88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea8a:	f000 bdf2 	b.w	800f672 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0xc06>
            q7_t *cols_8b = cols_8b_iterptr;
 800ea8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea90:	61fb      	str	r3, [r7, #28]

            q31_t sum0 = bias[0] + biasR[0];
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	61bb      	str	r3, [r7, #24]
            q31_t sum1 = bias[0] + biasR[0];
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	617b      	str	r3, [r7, #20]
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	f993 3000 	ldrsb.w	r3, [r3]
 800eab0:	461a      	mov	r2, r3
 800eab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab4:	f993 3000 	ldrsb.w	r3, [r3]
 800eab8:	fb03 f302 	mul.w	r3, r3, r2
 800eabc:	69ba      	ldr	r2, [r7, #24]
 800eabe:	4413      	add	r3, r2
 800eac0:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[0];
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	3301      	adds	r3, #1
 800eac6:	f993 3000 	ldrsb.w	r3, [r3]
 800eaca:	461a      	mov	r2, r3
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	f993 3000 	ldrsb.w	r3, [r3]
 800ead2:	fb03 f302 	mul.w	r3, r3, r2
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	4413      	add	r3, r2
 800eada:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[1];
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	3301      	adds	r3, #1
 800eae0:	f993 3000 	ldrsb.w	r3, [r3]
 800eae4:	461a      	mov	r2, r3
 800eae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae8:	3301      	adds	r3, #1
 800eaea:	f993 3000 	ldrsb.w	r3, [r3]
 800eaee:	fb03 f302 	mul.w	r3, r3, r2
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[1];
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	3302      	adds	r3, #2
 800eafc:	f993 3000 	ldrsb.w	r3, [r3]
 800eb00:	461a      	mov	r2, r3
 800eb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb04:	3301      	adds	r3, #1
 800eb06:	f993 3000 	ldrsb.w	r3, [r3]
 800eb0a:	fb03 f302 	mul.w	r3, r3, r2
 800eb0e:	697a      	ldr	r2, [r7, #20]
 800eb10:	4413      	add	r3, r2
 800eb12:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[2];
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	3302      	adds	r3, #2
 800eb18:	f993 3000 	ldrsb.w	r3, [r3]
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	3302      	adds	r3, #2
 800eb22:	f993 3000 	ldrsb.w	r3, [r3]
 800eb26:	fb03 f302 	mul.w	r3, r3, r2
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[2];
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	3303      	adds	r3, #3
 800eb34:	f993 3000 	ldrsb.w	r3, [r3]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3c:	3302      	adds	r3, #2
 800eb3e:	f993 3000 	ldrsb.w	r3, [r3]
 800eb42:	fb03 f302 	mul.w	r3, r3, r2
 800eb46:	697a      	ldr	r2, [r7, #20]
 800eb48:	4413      	add	r3, r2
 800eb4a:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[3];
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	3303      	adds	r3, #3
 800eb50:	f993 3000 	ldrsb.w	r3, [r3]
 800eb54:	461a      	mov	r2, r3
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	3303      	adds	r3, #3
 800eb5a:	f993 3000 	ldrsb.w	r3, [r3]
 800eb5e:	fb03 f302 	mul.w	r3, r3, r2
 800eb62:	69ba      	ldr	r2, [r7, #24]
 800eb64:	4413      	add	r3, r2
 800eb66:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[3];
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	f993 3000 	ldrsb.w	r3, [r3]
 800eb70:	461a      	mov	r2, r3
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	3303      	adds	r3, #3
 800eb76:	f993 3000 	ldrsb.w	r3, [r3]
 800eb7a:	fb03 f302 	mul.w	r3, r3, r2
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	4413      	add	r3, r2
 800eb82:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[4];
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	3304      	adds	r3, #4
 800eb88:	f993 3000 	ldrsb.w	r3, [r3]
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb90:	3304      	adds	r3, #4
 800eb92:	f993 3000 	ldrsb.w	r3, [r3]
 800eb96:	fb03 f302 	mul.w	r3, r3, r2
 800eb9a:	69ba      	ldr	r2, [r7, #24]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[4];
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	3305      	adds	r3, #5
 800eba4:	f993 3000 	ldrsb.w	r3, [r3]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	3304      	adds	r3, #4
 800ebae:	f993 3000 	ldrsb.w	r3, [r3]
 800ebb2:	fb03 f302 	mul.w	r3, r3, r2
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	4413      	add	r3, r2
 800ebba:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[5];
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	3305      	adds	r3, #5
 800ebc0:	f993 3000 	ldrsb.w	r3, [r3]
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc8:	3305      	adds	r3, #5
 800ebca:	f993 3000 	ldrsb.w	r3, [r3]
 800ebce:	fb03 f302 	mul.w	r3, r3, r2
 800ebd2:	69ba      	ldr	r2, [r7, #24]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[5];
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	3306      	adds	r3, #6
 800ebdc:	f993 3000 	ldrsb.w	r3, [r3]
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	3305      	adds	r3, #5
 800ebe6:	f993 3000 	ldrsb.w	r3, [r3]
 800ebea:	fb03 f302 	mul.w	r3, r3, r2
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[6];
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	3306      	adds	r3, #6
 800ebf8:	f993 3000 	ldrsb.w	r3, [r3]
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	3306      	adds	r3, #6
 800ec02:	f993 3000 	ldrsb.w	r3, [r3]
 800ec06:	fb03 f302 	mul.w	r3, r3, r2
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[6];
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	3307      	adds	r3, #7
 800ec14:	f993 3000 	ldrsb.w	r3, [r3]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	3306      	adds	r3, #6
 800ec1e:	f993 3000 	ldrsb.w	r3, [r3]
 800ec22:	fb03 f302 	mul.w	r3, r3, r2
 800ec26:	697a      	ldr	r2, [r7, #20]
 800ec28:	4413      	add	r3, r2
 800ec2a:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 6;
 800ec2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ec30:	3306      	adds	r3, #6
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	4413      	add	r3, r2
 800ec36:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[7];
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	f993 3000 	ldrsb.w	r3, [r3]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	3307      	adds	r3, #7
 800ec44:	f993 3000 	ldrsb.w	r3, [r3]
 800ec48:	fb03 f302 	mul.w	r3, r3, r2
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	4413      	add	r3, r2
 800ec50:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[7];
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	3301      	adds	r3, #1
 800ec56:	f993 3000 	ldrsb.w	r3, [r3]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	3307      	adds	r3, #7
 800ec60:	f993 3000 	ldrsb.w	r3, [r3]
 800ec64:	fb03 f302 	mul.w	r3, r3, r2
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[8];
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	3301      	adds	r3, #1
 800ec72:	f993 3000 	ldrsb.w	r3, [r3]
 800ec76:	461a      	mov	r2, r3
 800ec78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7a:	3308      	adds	r3, #8
 800ec7c:	f993 3000 	ldrsb.w	r3, [r3]
 800ec80:	fb03 f302 	mul.w	r3, r3, r2
 800ec84:	69ba      	ldr	r2, [r7, #24]
 800ec86:	4413      	add	r3, r2
 800ec88:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[8];
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	3302      	adds	r3, #2
 800ec8e:	f993 3000 	ldrsb.w	r3, [r3]
 800ec92:	461a      	mov	r2, r3
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	3308      	adds	r3, #8
 800ec98:	f993 3000 	ldrsb.w	r3, [r3]
 800ec9c:	fb03 f302 	mul.w	r3, r3, r2
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	4413      	add	r3, r2
 800eca4:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[9];
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	3302      	adds	r3, #2
 800ecaa:	f993 3000 	ldrsb.w	r3, [r3]
 800ecae:	461a      	mov	r2, r3
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	3309      	adds	r3, #9
 800ecb4:	f993 3000 	ldrsb.w	r3, [r3]
 800ecb8:	fb03 f302 	mul.w	r3, r3, r2
 800ecbc:	69ba      	ldr	r2, [r7, #24]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[9];
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	3303      	adds	r3, #3
 800ecc6:	f993 3000 	ldrsb.w	r3, [r3]
 800ecca:	461a      	mov	r2, r3
 800eccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecce:	3309      	adds	r3, #9
 800ecd0:	f993 3000 	ldrsb.w	r3, [r3]
 800ecd4:	fb03 f302 	mul.w	r3, r3, r2
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	4413      	add	r3, r2
 800ecdc:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[10];
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	3303      	adds	r3, #3
 800ece2:	f993 3000 	ldrsb.w	r3, [r3]
 800ece6:	461a      	mov	r2, r3
 800ece8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecea:	330a      	adds	r3, #10
 800ecec:	f993 3000 	ldrsb.w	r3, [r3]
 800ecf0:	fb03 f302 	mul.w	r3, r3, r2
 800ecf4:	69ba      	ldr	r2, [r7, #24]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[10];
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	f993 3000 	ldrsb.w	r3, [r3]
 800ed02:	461a      	mov	r2, r3
 800ed04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed06:	330a      	adds	r3, #10
 800ed08:	f993 3000 	ldrsb.w	r3, [r3]
 800ed0c:	fb03 f302 	mul.w	r3, r3, r2
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	4413      	add	r3, r2
 800ed14:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[11];
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	3304      	adds	r3, #4
 800ed1a:	f993 3000 	ldrsb.w	r3, [r3]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed22:	330b      	adds	r3, #11
 800ed24:	f993 3000 	ldrsb.w	r3, [r3]
 800ed28:	fb03 f302 	mul.w	r3, r3, r2
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	4413      	add	r3, r2
 800ed30:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[11];
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	3305      	adds	r3, #5
 800ed36:	f993 3000 	ldrsb.w	r3, [r3]
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3e:	330b      	adds	r3, #11
 800ed40:	f993 3000 	ldrsb.w	r3, [r3]
 800ed44:	fb03 f302 	mul.w	r3, r3, r2
 800ed48:	697a      	ldr	r2, [r7, #20]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[12];
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	3305      	adds	r3, #5
 800ed52:	f993 3000 	ldrsb.w	r3, [r3]
 800ed56:	461a      	mov	r2, r3
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	330c      	adds	r3, #12
 800ed5c:	f993 3000 	ldrsb.w	r3, [r3]
 800ed60:	fb03 f302 	mul.w	r3, r3, r2
 800ed64:	69ba      	ldr	r2, [r7, #24]
 800ed66:	4413      	add	r3, r2
 800ed68:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[12];
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	3306      	adds	r3, #6
 800ed6e:	f993 3000 	ldrsb.w	r3, [r3]
 800ed72:	461a      	mov	r2, r3
 800ed74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed76:	330c      	adds	r3, #12
 800ed78:	f993 3000 	ldrsb.w	r3, [r3]
 800ed7c:	fb03 f302 	mul.w	r3, r3, r2
 800ed80:	697a      	ldr	r2, [r7, #20]
 800ed82:	4413      	add	r3, r2
 800ed84:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[13];
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	3306      	adds	r3, #6
 800ed8a:	f993 3000 	ldrsb.w	r3, [r3]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed92:	330d      	adds	r3, #13
 800ed94:	f993 3000 	ldrsb.w	r3, [r3]
 800ed98:	fb03 f302 	mul.w	r3, r3, r2
 800ed9c:	69ba      	ldr	r2, [r7, #24]
 800ed9e:	4413      	add	r3, r2
 800eda0:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[13];
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	3307      	adds	r3, #7
 800eda6:	f993 3000 	ldrsb.w	r3, [r3]
 800edaa:	461a      	mov	r2, r3
 800edac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edae:	330d      	adds	r3, #13
 800edb0:	f993 3000 	ldrsb.w	r3, [r3]
 800edb4:	fb03 f302 	mul.w	r3, r3, r2
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	4413      	add	r3, r2
 800edbc:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 6;
 800edbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800edc2:	3306      	adds	r3, #6
 800edc4:	69fa      	ldr	r2, [r7, #28]
 800edc6:	4413      	add	r3, r2
 800edc8:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[14];
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	f993 3000 	ldrsb.w	r3, [r3]
 800edd0:	461a      	mov	r2, r3
 800edd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd4:	330e      	adds	r3, #14
 800edd6:	f993 3000 	ldrsb.w	r3, [r3]
 800edda:	fb03 f302 	mul.w	r3, r3, r2
 800edde:	69ba      	ldr	r2, [r7, #24]
 800ede0:	4413      	add	r3, r2
 800ede2:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[14];
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	3301      	adds	r3, #1
 800ede8:	f993 3000 	ldrsb.w	r3, [r3]
 800edec:	461a      	mov	r2, r3
 800edee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf0:	330e      	adds	r3, #14
 800edf2:	f993 3000 	ldrsb.w	r3, [r3]
 800edf6:	fb03 f302 	mul.w	r3, r3, r2
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	4413      	add	r3, r2
 800edfe:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[15];
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	3301      	adds	r3, #1
 800ee04:	f993 3000 	ldrsb.w	r3, [r3]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0c:	330f      	adds	r3, #15
 800ee0e:	f993 3000 	ldrsb.w	r3, [r3]
 800ee12:	fb03 f302 	mul.w	r3, r3, r2
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	4413      	add	r3, r2
 800ee1a:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[15];
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	3302      	adds	r3, #2
 800ee20:	f993 3000 	ldrsb.w	r3, [r3]
 800ee24:	461a      	mov	r2, r3
 800ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee28:	330f      	adds	r3, #15
 800ee2a:	f993 3000 	ldrsb.w	r3, [r3]
 800ee2e:	fb03 f302 	mul.w	r3, r3, r2
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	4413      	add	r3, r2
 800ee36:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[16];
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	3302      	adds	r3, #2
 800ee3c:	f993 3000 	ldrsb.w	r3, [r3]
 800ee40:	461a      	mov	r2, r3
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	3310      	adds	r3, #16
 800ee46:	f993 3000 	ldrsb.w	r3, [r3]
 800ee4a:	fb03 f302 	mul.w	r3, r3, r2
 800ee4e:	69ba      	ldr	r2, [r7, #24]
 800ee50:	4413      	add	r3, r2
 800ee52:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[16];
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	3303      	adds	r3, #3
 800ee58:	f993 3000 	ldrsb.w	r3, [r3]
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee60:	3310      	adds	r3, #16
 800ee62:	f993 3000 	ldrsb.w	r3, [r3]
 800ee66:	fb03 f302 	mul.w	r3, r3, r2
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[17];
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	3303      	adds	r3, #3
 800ee74:	f993 3000 	ldrsb.w	r3, [r3]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7c:	3311      	adds	r3, #17
 800ee7e:	f993 3000 	ldrsb.w	r3, [r3]
 800ee82:	fb03 f302 	mul.w	r3, r3, r2
 800ee86:	69ba      	ldr	r2, [r7, #24]
 800ee88:	4413      	add	r3, r2
 800ee8a:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[17];
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	f993 3000 	ldrsb.w	r3, [r3]
 800ee94:	461a      	mov	r2, r3
 800ee96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee98:	3311      	adds	r3, #17
 800ee9a:	f993 3000 	ldrsb.w	r3, [r3]
 800ee9e:	fb03 f302 	mul.w	r3, r3, r2
 800eea2:	697a      	ldr	r2, [r7, #20]
 800eea4:	4413      	add	r3, r2
 800eea6:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[18];
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	3304      	adds	r3, #4
 800eeac:	f993 3000 	ldrsb.w	r3, [r3]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb4:	3312      	adds	r3, #18
 800eeb6:	f993 3000 	ldrsb.w	r3, [r3]
 800eeba:	fb03 f302 	mul.w	r3, r3, r2
 800eebe:	69ba      	ldr	r2, [r7, #24]
 800eec0:	4413      	add	r3, r2
 800eec2:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[18];
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	3305      	adds	r3, #5
 800eec8:	f993 3000 	ldrsb.w	r3, [r3]
 800eecc:	461a      	mov	r2, r3
 800eece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed0:	3312      	adds	r3, #18
 800eed2:	f993 3000 	ldrsb.w	r3, [r3]
 800eed6:	fb03 f302 	mul.w	r3, r3, r2
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	4413      	add	r3, r2
 800eede:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[19];
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	3305      	adds	r3, #5
 800eee4:	f993 3000 	ldrsb.w	r3, [r3]
 800eee8:	461a      	mov	r2, r3
 800eeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeec:	3313      	adds	r3, #19
 800eeee:	f993 3000 	ldrsb.w	r3, [r3]
 800eef2:	fb03 f302 	mul.w	r3, r3, r2
 800eef6:	69ba      	ldr	r2, [r7, #24]
 800eef8:	4413      	add	r3, r2
 800eefa:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[19];
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	3306      	adds	r3, #6
 800ef00:	f993 3000 	ldrsb.w	r3, [r3]
 800ef04:	461a      	mov	r2, r3
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	3313      	adds	r3, #19
 800ef0a:	f993 3000 	ldrsb.w	r3, [r3]
 800ef0e:	fb03 f302 	mul.w	r3, r3, r2
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	4413      	add	r3, r2
 800ef16:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[20];
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	3306      	adds	r3, #6
 800ef1c:	f993 3000 	ldrsb.w	r3, [r3]
 800ef20:	461a      	mov	r2, r3
 800ef22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef24:	3314      	adds	r3, #20
 800ef26:	f993 3000 	ldrsb.w	r3, [r3]
 800ef2a:	fb03 f302 	mul.w	r3, r3, r2
 800ef2e:	69ba      	ldr	r2, [r7, #24]
 800ef30:	4413      	add	r3, r2
 800ef32:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[20];
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	3307      	adds	r3, #7
 800ef38:	f993 3000 	ldrsb.w	r3, [r3]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	3314      	adds	r3, #20
 800ef42:	f993 3000 	ldrsb.w	r3, [r3]
 800ef46:	fb03 f302 	mul.w	r3, r3, r2
 800ef4a:	697a      	ldr	r2, [r7, #20]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 6;
 800ef50:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ef54:	3306      	adds	r3, #6
 800ef56:	69fa      	ldr	r2, [r7, #28]
 800ef58:	4413      	add	r3, r2
 800ef5a:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[21];
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	f993 3000 	ldrsb.w	r3, [r3]
 800ef62:	461a      	mov	r2, r3
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	3315      	adds	r3, #21
 800ef68:	f993 3000 	ldrsb.w	r3, [r3]
 800ef6c:	fb03 f302 	mul.w	r3, r3, r2
 800ef70:	69ba      	ldr	r2, [r7, #24]
 800ef72:	4413      	add	r3, r2
 800ef74:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[21];
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	f993 3000 	ldrsb.w	r3, [r3]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef82:	3315      	adds	r3, #21
 800ef84:	f993 3000 	ldrsb.w	r3, [r3]
 800ef88:	fb03 f302 	mul.w	r3, r3, r2
 800ef8c:	697a      	ldr	r2, [r7, #20]
 800ef8e:	4413      	add	r3, r2
 800ef90:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[22];
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	3301      	adds	r3, #1
 800ef96:	f993 3000 	ldrsb.w	r3, [r3]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9e:	3316      	adds	r3, #22
 800efa0:	f993 3000 	ldrsb.w	r3, [r3]
 800efa4:	fb03 f302 	mul.w	r3, r3, r2
 800efa8:	69ba      	ldr	r2, [r7, #24]
 800efaa:	4413      	add	r3, r2
 800efac:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[22];
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	3302      	adds	r3, #2
 800efb2:	f993 3000 	ldrsb.w	r3, [r3]
 800efb6:	461a      	mov	r2, r3
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	3316      	adds	r3, #22
 800efbc:	f993 3000 	ldrsb.w	r3, [r3]
 800efc0:	fb03 f302 	mul.w	r3, r3, r2
 800efc4:	697a      	ldr	r2, [r7, #20]
 800efc6:	4413      	add	r3, r2
 800efc8:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[23];
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	3302      	adds	r3, #2
 800efce:	f993 3000 	ldrsb.w	r3, [r3]
 800efd2:	461a      	mov	r2, r3
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	3317      	adds	r3, #23
 800efd8:	f993 3000 	ldrsb.w	r3, [r3]
 800efdc:	fb03 f302 	mul.w	r3, r3, r2
 800efe0:	69ba      	ldr	r2, [r7, #24]
 800efe2:	4413      	add	r3, r2
 800efe4:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[23];
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	3303      	adds	r3, #3
 800efea:	f993 3000 	ldrsb.w	r3, [r3]
 800efee:	461a      	mov	r2, r3
 800eff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff2:	3317      	adds	r3, #23
 800eff4:	f993 3000 	ldrsb.w	r3, [r3]
 800eff8:	fb03 f302 	mul.w	r3, r3, r2
 800effc:	697a      	ldr	r2, [r7, #20]
 800effe:	4413      	add	r3, r2
 800f000:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[24];
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	3303      	adds	r3, #3
 800f006:	f993 3000 	ldrsb.w	r3, [r3]
 800f00a:	461a      	mov	r2, r3
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	3318      	adds	r3, #24
 800f010:	f993 3000 	ldrsb.w	r3, [r3]
 800f014:	fb03 f302 	mul.w	r3, r3, r2
 800f018:	69ba      	ldr	r2, [r7, #24]
 800f01a:	4413      	add	r3, r2
 800f01c:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[24];
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	3304      	adds	r3, #4
 800f022:	f993 3000 	ldrsb.w	r3, [r3]
 800f026:	461a      	mov	r2, r3
 800f028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02a:	3318      	adds	r3, #24
 800f02c:	f993 3000 	ldrsb.w	r3, [r3]
 800f030:	fb03 f302 	mul.w	r3, r3, r2
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	4413      	add	r3, r2
 800f038:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[25];
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	3304      	adds	r3, #4
 800f03e:	f993 3000 	ldrsb.w	r3, [r3]
 800f042:	461a      	mov	r2, r3
 800f044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f046:	3319      	adds	r3, #25
 800f048:	f993 3000 	ldrsb.w	r3, [r3]
 800f04c:	fb03 f302 	mul.w	r3, r3, r2
 800f050:	69ba      	ldr	r2, [r7, #24]
 800f052:	4413      	add	r3, r2
 800f054:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[25];
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	3305      	adds	r3, #5
 800f05a:	f993 3000 	ldrsb.w	r3, [r3]
 800f05e:	461a      	mov	r2, r3
 800f060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f062:	3319      	adds	r3, #25
 800f064:	f993 3000 	ldrsb.w	r3, [r3]
 800f068:	fb03 f302 	mul.w	r3, r3, r2
 800f06c:	697a      	ldr	r2, [r7, #20]
 800f06e:	4413      	add	r3, r2
 800f070:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[26];
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	3305      	adds	r3, #5
 800f076:	f993 3000 	ldrsb.w	r3, [r3]
 800f07a:	461a      	mov	r2, r3
 800f07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07e:	331a      	adds	r3, #26
 800f080:	f993 3000 	ldrsb.w	r3, [r3]
 800f084:	fb03 f302 	mul.w	r3, r3, r2
 800f088:	69ba      	ldr	r2, [r7, #24]
 800f08a:	4413      	add	r3, r2
 800f08c:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[26];
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	3306      	adds	r3, #6
 800f092:	f993 3000 	ldrsb.w	r3, [r3]
 800f096:	461a      	mov	r2, r3
 800f098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09a:	331a      	adds	r3, #26
 800f09c:	f993 3000 	ldrsb.w	r3, [r3]
 800f0a0:	fb03 f302 	mul.w	r3, r3, r2
 800f0a4:	697a      	ldr	r2, [r7, #20]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[27];
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	3306      	adds	r3, #6
 800f0ae:	f993 3000 	ldrsb.w	r3, [r3]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b6:	331b      	adds	r3, #27
 800f0b8:	f993 3000 	ldrsb.w	r3, [r3]
 800f0bc:	fb03 f302 	mul.w	r3, r3, r2
 800f0c0:	69ba      	ldr	r2, [r7, #24]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[27];
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	3307      	adds	r3, #7
 800f0ca:	f993 3000 	ldrsb.w	r3, [r3]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	331b      	adds	r3, #27
 800f0d4:	f993 3000 	ldrsb.w	r3, [r3]
 800f0d8:	fb03 f302 	mul.w	r3, r3, r2
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	4413      	add	r3, r2
 800f0e0:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 6;
 800f0e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f0e6:	3306      	adds	r3, #6
 800f0e8:	69fa      	ldr	r2, [r7, #28]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[28];
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	f993 3000 	ldrsb.w	r3, [r3]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	331c      	adds	r3, #28
 800f0fa:	f993 3000 	ldrsb.w	r3, [r3]
 800f0fe:	fb03 f302 	mul.w	r3, r3, r2
 800f102:	69ba      	ldr	r2, [r7, #24]
 800f104:	4413      	add	r3, r2
 800f106:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[28];
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	3301      	adds	r3, #1
 800f10c:	f993 3000 	ldrsb.w	r3, [r3]
 800f110:	461a      	mov	r2, r3
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	331c      	adds	r3, #28
 800f116:	f993 3000 	ldrsb.w	r3, [r3]
 800f11a:	fb03 f302 	mul.w	r3, r3, r2
 800f11e:	697a      	ldr	r2, [r7, #20]
 800f120:	4413      	add	r3, r2
 800f122:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[29];
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	3301      	adds	r3, #1
 800f128:	f993 3000 	ldrsb.w	r3, [r3]
 800f12c:	461a      	mov	r2, r3
 800f12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f130:	331d      	adds	r3, #29
 800f132:	f993 3000 	ldrsb.w	r3, [r3]
 800f136:	fb03 f302 	mul.w	r3, r3, r2
 800f13a:	69ba      	ldr	r2, [r7, #24]
 800f13c:	4413      	add	r3, r2
 800f13e:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[29];
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	3302      	adds	r3, #2
 800f144:	f993 3000 	ldrsb.w	r3, [r3]
 800f148:	461a      	mov	r2, r3
 800f14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14c:	331d      	adds	r3, #29
 800f14e:	f993 3000 	ldrsb.w	r3, [r3]
 800f152:	fb03 f302 	mul.w	r3, r3, r2
 800f156:	697a      	ldr	r2, [r7, #20]
 800f158:	4413      	add	r3, r2
 800f15a:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[30];
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	3302      	adds	r3, #2
 800f160:	f993 3000 	ldrsb.w	r3, [r3]
 800f164:	461a      	mov	r2, r3
 800f166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f168:	331e      	adds	r3, #30
 800f16a:	f993 3000 	ldrsb.w	r3, [r3]
 800f16e:	fb03 f302 	mul.w	r3, r3, r2
 800f172:	69ba      	ldr	r2, [r7, #24]
 800f174:	4413      	add	r3, r2
 800f176:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[30];
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	3303      	adds	r3, #3
 800f17c:	f993 3000 	ldrsb.w	r3, [r3]
 800f180:	461a      	mov	r2, r3
 800f182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f184:	331e      	adds	r3, #30
 800f186:	f993 3000 	ldrsb.w	r3, [r3]
 800f18a:	fb03 f302 	mul.w	r3, r3, r2
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	4413      	add	r3, r2
 800f192:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[31];
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	3303      	adds	r3, #3
 800f198:	f993 3000 	ldrsb.w	r3, [r3]
 800f19c:	461a      	mov	r2, r3
 800f19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a0:	331f      	adds	r3, #31
 800f1a2:	f993 3000 	ldrsb.w	r3, [r3]
 800f1a6:	fb03 f302 	mul.w	r3, r3, r2
 800f1aa:	69ba      	ldr	r2, [r7, #24]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[31];
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	3304      	adds	r3, #4
 800f1b4:	f993 3000 	ldrsb.w	r3, [r3]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	331f      	adds	r3, #31
 800f1be:	f993 3000 	ldrsb.w	r3, [r3]
 800f1c2:	fb03 f302 	mul.w	r3, r3, r2
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[32];
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	f993 3000 	ldrsb.w	r3, [r3]
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	3320      	adds	r3, #32
 800f1da:	f993 3000 	ldrsb.w	r3, [r3]
 800f1de:	fb03 f302 	mul.w	r3, r3, r2
 800f1e2:	69ba      	ldr	r2, [r7, #24]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[32];
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	3305      	adds	r3, #5
 800f1ec:	f993 3000 	ldrsb.w	r3, [r3]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f4:	3320      	adds	r3, #32
 800f1f6:	f993 3000 	ldrsb.w	r3, [r3]
 800f1fa:	fb03 f302 	mul.w	r3, r3, r2
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	4413      	add	r3, r2
 800f202:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[33];
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	3305      	adds	r3, #5
 800f208:	f993 3000 	ldrsb.w	r3, [r3]
 800f20c:	461a      	mov	r2, r3
 800f20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f210:	3321      	adds	r3, #33	; 0x21
 800f212:	f993 3000 	ldrsb.w	r3, [r3]
 800f216:	fb03 f302 	mul.w	r3, r3, r2
 800f21a:	69ba      	ldr	r2, [r7, #24]
 800f21c:	4413      	add	r3, r2
 800f21e:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[33];
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	3306      	adds	r3, #6
 800f224:	f993 3000 	ldrsb.w	r3, [r3]
 800f228:	461a      	mov	r2, r3
 800f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22c:	3321      	adds	r3, #33	; 0x21
 800f22e:	f993 3000 	ldrsb.w	r3, [r3]
 800f232:	fb03 f302 	mul.w	r3, r3, r2
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	4413      	add	r3, r2
 800f23a:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[34];
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	3306      	adds	r3, #6
 800f240:	f993 3000 	ldrsb.w	r3, [r3]
 800f244:	461a      	mov	r2, r3
 800f246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f248:	3322      	adds	r3, #34	; 0x22
 800f24a:	f993 3000 	ldrsb.w	r3, [r3]
 800f24e:	fb03 f302 	mul.w	r3, r3, r2
 800f252:	69ba      	ldr	r2, [r7, #24]
 800f254:	4413      	add	r3, r2
 800f256:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[34];
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	3307      	adds	r3, #7
 800f25c:	f993 3000 	ldrsb.w	r3, [r3]
 800f260:	461a      	mov	r2, r3
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	3322      	adds	r3, #34	; 0x22
 800f266:	f993 3000 	ldrsb.w	r3, [r3]
 800f26a:	fb03 f302 	mul.w	r3, r3, r2
 800f26e:	697a      	ldr	r2, [r7, #20]
 800f270:	4413      	add	r3, r2
 800f272:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 6;
 800f274:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f278:	3306      	adds	r3, #6
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	4413      	add	r3, r2
 800f27e:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[35];
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	f993 3000 	ldrsb.w	r3, [r3]
 800f286:	461a      	mov	r2, r3
 800f288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28a:	3323      	adds	r3, #35	; 0x23
 800f28c:	f993 3000 	ldrsb.w	r3, [r3]
 800f290:	fb03 f302 	mul.w	r3, r3, r2
 800f294:	69ba      	ldr	r2, [r7, #24]
 800f296:	4413      	add	r3, r2
 800f298:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[35];
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	3301      	adds	r3, #1
 800f29e:	f993 3000 	ldrsb.w	r3, [r3]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	3323      	adds	r3, #35	; 0x23
 800f2a8:	f993 3000 	ldrsb.w	r3, [r3]
 800f2ac:	fb03 f302 	mul.w	r3, r3, r2
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[36];
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	f993 3000 	ldrsb.w	r3, [r3]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c2:	3324      	adds	r3, #36	; 0x24
 800f2c4:	f993 3000 	ldrsb.w	r3, [r3]
 800f2c8:	fb03 f302 	mul.w	r3, r3, r2
 800f2cc:	69ba      	ldr	r2, [r7, #24]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[36];
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	3302      	adds	r3, #2
 800f2d6:	f993 3000 	ldrsb.w	r3, [r3]
 800f2da:	461a      	mov	r2, r3
 800f2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2de:	3324      	adds	r3, #36	; 0x24
 800f2e0:	f993 3000 	ldrsb.w	r3, [r3]
 800f2e4:	fb03 f302 	mul.w	r3, r3, r2
 800f2e8:	697a      	ldr	r2, [r7, #20]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[37];
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	3302      	adds	r3, #2
 800f2f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fa:	3325      	adds	r3, #37	; 0x25
 800f2fc:	f993 3000 	ldrsb.w	r3, [r3]
 800f300:	fb03 f302 	mul.w	r3, r3, r2
 800f304:	69ba      	ldr	r2, [r7, #24]
 800f306:	4413      	add	r3, r2
 800f308:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[37];
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	3303      	adds	r3, #3
 800f30e:	f993 3000 	ldrsb.w	r3, [r3]
 800f312:	461a      	mov	r2, r3
 800f314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f316:	3325      	adds	r3, #37	; 0x25
 800f318:	f993 3000 	ldrsb.w	r3, [r3]
 800f31c:	fb03 f302 	mul.w	r3, r3, r2
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	4413      	add	r3, r2
 800f324:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[38];
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	3303      	adds	r3, #3
 800f32a:	f993 3000 	ldrsb.w	r3, [r3]
 800f32e:	461a      	mov	r2, r3
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	3326      	adds	r3, #38	; 0x26
 800f334:	f993 3000 	ldrsb.w	r3, [r3]
 800f338:	fb03 f302 	mul.w	r3, r3, r2
 800f33c:	69ba      	ldr	r2, [r7, #24]
 800f33e:	4413      	add	r3, r2
 800f340:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[38];
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	3304      	adds	r3, #4
 800f346:	f993 3000 	ldrsb.w	r3, [r3]
 800f34a:	461a      	mov	r2, r3
 800f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34e:	3326      	adds	r3, #38	; 0x26
 800f350:	f993 3000 	ldrsb.w	r3, [r3]
 800f354:	fb03 f302 	mul.w	r3, r3, r2
 800f358:	697a      	ldr	r2, [r7, #20]
 800f35a:	4413      	add	r3, r2
 800f35c:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[39];
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	3304      	adds	r3, #4
 800f362:	f993 3000 	ldrsb.w	r3, [r3]
 800f366:	461a      	mov	r2, r3
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	3327      	adds	r3, #39	; 0x27
 800f36c:	f993 3000 	ldrsb.w	r3, [r3]
 800f370:	fb03 f302 	mul.w	r3, r3, r2
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	4413      	add	r3, r2
 800f378:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[39];
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	3305      	adds	r3, #5
 800f37e:	f993 3000 	ldrsb.w	r3, [r3]
 800f382:	461a      	mov	r2, r3
 800f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f386:	3327      	adds	r3, #39	; 0x27
 800f388:	f993 3000 	ldrsb.w	r3, [r3]
 800f38c:	fb03 f302 	mul.w	r3, r3, r2
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	4413      	add	r3, r2
 800f394:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[40];
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	3305      	adds	r3, #5
 800f39a:	f993 3000 	ldrsb.w	r3, [r3]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a2:	3328      	adds	r3, #40	; 0x28
 800f3a4:	f993 3000 	ldrsb.w	r3, [r3]
 800f3a8:	fb03 f302 	mul.w	r3, r3, r2
 800f3ac:	69ba      	ldr	r2, [r7, #24]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[40];
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	3306      	adds	r3, #6
 800f3b6:	f993 3000 	ldrsb.w	r3, [r3]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	3328      	adds	r3, #40	; 0x28
 800f3c0:	f993 3000 	ldrsb.w	r3, [r3]
 800f3c4:	fb03 f302 	mul.w	r3, r3, r2
 800f3c8:	697a      	ldr	r2, [r7, #20]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[41];
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	3306      	adds	r3, #6
 800f3d2:	f993 3000 	ldrsb.w	r3, [r3]
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	3329      	adds	r3, #41	; 0x29
 800f3dc:	f993 3000 	ldrsb.w	r3, [r3]
 800f3e0:	fb03 f302 	mul.w	r3, r3, r2
 800f3e4:	69ba      	ldr	r2, [r7, #24]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[41];
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	3307      	adds	r3, #7
 800f3ee:	f993 3000 	ldrsb.w	r3, [r3]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f6:	3329      	adds	r3, #41	; 0x29
 800f3f8:	f993 3000 	ldrsb.w	r3, [r3]
 800f3fc:	fb03 f302 	mul.w	r3, r3, r2
 800f400:	697a      	ldr	r2, [r7, #20]
 800f402:	4413      	add	r3, r2
 800f404:	617b      	str	r3, [r7, #20]
            cols_8b += column_x + 6;
 800f406:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f40a:	3306      	adds	r3, #6
 800f40c:	69fa      	ldr	r2, [r7, #28]
 800f40e:	4413      	add	r3, r2
 800f410:	61fb      	str	r3, [r7, #28]
            sum0 += cols_8b[0]*ksrc[42];
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	f993 3000 	ldrsb.w	r3, [r3]
 800f418:	461a      	mov	r2, r3
 800f41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41c:	332a      	adds	r3, #42	; 0x2a
 800f41e:	f993 3000 	ldrsb.w	r3, [r3]
 800f422:	fb03 f302 	mul.w	r3, r3, r2
 800f426:	69ba      	ldr	r2, [r7, #24]
 800f428:	4413      	add	r3, r2
 800f42a:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[1]*ksrc[42];
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	3301      	adds	r3, #1
 800f430:	f993 3000 	ldrsb.w	r3, [r3]
 800f434:	461a      	mov	r2, r3
 800f436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f438:	332a      	adds	r3, #42	; 0x2a
 800f43a:	f993 3000 	ldrsb.w	r3, [r3]
 800f43e:	fb03 f302 	mul.w	r3, r3, r2
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	4413      	add	r3, r2
 800f446:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[1]*ksrc[43];
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	3301      	adds	r3, #1
 800f44c:	f993 3000 	ldrsb.w	r3, [r3]
 800f450:	461a      	mov	r2, r3
 800f452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f454:	332b      	adds	r3, #43	; 0x2b
 800f456:	f993 3000 	ldrsb.w	r3, [r3]
 800f45a:	fb03 f302 	mul.w	r3, r3, r2
 800f45e:	69ba      	ldr	r2, [r7, #24]
 800f460:	4413      	add	r3, r2
 800f462:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[2]*ksrc[43];
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	3302      	adds	r3, #2
 800f468:	f993 3000 	ldrsb.w	r3, [r3]
 800f46c:	461a      	mov	r2, r3
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	332b      	adds	r3, #43	; 0x2b
 800f472:	f993 3000 	ldrsb.w	r3, [r3]
 800f476:	fb03 f302 	mul.w	r3, r3, r2
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	4413      	add	r3, r2
 800f47e:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[2]*ksrc[44];
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	3302      	adds	r3, #2
 800f484:	f993 3000 	ldrsb.w	r3, [r3]
 800f488:	461a      	mov	r2, r3
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	332c      	adds	r3, #44	; 0x2c
 800f48e:	f993 3000 	ldrsb.w	r3, [r3]
 800f492:	fb03 f302 	mul.w	r3, r3, r2
 800f496:	69ba      	ldr	r2, [r7, #24]
 800f498:	4413      	add	r3, r2
 800f49a:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[3]*ksrc[44];
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	3303      	adds	r3, #3
 800f4a0:	f993 3000 	ldrsb.w	r3, [r3]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a8:	332c      	adds	r3, #44	; 0x2c
 800f4aa:	f993 3000 	ldrsb.w	r3, [r3]
 800f4ae:	fb03 f302 	mul.w	r3, r3, r2
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[3]*ksrc[45];
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	3303      	adds	r3, #3
 800f4bc:	f993 3000 	ldrsb.w	r3, [r3]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c4:	332d      	adds	r3, #45	; 0x2d
 800f4c6:	f993 3000 	ldrsb.w	r3, [r3]
 800f4ca:	fb03 f302 	mul.w	r3, r3, r2
 800f4ce:	69ba      	ldr	r2, [r7, #24]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[4]*ksrc[45];
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	3304      	adds	r3, #4
 800f4d8:	f993 3000 	ldrsb.w	r3, [r3]
 800f4dc:	461a      	mov	r2, r3
 800f4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e0:	332d      	adds	r3, #45	; 0x2d
 800f4e2:	f993 3000 	ldrsb.w	r3, [r3]
 800f4e6:	fb03 f302 	mul.w	r3, r3, r2
 800f4ea:	697a      	ldr	r2, [r7, #20]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[4]*ksrc[46];
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	f993 3000 	ldrsb.w	r3, [r3]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	332e      	adds	r3, #46	; 0x2e
 800f4fe:	f993 3000 	ldrsb.w	r3, [r3]
 800f502:	fb03 f302 	mul.w	r3, r3, r2
 800f506:	69ba      	ldr	r2, [r7, #24]
 800f508:	4413      	add	r3, r2
 800f50a:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[5]*ksrc[46];
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	3305      	adds	r3, #5
 800f510:	f993 3000 	ldrsb.w	r3, [r3]
 800f514:	461a      	mov	r2, r3
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	332e      	adds	r3, #46	; 0x2e
 800f51a:	f993 3000 	ldrsb.w	r3, [r3]
 800f51e:	fb03 f302 	mul.w	r3, r3, r2
 800f522:	697a      	ldr	r2, [r7, #20]
 800f524:	4413      	add	r3, r2
 800f526:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[5]*ksrc[47];
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	3305      	adds	r3, #5
 800f52c:	f993 3000 	ldrsb.w	r3, [r3]
 800f530:	461a      	mov	r2, r3
 800f532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f534:	332f      	adds	r3, #47	; 0x2f
 800f536:	f993 3000 	ldrsb.w	r3, [r3]
 800f53a:	fb03 f302 	mul.w	r3, r3, r2
 800f53e:	69ba      	ldr	r2, [r7, #24]
 800f540:	4413      	add	r3, r2
 800f542:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[6]*ksrc[47];
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	3306      	adds	r3, #6
 800f548:	f993 3000 	ldrsb.w	r3, [r3]
 800f54c:	461a      	mov	r2, r3
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	332f      	adds	r3, #47	; 0x2f
 800f552:	f993 3000 	ldrsb.w	r3, [r3]
 800f556:	fb03 f302 	mul.w	r3, r3, r2
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	4413      	add	r3, r2
 800f55e:	617b      	str	r3, [r7, #20]
            sum0 += cols_8b[6]*ksrc[48];
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	3306      	adds	r3, #6
 800f564:	f993 3000 	ldrsb.w	r3, [r3]
 800f568:	461a      	mov	r2, r3
 800f56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56c:	3330      	adds	r3, #48	; 0x30
 800f56e:	f993 3000 	ldrsb.w	r3, [r3]
 800f572:	fb03 f302 	mul.w	r3, r3, r2
 800f576:	69ba      	ldr	r2, [r7, #24]
 800f578:	4413      	add	r3, r2
 800f57a:	61bb      	str	r3, [r7, #24]
            sum1 += cols_8b[7]*ksrc[48];
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	3307      	adds	r3, #7
 800f580:	f993 3000 	ldrsb.w	r3, [r3]
 800f584:	461a      	mov	r2, r3
 800f586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f588:	3330      	adds	r3, #48	; 0x30
 800f58a:	f993 3000 	ldrsb.w	r3, [r3]
 800f58e:	fb03 f302 	mul.w	r3, r3, r2
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	4413      	add	r3, r2
 800f596:	617b      	str	r3, [r7, #20]

            /* requantize */
            sum0 = MAX(sum0, 0); //ReLU
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f59e:	61bb      	str	r3, [r7, #24]
            sum0 = (float) sum0 * *scales;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	ee07 3a90 	vmov	s15, r3
 800f5a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ac:	edd3 7a00 	vldr	s15, [r3]
 800f5b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5b8:	ee17 3a90 	vmov	r3, s15
 800f5bc:	61bb      	str	r3, [r7, #24]
            sum0 += output_offset; //Output offset is the next layer input zero
 800f5be:	69ba      	ldr	r2, [r7, #24]
 800f5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5c2:	4413      	add	r3, r2
 800f5c4:	61bb      	str	r3, [r7, #24]
            sum0 = MAX(sum0, activation_min);
 800f5c6:	69ba      	ldr	r2, [r7, #24]
 800f5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	bfb8      	it	lt
 800f5ce:	4613      	movlt	r3, r2
 800f5d0:	61bb      	str	r3, [r7, #24]
            sum0 = MIN(sum0, activation_max);
 800f5d2:	69ba      	ldr	r2, [r7, #24]
 800f5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	bfa8      	it	ge
 800f5da:	4613      	movge	r3, r2
 800f5dc:	61bb      	str	r3, [r7, #24]
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800f5de:	89bb      	ldrh	r3, [r7, #12]
 800f5e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5e2:	fb02 f203 	mul.w	r2, r2, r3
 800f5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e8:	005b      	lsls	r3, r3, #1
 800f5ea:	4413      	add	r3, r2
 800f5ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5ee:	fb02 f303 	mul.w	r3, r2, r3
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f6:	4413      	add	r3, r2
 800f5f8:	69ba      	ldr	r2, [r7, #24]
 800f5fa:	b252      	sxtb	r2, r2
 800f5fc:	701a      	strb	r2, [r3, #0]

            sum1 = MAX(sum1, 0); //ReLU
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f604:	617b      	str	r3, [r7, #20]
            sum1 = (float) sum1 * *scales;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	ee07 3a90 	vmov	s15, r3
 800f60c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f612:	edd3 7a00 	vldr	s15, [r3]
 800f616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f61a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f61e:	ee17 3a90 	vmov	r3, s15
 800f622:	617b      	str	r3, [r7, #20]
            sum1 += output_offset; //Output offset is the next layer input zero
 800f624:	697a      	ldr	r2, [r7, #20]
 800f626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f628:	4413      	add	r3, r2
 800f62a:	617b      	str	r3, [r7, #20]
            sum1 = MAX(sum1, activation_min);
 800f62c:	697a      	ldr	r2, [r7, #20]
 800f62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f630:	4293      	cmp	r3, r2
 800f632:	bfb8      	it	lt
 800f634:	4613      	movlt	r3, r2
 800f636:	617b      	str	r3, [r7, #20]
            sum1 = MIN(sum1, activation_max);
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f63c:	4293      	cmp	r3, r2
 800f63e:	bfa8      	it	ge
 800f640:	4613      	movge	r3, r2
 800f642:	617b      	str	r3, [r7, #20]
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800f644:	89bb      	ldrh	r3, [r7, #12]
 800f646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f648:	fb02 f203 	mul.w	r2, r2, r3
 800f64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	3301      	adds	r3, #1
 800f652:	4413      	add	r3, r2
 800f654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f656:	fb02 f303 	mul.w	r3, r2, r3
 800f65a:	461a      	mov	r2, r3
 800f65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f65e:	4413      	add	r3, r2
 800f660:	697a      	ldr	r2, [r7, #20]
 800f662:	b252      	sxtb	r2, r2
 800f664:	701a      	strb	r2, [r3, #0]

            cols_8b_iterptr += STRIDE * 2;
 800f666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f668:	3302      	adds	r3, #2
 800f66a:	653b      	str	r3, [r7, #80]	; 0x50
        for (j = 0; j < output_x / 2; j++) {
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	3301      	adds	r3, #1
 800f670:	62bb      	str	r3, [r7, #40]	; 0x28
 800f672:	89bb      	ldrh	r3, [r7, #12]
 800f674:	085b      	lsrs	r3, r3, #1
 800f676:	b29b      	uxth	r3, r3
 800f678:	461a      	mov	r2, r3
 800f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67c:	4293      	cmp	r3, r2
 800f67e:	f6ff aa06 	blt.w	800ea8e <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x22>
        }
        if (output_x & 1) {
 800f682:	89bb      	ldrh	r3, [r7, #12]
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 8307 	beq.w	800fc9c <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x1230>
            q7_t * cols_8b = cols_8b_iterptr;
 800f68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f690:	627b      	str	r3, [r7, #36]	; 0x24
            q31_t sum = bias[0] + biasR[0];
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4413      	add	r3, r2
 800f69c:	623b      	str	r3, [r7, #32]
            sum += cols_8b[0]*ksrc[0];
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	f993 3000 	ldrsb.w	r3, [r3]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a8:	f993 3000 	ldrsb.w	r3, [r3]
 800f6ac:	fb03 f302 	mul.w	r3, r3, r2
 800f6b0:	6a3a      	ldr	r2, [r7, #32]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[1];
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	f993 3000 	ldrsb.w	r3, [r3]
 800f6be:	461a      	mov	r2, r3
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	f993 3000 	ldrsb.w	r3, [r3]
 800f6c8:	fb03 f302 	mul.w	r3, r3, r2
 800f6cc:	6a3a      	ldr	r2, [r7, #32]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[2];
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	3302      	adds	r3, #2
 800f6d6:	f993 3000 	ldrsb.w	r3, [r3]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6de:	3302      	adds	r3, #2
 800f6e0:	f993 3000 	ldrsb.w	r3, [r3]
 800f6e4:	fb03 f302 	mul.w	r3, r3, r2
 800f6e8:	6a3a      	ldr	r2, [r7, #32]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[3];
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f0:	3303      	adds	r3, #3
 800f6f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fa:	3303      	adds	r3, #3
 800f6fc:	f993 3000 	ldrsb.w	r3, [r3]
 800f700:	fb03 f302 	mul.w	r3, r3, r2
 800f704:	6a3a      	ldr	r2, [r7, #32]
 800f706:	4413      	add	r3, r2
 800f708:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[4];
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	3304      	adds	r3, #4
 800f70e:	f993 3000 	ldrsb.w	r3, [r3]
 800f712:	461a      	mov	r2, r3
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	3304      	adds	r3, #4
 800f718:	f993 3000 	ldrsb.w	r3, [r3]
 800f71c:	fb03 f302 	mul.w	r3, r3, r2
 800f720:	6a3a      	ldr	r2, [r7, #32]
 800f722:	4413      	add	r3, r2
 800f724:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[5];
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f728:	3305      	adds	r3, #5
 800f72a:	f993 3000 	ldrsb.w	r3, [r3]
 800f72e:	461a      	mov	r2, r3
 800f730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f732:	3305      	adds	r3, #5
 800f734:	f993 3000 	ldrsb.w	r3, [r3]
 800f738:	fb03 f302 	mul.w	r3, r3, r2
 800f73c:	6a3a      	ldr	r2, [r7, #32]
 800f73e:	4413      	add	r3, r2
 800f740:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[6];
 800f742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f744:	3306      	adds	r3, #6
 800f746:	f993 3000 	ldrsb.w	r3, [r3]
 800f74a:	461a      	mov	r2, r3
 800f74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74e:	3306      	adds	r3, #6
 800f750:	f993 3000 	ldrsb.w	r3, [r3]
 800f754:	fb03 f302 	mul.w	r3, r3, r2
 800f758:	6a3a      	ldr	r2, [r7, #32]
 800f75a:	4413      	add	r3, r2
 800f75c:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 6;
 800f75e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f762:	3306      	adds	r3, #6
 800f764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f766:	4413      	add	r3, r2
 800f768:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[7];
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	f993 3000 	ldrsb.w	r3, [r3]
 800f770:	461a      	mov	r2, r3
 800f772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f774:	3307      	adds	r3, #7
 800f776:	f993 3000 	ldrsb.w	r3, [r3]
 800f77a:	fb03 f302 	mul.w	r3, r3, r2
 800f77e:	6a3a      	ldr	r2, [r7, #32]
 800f780:	4413      	add	r3, r2
 800f782:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[8];
 800f784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f786:	3301      	adds	r3, #1
 800f788:	f993 3000 	ldrsb.w	r3, [r3]
 800f78c:	461a      	mov	r2, r3
 800f78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f790:	3308      	adds	r3, #8
 800f792:	f993 3000 	ldrsb.w	r3, [r3]
 800f796:	fb03 f302 	mul.w	r3, r3, r2
 800f79a:	6a3a      	ldr	r2, [r7, #32]
 800f79c:	4413      	add	r3, r2
 800f79e:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[9];
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a2:	3302      	adds	r3, #2
 800f7a4:	f993 3000 	ldrsb.w	r3, [r3]
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ac:	3309      	adds	r3, #9
 800f7ae:	f993 3000 	ldrsb.w	r3, [r3]
 800f7b2:	fb03 f302 	mul.w	r3, r3, r2
 800f7b6:	6a3a      	ldr	r2, [r7, #32]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[10];
 800f7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7be:	3303      	adds	r3, #3
 800f7c0:	f993 3000 	ldrsb.w	r3, [r3]
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c8:	330a      	adds	r3, #10
 800f7ca:	f993 3000 	ldrsb.w	r3, [r3]
 800f7ce:	fb03 f302 	mul.w	r3, r3, r2
 800f7d2:	6a3a      	ldr	r2, [r7, #32]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[11];
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7da:	3304      	adds	r3, #4
 800f7dc:	f993 3000 	ldrsb.w	r3, [r3]
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e4:	330b      	adds	r3, #11
 800f7e6:	f993 3000 	ldrsb.w	r3, [r3]
 800f7ea:	fb03 f302 	mul.w	r3, r3, r2
 800f7ee:	6a3a      	ldr	r2, [r7, #32]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[12];
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	3305      	adds	r3, #5
 800f7f8:	f993 3000 	ldrsb.w	r3, [r3]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	330c      	adds	r3, #12
 800f802:	f993 3000 	ldrsb.w	r3, [r3]
 800f806:	fb03 f302 	mul.w	r3, r3, r2
 800f80a:	6a3a      	ldr	r2, [r7, #32]
 800f80c:	4413      	add	r3, r2
 800f80e:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[13];
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	3306      	adds	r3, #6
 800f814:	f993 3000 	ldrsb.w	r3, [r3]
 800f818:	461a      	mov	r2, r3
 800f81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81c:	330d      	adds	r3, #13
 800f81e:	f993 3000 	ldrsb.w	r3, [r3]
 800f822:	fb03 f302 	mul.w	r3, r3, r2
 800f826:	6a3a      	ldr	r2, [r7, #32]
 800f828:	4413      	add	r3, r2
 800f82a:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 6;
 800f82c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f830:	3306      	adds	r3, #6
 800f832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f834:	4413      	add	r3, r2
 800f836:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[14];
 800f838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83a:	f993 3000 	ldrsb.w	r3, [r3]
 800f83e:	461a      	mov	r2, r3
 800f840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f842:	330e      	adds	r3, #14
 800f844:	f993 3000 	ldrsb.w	r3, [r3]
 800f848:	fb03 f302 	mul.w	r3, r3, r2
 800f84c:	6a3a      	ldr	r2, [r7, #32]
 800f84e:	4413      	add	r3, r2
 800f850:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[15];
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	3301      	adds	r3, #1
 800f856:	f993 3000 	ldrsb.w	r3, [r3]
 800f85a:	461a      	mov	r2, r3
 800f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85e:	330f      	adds	r3, #15
 800f860:	f993 3000 	ldrsb.w	r3, [r3]
 800f864:	fb03 f302 	mul.w	r3, r3, r2
 800f868:	6a3a      	ldr	r2, [r7, #32]
 800f86a:	4413      	add	r3, r2
 800f86c:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[16];
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	3302      	adds	r3, #2
 800f872:	f993 3000 	ldrsb.w	r3, [r3]
 800f876:	461a      	mov	r2, r3
 800f878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87a:	3310      	adds	r3, #16
 800f87c:	f993 3000 	ldrsb.w	r3, [r3]
 800f880:	fb03 f302 	mul.w	r3, r3, r2
 800f884:	6a3a      	ldr	r2, [r7, #32]
 800f886:	4413      	add	r3, r2
 800f888:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[17];
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	3303      	adds	r3, #3
 800f88e:	f993 3000 	ldrsb.w	r3, [r3]
 800f892:	461a      	mov	r2, r3
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	3311      	adds	r3, #17
 800f898:	f993 3000 	ldrsb.w	r3, [r3]
 800f89c:	fb03 f302 	mul.w	r3, r3, r2
 800f8a0:	6a3a      	ldr	r2, [r7, #32]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[18];
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	f993 3000 	ldrsb.w	r3, [r3]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	3312      	adds	r3, #18
 800f8b4:	f993 3000 	ldrsb.w	r3, [r3]
 800f8b8:	fb03 f302 	mul.w	r3, r3, r2
 800f8bc:	6a3a      	ldr	r2, [r7, #32]
 800f8be:	4413      	add	r3, r2
 800f8c0:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[19];
 800f8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c4:	3305      	adds	r3, #5
 800f8c6:	f993 3000 	ldrsb.w	r3, [r3]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	3313      	adds	r3, #19
 800f8d0:	f993 3000 	ldrsb.w	r3, [r3]
 800f8d4:	fb03 f302 	mul.w	r3, r3, r2
 800f8d8:	6a3a      	ldr	r2, [r7, #32]
 800f8da:	4413      	add	r3, r2
 800f8dc:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[20];
 800f8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e0:	3306      	adds	r3, #6
 800f8e2:	f993 3000 	ldrsb.w	r3, [r3]
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	3314      	adds	r3, #20
 800f8ec:	f993 3000 	ldrsb.w	r3, [r3]
 800f8f0:	fb03 f302 	mul.w	r3, r3, r2
 800f8f4:	6a3a      	ldr	r2, [r7, #32]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 6;
 800f8fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f8fe:	3306      	adds	r3, #6
 800f900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f902:	4413      	add	r3, r2
 800f904:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[21];
 800f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f908:	f993 3000 	ldrsb.w	r3, [r3]
 800f90c:	461a      	mov	r2, r3
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	3315      	adds	r3, #21
 800f912:	f993 3000 	ldrsb.w	r3, [r3]
 800f916:	fb03 f302 	mul.w	r3, r3, r2
 800f91a:	6a3a      	ldr	r2, [r7, #32]
 800f91c:	4413      	add	r3, r2
 800f91e:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[22];
 800f920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f922:	3301      	adds	r3, #1
 800f924:	f993 3000 	ldrsb.w	r3, [r3]
 800f928:	461a      	mov	r2, r3
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	3316      	adds	r3, #22
 800f92e:	f993 3000 	ldrsb.w	r3, [r3]
 800f932:	fb03 f302 	mul.w	r3, r3, r2
 800f936:	6a3a      	ldr	r2, [r7, #32]
 800f938:	4413      	add	r3, r2
 800f93a:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[23];
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	3302      	adds	r3, #2
 800f940:	f993 3000 	ldrsb.w	r3, [r3]
 800f944:	461a      	mov	r2, r3
 800f946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f948:	3317      	adds	r3, #23
 800f94a:	f993 3000 	ldrsb.w	r3, [r3]
 800f94e:	fb03 f302 	mul.w	r3, r3, r2
 800f952:	6a3a      	ldr	r2, [r7, #32]
 800f954:	4413      	add	r3, r2
 800f956:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[24];
 800f958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95a:	3303      	adds	r3, #3
 800f95c:	f993 3000 	ldrsb.w	r3, [r3]
 800f960:	461a      	mov	r2, r3
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	3318      	adds	r3, #24
 800f966:	f993 3000 	ldrsb.w	r3, [r3]
 800f96a:	fb03 f302 	mul.w	r3, r3, r2
 800f96e:	6a3a      	ldr	r2, [r7, #32]
 800f970:	4413      	add	r3, r2
 800f972:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[25];
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	3304      	adds	r3, #4
 800f978:	f993 3000 	ldrsb.w	r3, [r3]
 800f97c:	461a      	mov	r2, r3
 800f97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f980:	3319      	adds	r3, #25
 800f982:	f993 3000 	ldrsb.w	r3, [r3]
 800f986:	fb03 f302 	mul.w	r3, r3, r2
 800f98a:	6a3a      	ldr	r2, [r7, #32]
 800f98c:	4413      	add	r3, r2
 800f98e:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[26];
 800f990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f992:	3305      	adds	r3, #5
 800f994:	f993 3000 	ldrsb.w	r3, [r3]
 800f998:	461a      	mov	r2, r3
 800f99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99c:	331a      	adds	r3, #26
 800f99e:	f993 3000 	ldrsb.w	r3, [r3]
 800f9a2:	fb03 f302 	mul.w	r3, r3, r2
 800f9a6:	6a3a      	ldr	r2, [r7, #32]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[27];
 800f9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ae:	3306      	adds	r3, #6
 800f9b0:	f993 3000 	ldrsb.w	r3, [r3]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b8:	331b      	adds	r3, #27
 800f9ba:	f993 3000 	ldrsb.w	r3, [r3]
 800f9be:	fb03 f302 	mul.w	r3, r3, r2
 800f9c2:	6a3a      	ldr	r2, [r7, #32]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 6;
 800f9c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f9cc:	3306      	adds	r3, #6
 800f9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9d0:	4413      	add	r3, r2
 800f9d2:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[28];
 800f9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d6:	f993 3000 	ldrsb.w	r3, [r3]
 800f9da:	461a      	mov	r2, r3
 800f9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9de:	331c      	adds	r3, #28
 800f9e0:	f993 3000 	ldrsb.w	r3, [r3]
 800f9e4:	fb03 f302 	mul.w	r3, r3, r2
 800f9e8:	6a3a      	ldr	r2, [r7, #32]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[29];
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	f993 3000 	ldrsb.w	r3, [r3]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	331d      	adds	r3, #29
 800f9fc:	f993 3000 	ldrsb.w	r3, [r3]
 800fa00:	fb03 f302 	mul.w	r3, r3, r2
 800fa04:	6a3a      	ldr	r2, [r7, #32]
 800fa06:	4413      	add	r3, r2
 800fa08:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[30];
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	3302      	adds	r3, #2
 800fa0e:	f993 3000 	ldrsb.w	r3, [r3]
 800fa12:	461a      	mov	r2, r3
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	331e      	adds	r3, #30
 800fa18:	f993 3000 	ldrsb.w	r3, [r3]
 800fa1c:	fb03 f302 	mul.w	r3, r3, r2
 800fa20:	6a3a      	ldr	r2, [r7, #32]
 800fa22:	4413      	add	r3, r2
 800fa24:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[31];
 800fa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa28:	3303      	adds	r3, #3
 800fa2a:	f993 3000 	ldrsb.w	r3, [r3]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa32:	331f      	adds	r3, #31
 800fa34:	f993 3000 	ldrsb.w	r3, [r3]
 800fa38:	fb03 f302 	mul.w	r3, r3, r2
 800fa3c:	6a3a      	ldr	r2, [r7, #32]
 800fa3e:	4413      	add	r3, r2
 800fa40:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[32];
 800fa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa44:	3304      	adds	r3, #4
 800fa46:	f993 3000 	ldrsb.w	r3, [r3]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	3320      	adds	r3, #32
 800fa50:	f993 3000 	ldrsb.w	r3, [r3]
 800fa54:	fb03 f302 	mul.w	r3, r3, r2
 800fa58:	6a3a      	ldr	r2, [r7, #32]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[33];
 800fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa60:	3305      	adds	r3, #5
 800fa62:	f993 3000 	ldrsb.w	r3, [r3]
 800fa66:	461a      	mov	r2, r3
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	3321      	adds	r3, #33	; 0x21
 800fa6c:	f993 3000 	ldrsb.w	r3, [r3]
 800fa70:	fb03 f302 	mul.w	r3, r3, r2
 800fa74:	6a3a      	ldr	r2, [r7, #32]
 800fa76:	4413      	add	r3, r2
 800fa78:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[34];
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	3306      	adds	r3, #6
 800fa7e:	f993 3000 	ldrsb.w	r3, [r3]
 800fa82:	461a      	mov	r2, r3
 800fa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa86:	3322      	adds	r3, #34	; 0x22
 800fa88:	f993 3000 	ldrsb.w	r3, [r3]
 800fa8c:	fb03 f302 	mul.w	r3, r3, r2
 800fa90:	6a3a      	ldr	r2, [r7, #32]
 800fa92:	4413      	add	r3, r2
 800fa94:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 6;
 800fa96:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800fa9a:	3306      	adds	r3, #6
 800fa9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa9e:	4413      	add	r3, r2
 800faa0:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[35];
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	f993 3000 	ldrsb.w	r3, [r3]
 800faa8:	461a      	mov	r2, r3
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	3323      	adds	r3, #35	; 0x23
 800faae:	f993 3000 	ldrsb.w	r3, [r3]
 800fab2:	fb03 f302 	mul.w	r3, r3, r2
 800fab6:	6a3a      	ldr	r2, [r7, #32]
 800fab8:	4413      	add	r3, r2
 800faba:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[36];
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	3301      	adds	r3, #1
 800fac0:	f993 3000 	ldrsb.w	r3, [r3]
 800fac4:	461a      	mov	r2, r3
 800fac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac8:	3324      	adds	r3, #36	; 0x24
 800faca:	f993 3000 	ldrsb.w	r3, [r3]
 800face:	fb03 f302 	mul.w	r3, r3, r2
 800fad2:	6a3a      	ldr	r2, [r7, #32]
 800fad4:	4413      	add	r3, r2
 800fad6:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[37];
 800fad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fada:	3302      	adds	r3, #2
 800fadc:	f993 3000 	ldrsb.w	r3, [r3]
 800fae0:	461a      	mov	r2, r3
 800fae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae4:	3325      	adds	r3, #37	; 0x25
 800fae6:	f993 3000 	ldrsb.w	r3, [r3]
 800faea:	fb03 f302 	mul.w	r3, r3, r2
 800faee:	6a3a      	ldr	r2, [r7, #32]
 800faf0:	4413      	add	r3, r2
 800faf2:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[38];
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf6:	3303      	adds	r3, #3
 800faf8:	f993 3000 	ldrsb.w	r3, [r3]
 800fafc:	461a      	mov	r2, r3
 800fafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb00:	3326      	adds	r3, #38	; 0x26
 800fb02:	f993 3000 	ldrsb.w	r3, [r3]
 800fb06:	fb03 f302 	mul.w	r3, r3, r2
 800fb0a:	6a3a      	ldr	r2, [r7, #32]
 800fb0c:	4413      	add	r3, r2
 800fb0e:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[39];
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	3304      	adds	r3, #4
 800fb14:	f993 3000 	ldrsb.w	r3, [r3]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1c:	3327      	adds	r3, #39	; 0x27
 800fb1e:	f993 3000 	ldrsb.w	r3, [r3]
 800fb22:	fb03 f302 	mul.w	r3, r3, r2
 800fb26:	6a3a      	ldr	r2, [r7, #32]
 800fb28:	4413      	add	r3, r2
 800fb2a:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[40];
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	3305      	adds	r3, #5
 800fb30:	f993 3000 	ldrsb.w	r3, [r3]
 800fb34:	461a      	mov	r2, r3
 800fb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb38:	3328      	adds	r3, #40	; 0x28
 800fb3a:	f993 3000 	ldrsb.w	r3, [r3]
 800fb3e:	fb03 f302 	mul.w	r3, r3, r2
 800fb42:	6a3a      	ldr	r2, [r7, #32]
 800fb44:	4413      	add	r3, r2
 800fb46:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[41];
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4a:	3306      	adds	r3, #6
 800fb4c:	f993 3000 	ldrsb.w	r3, [r3]
 800fb50:	461a      	mov	r2, r3
 800fb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb54:	3329      	adds	r3, #41	; 0x29
 800fb56:	f993 3000 	ldrsb.w	r3, [r3]
 800fb5a:	fb03 f302 	mul.w	r3, r3, r2
 800fb5e:	6a3a      	ldr	r2, [r7, #32]
 800fb60:	4413      	add	r3, r2
 800fb62:	623b      	str	r3, [r7, #32]
            cols_8b += column_x + 6;
 800fb64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800fb68:	3306      	adds	r3, #6
 800fb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb6c:	4413      	add	r3, r2
 800fb6e:	627b      	str	r3, [r7, #36]	; 0x24
            sum += cols_8b[0]*ksrc[42];
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb72:	f993 3000 	ldrsb.w	r3, [r3]
 800fb76:	461a      	mov	r2, r3
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	332a      	adds	r3, #42	; 0x2a
 800fb7c:	f993 3000 	ldrsb.w	r3, [r3]
 800fb80:	fb03 f302 	mul.w	r3, r3, r2
 800fb84:	6a3a      	ldr	r2, [r7, #32]
 800fb86:	4413      	add	r3, r2
 800fb88:	623b      	str	r3, [r7, #32]
            sum += cols_8b[1]*ksrc[43];
 800fb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	f993 3000 	ldrsb.w	r3, [r3]
 800fb92:	461a      	mov	r2, r3
 800fb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb96:	332b      	adds	r3, #43	; 0x2b
 800fb98:	f993 3000 	ldrsb.w	r3, [r3]
 800fb9c:	fb03 f302 	mul.w	r3, r3, r2
 800fba0:	6a3a      	ldr	r2, [r7, #32]
 800fba2:	4413      	add	r3, r2
 800fba4:	623b      	str	r3, [r7, #32]
            sum += cols_8b[2]*ksrc[44];
 800fba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba8:	3302      	adds	r3, #2
 800fbaa:	f993 3000 	ldrsb.w	r3, [r3]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	332c      	adds	r3, #44	; 0x2c
 800fbb4:	f993 3000 	ldrsb.w	r3, [r3]
 800fbb8:	fb03 f302 	mul.w	r3, r3, r2
 800fbbc:	6a3a      	ldr	r2, [r7, #32]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	623b      	str	r3, [r7, #32]
            sum += cols_8b[3]*ksrc[45];
 800fbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc4:	3303      	adds	r3, #3
 800fbc6:	f993 3000 	ldrsb.w	r3, [r3]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	332d      	adds	r3, #45	; 0x2d
 800fbd0:	f993 3000 	ldrsb.w	r3, [r3]
 800fbd4:	fb03 f302 	mul.w	r3, r3, r2
 800fbd8:	6a3a      	ldr	r2, [r7, #32]
 800fbda:	4413      	add	r3, r2
 800fbdc:	623b      	str	r3, [r7, #32]
            sum += cols_8b[4]*ksrc[46];
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	f993 3000 	ldrsb.w	r3, [r3]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbea:	332e      	adds	r3, #46	; 0x2e
 800fbec:	f993 3000 	ldrsb.w	r3, [r3]
 800fbf0:	fb03 f302 	mul.w	r3, r3, r2
 800fbf4:	6a3a      	ldr	r2, [r7, #32]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	623b      	str	r3, [r7, #32]
            sum += cols_8b[5]*ksrc[47];
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	3305      	adds	r3, #5
 800fbfe:	f993 3000 	ldrsb.w	r3, [r3]
 800fc02:	461a      	mov	r2, r3
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	332f      	adds	r3, #47	; 0x2f
 800fc08:	f993 3000 	ldrsb.w	r3, [r3]
 800fc0c:	fb03 f302 	mul.w	r3, r3, r2
 800fc10:	6a3a      	ldr	r2, [r7, #32]
 800fc12:	4413      	add	r3, r2
 800fc14:	623b      	str	r3, [r7, #32]
            sum += cols_8b[6]*ksrc[48];
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	3306      	adds	r3, #6
 800fc1a:	f993 3000 	ldrsb.w	r3, [r3]
 800fc1e:	461a      	mov	r2, r3
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	3330      	adds	r3, #48	; 0x30
 800fc24:	f993 3000 	ldrsb.w	r3, [r3]
 800fc28:	fb03 f302 	mul.w	r3, r3, r2
 800fc2c:	6a3a      	ldr	r2, [r7, #32]
 800fc2e:	4413      	add	r3, r2
 800fc30:	623b      	str	r3, [r7, #32]

            sum = MAX(sum, 0); //ReLU
 800fc32:	6a3b      	ldr	r3, [r7, #32]
 800fc34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc38:	623b      	str	r3, [r7, #32]
            sum = (float) sum * *scales;
 800fc3a:	6a3b      	ldr	r3, [r7, #32]
 800fc3c:	ee07 3a90 	vmov	s15, r3
 800fc40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc46:	edd3 7a00 	vldr	s15, [r3]
 800fc4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc52:	ee17 3a90 	vmov	r3, s15
 800fc56:	623b      	str	r3, [r7, #32]
            sum += output_offset; //Output offset is the next layer input zero
 800fc58:	6a3a      	ldr	r2, [r7, #32]
 800fc5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc5c:	4413      	add	r3, r2
 800fc5e:	623b      	str	r3, [r7, #32]
            sum = MAX(sum, activation_min);
 800fc60:	6a3a      	ldr	r2, [r7, #32]
 800fc62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc64:	4293      	cmp	r3, r2
 800fc66:	bfb8      	it	lt
 800fc68:	4613      	movlt	r3, r2
 800fc6a:	623b      	str	r3, [r7, #32]
            sum = MIN(sum, activation_max);
 800fc6c:	6a3a      	ldr	r2, [r7, #32]
 800fc6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc70:	4293      	cmp	r3, r2
 800fc72:	bfa8      	it	ge
 800fc74:	4613      	movge	r3, r2
 800fc76:	623b      	str	r3, [r7, #32]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	89ba      	ldrh	r2, [r7, #12]
 800fc7e:	fb02 f303 	mul.w	r3, r2, r3
 800fc82:	3b01      	subs	r3, #1
 800fc84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc86:	fb02 f303 	mul.w	r3, r2, r3
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc8e:	4413      	add	r3, r2
 800fc90:	6a3a      	ldr	r2, [r7, #32]
 800fc92:	b252      	sxtb	r2, r2
 800fc94:	701a      	strb	r2, [r3, #0]

            cols_8b_iterptr += STRIDE;
 800fc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc98:	3301      	adds	r3, #1
 800fc9a:	653b      	str	r3, [r7, #80]	; 0x50
        }
        cols_8b_iterptr += 3 * 2;
 800fc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc9e:	3306      	adds	r3, #6
 800fca0:	653b      	str	r3, [r7, #80]	; 0x50
    for (i = 0; i < output_y; i++) {
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	3301      	adds	r3, #1
 800fca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fca8:	89fb      	ldrh	r3, [r7, #14]
 800fcaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcac:	429a      	cmp	r2, r3
 800fcae:	f6fe aeea 	blt.w	800ea86 <depthwise_kernel7x7_stride1_inplace_kernel_CHW_fpreq+0x1a>
    }
}
 800fcb2:	bf00      	nop
 800fcb4:	3734      	adds	r7, #52	; 0x34
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
	...

0800fcc0 <getInput>:
int32_t *int32ptr;
float *fptr, *fptr2, *fptr3;

static char fp_buf[20];

signed char* getInput() {
 800fcc0:	b480      	push	{r7}
 800fcc2:	af00      	add	r7, sp, #0
	return &buffer0[8000];
 800fcc4:	4b04      	ldr	r3, [pc, #16]	; (800fcd8 <getInput+0x18>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	20009afc 	.word	0x20009afc

0800fcdc <getOutput>:
signed char* getOutput() {
 800fcdc:	b480      	push	{r7}
 800fcde:	af00      	add	r7, sp, #0
	return NNoutput;
 800fce0:	4b03      	ldr	r3, [pc, #12]	; (800fcf0 <getOutput+0x14>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3344      	adds	r3, #68	; 0x44
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	20009afc 	.word	0x20009afc

0800fcf4 <invoke>:
void end2endinference(q7_t *img) {
	invoke(NULL);
}
void invoke(float *labels) {
 800fcf4:	b5b0      	push	{r4, r5, r7, lr}
 800fcf6:	b0a6      	sub	sp, #152	; 0x98
 800fcf8:	af0a      	add	r7, sp, #40	; 0x28
 800fcfa:	6078      	str	r0, [r7, #4]
	/* layer 11:CAST */
	fptr = (float*) &buffer0[108];
 800fcfc:	4b93      	ldr	r3, [pc, #588]	; (800ff4c <invoke+0x258>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	336c      	adds	r3, #108	; 0x6c
 800fd02:	4a93      	ldr	r2, [pc, #588]	; (800ff50 <invoke+0x25c>)
 800fd04:	6013      	str	r3, [r2, #0]
	int8ptr = (int8_t*) &buffer0[68]; //buffer0[68] is the model output
 800fd06:	4b91      	ldr	r3, [pc, #580]	; (800ff4c <invoke+0x258>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	3344      	adds	r3, #68	; 0x44
 800fd0c:	4a91      	ldr	r2, [pc, #580]	; (800ff54 <invoke+0x260>)
 800fd0e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 800fd10:	2300      	movs	r3, #0
 800fd12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd14:	e013      	b.n	800fd3e <invoke+0x4a>
		fptr[i] = (float) int8ptr[i];
 800fd16:	4b8f      	ldr	r3, [pc, #572]	; (800ff54 <invoke+0x260>)
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd1c:	4413      	add	r3, r2
 800fd1e:	f993 1000 	ldrsb.w	r1, [r3]
 800fd22:	4b8b      	ldr	r3, [pc, #556]	; (800ff50 <invoke+0x25c>)
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4413      	add	r3, r2
 800fd2c:	ee07 1a90 	vmov	s15, r1
 800fd30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd34:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10; i++)
 800fd38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd40:	2b09      	cmp	r3, #9
 800fd42:	dde8      	ble.n	800fd16 <invoke+0x22>
	/* layer 12:LOG_SOFTMAX */
	LogSoftmax((float*) &buffer0[108], 1, 1, 10, (float*) &buffer0[68], 1, 1,
 800fd44:	4b81      	ldr	r3, [pc, #516]	; (800ff4c <invoke+0x258>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800fd4c:	4b7f      	ldr	r3, [pc, #508]	; (800ff4c <invoke+0x258>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3344      	adds	r3, #68	; 0x44
 800fd52:	220a      	movs	r2, #10
 800fd54:	9203      	str	r2, [sp, #12]
 800fd56:	2201      	movs	r2, #1
 800fd58:	9202      	str	r2, [sp, #8]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	9201      	str	r2, [sp, #4]
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	230a      	movs	r3, #10
 800fd62:	2201      	movs	r2, #1
 800fd64:	2101      	movs	r1, #1
 800fd66:	f001 f86b 	bl	8010e40 <LogSoftmax>
			10);
	/* layer 13:NLL_LOSS */
	nll_loss((float*) &buffer0[68], 2, 1, labels, 10, (float*) &buffer0[108]);
 800fd6a:	4b78      	ldr	r3, [pc, #480]	; (800ff4c <invoke+0x258>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800fd72:	4b76      	ldr	r3, [pc, #472]	; (800ff4c <invoke+0x258>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	336c      	adds	r3, #108	; 0x6c
 800fd78:	9301      	str	r3, [sp, #4]
 800fd7a:	230a      	movs	r3, #10
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2201      	movs	r2, #1
 800fd82:	2102      	movs	r1, #2
 800fd84:	f001 f955 	bl	8011032 <nll_loss>
	/* layer 14:ONES */
	fptr = (float*) &buffer0[108];
 800fd88:	4b70      	ldr	r3, [pc, #448]	; (800ff4c <invoke+0x258>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	336c      	adds	r3, #108	; 0x6c
 800fd8e:	4a70      	ldr	r2, [pc, #448]	; (800ff50 <invoke+0x25c>)
 800fd90:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 1; i++)
 800fd92:	2300      	movs	r3, #0
 800fd94:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd96:	e00a      	b.n	800fdae <invoke+0xba>
		fptr[i] = 1.0;
 800fd98:	4b6d      	ldr	r3, [pc, #436]	; (800ff50 <invoke+0x25c>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	4413      	add	r3, r2
 800fda2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fda6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 1; i++)
 800fda8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdaa:	3301      	adds	r3, #1
 800fdac:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	ddf1      	ble.n	800fd98 <invoke+0xa4>
	/* layer 15:NEGATIVE */
	fptr = (float*) &buffer0[108];
 800fdb4:	4b65      	ldr	r3, [pc, #404]	; (800ff4c <invoke+0x258>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	336c      	adds	r3, #108	; 0x6c
 800fdba:	4a65      	ldr	r2, [pc, #404]	; (800ff50 <invoke+0x25c>)
 800fdbc:	6013      	str	r3, [r2, #0]
	fptr2 = (float*) &buffer0[148];
 800fdbe:	4b63      	ldr	r3, [pc, #396]	; (800ff4c <invoke+0x258>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	3394      	adds	r3, #148	; 0x94
 800fdc4:	4a64      	ldr	r2, [pc, #400]	; (800ff58 <invoke+0x264>)
 800fdc6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 1; i++)
 800fdc8:	2300      	movs	r3, #0
 800fdca:	667b      	str	r3, [r7, #100]	; 0x64
 800fdcc:	e012      	b.n	800fdf4 <invoke+0x100>
		fptr2[i] = fptr[i] * -1.0f;
 800fdce:	4b60      	ldr	r3, [pc, #384]	; (800ff50 <invoke+0x25c>)
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	edd3 7a00 	vldr	s15, [r3]
 800fddc:	4b5e      	ldr	r3, [pc, #376]	; (800ff58 <invoke+0x264>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4413      	add	r3, r2
 800fde6:	eef1 7a67 	vneg.f32	s15, s15
 800fdea:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1; i++)
 800fdee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	667b      	str	r3, [r7, #100]	; 0x64
 800fdf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	dde9      	ble.n	800fdce <invoke+0xda>
	/* layer 16:MUL */
	fptr = (float*) labels;
 800fdfa:	4a55      	ldr	r2, [pc, #340]	; (800ff50 <invoke+0x25c>)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6013      	str	r3, [r2, #0]
	fptr3 = (float*) &buffer0[108];
 800fe00:	4b52      	ldr	r3, [pc, #328]	; (800ff4c <invoke+0x258>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	336c      	adds	r3, #108	; 0x6c
 800fe06:	4a55      	ldr	r2, [pc, #340]	; (800ff5c <invoke+0x268>)
 800fe08:	6013      	str	r3, [r2, #0]
	fptr2 = &buffer0[148];
 800fe0a:	4b50      	ldr	r3, [pc, #320]	; (800ff4c <invoke+0x258>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3394      	adds	r3, #148	; 0x94
 800fe10:	4a51      	ldr	r2, [pc, #324]	; (800ff58 <invoke+0x264>)
 800fe12:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 800fe14:	2300      	movs	r3, #0
 800fe16:	663b      	str	r3, [r7, #96]	; 0x60
 800fe18:	e016      	b.n	800fe48 <invoke+0x154>
		fptr3[i] = *fptr2 * fptr[i];
 800fe1a:	4b4f      	ldr	r3, [pc, #316]	; (800ff58 <invoke+0x264>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	ed93 7a00 	vldr	s14, [r3]
 800fe22:	4b4b      	ldr	r3, [pc, #300]	; (800ff50 <invoke+0x25c>)
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4413      	add	r3, r2
 800fe2c:	edd3 7a00 	vldr	s15, [r3]
 800fe30:	4b4a      	ldr	r3, [pc, #296]	; (800ff5c <invoke+0x268>)
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe3e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10; i++)
 800fe42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe44:	3301      	adds	r3, #1
 800fe46:	663b      	str	r3, [r7, #96]	; 0x60
 800fe48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe4a:	2b09      	cmp	r3, #9
 800fe4c:	dde5      	ble.n	800fe1a <invoke+0x126>
	/* layer 17:SUM */
	sum_3D((float*) &buffer0[108], 1, 10, 1, 1, (float*) &buffer0[148]); //Sums over the 108 elmnts into 148
 800fe4e:	4b3f      	ldr	r3, [pc, #252]	; (800ff4c <invoke+0x258>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800fe56:	4b3d      	ldr	r3, [pc, #244]	; (800ff4c <invoke+0x258>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	3394      	adds	r3, #148	; 0x94
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	2301      	movs	r3, #1
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	2301      	movs	r3, #1
 800fe64:	220a      	movs	r2, #10
 800fe66:	2101      	movs	r1, #1
 800fe68:	f001 f943 	bl	80110f2 <sum_3D>
			/* layer 18:EXP */
	tte_exp(10, (float*) &buffer0[68], (float*) &buffer0[152]); //Takes logsoftmax and turns it into softmax
 800fe6c:	4b37      	ldr	r3, [pc, #220]	; (800ff4c <invoke+0x258>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800fe74:	4b35      	ldr	r3, [pc, #212]	; (800ff4c <invoke+0x258>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	3398      	adds	r3, #152	; 0x98
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	200a      	movs	r0, #10
 800fe7e:	f001 fa1a 	bl	80112b6 <tte_exp>
			/* layer 19:MUL */
	fptr = (float*) &buffer0[152];
 800fe82:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <invoke+0x258>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	3398      	adds	r3, #152	; 0x98
 800fe88:	4a31      	ldr	r2, [pc, #196]	; (800ff50 <invoke+0x25c>)
 800fe8a:	6013      	str	r3, [r2, #0]
	fptr3 = (float*) &buffer0[192];
 800fe8c:	4b2f      	ldr	r3, [pc, #188]	; (800ff4c <invoke+0x258>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	33c0      	adds	r3, #192	; 0xc0
 800fe92:	4a32      	ldr	r2, [pc, #200]	; (800ff5c <invoke+0x268>)
 800fe94:	6013      	str	r3, [r2, #0]
	fptr2 = &buffer0[148];
 800fe96:	4b2d      	ldr	r3, [pc, #180]	; (800ff4c <invoke+0x258>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3394      	adds	r3, #148	; 0x94
 800fe9c:	4a2e      	ldr	r2, [pc, #184]	; (800ff58 <invoke+0x264>)
 800fe9e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 800fea0:	2300      	movs	r3, #0
 800fea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fea4:	e016      	b.n	800fed4 <invoke+0x1e0>
		fptr3[i] = *fptr2 * fptr[i];
 800fea6:	4b2c      	ldr	r3, [pc, #176]	; (800ff58 <invoke+0x264>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	ed93 7a00 	vldr	s14, [r3]
 800feae:	4b28      	ldr	r3, [pc, #160]	; (800ff50 <invoke+0x25c>)
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	edd3 7a00 	vldr	s15, [r3]
 800febc:	4b27      	ldr	r3, [pc, #156]	; (800ff5c <invoke+0x268>)
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	4413      	add	r3, r2
 800fec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feca:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 10; i++)
 800fece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fed0:	3301      	adds	r3, #1
 800fed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fed6:	2b09      	cmp	r3, #9
 800fed8:	dde5      	ble.n	800fea6 <invoke+0x1b2>
	/* layer 20:SUBTRACT */
	sub(10, (float*) &buffer0[108], (float*) &buffer0[192],
 800feda:	4b1c      	ldr	r3, [pc, #112]	; (800ff4c <invoke+0x258>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800fee2:	4b1a      	ldr	r3, [pc, #104]	; (800ff4c <invoke+0x258>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800feea:	4b18      	ldr	r3, [pc, #96]	; (800ff4c <invoke+0x258>)
 800feec:	681b      	ldr	r3, [r3, #0]
			(float*) &buffer0[68]); //Softmax - Labels (Gradient of model's output)
 800feee:	3344      	adds	r3, #68	; 0x44
	sub(10, (float*) &buffer0[108], (float*) &buffer0[192],
 800fef0:	200a      	movs	r0, #10
 800fef2:	f001 f8d1 	bl	8011098 <sub>
			/* layer 21:WHERE */
	where_zeros_inplace_bit((bool*) &buffer0[64], 10, (float*) &buffer0[68]); //Sets the gradient of an output that saturated the int8 range to 0
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <invoke+0x258>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800fefe:	4b13      	ldr	r3, [pc, #76]	; (800ff4c <invoke+0x258>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	3344      	adds	r3, #68	; 0x44
 800ff04:	461a      	mov	r2, r3
 800ff06:	210a      	movs	r1, #10
 800ff08:	f001 fa03 	bl	8011312 <where_zeros_inplace_bit>
			/* layer 22:MUL */
	mul(10, (float*) &buffer0[68], scales9, (float*) &buffer0[108]); //Gradient of the model's output times the scales
 800ff0c:	4b0f      	ldr	r3, [pc, #60]	; (800ff4c <invoke+0x258>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800ff14:	4b0d      	ldr	r3, [pc, #52]	; (800ff4c <invoke+0x258>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	336c      	adds	r3, #108	; 0x6c
 800ff1a:	4a11      	ldr	r2, [pc, #68]	; (800ff60 <invoke+0x26c>)
 800ff1c:	200a      	movs	r0, #10
 800ff1e:	f001 f85b 	bl	8010fd8 <mul>
			/* layer 23:BIAS_UPDATE */
	const float v5_bias_QAS[10] = { 75942980.0, 66743132.0, 91431460.0,
 800ff22:	4b10      	ldr	r3, [pc, #64]	; (800ff64 <invoke+0x270>)
 800ff24:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ff28:	461d      	mov	r5, r3
 800ff2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff32:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff36:	e884 0003 	stmia.w	r4, {r0, r1}
			88748140.0, 53406920.0, 67439176.0, 68025480.0, 85778140.0,
			63799956.0, 89537280.0, };
	fptr = (float*) &buffer0[108]; //gradients
 800ff3a:	4b04      	ldr	r3, [pc, #16]	; (800ff4c <invoke+0x258>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	336c      	adds	r3, #108	; 0x6c
 800ff40:	4a03      	ldr	r2, [pc, #12]	; (800ff50 <invoke+0x25c>)
 800ff42:	6013      	str	r3, [r2, #0]
//	for (int i = 0; i < (10); i++){
//		sprintf(fp_buf, "%d, ", (int)(fptr[i]) );
//		printLog(fp_buf);
//	}
	for (int i = 0; i < 10; i++)
 800ff44:	2300      	movs	r3, #0
 800ff46:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff48:	e038      	b.n	800ffbc <invoke+0x2c8>
 800ff4a:	bf00      	nop
 800ff4c:	20009afc 	.word	0x20009afc
 800ff50:	200212d8 	.word	0x200212d8
 800ff54:	2002132c 	.word	0x2002132c
 800ff58:	2002131c 	.word	0x2002131c
 800ff5c:	20021328 	.word	0x20021328
 800ff60:	08035f98 	.word	0x08035f98
 800ff64:	0801aea8 	.word	0x0801aea8
		v5_bias[i] -= (int32_t) (fptr[i] * blr * v5_bias_QAS[i]);
 800ff68:	4b33      	ldr	r3, [pc, #204]	; (8010038 <invoke+0x344>)
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff6e:	009b      	lsls	r3, r3, #2
 800ff70:	4413      	add	r3, r2
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	4b31      	ldr	r3, [pc, #196]	; (801003c <invoke+0x348>)
 800ff76:	6819      	ldr	r1, [r3, #0]
 800ff78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	440b      	add	r3, r1
 800ff7e:	ed93 7a00 	vldr	s14, [r3]
 800ff82:	4b2f      	ldr	r3, [pc, #188]	; (8010040 <invoke+0x34c>)
 800ff84:	edd3 7a00 	vldr	s15, [r3]
 800ff88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800ff94:	440b      	add	r3, r1
 800ff96:	3b40      	subs	r3, #64	; 0x40
 800ff98:	edd3 7a00 	vldr	s15, [r3]
 800ff9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffa4:	ee17 0a90 	vmov	r0, s15
 800ffa8:	4b23      	ldr	r3, [pc, #140]	; (8010038 <invoke+0x344>)
 800ffaa:	6819      	ldr	r1, [r3, #0]
 800ffac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	440b      	add	r3, r1
 800ffb2:	1a12      	subs	r2, r2, r0
 800ffb4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 10; i++)
 800ffb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffb8:	3301      	adds	r3, #1
 800ffba:	65bb      	str	r3, [r7, #88]	; 0x58
 800ffbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffbe:	2b09      	cmp	r3, #9
 800ffc0:	ddd2      	ble.n	800ff68 <invoke+0x274>
	/* layer 24:GROUP_CONV */
	const float v5_weight_QAS[10] = { 27141.816, 23853.818, 32677.361,
 800ffc2:	4b20      	ldr	r3, [pc, #128]	; (8010044 <invoke+0x350>)
 800ffc4:	f107 0408 	add.w	r4, r7, #8
 800ffc8:	461d      	mov	r5, r3
 800ffca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ffd6:	e884 0003 	stmia.w	r4, {r0, r1}
			31718.354, 19087.49, 24102.582, 24312.13, 30656.88, 22801.936,
			32000.387, };
	group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace(
 800ffda:	4b1b      	ldr	r3, [pc, #108]	; (8010048 <invoke+0x354>)
 800ffdc:	681c      	ldr	r4, [r3, #0]
 800ffde:	4b1b      	ldr	r3, [pc, #108]	; (801004c <invoke+0x358>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a1b      	ldr	r2, [pc, #108]	; (8010050 <invoke+0x35c>)
 800ffe4:	6812      	ldr	r2, [r2, #0]
 800ffe6:	491b      	ldr	r1, [pc, #108]	; (8010054 <invoke+0x360>)
 800ffe8:	6809      	ldr	r1, [r1, #0]
 800ffea:	481b      	ldr	r0, [pc, #108]	; (8010058 <invoke+0x364>)
 800ffec:	edd0 7a00 	vldr	s15, [r0]
 800fff0:	f107 0008 	add.w	r0, r7, #8
 800fff4:	9009      	str	r0, [sp, #36]	; 0x24
 800fff6:	2040      	movs	r0, #64	; 0x40
 800fff8:	9008      	str	r0, [sp, #32]
 800fffa:	2001      	movs	r0, #1
 800fffc:	9007      	str	r0, [sp, #28]
 800fffe:	9106      	str	r1, [sp, #24]
 8010000:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010004:	9105      	str	r1, [sp, #20]
 8010006:	2101      	movs	r1, #1
 8010008:	9104      	str	r1, [sp, #16]
 801000a:	2101      	movs	r1, #1
 801000c:	9103      	str	r1, [sp, #12]
 801000e:	9202      	str	r2, [sp, #8]
 8010010:	2200      	movs	r2, #0
 8010012:	9201      	str	r2, [sp, #4]
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	eeb0 1a67 	vmov.f32	s2, s15
 801001a:	eddf 0a10 	vldr	s1, [pc, #64]	; 801005c <invoke+0x368>
 801001e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010060 <invoke+0x36c>
 8010022:	2340      	movs	r3, #64	; 0x40
 8010024:	2201      	movs	r2, #1
 8010026:	2101      	movs	r1, #1
 8010028:	4620      	mov	r0, r4
 801002a:	f000 fa1b 	bl	8010464 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace>
			(float*) &buffer0[0], 1, 1, 64, weight_fp10, NULL, v5_weight, 1, 1,
			640, -FLT_MAX, FLT_MAX, (float*) sbuf, 1, 64, v5_weight_QAS, lr);
}
 801002e:	bf00      	nop
 8010030:	3770      	adds	r7, #112	; 0x70
 8010032:	46bd      	mov	sp, r7
 8010034:	bdb0      	pop	{r4, r5, r7, pc}
 8010036:	bf00      	nop
 8010038:	20009db4 	.word	0x20009db4
 801003c:	200212d8 	.word	0x200212d8
 8010040:	20009af8 	.word	0x20009af8
 8010044:	0801aed0 	.word	0x0801aed0
 8010048:	20009afc 	.word	0x20009afc
 801004c:	20009db8 	.word	0x20009db8
 8010050:	20009d88 	.word	0x20009d88
 8010054:	20009b00 	.word	0x20009b00
 8010058:	20009af4 	.word	0x20009af4
 801005c:	7f7fffff 	.word	0x7f7fffff
 8010060:	ff7fffff 	.word	0xff7fffff

08010064 <invoke_inf>:
void invoke_inf() {
 8010064:	b590      	push	{r4, r7, lr}
 8010066:	b08f      	sub	sp, #60	; 0x3c
 8010068:	af0e      	add	r7, sp, #56	; 0x38
	/* layer 0:CONV_2D */
	convolve_s8_kernel3_inputch1_stride2_pad1_fpreq(&buffer0[8000], 10, 49, 1,
 801006a:	4ba1      	ldr	r3, [pc, #644]	; (80102f0 <invoke_inf+0x28c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f503 54fa 	add.w	r4, r3, #8000	; 0x1f40
 8010072:	4b9f      	ldr	r3, [pc, #636]	; (80102f0 <invoke_inf+0x28c>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4a9f      	ldr	r2, [pc, #636]	; (80102f4 <invoke_inf+0x290>)
 8010078:	6812      	ldr	r2, [r2, #0]
 801007a:	499f      	ldr	r1, [pc, #636]	; (80102f8 <invoke_inf+0x294>)
 801007c:	6809      	ldr	r1, [r1, #0]
 801007e:	2000      	movs	r0, #0
 8010080:	900d      	str	r0, [sp, #52]	; 0x34
 8010082:	910c      	str	r1, [sp, #48]	; 0x30
 8010084:	920b      	str	r2, [sp, #44]	; 0x2c
 8010086:	2240      	movs	r2, #64	; 0x40
 8010088:	920a      	str	r2, [sp, #40]	; 0x28
 801008a:	2219      	movs	r2, #25
 801008c:	9209      	str	r2, [sp, #36]	; 0x24
 801008e:	2205      	movs	r2, #5
 8010090:	9208      	str	r2, [sp, #32]
 8010092:	9307      	str	r3, [sp, #28]
 8010094:	237f      	movs	r3, #127	; 0x7f
 8010096:	9306      	str	r3, [sp, #24]
 8010098:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801009c:	9305      	str	r3, [sp, #20]
 801009e:	2386      	movs	r3, #134	; 0x86
 80100a0:	9304      	str	r3, [sp, #16]
 80100a2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80100a6:	9303      	str	r3, [sp, #12]
 80100a8:	4b94      	ldr	r3, [pc, #592]	; (80102fc <invoke_inf+0x298>)
 80100aa:	9302      	str	r3, [sp, #8]
 80100ac:	4b94      	ldr	r3, [pc, #592]	; (8010300 <invoke_inf+0x29c>)
 80100ae:	9301      	str	r3, [sp, #4]
 80100b0:	4b94      	ldr	r3, [pc, #592]	; (8010304 <invoke_inf+0x2a0>)
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	2301      	movs	r3, #1
 80100b6:	2231      	movs	r2, #49	; 0x31
 80100b8:	210a      	movs	r1, #10
 80100ba:	4620      	mov	r0, r4
 80100bc:	f002 fad9 	bl	8012672 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq>
			(const q7_t*) weight0, bias0, scales0, -128, 134, -128, 127,
			&buffer0[0], 5, 25, 64, sbuf, kbuf, 0);
	/* layer 1:DEPTHWISE_CONV_2D */
	depthwise_kernel7x7_stride1_inplace_CHW_fpreq(&buffer0[0], 5, 25, 64,
 80100c0:	4b8b      	ldr	r3, [pc, #556]	; (80102f0 <invoke_inf+0x28c>)
 80100c2:	6818      	ldr	r0, [r3, #0]
 80100c4:	4b8a      	ldr	r3, [pc, #552]	; (80102f0 <invoke_inf+0x28c>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a8a      	ldr	r2, [pc, #552]	; (80102f4 <invoke_inf+0x290>)
 80100ca:	6812      	ldr	r2, [r2, #0]
 80100cc:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80100d0:	910d      	str	r1, [sp, #52]	; 0x34
 80100d2:	920c      	str	r2, [sp, #48]	; 0x30
 80100d4:	2240      	movs	r2, #64	; 0x40
 80100d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80100d8:	2219      	movs	r2, #25
 80100da:	920a      	str	r2, [sp, #40]	; 0x28
 80100dc:	2205      	movs	r2, #5
 80100de:	9209      	str	r2, [sp, #36]	; 0x24
 80100e0:	9308      	str	r3, [sp, #32]
 80100e2:	237f      	movs	r3, #127	; 0x7f
 80100e4:	9307      	str	r3, [sp, #28]
 80100e6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80100ea:	9306      	str	r3, [sp, #24]
 80100ec:	2380      	movs	r3, #128	; 0x80
 80100ee:	9305      	str	r3, [sp, #20]
 80100f0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80100f4:	9304      	str	r3, [sp, #16]
 80100f6:	4b84      	ldr	r3, [pc, #528]	; (8010308 <invoke_inf+0x2a4>)
 80100f8:	9303      	str	r3, [sp, #12]
 80100fa:	4b84      	ldr	r3, [pc, #528]	; (801030c <invoke_inf+0x2a8>)
 80100fc:	9302      	str	r3, [sp, #8]
 80100fe:	4b84      	ldr	r3, [pc, #528]	; (8010310 <invoke_inf+0x2ac>)
 8010100:	9301      	str	r3, [sp, #4]
 8010102:	4b84      	ldr	r3, [pc, #528]	; (8010314 <invoke_inf+0x2b0>)
 8010104:	9300      	str	r3, [sp, #0]
 8010106:	2340      	movs	r3, #64	; 0x40
 8010108:	2219      	movs	r2, #25
 801010a:	2105      	movs	r1, #5
 801010c:	f7fe fbcf 	bl	800e8ae <depthwise_kernel7x7_stride1_inplace_CHW_fpreq>
			(const q7_t*) CHWweight1, offsetBias1, offsetRBias1, scales1, -128,
			128, -128, 127, &buffer0[0], 5, 25, 64, sbuf, -128);
	/* layer 2:CONV_2D */
	convolve_1x1_s8_fpreq(&buffer0[0], 5, 25, 64, (const q7_t*) weight2, bias2,
 8010110:	4b77      	ldr	r3, [pc, #476]	; (80102f0 <invoke_inf+0x28c>)
 8010112:	6818      	ldr	r0, [r3, #0]
 8010114:	4b76      	ldr	r3, [pc, #472]	; (80102f0 <invoke_inf+0x28c>)
 8010116:	681b      	ldr	r3, [r3, #0]
			scales2, -128, 128, -128, 127, &buffer0[8000], 5, 25, 64, sbuf);
 8010118:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
	convolve_1x1_s8_fpreq(&buffer0[0], 5, 25, 64, (const q7_t*) weight2, bias2,
 801011c:	4a75      	ldr	r2, [pc, #468]	; (80102f4 <invoke_inf+0x290>)
 801011e:	6812      	ldr	r2, [r2, #0]
 8010120:	920b      	str	r2, [sp, #44]	; 0x2c
 8010122:	2240      	movs	r2, #64	; 0x40
 8010124:	920a      	str	r2, [sp, #40]	; 0x28
 8010126:	2219      	movs	r2, #25
 8010128:	9209      	str	r2, [sp, #36]	; 0x24
 801012a:	2205      	movs	r2, #5
 801012c:	9208      	str	r2, [sp, #32]
 801012e:	9307      	str	r3, [sp, #28]
 8010130:	237f      	movs	r3, #127	; 0x7f
 8010132:	9306      	str	r3, [sp, #24]
 8010134:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010138:	9305      	str	r3, [sp, #20]
 801013a:	2380      	movs	r3, #128	; 0x80
 801013c:	9304      	str	r3, [sp, #16]
 801013e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010142:	9303      	str	r3, [sp, #12]
 8010144:	4b74      	ldr	r3, [pc, #464]	; (8010318 <invoke_inf+0x2b4>)
 8010146:	9302      	str	r3, [sp, #8]
 8010148:	4b74      	ldr	r3, [pc, #464]	; (801031c <invoke_inf+0x2b8>)
 801014a:	9301      	str	r3, [sp, #4]
 801014c:	4b74      	ldr	r3, [pc, #464]	; (8010320 <invoke_inf+0x2bc>)
 801014e:	9300      	str	r3, [sp, #0]
 8010150:	2340      	movs	r3, #64	; 0x40
 8010152:	2219      	movs	r2, #25
 8010154:	2105      	movs	r1, #5
 8010156:	f001 f937 	bl	80113c8 <convolve_1x1_s8_fpreq>
	/* layer 3:DEPTHWISE_CONV_2D */
	depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000], 5, 25, 64,
 801015a:	4b65      	ldr	r3, [pc, #404]	; (80102f0 <invoke_inf+0x28c>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f503 50fa 	add.w	r0, r3, #8000	; 0x1f40
 8010162:	4b63      	ldr	r3, [pc, #396]	; (80102f0 <invoke_inf+0x28c>)
 8010164:	681b      	ldr	r3, [r3, #0]
			(const q7_t*) CHWweight3, offsetBias3, offsetRBias3, scales3, -128,
			128, -128, 127, &buffer0[8000], 5, 25, 64, sbuf, -128);
 8010166:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
	depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000], 5, 25, 64,
 801016a:	4a62      	ldr	r2, [pc, #392]	; (80102f4 <invoke_inf+0x290>)
 801016c:	6812      	ldr	r2, [r2, #0]
 801016e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8010172:	910d      	str	r1, [sp, #52]	; 0x34
 8010174:	920c      	str	r2, [sp, #48]	; 0x30
 8010176:	2240      	movs	r2, #64	; 0x40
 8010178:	920b      	str	r2, [sp, #44]	; 0x2c
 801017a:	2219      	movs	r2, #25
 801017c:	920a      	str	r2, [sp, #40]	; 0x28
 801017e:	2205      	movs	r2, #5
 8010180:	9209      	str	r2, [sp, #36]	; 0x24
 8010182:	9308      	str	r3, [sp, #32]
 8010184:	237f      	movs	r3, #127	; 0x7f
 8010186:	9307      	str	r3, [sp, #28]
 8010188:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801018c:	9306      	str	r3, [sp, #24]
 801018e:	2380      	movs	r3, #128	; 0x80
 8010190:	9305      	str	r3, [sp, #20]
 8010192:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010196:	9304      	str	r3, [sp, #16]
 8010198:	4b62      	ldr	r3, [pc, #392]	; (8010324 <invoke_inf+0x2c0>)
 801019a:	9303      	str	r3, [sp, #12]
 801019c:	4b62      	ldr	r3, [pc, #392]	; (8010328 <invoke_inf+0x2c4>)
 801019e:	9302      	str	r3, [sp, #8]
 80101a0:	4b62      	ldr	r3, [pc, #392]	; (801032c <invoke_inf+0x2c8>)
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	4b62      	ldr	r3, [pc, #392]	; (8010330 <invoke_inf+0x2cc>)
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	2340      	movs	r3, #64	; 0x40
 80101aa:	2219      	movs	r2, #25
 80101ac:	2105      	movs	r1, #5
 80101ae:	f7fe f85b 	bl	800e268 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
	/* layer 4:CONV_2D */
	convolve_1x1_s8_fpreq(&buffer0[8000], 5, 25, 64, (const q7_t*) weight4,
 80101b2:	4b4f      	ldr	r3, [pc, #316]	; (80102f0 <invoke_inf+0x28c>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f503 50fa 	add.w	r0, r3, #8000	; 0x1f40
 80101ba:	4b4d      	ldr	r3, [pc, #308]	; (80102f0 <invoke_inf+0x28c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a4d      	ldr	r2, [pc, #308]	; (80102f4 <invoke_inf+0x290>)
 80101c0:	6812      	ldr	r2, [r2, #0]
 80101c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80101c4:	2240      	movs	r2, #64	; 0x40
 80101c6:	920a      	str	r2, [sp, #40]	; 0x28
 80101c8:	2219      	movs	r2, #25
 80101ca:	9209      	str	r2, [sp, #36]	; 0x24
 80101cc:	2205      	movs	r2, #5
 80101ce:	9208      	str	r2, [sp, #32]
 80101d0:	9307      	str	r3, [sp, #28]
 80101d2:	237f      	movs	r3, #127	; 0x7f
 80101d4:	9306      	str	r3, [sp, #24]
 80101d6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80101da:	9305      	str	r3, [sp, #20]
 80101dc:	2380      	movs	r3, #128	; 0x80
 80101de:	9304      	str	r3, [sp, #16]
 80101e0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80101e4:	9303      	str	r3, [sp, #12]
 80101e6:	4b53      	ldr	r3, [pc, #332]	; (8010334 <invoke_inf+0x2d0>)
 80101e8:	9302      	str	r3, [sp, #8]
 80101ea:	4b53      	ldr	r3, [pc, #332]	; (8010338 <invoke_inf+0x2d4>)
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	4b53      	ldr	r3, [pc, #332]	; (801033c <invoke_inf+0x2d8>)
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	2340      	movs	r3, #64	; 0x40
 80101f4:	2219      	movs	r2, #25
 80101f6:	2105      	movs	r1, #5
 80101f8:	f001 f8e6 	bl	80113c8 <convolve_1x1_s8_fpreq>
			bias4, scales4, -128, 128, -128, 127, &buffer0[0], 5, 25, 64, sbuf);
	/* layer 5:DEPTHWISE_CONV_2D */
	depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[0], 5, 25, 64,
 80101fc:	4b3c      	ldr	r3, [pc, #240]	; (80102f0 <invoke_inf+0x28c>)
 80101fe:	6818      	ldr	r0, [r3, #0]
 8010200:	4b3b      	ldr	r3, [pc, #236]	; (80102f0 <invoke_inf+0x28c>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a3b      	ldr	r2, [pc, #236]	; (80102f4 <invoke_inf+0x290>)
 8010206:	6812      	ldr	r2, [r2, #0]
 8010208:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 801020c:	910d      	str	r1, [sp, #52]	; 0x34
 801020e:	920c      	str	r2, [sp, #48]	; 0x30
 8010210:	2240      	movs	r2, #64	; 0x40
 8010212:	920b      	str	r2, [sp, #44]	; 0x2c
 8010214:	2219      	movs	r2, #25
 8010216:	920a      	str	r2, [sp, #40]	; 0x28
 8010218:	2205      	movs	r2, #5
 801021a:	9209      	str	r2, [sp, #36]	; 0x24
 801021c:	9308      	str	r3, [sp, #32]
 801021e:	237f      	movs	r3, #127	; 0x7f
 8010220:	9307      	str	r3, [sp, #28]
 8010222:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010226:	9306      	str	r3, [sp, #24]
 8010228:	2380      	movs	r3, #128	; 0x80
 801022a:	9305      	str	r3, [sp, #20]
 801022c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010230:	9304      	str	r3, [sp, #16]
 8010232:	4b43      	ldr	r3, [pc, #268]	; (8010340 <invoke_inf+0x2dc>)
 8010234:	9303      	str	r3, [sp, #12]
 8010236:	4b43      	ldr	r3, [pc, #268]	; (8010344 <invoke_inf+0x2e0>)
 8010238:	9302      	str	r3, [sp, #8]
 801023a:	4b43      	ldr	r3, [pc, #268]	; (8010348 <invoke_inf+0x2e4>)
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	4b43      	ldr	r3, [pc, #268]	; (801034c <invoke_inf+0x2e8>)
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	2340      	movs	r3, #64	; 0x40
 8010244:	2219      	movs	r2, #25
 8010246:	2105      	movs	r1, #5
 8010248:	f7fe f80e 	bl	800e268 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
			(const q7_t*) CHWweight5, offsetBias5, offsetRBias5, scales5, -128,
			128, -128, 127, &buffer0[0], 5, 25, 64, sbuf, -128);
	/* layer 6:CONV_2D */
	convolve_1x1_s8_fpreq(&buffer0[0], 5, 25, 64, (const q7_t*) weight6, bias6,
 801024c:	4b28      	ldr	r3, [pc, #160]	; (80102f0 <invoke_inf+0x28c>)
 801024e:	6818      	ldr	r0, [r3, #0]
 8010250:	4b27      	ldr	r3, [pc, #156]	; (80102f0 <invoke_inf+0x28c>)
 8010252:	681b      	ldr	r3, [r3, #0]
			scales6, -128, 128, -128, 127, &buffer0[8000], 5, 25, 64, sbuf);
 8010254:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
	convolve_1x1_s8_fpreq(&buffer0[0], 5, 25, 64, (const q7_t*) weight6, bias6,
 8010258:	4a26      	ldr	r2, [pc, #152]	; (80102f4 <invoke_inf+0x290>)
 801025a:	6812      	ldr	r2, [r2, #0]
 801025c:	920b      	str	r2, [sp, #44]	; 0x2c
 801025e:	2240      	movs	r2, #64	; 0x40
 8010260:	920a      	str	r2, [sp, #40]	; 0x28
 8010262:	2219      	movs	r2, #25
 8010264:	9209      	str	r2, [sp, #36]	; 0x24
 8010266:	2205      	movs	r2, #5
 8010268:	9208      	str	r2, [sp, #32]
 801026a:	9307      	str	r3, [sp, #28]
 801026c:	237f      	movs	r3, #127	; 0x7f
 801026e:	9306      	str	r3, [sp, #24]
 8010270:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010274:	9305      	str	r3, [sp, #20]
 8010276:	2380      	movs	r3, #128	; 0x80
 8010278:	9304      	str	r3, [sp, #16]
 801027a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801027e:	9303      	str	r3, [sp, #12]
 8010280:	4b33      	ldr	r3, [pc, #204]	; (8010350 <invoke_inf+0x2ec>)
 8010282:	9302      	str	r3, [sp, #8]
 8010284:	4b33      	ldr	r3, [pc, #204]	; (8010354 <invoke_inf+0x2f0>)
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	4b33      	ldr	r3, [pc, #204]	; (8010358 <invoke_inf+0x2f4>)
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	2340      	movs	r3, #64	; 0x40
 801028e:	2219      	movs	r2, #25
 8010290:	2105      	movs	r1, #5
 8010292:	f001 f899 	bl	80113c8 <convolve_1x1_s8_fpreq>
	/* layer 7:DEPTHWISE_CONV_2D */
	depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000], 5, 25, 64,
 8010296:	4b16      	ldr	r3, [pc, #88]	; (80102f0 <invoke_inf+0x28c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f503 50fa 	add.w	r0, r3, #8000	; 0x1f40
 801029e:	4b14      	ldr	r3, [pc, #80]	; (80102f0 <invoke_inf+0x28c>)
 80102a0:	681b      	ldr	r3, [r3, #0]
			(const q7_t*) CHWweight7, offsetBias7, offsetRBias7, scales7, -128,
			128, -128, 127, &buffer0[8000], 5, 25, 64, sbuf, -128);
 80102a2:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
	depthwise_kernel3x3_stride1_inplace_CHW_fpreq(&buffer0[8000], 5, 25, 64,
 80102a6:	4a13      	ldr	r2, [pc, #76]	; (80102f4 <invoke_inf+0x290>)
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80102ae:	910d      	str	r1, [sp, #52]	; 0x34
 80102b0:	920c      	str	r2, [sp, #48]	; 0x30
 80102b2:	2240      	movs	r2, #64	; 0x40
 80102b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80102b6:	2219      	movs	r2, #25
 80102b8:	920a      	str	r2, [sp, #40]	; 0x28
 80102ba:	2205      	movs	r2, #5
 80102bc:	9209      	str	r2, [sp, #36]	; 0x24
 80102be:	9308      	str	r3, [sp, #32]
 80102c0:	237f      	movs	r3, #127	; 0x7f
 80102c2:	9307      	str	r3, [sp, #28]
 80102c4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80102c8:	9306      	str	r3, [sp, #24]
 80102ca:	2380      	movs	r3, #128	; 0x80
 80102cc:	9305      	str	r3, [sp, #20]
 80102ce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80102d2:	9304      	str	r3, [sp, #16]
 80102d4:	4b21      	ldr	r3, [pc, #132]	; (801035c <invoke_inf+0x2f8>)
 80102d6:	9303      	str	r3, [sp, #12]
 80102d8:	4b21      	ldr	r3, [pc, #132]	; (8010360 <invoke_inf+0x2fc>)
 80102da:	9302      	str	r3, [sp, #8]
 80102dc:	4b21      	ldr	r3, [pc, #132]	; (8010364 <invoke_inf+0x300>)
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	4b21      	ldr	r3, [pc, #132]	; (8010368 <invoke_inf+0x304>)
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	2340      	movs	r3, #64	; 0x40
 80102e6:	2219      	movs	r2, #25
 80102e8:	2105      	movs	r1, #5
 80102ea:	f7fd ffbd 	bl	800e268 <depthwise_kernel3x3_stride1_inplace_CHW_fpreq>
 80102ee:	e03d      	b.n	801036c <invoke_inf+0x308>
 80102f0:	20009afc 	.word	0x20009afc
 80102f4:	20009b00 	.word	0x20009b00
 80102f8:	20009b04 	.word	0x20009b04
 80102fc:	0802f798 	.word	0x0802f798
 8010300:	0802f698 	.word	0x0802f698
 8010304:	0802f458 	.word	0x0802f458
 8010308:	080306d8 	.word	0x080306d8
 801030c:	080305d8 	.word	0x080305d8
 8010310:	080304d8 	.word	0x080304d8
 8010314:	0802f898 	.word	0x0802f898
 8010318:	080318d8 	.word	0x080318d8
 801031c:	080317d8 	.word	0x080317d8
 8010320:	080307d8 	.word	0x080307d8
 8010324:	08031e18 	.word	0x08031e18
 8010328:	08031d18 	.word	0x08031d18
 801032c:	08031c18 	.word	0x08031c18
 8010330:	080319d8 	.word	0x080319d8
 8010334:	08033018 	.word	0x08033018
 8010338:	08032f18 	.word	0x08032f18
 801033c:	08031f18 	.word	0x08031f18
 8010340:	08033558 	.word	0x08033558
 8010344:	08033458 	.word	0x08033458
 8010348:	08033358 	.word	0x08033358
 801034c:	08033118 	.word	0x08033118
 8010350:	08034758 	.word	0x08034758
 8010354:	08034658 	.word	0x08034658
 8010358:	08033658 	.word	0x08033658
 801035c:	08034c98 	.word	0x08034c98
 8010360:	08034b98 	.word	0x08034b98
 8010364:	08034a98 	.word	0x08034a98
 8010368:	08034858 	.word	0x08034858
	/* layer 8:CONV_2D */
	convolve_1x1_s8_fpreq(&buffer0[8000], 5, 25, 64, (const q7_t*) weight8,
 801036c:	4b35      	ldr	r3, [pc, #212]	; (8010444 <invoke_inf+0x3e0>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f503 50fa 	add.w	r0, r3, #8000	; 0x1f40
 8010374:	4b33      	ldr	r3, [pc, #204]	; (8010444 <invoke_inf+0x3e0>)
 8010376:	681b      	ldr	r3, [r3, #0]
			bias8, scales8, -128, 128, -128, 127, &buffer0[16000], 5, 25, 64,
 8010378:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
	convolve_1x1_s8_fpreq(&buffer0[8000], 5, 25, 64, (const q7_t*) weight8,
 801037c:	4a32      	ldr	r2, [pc, #200]	; (8010448 <invoke_inf+0x3e4>)
 801037e:	6812      	ldr	r2, [r2, #0]
 8010380:	920b      	str	r2, [sp, #44]	; 0x2c
 8010382:	2240      	movs	r2, #64	; 0x40
 8010384:	920a      	str	r2, [sp, #40]	; 0x28
 8010386:	2219      	movs	r2, #25
 8010388:	9209      	str	r2, [sp, #36]	; 0x24
 801038a:	2205      	movs	r2, #5
 801038c:	9208      	str	r2, [sp, #32]
 801038e:	9307      	str	r3, [sp, #28]
 8010390:	237f      	movs	r3, #127	; 0x7f
 8010392:	9306      	str	r3, [sp, #24]
 8010394:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8010398:	9305      	str	r3, [sp, #20]
 801039a:	2380      	movs	r3, #128	; 0x80
 801039c:	9304      	str	r3, [sp, #16]
 801039e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80103a2:	9303      	str	r3, [sp, #12]
 80103a4:	4b29      	ldr	r3, [pc, #164]	; (801044c <invoke_inf+0x3e8>)
 80103a6:	9302      	str	r3, [sp, #8]
 80103a8:	4b29      	ldr	r3, [pc, #164]	; (8010450 <invoke_inf+0x3ec>)
 80103aa:	9301      	str	r3, [sp, #4]
 80103ac:	4b29      	ldr	r3, [pc, #164]	; (8010454 <invoke_inf+0x3f0>)
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	2340      	movs	r3, #64	; 0x40
 80103b2:	2219      	movs	r2, #25
 80103b4:	2105      	movs	r1, #5
 80103b6:	f001 f807 	bl	80113c8 <convolve_1x1_s8_fpreq>
			sbuf);
	/* layer 9:AVERAGE_POOL_2D */
//	ResetTimer();
//	int start_cycles = getCycles();
//	StartTimer();
	avg_pooling(&buffer0[16000], 25, 5, 64, 25, 5, 1, 1, -128, 127,
 80103ba:	4b22      	ldr	r3, [pc, #136]	; (8010444 <invoke_inf+0x3e0>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f503 507a 	add.w	r0, r3, #16000	; 0x3e80
 80103c2:	4b20      	ldr	r3, [pc, #128]	; (8010444 <invoke_inf+0x3e0>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	9306      	str	r3, [sp, #24]
 80103c8:	237f      	movs	r3, #127	; 0x7f
 80103ca:	9305      	str	r3, [sp, #20]
 80103cc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80103d0:	9304      	str	r3, [sp, #16]
 80103d2:	2301      	movs	r3, #1
 80103d4:	9303      	str	r3, [sp, #12]
 80103d6:	2301      	movs	r3, #1
 80103d8:	9302      	str	r3, [sp, #8]
 80103da:	2305      	movs	r3, #5
 80103dc:	9301      	str	r3, [sp, #4]
 80103de:	2319      	movs	r3, #25
 80103e0:	9300      	str	r3, [sp, #0]
 80103e2:	2340      	movs	r3, #64	; 0x40
 80103e4:	2205      	movs	r2, #5
 80103e6:	2119      	movs	r1, #25
 80103e8:	f005 f990 	bl	801570c <avg_pooling>
//	sprintf(fp_buf, "%d", (end_cycles-start_cycles));
//	printLog(fp_buf);
	/* layer 10:CONV_2D */
	// Turn on PG7
//	GPIOG->BSRR = GPIO_PIN_7;
	convolve_1x1_s8_fpreq_bitmask(&buffer0[0], 1, 1, 64, (const q7_t*) weight9,
 80103ec:	4b15      	ldr	r3, [pc, #84]	; (8010444 <invoke_inf+0x3e0>)
 80103ee:	6818      	ldr	r0, [r3, #0]
 80103f0:	4b14      	ldr	r3, [pc, #80]	; (8010444 <invoke_inf+0x3e0>)
 80103f2:	681b      	ldr	r3, [r3, #0]
			bias9, scales9, 4, 128, -128, 127, &buffer0[68], &buffer0[64], 1, 1,
 80103f4:	3344      	adds	r3, #68	; 0x44
	convolve_1x1_s8_fpreq_bitmask(&buffer0[0], 1, 1, 64, (const q7_t*) weight9,
 80103f6:	4a13      	ldr	r2, [pc, #76]	; (8010444 <invoke_inf+0x3e0>)
 80103f8:	6812      	ldr	r2, [r2, #0]
			bias9, scales9, 4, 128, -128, 127, &buffer0[68], &buffer0[64], 1, 1,
 80103fa:	3240      	adds	r2, #64	; 0x40
	convolve_1x1_s8_fpreq_bitmask(&buffer0[0], 1, 1, 64, (const q7_t*) weight9,
 80103fc:	4912      	ldr	r1, [pc, #72]	; (8010448 <invoke_inf+0x3e4>)
 80103fe:	6809      	ldr	r1, [r1, #0]
 8010400:	910c      	str	r1, [sp, #48]	; 0x30
 8010402:	210a      	movs	r1, #10
 8010404:	910b      	str	r1, [sp, #44]	; 0x2c
 8010406:	2101      	movs	r1, #1
 8010408:	910a      	str	r1, [sp, #40]	; 0x28
 801040a:	2101      	movs	r1, #1
 801040c:	9109      	str	r1, [sp, #36]	; 0x24
 801040e:	9208      	str	r2, [sp, #32]
 8010410:	9307      	str	r3, [sp, #28]
 8010412:	237f      	movs	r3, #127	; 0x7f
 8010414:	9306      	str	r3, [sp, #24]
 8010416:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801041a:	9305      	str	r3, [sp, #20]
 801041c:	2380      	movs	r3, #128	; 0x80
 801041e:	9304      	str	r3, [sp, #16]
 8010420:	2304      	movs	r3, #4
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	4b0c      	ldr	r3, [pc, #48]	; (8010458 <invoke_inf+0x3f4>)
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	4b0c      	ldr	r3, [pc, #48]	; (801045c <invoke_inf+0x3f8>)
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	4b0c      	ldr	r3, [pc, #48]	; (8010460 <invoke_inf+0x3fc>)
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	2340      	movs	r3, #64	; 0x40
 8010432:	2201      	movs	r2, #1
 8010434:	2101      	movs	r1, #1
 8010436:	f001 fc2e 	bl	8011c96 <convolve_1x1_s8_fpreq_bitmask>
			10, sbuf);
	// Turn off PG7
//	GPIOG->BSRR = GPIO_PIN_7 << 16;
}
 801043a:	bf00      	nop
 801043c:	3704      	adds	r7, #4
 801043e:	46bd      	mov	sp, r7
 8010440:	bd90      	pop	{r4, r7, pc}
 8010442:	bf00      	nop
 8010444:	20009afc 	.word	0x20009afc
 8010448:	20009b00 	.word	0x20009b00
 801044c:	08035e98 	.word	0x08035e98
 8010450:	08035d98 	.word	0x08035d98
 8010454:	08034d98 	.word	0x08034d98
 8010458:	08035f98 	.word	0x08035f98
 801045c:	20009d8c 	.word	0x20009d8c
 8010460:	20009b08 	.word	0x20009b08

08010464 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace>:
                 const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                 const float* filter_data, const float* bias_data, 
                 int8_t* output_weight_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth, 
                 const float output_activation_min, const float output_activation_max,
                 float* im2col_data, const uint16_t batches, const uint16_t groups,
                 const float* scales, const float learning_rate) {
 8010464:	b580      	push	{r7, lr}
 8010466:	b0a2      	sub	sp, #136	; 0x88
 8010468:	af00      	add	r7, sp, #0
 801046a:	61f8      	str	r0, [r7, #28]
 801046c:	4608      	mov	r0, r1
 801046e:	4611      	mov	r1, r2
 8010470:	461a      	mov	r2, r3
 8010472:	ed87 0a04 	vstr	s0, [r7, #16]
 8010476:	edc7 0a03 	vstr	s1, [r7, #12]
 801047a:	ed87 1a02 	vstr	s2, [r7, #8]
 801047e:	4603      	mov	r3, r0
 8010480:	837b      	strh	r3, [r7, #26]
 8010482:	460b      	mov	r3, r1
 8010484:	833b      	strh	r3, [r7, #24]
 8010486:	4613      	mov	r3, r2
 8010488:	82fb      	strh	r3, [r7, #22]
  (void) input_height;
  (void) input_width;

  int group;
  int output_depth_per_group = output_depth / groups;
 801048a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801048e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8010492:	fbb2 f3f3 	udiv	r3, r2, r3
 8010496:	b29b      	uxth	r3, r3
 8010498:	67bb      	str	r3, [r7, #120]	; 0x78

  for (group = 0; group < groups; group++) {
 801049a:	2300      	movs	r3, #0
 801049c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104a0:	f000 bcc2 	b.w	8010e28 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x9c4>
    int i_ch_out;

    for (i_ch_out = 0; i_ch_out < output_depth_per_group; i_ch_out+=10) {
 80104a4:	2300      	movs	r3, #0
 80104a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80104aa:	f000 bcb2 	b.w	8010e12 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x9ae>
      /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
      const float input_0 = (float)input_data[group];
 80104ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80104b2:	69fa      	ldr	r2, [r7, #28]
 80104b4:	4413      	add	r3, r2
 80104b6:	f993 3000 	ldrsb.w	r3, [r3]
 80104ba:	ee07 3a90 	vmov	s15, r3
 80104be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104c2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 80104c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80104d0:	4413      	add	r3, r2
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	627b      	str	r3, [r7, #36]	; 0x24
 80104d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104da:	3301      	adds	r3, #1
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80104e2:	4413      	add	r3, r2
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80104e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104ec:	3302      	adds	r3, #2
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80104f4:	4413      	add	r3, r2
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104fe:	3303      	adds	r3, #3
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010506:	4413      	add	r3, r2
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	633b      	str	r3, [r7, #48]	; 0x30
 801050c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010510:	3304      	adds	r3, #4
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010518:	4413      	add	r3, r2
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	637b      	str	r3, [r7, #52]	; 0x34
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 801051e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010522:	3305      	adds	r3, #5
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801052a:	4413      	add	r3, r2
 801052c:	681b      	ldr	r3, [r3, #0]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 801052e:	63bb      	str	r3, [r7, #56]	; 0x38
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 8010530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010534:	3306      	adds	r3, #6
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801053c:	4413      	add	r3, r2
 801053e:	681b      	ldr	r3, [r3, #0]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 8010540:	63fb      	str	r3, [r7, #60]	; 0x3c
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 8010542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010546:	3307      	adds	r3, #7
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801054e:	4413      	add	r3, r2
 8010550:	681b      	ldr	r3, [r3, #0]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 8010552:	643b      	str	r3, [r7, #64]	; 0x40
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 8010554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010558:	3308      	adds	r3, #8
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010560:	4413      	add	r3, r2
 8010562:	681b      	ldr	r3, [r3, #0]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 8010564:	647b      	str	r3, [r7, #68]	; 0x44
                      filter_data[i_ch_out + 5], filter_data[i_ch_out + 6], filter_data[i_ch_out + 7], filter_data[i_ch_out + 8], filter_data[i_ch_out + 9]};
 8010566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801056a:	3309      	adds	r3, #9
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010572:	4413      	add	r3, r2
 8010574:	681b      	ldr	r3, [r3, #0]
      const float filter[10] = {filter_data[i_ch_out], filter_data[i_ch_out + 1], filter_data[i_ch_out + 2], filter_data[i_ch_out + 3], filter_data[i_ch_out + 4], 
 8010576:	64bb      	str	r3, [r7, #72]	; 0x48

      uint16_t col_count_div10 = (output_depth_per_group * DIM_KER_X * DIM_KER_Y) / 10;
 8010578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801057a:	4aea      	ldr	r2, [pc, #936]	; (8010924 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4c0>)
 801057c:	fba2 2303 	umull	r2, r3, r2, r3
 8010580:	08db      	lsrs	r3, r3, #3
 8010582:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

      while (col_count_div10--) {
 8010586:	f000 bc37 	b.w	8010df8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x994>
        // Assume bias_data as NULL
        float sum[10] = {};
 801058a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801058e:	2228      	movs	r2, #40	; 0x28
 8010590:	2100      	movs	r1, #0
 8010592:	4618      	mov	r0, r3
 8010594:	f007 fb52 	bl	8017c3c <memset>

        sum[0] += input_0 * filter[0];
 8010598:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801059c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80105a0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80105a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        sum[1] += input_0 * filter[1];
 80105b0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80105b4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80105b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80105bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        sum[2] += input_0 * filter[2];
 80105c8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80105cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80105d0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80105d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105dc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        sum[3] += input_0 * filter[3];
 80105e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80105e4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80105e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80105ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105f4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        sum[4] += input_0 * filter[4];
 80105f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80105fc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8010600:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8010604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010608:	ee77 7a27 	vadd.f32	s15, s14, s15
 801060c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        sum[5] += input_0 * filter[5];
 8010610:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8010614:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8010618:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801061c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010624:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        sum[6] += input_0 * filter[6];
 8010628:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 801062c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8010630:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8010634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010638:	ee77 7a27 	vadd.f32	s15, s14, s15
 801063c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        sum[7] += input_0 * filter[7];
 8010640:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8010644:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8010648:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801064c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010654:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
        sum[8] += input_0 * filter[8];
 8010658:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801065c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8010660:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8010664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010668:	ee77 7a27 	vadd.f32	s15, s14, s15
 801066c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
        sum[9] += input_0 * filter[9];
 8010670:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8010674:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8010678:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801067c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010684:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

        output_weight_data[i_ch_out + group] -= TN_MIN(TN_MAX(sum[0], output_activation_min), output_activation_max) * scales[i_ch_out] * learning_rate;
 8010688:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801068c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010690:	4413      	add	r3, r2
 8010692:	461a      	mov	r2, r3
 8010694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010698:	4413      	add	r3, r2
 801069a:	f993 3000 	ldrsb.w	r3, [r3]
 801069e:	ee07 3a90 	vmov	s15, r3
 80106a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80106a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80106aa:	edd7 6a04 	vldr	s13, [r7, #16]
 80106ae:	eef4 6ae7 	vcmpe.f32	s13, s15
 80106b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b6:	d502      	bpl.n	80106be <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x25a>
 80106b8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80106bc:	e001      	b.n	80106c2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x25e>
 80106be:	edd7 7a04 	vldr	s15, [r7, #16]
 80106c2:	edd7 6a03 	vldr	s13, [r7, #12]
 80106c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ce:	d50e      	bpl.n	80106ee <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x28a>
 80106d0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80106d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80106d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80106dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e0:	d502      	bpl.n	80106e8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x284>
 80106e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80106e6:	e004      	b.n	80106f2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x28e>
 80106e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80106ec:	e001      	b.n	80106f2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x28e>
 80106ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80106f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80106fc:	4413      	add	r3, r2
 80106fe:	edd3 6a00 	vldr	s13, [r3]
 8010702:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010706:	edd7 7a02 	vldr	s15, [r7, #8]
 801070a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801070e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801071a:	4413      	add	r3, r2
 801071c:	461a      	mov	r2, r3
 801071e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010722:	4413      	add	r3, r2
 8010724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010728:	edc7 7a01 	vstr	s15, [r7, #4]
 801072c:	793a      	ldrb	r2, [r7, #4]
 801072e:	b252      	sxtb	r2, r2
 8010730:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 1) * groups + group] -= TN_MIN(TN_MAX(sum[1], output_activation_min), output_activation_max) * scales[i_ch_out + 1] * learning_rate;
 8010732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010736:	3301      	adds	r3, #1
 8010738:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 801073c:	fb02 f203 	mul.w	r2, r2, r3
 8010740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010744:	4413      	add	r3, r2
 8010746:	461a      	mov	r2, r3
 8010748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801074c:	4413      	add	r3, r2
 801074e:	f993 3000 	ldrsb.w	r3, [r3]
 8010752:	ee07 3a90 	vmov	s15, r3
 8010756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801075a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801075e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010762:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076a:	d502      	bpl.n	8010772 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x30e>
 801076c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010770:	e001      	b.n	8010776 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x312>
 8010772:	edd7 7a04 	vldr	s15, [r7, #16]
 8010776:	edd7 6a03 	vldr	s13, [r7, #12]
 801077a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010782:	d50e      	bpl.n	80107a2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x33e>
 8010784:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010788:	edd7 6a04 	vldr	s13, [r7, #16]
 801078c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010794:	d502      	bpl.n	801079c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x338>
 8010796:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801079a:	e004      	b.n	80107a6 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x342>
 801079c:	edd7 7a04 	vldr	s15, [r7, #16]
 80107a0:	e001      	b.n	80107a6 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x342>
 80107a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80107a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107aa:	3301      	adds	r3, #1
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80107b2:	4413      	add	r3, r2
 80107b4:	edd3 6a00 	vldr	s13, [r3]
 80107b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80107bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80107c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80107c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107cc:	3301      	adds	r3, #1
 80107ce:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80107d2:	fb02 f203 	mul.w	r2, r2, r3
 80107d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107da:	4413      	add	r3, r2
 80107dc:	461a      	mov	r2, r3
 80107de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80107e2:	4413      	add	r3, r2
 80107e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80107e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80107ec:	793a      	ldrb	r2, [r7, #4]
 80107ee:	b252      	sxtb	r2, r2
 80107f0:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 2) * groups + group] -= TN_MIN(TN_MAX(sum[2], output_activation_min), output_activation_max) * scales[i_ch_out + 2] * learning_rate;
 80107f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80107f6:	3302      	adds	r3, #2
 80107f8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80107fc:	fb02 f203 	mul.w	r2, r2, r3
 8010800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010804:	4413      	add	r3, r2
 8010806:	461a      	mov	r2, r3
 8010808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801080c:	4413      	add	r3, r2
 801080e:	f993 3000 	ldrsb.w	r3, [r3]
 8010812:	ee07 3a90 	vmov	s15, r3
 8010816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801081a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801081e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010822:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082a:	d502      	bpl.n	8010832 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3ce>
 801082c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010830:	e001      	b.n	8010836 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3d2>
 8010832:	edd7 7a04 	vldr	s15, [r7, #16]
 8010836:	edd7 6a03 	vldr	s13, [r7, #12]
 801083a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010842:	d50e      	bpl.n	8010862 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3fe>
 8010844:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010848:	edd7 6a04 	vldr	s13, [r7, #16]
 801084c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010854:	d502      	bpl.n	801085c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x3f8>
 8010856:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801085a:	e004      	b.n	8010866 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x402>
 801085c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010860:	e001      	b.n	8010866 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x402>
 8010862:	edd7 7a03 	vldr	s15, [r7, #12]
 8010866:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801086a:	3302      	adds	r3, #2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010872:	4413      	add	r3, r2
 8010874:	edd3 6a00 	vldr	s13, [r3]
 8010878:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801087c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801088c:	3302      	adds	r3, #2
 801088e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010892:	fb02 f203 	mul.w	r2, r2, r3
 8010896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801089a:	4413      	add	r3, r2
 801089c:	461a      	mov	r2, r3
 801089e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108a2:	4413      	add	r3, r2
 80108a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80108ac:	793a      	ldrb	r2, [r7, #4]
 80108ae:	b252      	sxtb	r2, r2
 80108b0:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 3) * groups + group] -= TN_MIN(TN_MAX(sum[3], output_activation_min), output_activation_max) * scales[i_ch_out + 3] * learning_rate;
 80108b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108b6:	3303      	adds	r3, #3
 80108b8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80108bc:	fb02 f203 	mul.w	r2, r2, r3
 80108c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108c4:	4413      	add	r3, r2
 80108c6:	461a      	mov	r2, r3
 80108c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108cc:	4413      	add	r3, r2
 80108ce:	f993 3000 	ldrsb.w	r3, [r3]
 80108d2:	ee07 3a90 	vmov	s15, r3
 80108d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80108da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80108de:	edd7 6a04 	vldr	s13, [r7, #16]
 80108e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80108e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ea:	d502      	bpl.n	80108f2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x48e>
 80108ec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80108f0:	e001      	b.n	80108f6 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x492>
 80108f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80108f6:	edd7 6a03 	vldr	s13, [r7, #12]
 80108fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80108fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010902:	d511      	bpl.n	8010928 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4c4>
 8010904:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8010908:	edd7 6a04 	vldr	s13, [r7, #16]
 801090c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010914:	d502      	bpl.n	801091c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4b8>
 8010916:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801091a:	e007      	b.n	801092c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4c8>
 801091c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010920:	e004      	b.n	801092c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4c8>
 8010922:	bf00      	nop
 8010924:	cccccccd 	.word	0xcccccccd
 8010928:	edd7 7a03 	vldr	s15, [r7, #12]
 801092c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010930:	3303      	adds	r3, #3
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010938:	4413      	add	r3, r2
 801093a:	edd3 6a00 	vldr	s13, [r3]
 801093e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010942:	edd7 7a02 	vldr	s15, [r7, #8]
 8010946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801094a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801094e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010952:	3303      	adds	r3, #3
 8010954:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010958:	fb02 f203 	mul.w	r2, r2, r3
 801095c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010960:	4413      	add	r3, r2
 8010962:	461a      	mov	r2, r3
 8010964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010968:	4413      	add	r3, r2
 801096a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801096e:	edc7 7a01 	vstr	s15, [r7, #4]
 8010972:	793a      	ldrb	r2, [r7, #4]
 8010974:	b252      	sxtb	r2, r2
 8010976:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 4) * groups + group] -= TN_MIN(TN_MAX(sum[4], output_activation_min), output_activation_max) * scales[i_ch_out + 4] * learning_rate;
 8010978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801097c:	3304      	adds	r3, #4
 801097e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010982:	fb02 f203 	mul.w	r2, r2, r3
 8010986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801098a:	4413      	add	r3, r2
 801098c:	461a      	mov	r2, r3
 801098e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010992:	4413      	add	r3, r2
 8010994:	f993 3000 	ldrsb.w	r3, [r3]
 8010998:	ee07 3a90 	vmov	s15, r3
 801099c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80109a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80109a4:	edd7 6a04 	vldr	s13, [r7, #16]
 80109a8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80109ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b0:	d502      	bpl.n	80109b8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x554>
 80109b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80109b6:	e001      	b.n	80109bc <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x558>
 80109b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80109bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80109c0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80109c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c8:	d50e      	bpl.n	80109e8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x584>
 80109ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80109ce:	edd7 6a04 	vldr	s13, [r7, #16]
 80109d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80109d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109da:	d502      	bpl.n	80109e2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x57e>
 80109dc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80109e0:	e004      	b.n	80109ec <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x588>
 80109e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80109e6:	e001      	b.n	80109ec <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x588>
 80109e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80109ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109f0:	3304      	adds	r3, #4
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80109f8:	4413      	add	r3, r2
 80109fa:	edd3 6a00 	vldr	s13, [r3]
 80109fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8010a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a12:	3304      	adds	r3, #4
 8010a14:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010a18:	fb02 f203 	mul.w	r2, r2, r3
 8010a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a20:	4413      	add	r3, r2
 8010a22:	461a      	mov	r2, r3
 8010a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a28:	4413      	add	r3, r2
 8010a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8010a32:	793a      	ldrb	r2, [r7, #4]
 8010a34:	b252      	sxtb	r2, r2
 8010a36:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 5) * groups + group] -= TN_MIN(TN_MAX(sum[5], output_activation_min), output_activation_max) * scales[i_ch_out + 5] * learning_rate;
 8010a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a3c:	3305      	adds	r3, #5
 8010a3e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010a42:	fb02 f203 	mul.w	r2, r2, r3
 8010a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a4a:	4413      	add	r3, r2
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a52:	4413      	add	r3, r2
 8010a54:	f993 3000 	ldrsb.w	r3, [r3]
 8010a58:	ee07 3a90 	vmov	s15, r3
 8010a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a60:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010a64:	edd7 6a04 	vldr	s13, [r7, #16]
 8010a68:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a70:	d502      	bpl.n	8010a78 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x614>
 8010a72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010a76:	e001      	b.n	8010a7c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x618>
 8010a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8010a7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8010a80:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a88:	d50e      	bpl.n	8010aa8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x644>
 8010a8a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010a8e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010a92:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9a:	d502      	bpl.n	8010aa2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x63e>
 8010a9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010aa0:	e004      	b.n	8010aac <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x648>
 8010aa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8010aa6:	e001      	b.n	8010aac <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x648>
 8010aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ab0:	3305      	adds	r3, #5
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010ab8:	4413      	add	r3, r2
 8010aba:	edd3 6a00 	vldr	s13, [r3]
 8010abe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010ac2:	edd7 7a02 	vldr	s15, [r7, #8]
 8010ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ad2:	3305      	adds	r3, #5
 8010ad4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010ad8:	fb02 f203 	mul.w	r2, r2, r3
 8010adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ae0:	4413      	add	r3, r2
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ae8:	4413      	add	r3, r2
 8010aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010aee:	edc7 7a01 	vstr	s15, [r7, #4]
 8010af2:	793a      	ldrb	r2, [r7, #4]
 8010af4:	b252      	sxtb	r2, r2
 8010af6:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 6) * groups + group] -= TN_MIN(TN_MAX(sum[6], output_activation_min), output_activation_max) * scales[i_ch_out + 6] * learning_rate;
 8010af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010afc:	3306      	adds	r3, #6
 8010afe:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010b02:	fb02 f203 	mul.w	r2, r2, r3
 8010b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b0a:	4413      	add	r3, r2
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b12:	4413      	add	r3, r2
 8010b14:	f993 3000 	ldrsb.w	r3, [r3]
 8010b18:	ee07 3a90 	vmov	s15, r3
 8010b1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b20:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010b24:	edd7 6a04 	vldr	s13, [r7, #16]
 8010b28:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b30:	d502      	bpl.n	8010b38 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x6d4>
 8010b32:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010b36:	e001      	b.n	8010b3c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x6d8>
 8010b38:	edd7 7a04 	vldr	s15, [r7, #16]
 8010b3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8010b40:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b48:	d50e      	bpl.n	8010b68 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x704>
 8010b4a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010b4e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010b52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5a:	d502      	bpl.n	8010b62 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x6fe>
 8010b5c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010b60:	e004      	b.n	8010b6c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x708>
 8010b62:	edd7 7a04 	vldr	s15, [r7, #16]
 8010b66:	e001      	b.n	8010b6c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x708>
 8010b68:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b70:	3306      	adds	r3, #6
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010b78:	4413      	add	r3, r2
 8010b7a:	edd3 6a00 	vldr	s13, [r3]
 8010b7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8010b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b92:	3306      	adds	r3, #6
 8010b94:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010b98:	fb02 f203 	mul.w	r2, r2, r3
 8010b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010ba0:	4413      	add	r3, r2
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ba8:	4413      	add	r3, r2
 8010baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bae:	edc7 7a01 	vstr	s15, [r7, #4]
 8010bb2:	793a      	ldrb	r2, [r7, #4]
 8010bb4:	b252      	sxtb	r2, r2
 8010bb6:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 7) * groups + group] -= TN_MIN(TN_MAX(sum[7], output_activation_min), output_activation_max) * scales[i_ch_out + 7] * learning_rate;
 8010bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010bbc:	3307      	adds	r3, #7
 8010bbe:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010bc2:	fb02 f203 	mul.w	r2, r2, r3
 8010bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010bca:	4413      	add	r3, r2
 8010bcc:	461a      	mov	r2, r3
 8010bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010bd2:	4413      	add	r3, r2
 8010bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8010bd8:	ee07 3a90 	vmov	s15, r3
 8010bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010be0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8010be4:	edd7 6a04 	vldr	s13, [r7, #16]
 8010be8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf0:	d502      	bpl.n	8010bf8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x794>
 8010bf2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8010bf6:	e001      	b.n	8010bfc <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x798>
 8010bf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8010bfc:	edd7 6a03 	vldr	s13, [r7, #12]
 8010c00:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	d50e      	bpl.n	8010c28 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x7c4>
 8010c0a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8010c0e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010c12:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1a:	d502      	bpl.n	8010c22 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x7be>
 8010c1c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8010c20:	e004      	b.n	8010c2c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x7c8>
 8010c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8010c26:	e001      	b.n	8010c2c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x7c8>
 8010c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8010c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c30:	3307      	adds	r3, #7
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010c38:	4413      	add	r3, r2
 8010c3a:	edd3 6a00 	vldr	s13, [r3]
 8010c3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8010c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c52:	3307      	adds	r3, #7
 8010c54:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010c58:	fb02 f203 	mul.w	r2, r2, r3
 8010c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c60:	4413      	add	r3, r2
 8010c62:	461a      	mov	r2, r3
 8010c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c68:	4413      	add	r3, r2
 8010c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c6e:	edc7 7a01 	vstr	s15, [r7, #4]
 8010c72:	793a      	ldrb	r2, [r7, #4]
 8010c74:	b252      	sxtb	r2, r2
 8010c76:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 8) * groups + group] -= TN_MIN(TN_MAX(sum[8], output_activation_min), output_activation_max) * scales[i_ch_out + 8] * learning_rate;
 8010c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c7c:	3308      	adds	r3, #8
 8010c7e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010c82:	fb02 f203 	mul.w	r2, r2, r3
 8010c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c8a:	4413      	add	r3, r2
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c92:	4413      	add	r3, r2
 8010c94:	f993 3000 	ldrsb.w	r3, [r3]
 8010c98:	ee07 3a90 	vmov	s15, r3
 8010c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010ca0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8010ca4:	edd7 6a04 	vldr	s13, [r7, #16]
 8010ca8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb0:	d502      	bpl.n	8010cb8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x854>
 8010cb2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8010cb6:	e001      	b.n	8010cbc <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x858>
 8010cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8010cbc:	edd7 6a03 	vldr	s13, [r7, #12]
 8010cc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc8:	d50e      	bpl.n	8010ce8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x884>
 8010cca:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8010cce:	edd7 6a04 	vldr	s13, [r7, #16]
 8010cd2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cda:	d502      	bpl.n	8010ce2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x87e>
 8010cdc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8010ce0:	e004      	b.n	8010cec <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x888>
 8010ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8010ce6:	e001      	b.n	8010cec <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x888>
 8010ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cf0:	3308      	adds	r3, #8
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010cf8:	4413      	add	r3, r2
 8010cfa:	edd3 6a00 	vldr	s13, [r3]
 8010cfe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8010d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d12:	3308      	adds	r3, #8
 8010d14:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010d18:	fb02 f203 	mul.w	r2, r2, r3
 8010d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d20:	4413      	add	r3, r2
 8010d22:	461a      	mov	r2, r3
 8010d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d28:	4413      	add	r3, r2
 8010d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8010d32:	793a      	ldrb	r2, [r7, #4]
 8010d34:	b252      	sxtb	r2, r2
 8010d36:	701a      	strb	r2, [r3, #0]
        output_weight_data[(i_ch_out + 9) * groups + group] -= TN_MIN(TN_MAX(sum[9], output_activation_min), output_activation_max) * scales[i_ch_out + 9] * learning_rate;
 8010d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d3c:	3309      	adds	r3, #9
 8010d3e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010d42:	fb02 f203 	mul.w	r2, r2, r3
 8010d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d4a:	4413      	add	r3, r2
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d52:	4413      	add	r3, r2
 8010d54:	f993 3000 	ldrsb.w	r3, [r3]
 8010d58:	ee07 3a90 	vmov	s15, r3
 8010d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010d60:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8010d64:	edd7 6a04 	vldr	s13, [r7, #16]
 8010d68:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d70:	d502      	bpl.n	8010d78 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x914>
 8010d72:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8010d76:	e001      	b.n	8010d7c <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x918>
 8010d78:	edd7 7a04 	vldr	s15, [r7, #16]
 8010d7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8010d80:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d88:	d50e      	bpl.n	8010da8 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x944>
 8010d8a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8010d8e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010d92:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d9a:	d502      	bpl.n	8010da2 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x93e>
 8010d9c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8010da0:	e004      	b.n	8010dac <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x948>
 8010da2:	edd7 7a04 	vldr	s15, [r7, #16]
 8010da6:	e001      	b.n	8010dac <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x948>
 8010da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010db0:	3309      	adds	r3, #9
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010db8:	4413      	add	r3, r2
 8010dba:	edd3 6a00 	vldr	s13, [r3]
 8010dbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8010dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010dd2:	3309      	adds	r3, #9
 8010dd4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8010dd8:	fb02 f203 	mul.w	r2, r2, r3
 8010ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010de0:	4413      	add	r3, r2
 8010de2:	461a      	mov	r2, r3
 8010de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010de8:	4413      	add	r3, r2
 8010dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dee:	edc7 7a01 	vstr	s15, [r7, #4]
 8010df2:	793a      	ldrb	r2, [r7, #4]
 8010df4:	b252      	sxtb	r2, r2
 8010df6:	701a      	strb	r2, [r3, #0]
      while (col_count_div10--) {
 8010df8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010dfc:	1e5a      	subs	r2, r3, #1
 8010dfe:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f abc1 	bne.w	801058a <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x126>
    for (i_ch_out = 0; i_ch_out < output_depth_per_group; i_ch_out+=10) {
 8010e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e0c:	330a      	adds	r3, #10
 8010e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	f6ff ab48 	blt.w	80104ae <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x4a>
  for (group = 0; group < groups; group++) {
 8010e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e22:	3301      	adds	r3, #1
 8010e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010e28:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8010e2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010e30:	429a      	cmp	r2, r3
 8010e32:	f6ff ab37 	blt.w	80104a4 <group_pointwise_conv_fp_in1x1_out1x1_1row10col_uniweight_int8input_inplace+0x40>
      }
    }
  }

  /* Return to application */
  return STATE_SUCCESS_fp;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3788      	adds	r7, #136	; 0x88
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <LogSoftmax>:

#include "tinyengine_function_fp.h"
#include "tinyengine_function.h"

tinyengine_status_fp LogSoftmax(const float* input_data, const uint16_t input_height, const uint16_t input_width, const uint16_t input_depth, 
                       float* output_data, const uint16_t output_height, const uint16_t output_width, const uint16_t output_depth) {
 8010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e42:	b08f      	sub	sp, #60	; 0x3c
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	60f8      	str	r0, [r7, #12]
 8010e48:	4608      	mov	r0, r1
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	4603      	mov	r3, r0
 8010e50:	817b      	strh	r3, [r7, #10]
 8010e52:	460b      	mov	r3, r1
 8010e54:	813b      	strh	r3, [r7, #8]
 8010e56:	4613      	mov	r3, r2
 8010e58:	80fb      	strh	r3, [r7, #6]
  const int outer_size = input_height * input_width;
 8010e5a:	897b      	ldrh	r3, [r7, #10]
 8010e5c:	893a      	ldrh	r2, [r7, #8]
 8010e5e:	fb02 f303 	mul.w	r3, r2, r3
 8010e62:	61fb      	str	r3, [r7, #28]
  const int depth = TN_MIN(input_depth, output_depth);
 8010e64:	88fa      	ldrh	r2, [r7, #6]
 8010e66:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d201      	bcs.n	8010e72 <LogSoftmax+0x32>
 8010e6e:	88fb      	ldrh	r3, [r7, #6]
 8010e70:	e001      	b.n	8010e76 <LogSoftmax+0x36>
 8010e72:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8010e76:	61bb      	str	r3, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8010e78:	2300      	movs	r3, #0
 8010e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e7c:	e0a2      	b.n	8010fc4 <LogSoftmax+0x184>
    float max = FLT_MIN;
 8010e7e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010e82:	633b      	str	r3, [r7, #48]	; 0x30
    for (int c = 0; c < depth; ++c) {
 8010e84:	2300      	movs	r3, #0
 8010e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e88:	e021      	b.n	8010ece <LogSoftmax+0x8e>
      max = TN_MAX(max, input_data[i * depth + c]);
 8010e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e8c:	69ba      	ldr	r2, [r7, #24]
 8010e8e:	fb02 f203 	mul.w	r2, r2, r3
 8010e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e94:	4413      	add	r3, r2
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	68fa      	ldr	r2, [r7, #12]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	edd3 7a00 	vldr	s15, [r3]
 8010ea0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eac:	dd01      	ble.n	8010eb2 <LogSoftmax+0x72>
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	e009      	b.n	8010ec6 <LogSoftmax+0x86>
 8010eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb4:	69ba      	ldr	r2, [r7, #24]
 8010eb6:	fb02 f203 	mul.w	r2, r2, r3
 8010eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebc:	4413      	add	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	633b      	str	r3, [r7, #48]	; 0x30
    for (int c = 0; c < depth; ++c) {
 8010ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eca:	3301      	adds	r3, #1
 8010ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	dbd9      	blt.n	8010e8a <LogSoftmax+0x4a>
    }

    float sum = 0.f;
 8010ed6:	f04f 0300 	mov.w	r3, #0
 8010eda:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8010edc:	2300      	movs	r3, #0
 8010ede:	627b      	str	r3, [r7, #36]	; 0x24
 8010ee0:	e030      	b.n	8010f44 <LogSoftmax+0x104>
      sum += exp(input_data[i * depth + c] - max);
 8010ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ee4:	69ba      	ldr	r2, [r7, #24]
 8010ee6:	fb02 f203 	mul.w	r2, r2, r3
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	4413      	add	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	ed93 7a00 	vldr	s14, [r3]
 8010ef8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f00:	ee17 0a90 	vmov	r0, s15
 8010f04:	f7ef fba0 	bl	8000648 <__aeabi_f2d>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	460c      	mov	r4, r1
 8010f0c:	ec44 3b10 	vmov	d0, r3, r4
 8010f10:	f004 fd0a 	bl	8015928 <exp>
 8010f14:	ec56 5b10 	vmov	r5, r6, d0
 8010f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f1a:	f7ef fb95 	bl	8000648 <__aeabi_f2d>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	460c      	mov	r4, r1
 8010f22:	461a      	mov	r2, r3
 8010f24:	4623      	mov	r3, r4
 8010f26:	4628      	mov	r0, r5
 8010f28:	4631      	mov	r1, r6
 8010f2a:	f7ef fa2f 	bl	800038c <__adddf3>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	460c      	mov	r4, r1
 8010f32:	4618      	mov	r0, r3
 8010f34:	4621      	mov	r1, r4
 8010f36:	f7ef feb7 	bl	8000ca8 <__aeabi_d2f>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f40:	3301      	adds	r3, #1
 8010f42:	627b      	str	r3, [r7, #36]	; 0x24
 8010f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	dbca      	blt.n	8010ee2 <LogSoftmax+0xa2>
    }

    const float log_sum = log(sum);
 8010f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f4e:	f7ef fb7b 	bl	8000648 <__aeabi_f2d>
 8010f52:	4603      	mov	r3, r0
 8010f54:	460c      	mov	r4, r1
 8010f56:	ec44 3b10 	vmov	d0, r3, r4
 8010f5a:	f004 fd61 	bl	8015a20 <log>
 8010f5e:	ec54 3b10 	vmov	r3, r4, d0
 8010f62:	4618      	mov	r0, r3
 8010f64:	4621      	mov	r1, r4
 8010f66:	f7ef fe9f 	bl	8000ca8 <__aeabi_d2f>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8010f6e:	2300      	movs	r3, #0
 8010f70:	623b      	str	r3, [r7, #32]
 8010f72:	e020      	b.n	8010fb6 <LogSoftmax+0x176>
      output_data[i * depth + c] = input_data[i * depth + c] - max - log_sum;
 8010f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f76:	69ba      	ldr	r2, [r7, #24]
 8010f78:	fb02 f203 	mul.w	r2, r2, r3
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	4413      	add	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	4413      	add	r3, r2
 8010f86:	ed93 7a00 	vldr	s14, [r3]
 8010f8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8010f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f94:	69ba      	ldr	r2, [r7, #24]
 8010f96:	fb02 f203 	mul.w	r2, r2, r3
 8010f9a:	6a3b      	ldr	r3, [r7, #32]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010fa2:	4413      	add	r3, r2
 8010fa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8010fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fac:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8010fb0:	6a3b      	ldr	r3, [r7, #32]
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	623b      	str	r3, [r7, #32]
 8010fb6:	6a3a      	ldr	r2, [r7, #32]
 8010fb8:	69bb      	ldr	r3, [r7, #24]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	dbda      	blt.n	8010f74 <LogSoftmax+0x134>
  for (int i = 0; i < outer_size; ++i) {
 8010fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8010fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	f6ff af58 	blt.w	8010e7e <LogSoftmax+0x3e>
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	373c      	adds	r7, #60	; 0x3c
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fd8 <mul>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp mul(const uint16_t size, const float* input1_data,
			               const float* input2_data, float* output_data) {
 8010fd8:	b480      	push	{r7}
 8010fda:	b087      	sub	sp, #28
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60b9      	str	r1, [r7, #8]
 8010fe0:	607a      	str	r2, [r7, #4]
 8010fe2:	603b      	str	r3, [r7, #0]
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	81fb      	strh	r3, [r7, #14]
  int i;
  
  for (i = 0; i < size; ++i) {
 8010fe8:	2300      	movs	r3, #0
 8010fea:	617b      	str	r3, [r7, #20]
 8010fec:	e016      	b.n	801101c <mul+0x44>
    output_data[i] = input1_data[i] * input2_data[i];
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	68ba      	ldr	r2, [r7, #8]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	ed93 7a00 	vldr	s14, [r3]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	009b      	lsls	r3, r3, #2
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	4413      	add	r3, r2
 8011002:	edd3 7a00 	vldr	s15, [r3]
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	683a      	ldr	r2, [r7, #0]
 801100c:	4413      	add	r3, r2
 801100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011012:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < size; ++i) {
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	3301      	adds	r3, #1
 801101a:	617b      	str	r3, [r7, #20]
 801101c:	89fb      	ldrh	r3, [r7, #14]
 801101e:	697a      	ldr	r2, [r7, #20]
 8011020:	429a      	cmp	r2, r3
 8011022:	dbe4      	blt.n	8010fee <mul+0x16>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 8011024:	2300      	movs	r3, #0
}
 8011026:	4618      	mov	r0, r3
 8011028:	371c      	adds	r7, #28
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr

08011032 <nll_loss>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp nll_loss(const float* input_data, const uint16_t input_dim, const uint16_t input_depth, 
                       const float* target, const uint16_t target_size, float* output_data) {
 8011032:	b480      	push	{r7}
 8011034:	b087      	sub	sp, #28
 8011036:	af00      	add	r7, sp, #0
 8011038:	60f8      	str	r0, [r7, #12]
 801103a:	607b      	str	r3, [r7, #4]
 801103c:	460b      	mov	r3, r1
 801103e:	817b      	strh	r3, [r7, #10]
 8011040:	4613      	mov	r3, r2
 8011042:	813b      	strh	r3, [r7, #8]
  int idx;

  for(int i = 0; i < target_size; i++){
 8011044:	2300      	movs	r3, #0
 8011046:	613b      	str	r3, [r7, #16]
 8011048:	e010      	b.n	801106c <nll_loss+0x3a>
	  if (target[i] > 0){
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	4413      	add	r3, r2
 8011052:	edd3 7a00 	vldr	s15, [r3]
 8011056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105e:	dd02      	ble.n	8011066 <nll_loss+0x34>
		  idx = i;
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	617b      	str	r3, [r7, #20]
		  break;
 8011064:	e006      	b.n	8011074 <nll_loss+0x42>
  for(int i = 0; i < target_size; i++){
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	3301      	adds	r3, #1
 801106a:	613b      	str	r3, [r7, #16]
 801106c:	8c3b      	ldrh	r3, [r7, #32]
 801106e:	693a      	ldr	r2, [r7, #16]
 8011070:	429a      	cmp	r2, r3
 8011072:	dbea      	blt.n	801104a <nll_loss+0x18>
	  }
  }

  output_data[0] = -input_data[idx];
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	4413      	add	r3, r2
 801107c:	edd3 7a00 	vldr	s15, [r3]
 8011080:	eef1 7a67 	vneg.f32	s15, s15
 8011084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011086:	edc3 7a00 	vstr	s15, [r3]
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 801108a:	2300      	movs	r3, #0
}
 801108c:	4618      	mov	r0, r3
 801108e:	371c      	adds	r7, #28
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <sub>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp sub(const uint16_t size, const float* input1_data,
			               const float* input2_data, float* output_data) {
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	60b9      	str	r1, [r7, #8]
 80110a0:	607a      	str	r2, [r7, #4]
 80110a2:	603b      	str	r3, [r7, #0]
 80110a4:	4603      	mov	r3, r0
 80110a6:	81fb      	strh	r3, [r7, #14]
  int i;
  
  for (i = 0; i < size; ++i) {
 80110a8:	2300      	movs	r3, #0
 80110aa:	617b      	str	r3, [r7, #20]
 80110ac:	e016      	b.n	80110dc <sub+0x44>
    output_data[i] = input1_data[i] - input2_data[i];
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	4413      	add	r3, r2
 80110b6:	ed93 7a00 	vldr	s14, [r3]
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	4413      	add	r3, r2
 80110c2:	edd3 7a00 	vldr	s15, [r3]
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	4413      	add	r3, r2
 80110ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110d2:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < size; ++i) {
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	3301      	adds	r3, #1
 80110da:	617b      	str	r3, [r7, #20]
 80110dc:	89fb      	ldrh	r3, [r7, #14]
 80110de:	697a      	ldr	r2, [r7, #20]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	dbe4      	blt.n	80110ae <sub+0x16>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 80110e4:	2300      	movs	r3, #0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	371c      	adds	r7, #28
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr

080110f2 <sum_3D>:
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp sum_3D(const float* input_data, const uint16_t input_w, const uint16_t input_h,
                      const uint16_t input_c, const uint16_t axis, float* output_data) {
 80110f2:	b480      	push	{r7}
 80110f4:	b089      	sub	sp, #36	; 0x24
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	60f8      	str	r0, [r7, #12]
 80110fa:	4608      	mov	r0, r1
 80110fc:	4611      	mov	r1, r2
 80110fe:	461a      	mov	r2, r3
 8011100:	4603      	mov	r3, r0
 8011102:	817b      	strh	r3, [r7, #10]
 8011104:	460b      	mov	r3, r1
 8011106:	813b      	strh	r3, [r7, #8]
 8011108:	4613      	mov	r3, r2
 801110a:	80fb      	strh	r3, [r7, #6]
  int c, h, w, i;
  float sum;

  if (axis == 2){
 801110c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801110e:	2b02      	cmp	r3, #2
 8011110:	d142      	bne.n	8011198 <sum_3D+0xa6>
    for (c = 0; c < input_c; ++c) {
 8011112:	2300      	movs	r3, #0
 8011114:	61fb      	str	r3, [r7, #28]
 8011116:	e03a      	b.n	801118e <sum_3D+0x9c>
      for (h = 0; h < input_h; ++h) {
 8011118:	2300      	movs	r3, #0
 801111a:	61bb      	str	r3, [r7, #24]
 801111c:	e030      	b.n	8011180 <sum_3D+0x8e>
        sum = 0;
 801111e:	f04f 0300 	mov.w	r3, #0
 8011122:	613b      	str	r3, [r7, #16]

        for (w = 0; w < input_w; ++w) {
 8011124:	2300      	movs	r3, #0
 8011126:	617b      	str	r3, [r7, #20]
 8011128:	e018      	b.n	801115c <sum_3D+0x6a>
          sum += input_data[(w + h * input_w) * input_c + c];
 801112a:	897b      	ldrh	r3, [r7, #10]
 801112c:	69ba      	ldr	r2, [r7, #24]
 801112e:	fb02 f203 	mul.w	r2, r2, r3
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	4413      	add	r3, r2
 8011136:	88fa      	ldrh	r2, [r7, #6]
 8011138:	fb02 f203 	mul.w	r2, r2, r3
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	4413      	add	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	4413      	add	r3, r2
 8011146:	edd3 7a00 	vldr	s15, [r3]
 801114a:	ed97 7a04 	vldr	s14, [r7, #16]
 801114e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011152:	edc7 7a04 	vstr	s15, [r7, #16]
        for (w = 0; w < input_w; ++w) {
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	3301      	adds	r3, #1
 801115a:	617b      	str	r3, [r7, #20]
 801115c:	897b      	ldrh	r3, [r7, #10]
 801115e:	697a      	ldr	r2, [r7, #20]
 8011160:	429a      	cmp	r2, r3
 8011162:	dbe2      	blt.n	801112a <sum_3D+0x38>
        }

        output_data[c + (h * input_c)] = sum;
 8011164:	88fb      	ldrh	r3, [r7, #6]
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	fb02 f203 	mul.w	r2, r2, r3
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	4413      	add	r3, r2
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011174:	4413      	add	r3, r2
 8011176:	693a      	ldr	r2, [r7, #16]
 8011178:	601a      	str	r2, [r3, #0]
      for (h = 0; h < input_h; ++h) {
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	3301      	adds	r3, #1
 801117e:	61bb      	str	r3, [r7, #24]
 8011180:	893b      	ldrh	r3, [r7, #8]
 8011182:	69ba      	ldr	r2, [r7, #24]
 8011184:	429a      	cmp	r2, r3
 8011186:	dbca      	blt.n	801111e <sum_3D+0x2c>
    for (c = 0; c < input_c; ++c) {
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	3301      	adds	r3, #1
 801118c:	61fb      	str	r3, [r7, #28]
 801118e:	88fb      	ldrh	r3, [r7, #6]
 8011190:	69fa      	ldr	r2, [r7, #28]
 8011192:	429a      	cmp	r2, r3
 8011194:	dbc0      	blt.n	8011118 <sum_3D+0x26>
 8011196:	e087      	b.n	80112a8 <sum_3D+0x1b6>
      }
    }
  }
  else if (axis == 1){
 8011198:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801119a:	2b01      	cmp	r3, #1
 801119c:	d142      	bne.n	8011224 <sum_3D+0x132>
    for (c = 0; c < input_c; ++c) {
 801119e:	2300      	movs	r3, #0
 80111a0:	61fb      	str	r3, [r7, #28]
 80111a2:	e03a      	b.n	801121a <sum_3D+0x128>
      for (w = 0; w < input_w; ++w) {
 80111a4:	2300      	movs	r3, #0
 80111a6:	617b      	str	r3, [r7, #20]
 80111a8:	e030      	b.n	801120c <sum_3D+0x11a>
        sum = 0;
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	613b      	str	r3, [r7, #16]

        for (h = 0; h < input_h; ++h) {
 80111b0:	2300      	movs	r3, #0
 80111b2:	61bb      	str	r3, [r7, #24]
 80111b4:	e018      	b.n	80111e8 <sum_3D+0xf6>
          sum += input_data[(w + h * input_w) * input_c + c];
 80111b6:	897b      	ldrh	r3, [r7, #10]
 80111b8:	69ba      	ldr	r2, [r7, #24]
 80111ba:	fb02 f203 	mul.w	r2, r2, r3
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	4413      	add	r3, r2
 80111c2:	88fa      	ldrh	r2, [r7, #6]
 80111c4:	fb02 f203 	mul.w	r2, r2, r3
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	4413      	add	r3, r2
 80111cc:	009b      	lsls	r3, r3, #2
 80111ce:	68fa      	ldr	r2, [r7, #12]
 80111d0:	4413      	add	r3, r2
 80111d2:	edd3 7a00 	vldr	s15, [r3]
 80111d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80111da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111de:	edc7 7a04 	vstr	s15, [r7, #16]
        for (h = 0; h < input_h; ++h) {
 80111e2:	69bb      	ldr	r3, [r7, #24]
 80111e4:	3301      	adds	r3, #1
 80111e6:	61bb      	str	r3, [r7, #24]
 80111e8:	893b      	ldrh	r3, [r7, #8]
 80111ea:	69ba      	ldr	r2, [r7, #24]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	dbe2      	blt.n	80111b6 <sum_3D+0xc4>
        }

        output_data[c + (w * input_c)] = sum;
 80111f0:	88fb      	ldrh	r3, [r7, #6]
 80111f2:	697a      	ldr	r2, [r7, #20]
 80111f4:	fb02 f203 	mul.w	r2, r2, r3
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	4413      	add	r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011200:	4413      	add	r3, r2
 8011202:	693a      	ldr	r2, [r7, #16]
 8011204:	601a      	str	r2, [r3, #0]
      for (w = 0; w < input_w; ++w) {
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	3301      	adds	r3, #1
 801120a:	617b      	str	r3, [r7, #20]
 801120c:	897b      	ldrh	r3, [r7, #10]
 801120e:	697a      	ldr	r2, [r7, #20]
 8011210:	429a      	cmp	r2, r3
 8011212:	dbca      	blt.n	80111aa <sum_3D+0xb8>
    for (c = 0; c < input_c; ++c) {
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	3301      	adds	r3, #1
 8011218:	61fb      	str	r3, [r7, #28]
 801121a:	88fb      	ldrh	r3, [r7, #6]
 801121c:	69fa      	ldr	r2, [r7, #28]
 801121e:	429a      	cmp	r2, r3
 8011220:	dbc0      	blt.n	80111a4 <sum_3D+0xb2>
 8011222:	e041      	b.n	80112a8 <sum_3D+0x1b6>
      }
    }
  }
  else{ /* axis == 0 */
    for (h = 0; h < input_h; ++h) {
 8011224:	2300      	movs	r3, #0
 8011226:	61bb      	str	r3, [r7, #24]
 8011228:	e03a      	b.n	80112a0 <sum_3D+0x1ae>
      for (w = 0; w < input_w; ++w) {
 801122a:	2300      	movs	r3, #0
 801122c:	617b      	str	r3, [r7, #20]
 801122e:	e030      	b.n	8011292 <sum_3D+0x1a0>
        sum = 0;
 8011230:	f04f 0300 	mov.w	r3, #0
 8011234:	613b      	str	r3, [r7, #16]

        for (c = 0; c < input_c; ++c) {
 8011236:	2300      	movs	r3, #0
 8011238:	61fb      	str	r3, [r7, #28]
 801123a:	e018      	b.n	801126e <sum_3D+0x17c>
          sum += input_data[(w + h * input_w) * input_c + c];
 801123c:	897b      	ldrh	r3, [r7, #10]
 801123e:	69ba      	ldr	r2, [r7, #24]
 8011240:	fb02 f203 	mul.w	r2, r2, r3
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	4413      	add	r3, r2
 8011248:	88fa      	ldrh	r2, [r7, #6]
 801124a:	fb02 f203 	mul.w	r2, r2, r3
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	4413      	add	r3, r2
 8011252:	009b      	lsls	r3, r3, #2
 8011254:	68fa      	ldr	r2, [r7, #12]
 8011256:	4413      	add	r3, r2
 8011258:	edd3 7a00 	vldr	s15, [r3]
 801125c:	ed97 7a04 	vldr	s14, [r7, #16]
 8011260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011264:	edc7 7a04 	vstr	s15, [r7, #16]
        for (c = 0; c < input_c; ++c) {
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	3301      	adds	r3, #1
 801126c:	61fb      	str	r3, [r7, #28]
 801126e:	88fb      	ldrh	r3, [r7, #6]
 8011270:	69fa      	ldr	r2, [r7, #28]
 8011272:	429a      	cmp	r2, r3
 8011274:	dbe2      	blt.n	801123c <sum_3D+0x14a>
      }

        output_data[w + (h * input_w)] = sum;
 8011276:	897b      	ldrh	r3, [r7, #10]
 8011278:	69ba      	ldr	r2, [r7, #24]
 801127a:	fb02 f203 	mul.w	r2, r2, r3
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	4413      	add	r3, r2
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011286:	4413      	add	r3, r2
 8011288:	693a      	ldr	r2, [r7, #16]
 801128a:	601a      	str	r2, [r3, #0]
      for (w = 0; w < input_w; ++w) {
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	3301      	adds	r3, #1
 8011290:	617b      	str	r3, [r7, #20]
 8011292:	897b      	ldrh	r3, [r7, #10]
 8011294:	697a      	ldr	r2, [r7, #20]
 8011296:	429a      	cmp	r2, r3
 8011298:	dbca      	blt.n	8011230 <sum_3D+0x13e>
    for (h = 0; h < input_h; ++h) {
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	3301      	adds	r3, #1
 801129e:	61bb      	str	r3, [r7, #24]
 80112a0:	893b      	ldrh	r3, [r7, #8]
 80112a2:	69ba      	ldr	r2, [r7, #24]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	dbc0      	blt.n	801122a <sum_3D+0x138>
      }
    }
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3724      	adds	r7, #36	; 0x24
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <tte_exp>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */

#include "tinyengine_function_fp.h"

tinyengine_status_fp tte_exp(const uint16_t size, const float* input_data, float* output_data) {
 80112b6:	b590      	push	{r4, r7, lr}
 80112b8:	b087      	sub	sp, #28
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	4603      	mov	r3, r0
 80112be:	60b9      	str	r1, [r7, #8]
 80112c0:	607a      	str	r2, [r7, #4]
 80112c2:	81fb      	strh	r3, [r7, #14]
  int i;
  
  for (i = 0; i < size; ++i) {
 80112c4:	2300      	movs	r3, #0
 80112c6:	617b      	str	r3, [r7, #20]
 80112c8:	e01a      	b.n	8011300 <tte_exp+0x4a>
    output_data[i] = exp(input_data[i]);
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	4413      	add	r3, r2
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ef f9b7 	bl	8000648 <__aeabi_f2d>
 80112da:	4603      	mov	r3, r0
 80112dc:	460c      	mov	r4, r1
 80112de:	ec44 3b10 	vmov	d0, r3, r4
 80112e2:	f004 fb21 	bl	8015928 <exp>
 80112e6:	ec51 0b10 	vmov	r0, r1, d0
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	687a      	ldr	r2, [r7, #4]
 80112f0:	18d4      	adds	r4, r2, r3
 80112f2:	f7ef fcd9 	bl	8000ca8 <__aeabi_d2f>
 80112f6:	4603      	mov	r3, r0
 80112f8:	6023      	str	r3, [r4, #0]
  for (i = 0; i < size; ++i) {
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	3301      	adds	r3, #1
 80112fe:	617b      	str	r3, [r7, #20]
 8011300:	89fb      	ldrh	r3, [r7, #14]
 8011302:	697a      	ldr	r2, [r7, #20]
 8011304:	429a      	cmp	r2, r3
 8011306:	dbe0      	blt.n	80112ca <tte_exp+0x14>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	371c      	adds	r7, #28
 801130e:	46bd      	mov	sp, r7
 8011310:	bd90      	pop	{r4, r7, pc}

08011312 <where_zeros_inplace_bit>:
  
  /* Return to application */
  return STATE_SUCCESS_fp;
}

tinyengine_status_fp where_zeros_inplace_bit(const unsigned char* inMask, const uint16_t size, float* input1_data) {
 8011312:	b4f0      	push	{r4, r5, r6, r7}
 8011314:	b088      	sub	sp, #32
 8011316:	af00      	add	r7, sp, #0
 8011318:	60f8      	str	r0, [r7, #12]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	460a      	mov	r2, r1
 801131e:	817a      	strh	r2, [r7, #10]
  int i;

  for (i = 0; i < size; ++i) {
 8011320:	2200      	movs	r2, #0
 8011322:	61fa      	str	r2, [r7, #28]
 8011324:	e046      	b.n	80113b4 <where_zeros_inplace_bit+0xa2>
	  int bit_starting_idx = i % 8;
 8011326:	69fa      	ldr	r2, [r7, #28]
 8011328:	4251      	negs	r1, r2
 801132a:	f002 0207 	and.w	r2, r2, #7
 801132e:	f001 0107 	and.w	r1, r1, #7
 8011332:	bf58      	it	pl
 8011334:	424a      	negpl	r2, r1
 8011336:	61ba      	str	r2, [r7, #24]
	  int mask = BIT_CHECK(inMask[i/8], bit_starting_idx);
 8011338:	69fa      	ldr	r2, [r7, #28]
 801133a:	2a00      	cmp	r2, #0
 801133c:	da00      	bge.n	8011340 <where_zeros_inplace_bit+0x2e>
 801133e:	3207      	adds	r2, #7
 8011340:	10d2      	asrs	r2, r2, #3
 8011342:	4611      	mov	r1, r2
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	440a      	add	r2, r1
 8011348:	7812      	ldrb	r2, [r2, #0]
 801134a:	b2d1      	uxtb	r1, r2
 801134c:	f04f 0200 	mov.w	r2, #0
 8011350:	69b8      	ldr	r0, [r7, #24]
 8011352:	f1c0 0620 	rsb	r6, r0, #32
 8011356:	f1a0 0520 	sub.w	r5, r0, #32
 801135a:	fa21 f300 	lsr.w	r3, r1, r0
 801135e:	fa02 f606 	lsl.w	r6, r2, r6
 8011362:	4333      	orrs	r3, r6
 8011364:	fa22 f505 	lsr.w	r5, r2, r5
 8011368:	432b      	orrs	r3, r5
 801136a:	fa22 f400 	lsr.w	r4, r2, r0
 801136e:	f04f 0101 	mov.w	r1, #1
 8011372:	f04f 0200 	mov.w	r2, #0
 8011376:	ea01 0503 	and.w	r5, r1, r3
 801137a:	ea02 0604 	and.w	r6, r2, r4
 801137e:	ea46 0205 	orr.w	r2, r6, r5
 8011382:	2a00      	cmp	r2, #0
 8011384:	bf14      	ite	ne
 8011386:	2201      	movne	r2, #1
 8011388:	2200      	moveq	r2, #0
 801138a:	b2d2      	uxtb	r2, r2
 801138c:	617a      	str	r2, [r7, #20]
	  input1_data[i] = mask > 0 ? input1_data[i] : 0;
 801138e:	697a      	ldr	r2, [r7, #20]
 8011390:	2a00      	cmp	r2, #0
 8011392:	dd05      	ble.n	80113a0 <where_zeros_inplace_bit+0x8e>
 8011394:	69fa      	ldr	r2, [r7, #28]
 8011396:	0092      	lsls	r2, r2, #2
 8011398:	6879      	ldr	r1, [r7, #4]
 801139a:	440a      	add	r2, r1
 801139c:	6812      	ldr	r2, [r2, #0]
 801139e:	e001      	b.n	80113a4 <where_zeros_inplace_bit+0x92>
 80113a0:	f04f 0200 	mov.w	r2, #0
 80113a4:	69f9      	ldr	r1, [r7, #28]
 80113a6:	0089      	lsls	r1, r1, #2
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	4401      	add	r1, r0
 80113ac:	600a      	str	r2, [r1, #0]
  for (i = 0; i < size; ++i) {
 80113ae:	69fa      	ldr	r2, [r7, #28]
 80113b0:	3201      	adds	r2, #1
 80113b2:	61fa      	str	r2, [r7, #28]
 80113b4:	897a      	ldrh	r2, [r7, #10]
 80113b6:	69f9      	ldr	r1, [r7, #28]
 80113b8:	4291      	cmp	r1, r2
 80113ba:	dbb4      	blt.n	8011326 <where_zeros_inplace_bit+0x14>
  }
  
  /* Return to application */
  return STATE_SUCCESS_fp;
 80113bc:	2300      	movs	r3, #0
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3720      	adds	r7, #32
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bcf0      	pop	{r4, r5, r6, r7}
 80113c6:	4770      	bx	lr

080113c8 <convolve_1x1_s8_fpreq>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 80113c8:	b590      	push	{r4, r7, lr}
 80113ca:	b0ff      	sub	sp, #508	; 0x1fc
 80113cc:	af06      	add	r7, sp, #24
 80113ce:	f107 040c 	add.w	r4, r7, #12
 80113d2:	6020      	str	r0, [r4, #0]
 80113d4:	460c      	mov	r4, r1
 80113d6:	4610      	mov	r0, r2
 80113d8:	4619      	mov	r1, r3
 80113da:	f107 030a 	add.w	r3, r7, #10
 80113de:	4622      	mov	r2, r4
 80113e0:	801a      	strh	r2, [r3, #0]
 80113e2:	f107 0308 	add.w	r3, r7, #8
 80113e6:	4602      	mov	r2, r0
 80113e8:	801a      	strh	r2, [r3, #0]
 80113ea:	1dbb      	adds	r3, r7, #6
 80113ec:	460a      	mov	r2, r1
 80113ee:	801a      	strh	r2, [r3, #0]
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 80113f0:	1dbb      	adds	r3, r7, #6
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	f003 0303 	and.w	r3, r3, #3
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <convolve_1x1_s8_fpreq+0x44>
 80113fe:	1dbb      	adds	r3, r7, #6
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	f003 0301 	and.w	r3, r3, #1
 8011406:	b29b      	uxth	r3, r3
 8011408:	2b00      	cmp	r3, #0
 801140a:	d002      	beq.n	8011412 <convolve_1x1_s8_fpreq+0x4a>
		return PARAM_NO_SUPPORT;
 801140c:	2301      	movs	r3, #1
 801140e:	f000 bc3d 	b.w	8011c8c <convolve_1x1_s8_fpreq+0x8c4>
	int32_t i_element;
	(void) input_x;
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
 8011412:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011416:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	q7_t *out = output;
 801141a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801141e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	const int32_t num_elements = output_x * output_y;
 8011422:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8011426:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 801142a:	fb02 f303 	mul.w	r3, r2, r3
 801142e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	const int channel_div4 = (input_ch >> 2);
 8011432:	1dbb      	adds	r3, r7, #6
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	089b      	lsrs	r3, r3, #2
 8011438:	b29b      	uxth	r3, r3
 801143a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	const int16_t inoff16 = input_offset;
 801143e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8011442:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8011446:	f9b7 31b2 	ldrsh.w	r3, [r7, #434]	; 0x1b2
 801144a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801144e:	f9b7 31b2 	ldrsh.w	r3, [r7, #434]	; 0x1b2
 8011452:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8011456:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801145a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801145e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8011462:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8011466:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801146a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 801146e:	2300      	movs	r3, #0
 8011470:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8011474:	e19e      	b.n	80117b4 <convolve_1x1_s8_fpreq+0x3ec>
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8011476:	1dbb      	adds	r3, r7, #6
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801147e:	fb02 f303 	mul.w	r3, r2, r3
 8011482:	005b      	lsls	r3, r3, #1
 8011484:	461a      	mov	r2, r3
 8011486:	f107 030c 	add.w	r3, r7, #12
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	441a      	add	r2, r3
 801148e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011492:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8011494:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011498:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801149c:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
 801149e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80114a2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		while (cnt > 0) {
 80114a6:	e158      	b.n	801175a <convolve_1x1_s8_fpreq+0x392>
 80114a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80114ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 80114b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	461a      	mov	r2, r3
 80114ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114be:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80114c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	1d1a      	adds	r2, r3, #4
 80114c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114cc:	601a      	str	r2, [r3, #0]

    return (val);
 80114ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114d2:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)//Reads 4 bytes from src and puts them to dst (This line)
 80114d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80114d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80114dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80114e0:	2308      	movs	r3, #8
 80114e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  op2 %= 32U;
 80114e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80114ea:	f003 031f 	and.w	r3, r3, #31
 80114ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  if (op2 == 0U)
 80114f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d102      	bne.n	8011500 <convolve_1x1_s8_fpreq+0x138>
    return op1;
 80114fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80114fe:	e005      	b.n	801150c <convolve_1x1_s8_fpreq+0x144>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011500:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8011504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011508:	fa62 f303 	ror.w	r3, r2, r3
 801150c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011510:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011514:	fa2f f383 	sxtb16	r3, r3
 8011518:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 801151c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011520:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011524:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011528:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801152c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011530:	fa2f f383 	sxtb16	r3, r3
 8011534:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return(result);
 8011538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801153c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011540:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8011544:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8011548:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801154c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011550:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011554:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011558:	fa93 f302 	sadd16	r3, r3, r2
 801155c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  return(result);
 8011560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011564:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011568:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801156c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8011570:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8011574:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011578:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801157c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8011580:	fa93 f302 	sadd16	r3, r3, r2
 8011584:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8011588:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801158c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011590:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011594:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8011598:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801159c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 80115a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80115a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80115a8:	601a      	str	r2, [r3, #0]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 80115aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80115b4:	6812      	ldr	r2, [r2, #0]
 80115b6:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 80115b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	1d1a      	adds	r2, r3, #4
 80115c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80115c4:	601a      	str	r2, [r3, #0]
 80115c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80115ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80115ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80115d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  q31_t val = value;
 80115d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80115da:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80115de:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80115e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80115ea:	6812      	ldr	r2, [r2, #0]
 80115ec:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80115ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	1d1a      	adds	r2, r3, #4
 80115f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80115fa:	601a      	str	r2, [r3, #0]
 80115fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011600:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    memcpy(&val, *in_q7, 4);
 8011604:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	461a      	mov	r2, r3
 801160e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011612:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011614:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	1d1a      	adds	r2, r3, #4
 801161c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011620:	601a      	str	r2, [r3, #0]
    return (val);
 8011622:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011626:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8011628:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 801162c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011630:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8011634:	2308      	movs	r3, #8
 8011636:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  op2 %= 32U;
 801163a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801163e:	f003 031f 	and.w	r3, r3, #31
 8011642:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  if (op2 == 0U)
 8011646:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801164a:	2b00      	cmp	r3, #0
 801164c:	d102      	bne.n	8011654 <convolve_1x1_s8_fpreq+0x28c>
    return op1;
 801164e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011652:	e005      	b.n	8011660 <convolve_1x1_s8_fpreq+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011654:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8011658:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801165c:	fa62 f303 	ror.w	r3, r2, r3
 8011660:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011664:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011668:	fa2f f383 	sxtb16	r3, r3
 801166c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8011670:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011674:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011678:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801167c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011680:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011684:	fa2f f383 	sxtb16	r3, r3
 8011688:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  return(result);
 801168c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011690:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011694:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8011698:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801169c:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 80116a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80116a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80116a8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80116ac:	fa93 f302 	sadd16	r3, r3, r2
 80116b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 80116b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80116b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80116bc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80116c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80116c4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80116c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80116cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80116d0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80116d4:	fa93 f302 	sadd16	r3, r3, r2
 80116d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return(result);
 80116dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80116e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80116e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80116e8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80116ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80116f0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  q31_t val = value;
 80116f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116f8:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80116fc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80116fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011708:	6812      	ldr	r2, [r2, #0]
 801170a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801170c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	1d1a      	adds	r2, r3, #4
 8011714:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011718:	601a      	str	r2, [r3, #0]
 801171a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801171e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011722:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011726:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  q31_t val = value;
 801172a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801172e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8011732:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8011734:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801173e:	6812      	ldr	r2, [r2, #0]
 8011740:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8011742:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	1d1a      	adds	r2, r3, #4
 801174a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801174e:	601a      	str	r2, [r3, #0]
			cnt--;
 8011750:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8011754:	3b01      	subs	r3, #1
 8011756:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		while (cnt > 0) {
 801175a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801175e:	2b00      	cmp	r3, #0
 8011760:	f73f aea2 	bgt.w	80114a8 <convolve_1x1_s8_fpreq+0xe0>
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
				output_ch, scales, (q7_t) out_offset, out_activation_min,
 8011764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011768:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_fpreq(kernel, two_column_buffer,
 801176a:	461c      	mov	r4, r3
 801176c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8011770:	b21b      	sxth	r3, r3
 8011772:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8011776:	b212      	sxth	r2, r2
 8011778:	f8b7 0218 	ldrh.w	r0, [r7, #536]	; 0x218
 801177c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8011780:	9105      	str	r1, [sp, #20]
 8011782:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8011786:	9104      	str	r1, [sp, #16]
 8011788:	1db9      	adds	r1, r7, #6
 801178a:	8809      	ldrh	r1, [r1, #0]
 801178c:	9103      	str	r1, [sp, #12]
 801178e:	9202      	str	r2, [sp, #8]
 8011790:	9301      	str	r3, [sp, #4]
 8011792:	9400      	str	r4, [sp, #0]
 8011794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8011798:	4602      	mov	r2, r0
 801179a:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801179e:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 80117a2:	f002 f848 	bl	8013836 <mat_mult_kernel_s8_s16_reordered_fpreq>
 80117a6:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80117aa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80117ae:	3301      	adds	r3, #1
 80117b0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80117b4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da00      	bge.n	80117be <convolve_1x1_s8_fpreq+0x3f6>
 80117bc:	3301      	adds	r3, #1
 80117be:	105b      	asrs	r3, r3, #1
 80117c0:	461a      	mov	r2, r3
 80117c2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80117c6:	4293      	cmp	r3, r2
 80117c8:	f6ff ae55 	blt.w	8011476 <convolve_1x1_s8_fpreq+0xae>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80117cc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80117d0:	f003 0301 	and.w	r3, r3, #1
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f000 8258 	beq.w	8011c8a <convolve_1x1_s8_fpreq+0x8c2>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
 80117da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80117de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80117e2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80117e6:	3b01      	subs	r3, #1
 80117e8:	1dba      	adds	r2, r7, #6
 80117ea:	8812      	ldrh	r2, [r2, #0]
 80117ec:	fb02 f303 	mul.w	r3, r2, r3
 80117f0:	461a      	mov	r2, r3
 80117f2:	f107 030c 	add.w	r3, r7, #12
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	441a      	add	r2, r3
 80117fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80117fe:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8011800:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011804:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8011808:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
 801180a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801180e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		while (cnt > 0) {
 8011812:	e0cc      	b.n	80119ae <convolve_1x1_s8_fpreq+0x5e6>
 8011814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011818:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801181c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801181e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	461a      	mov	r2, r3
 801182a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801182e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011830:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	1d1a      	adds	r2, r3, #4
 801183a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	601a      	str	r2, [r3, #0]
    return (val);
 8011842:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011846:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8011848:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 801184c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8011850:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011854:	601a      	str	r2, [r3, #0]
 8011856:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801185a:	2208      	movs	r2, #8
 801185c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801185e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011862:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8011866:	6812      	ldr	r2, [r2, #0]
 8011868:	f002 021f 	and.w	r2, r2, #31
 801186c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801186e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d103      	bne.n	8011880 <convolve_1x1_s8_fpreq+0x4b8>
    return op1;
 8011878:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	e007      	b.n	8011890 <convolve_1x1_s8_fpreq+0x4c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011880:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8011884:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011888:	6812      	ldr	r2, [r2, #0]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	fa62 f303 	ror.w	r3, r2, r3
 8011890:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8011894:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011896:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	fa2f f283 	sxtb16	r2, r3
 80118a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80118a4:	601a      	str	r2, [r3, #0]
  return(result);
 80118a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80118b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80118b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80118b8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80118ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	fa2f f283 	sxtb16	r2, r3
 80118c4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80118c8:	601a      	str	r2, [r3, #0]
  return(result);
 80118ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80118d4:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80118d8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80118dc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80118e0:	6019      	str	r1, [r3, #0]
 80118e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80118e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80118e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80118f2:	6812      	ldr	r2, [r2, #0]
 80118f4:	fa93 f202 	sadd16	r2, r3, r2
 80118f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80118fc:	601a      	str	r2, [r3, #0]
  return(result);
 80118fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8011908:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801190c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8011910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011914:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8011918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801191a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801191e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8011922:	6812      	ldr	r2, [r2, #0]
 8011924:	fa93 f202 	sadd16	r2, r3, r2
 8011928:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801192c:	601a      	str	r2, [r3, #0]
  return(result);
 801192e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8011938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801193c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011940:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8011944:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  q31_t val = value;
 8011948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801194c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011950:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8011952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801195c:	6812      	ldr	r2, [r2, #0]
 801195e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8011960:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	1d1a      	adds	r2, r3, #4
 8011968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011972:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011976:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801197a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  q31_t val = value;
 801197e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011982:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8011986:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8011988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011992:	6812      	ldr	r2, [r2, #0]
 8011994:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8011996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	1d1a      	adds	r2, r3, #4
 801199e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119a2:	601a      	str	r2, [r3, #0]
			cnt--;
 80119a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80119a8:	3b01      	subs	r3, #1
 80119aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		while (cnt > 0) {
 80119ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f73f af2e 	bgt.w	8011814 <convolve_1x1_s8_fpreq+0x44c>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80119b8:	2300      	movs	r3, #0
 80119ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80119be:	e15d      	b.n	8011c7c <convolve_1x1_s8_fpreq+0x8b4>
			q31_t sum = bias[i_ch_out];
 80119c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80119ca:	4413      	add	r3, r2
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 80119d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119d6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80119da:	601a      	str	r2, [r3, #0]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 80119dc:	1dbb      	adds	r3, r7, #6
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	089b      	lsrs	r3, r3, #2
 80119e2:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

			while (col_count) {
 80119e6:	e101      	b.n	8011bec <convolve_1x1_s8_fpreq+0x824>
 80119e8:	f107 0320 	add.w	r3, r7, #32
 80119ec:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80119f0:	601a      	str	r2, [r3, #0]
 80119f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80119f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80119fa:	601a      	str	r2, [r3, #0]
 80119fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011a00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011a04:	601a      	str	r2, [r3, #0]
 8011a06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a0a:	f107 0220 	add.w	r2, r7, #32
 8011a0e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8011a10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	f107 031c 	add.w	r3, r7, #28
 8011a20:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011a22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	1d1a      	adds	r2, r3, #4
 8011a2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	601a      	str	r2, [r3, #0]
    return (val);
 8011a34:	f107 031c 	add.w	r3, r7, #28
 8011a38:	681a      	ldr	r2, [r3, #0]
 * @brief read and expand one q7 word into two q15 words with reordering
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8011a3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011a3e:	601a      	str	r2, [r3, #0]
#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8011a40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011a50:	2208      	movs	r2, #8
 8011a52:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8011a54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011a58:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011a5c:	6812      	ldr	r2, [r2, #0]
 8011a5e:	f002 021f 	and.w	r2, r2, #31
 8011a62:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8011a64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d103      	bne.n	8011a76 <convolve_1x1_s8_fpreq+0x6ae>
    return op1;
 8011a6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	e007      	b.n	8011a86 <convolve_1x1_s8_fpreq+0x6be>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011a76:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011a7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011a7e:	6812      	ldr	r2, [r2, #0]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	fa62 f303 	ror.w	r3, r2, r3
 8011a86:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011a8a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011a8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	fa2f f283 	sxtb16	r2, r3
 8011a96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011a9a:	601a      	str	r2, [r3, #0]
  return(result);
 8011a9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8011aac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011ab6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011ab8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	fa2f f283 	sxtb16	r2, r3
 8011ac2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011ac6:	601a      	str	r2, [r3, #0]
  return(result);
 8011ac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	601a      	str	r2, [r3, #0]
#else
    *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
    *out2 = __SXTB16(inA);
#endif

    return source;
 8011ad8:	f107 0320 	add.w	r3, r7, #32
 8011adc:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t in_b1, in_b2;
				ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 8011ade:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8011ae2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011ae6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011aea:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8011aec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	461a      	mov	r2, r3
 8011af8:	f107 0318 	add.w	r3, r7, #24
 8011afc:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8011afe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	1d1a      	adds	r2, r3, #4
 8011b08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	601a      	str	r2, [r3, #0]
    return (val);
 8011b10:	f107 0318 	add.w	r3, r7, #24
 8011b14:	681b      	ldr	r3, [r3, #0]

				in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8011b16:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
				sum = __SMLAD(ker_a1, in_b1, sum);
 8011b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4618      	mov	r0, r3
 8011b22:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8011b26:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011b2e:	6018      	str	r0, [r3, #0]
 8011b30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011b34:	6019      	str	r1, [r3, #0]
 8011b36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011b3a:	601a      	str	r2, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011b3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8011b46:	6812      	ldr	r2, [r2, #0]
 8011b48:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8011b4c:	6809      	ldr	r1, [r1, #0]
 8011b4e:	fb23 1202 	smlad	r2, r3, r2, r1
 8011b52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011b56:	601a      	str	r2, [r3, #0]
  return(result);
 8011b58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8011b62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b66:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011b6a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8011b6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	f107 0314 	add.w	r3, r7, #20
 8011b7c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8011b7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	1d1a      	adds	r2, r3, #4
 8011b88:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	601a      	str	r2, [r3, #0]
    return (val);
 8011b90:	f107 0314 	add.w	r3, r7, #20
 8011b94:	681b      	ldr	r3, [r3, #0]
				in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8011b96:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				sum = __SMLAD(ker_a2, in_b2, sum);
 8011b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8011ba6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011baa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011bae:	6018      	str	r0, [r3, #0]
 8011bb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011bb4:	6019      	str	r1, [r3, #0]
 8011bb6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011bba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011bbc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8011bc6:	6812      	ldr	r2, [r2, #0]
 8011bc8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8011bcc:	6809      	ldr	r1, [r1, #0]
 8011bce:	fb23 1202 	smlad	r2, r3, r2, r1
 8011bd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011bd6:	601a      	str	r2, [r3, #0]
  return(result);
 8011bd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

				col_count--;
 8011be2:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 8011be6:	3b01      	subs	r3, #1
 8011be8:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
			while (col_count) {
 8011bec:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f47f aef9 	bne.w	80119e8 <convolve_1x1_s8_fpreq+0x620>
			}

			sum = MAX(sum, 0); //ReLU
 8011bf6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8011bfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011bfe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8011c02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8011c06:	ee07 3a90 	vmov	s15, r3
 8011c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011c0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8011c18:	4413      	add	r3, r2
 8011c1a:	edd3 7a00 	vldr	s15, [r3]
 8011c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c26:	ee17 3a90 	vmov	r3, s15
 8011c2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			sum += out_offset; //Output offset is the next layer input zero
 8011c2e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011c32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011c36:	4413      	add	r3, r2
 8011c38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			sum = MAX(sum, out_activation_min);
 8011c3c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011c40:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8011c44:	4293      	cmp	r3, r2
 8011c46:	bfb8      	it	lt
 8011c48:	4613      	movlt	r3, r2
 8011c4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			sum = MIN(sum, out_activation_max);
 8011c4e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011c52:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8011c56:	4293      	cmp	r3, r2
 8011c58:	bfa8      	it	ge
 8011c5a:	4613      	movge	r3, r2
 8011c5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			*out++ = (q7_t) sum;
 8011c60:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8011c64:	1c5a      	adds	r2, r3, #1
 8011c66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8011c6a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011c6e:	b252      	sxtb	r2, r2
 8011c70:	701a      	strb	r2, [r3, #0]
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8011c72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8011c76:	3301      	adds	r3, #1
 8011c78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8011c7c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	; 0x218
 8011c80:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8011c84:	429a      	cmp	r2, r3
 8011c86:	f6ff ae9b 	blt.w	80119c0 <convolve_1x1_s8_fpreq+0x5f8>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd90      	pop	{r4, r7, pc}

08011c96 <convolve_1x1_s8_fpreq_bitmask>:
		const uint16_t input_x, const uint16_t input_y, const uint16_t input_ch,
		const q7_t *kernel, const int32_t *bias, const float *scales,
		const int32_t out_offset, const int32_t input_offset,
		const int32_t out_activation_min, const int32_t out_activation_max,
		q7_t *output, q7_t *mask, const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf) {
 8011c96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c9a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 8011c9e:	af08      	add	r7, sp, #32
 8011ca0:	f107 060c 	add.w	r6, r7, #12
 8011ca4:	6030      	str	r0, [r6, #0]
 8011ca6:	460e      	mov	r6, r1
 8011ca8:	4610      	mov	r0, r2
 8011caa:	4619      	mov	r1, r3
 8011cac:	f107 030a 	add.w	r3, r7, #10
 8011cb0:	4632      	mov	r2, r6
 8011cb2:	801a      	strh	r2, [r3, #0]
 8011cb4:	f107 0308 	add.w	r3, r7, #8
 8011cb8:	4602      	mov	r2, r0
 8011cba:	801a      	strh	r2, [r3, #0]
 8011cbc:	1dbb      	adds	r3, r7, #6
 8011cbe:	460a      	mov	r2, r1
 8011cc0:	801a      	strh	r2, [r3, #0]
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8011cc2:	1dbb      	adds	r3, r7, #6
 8011cc4:	881b      	ldrh	r3, [r3, #0]
 8011cc6:	f003 0303 	and.w	r3, r3, #3
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d106      	bne.n	8011cde <convolve_1x1_s8_fpreq_bitmask+0x48>
 8011cd0:	1dbb      	adds	r3, r7, #6
 8011cd2:	881b      	ldrh	r3, [r3, #0]
 8011cd4:	f003 0301 	and.w	r3, r3, #1
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d002      	beq.n	8011ce4 <convolve_1x1_s8_fpreq_bitmask+0x4e>
		return PARAM_NO_SUPPORT;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	f000 bcc1 	b.w	8012666 <convolve_1x1_s8_fpreq_bitmask+0x9d0>
	}
	if (output_ch % 8 != 0 && input_x > 1)
 8011ce4:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8011ce8:	f003 0307 	and.w	r3, r3, #7
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d007      	beq.n	8011d02 <convolve_1x1_s8_fpreq_bitmask+0x6c>
 8011cf2:	f107 030a 	add.w	r3, r7, #10
 8011cf6:	881b      	ldrh	r3, [r3, #0]
 8011cf8:	2b01      	cmp	r3, #1
 8011cfa:	d902      	bls.n	8011d02 <convolve_1x1_s8_fpreq_bitmask+0x6c>
		return PARAM_NO_SUPPORT;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	f000 bcb2 	b.w	8012666 <convolve_1x1_s8_fpreq_bitmask+0x9d0>
	int32_t i_element;
	(void) input_x;
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
 8011d02:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8011d06:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	q7_t *out = output;
 8011d0a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011d0e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	const int32_t num_elements = output_x * output_y;
 8011d12:	f8b7 3224 	ldrh.w	r3, [r7, #548]	; 0x224
 8011d16:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8011d1a:	fb02 f303 	mul.w	r3, r2, r3
 8011d1e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	const int channel_div4 = (input_ch >> 2);
 8011d22:	1dbb      	adds	r3, r7, #6
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	089b      	lsrs	r3, r3, #2
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	const int16_t inoff16 = input_offset;
 8011d2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8011d32:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8011d36:	f9b7 31ae 	ldrsh.w	r3, [r7, #430]	; 0x1ae
 8011d3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8011d3e:	f9b7 31ae 	ldrsh.w	r3, [r7, #430]	; 0x1ae
 8011d42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8011d46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8011d4a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8011d4e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8011d52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8011d56:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8011d5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8011d5e:	2300      	movs	r3, #0
 8011d60:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8011d64:	e1aa      	b.n	80120bc <convolve_1x1_s8_fpreq_bitmask+0x426>
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8011d66:	1dbb      	adds	r3, r7, #6
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8011d6e:	fb02 f303 	mul.w	r3, r2, r3
 8011d72:	005b      	lsls	r3, r3, #1
 8011d74:	461a      	mov	r2, r3
 8011d76:	f107 030c 	add.w	r3, r7, #12
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	441a      	add	r2, r3
 8011d7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011d82:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8011d84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011d88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8011d8c:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
 8011d8e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8011d92:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		while (cnt > 0) {
 8011d96:	e158      	b.n	801204a <convolve_1x1_s8_fpreq_bitmask+0x3b4>
 8011d98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    memcpy(&val, *in_q7, 4);
 8011da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	461a      	mov	r2, r3
 8011daa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011dae:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	1d1a      	adds	r2, r3, #4
 8011db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011dbc:	601a      	str	r2, [r3, #0]
    return (val);
 8011dbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011dc2:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8011dc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011dc8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011dcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011dd0:	2308      	movs	r3, #8
 8011dd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  op2 %= 32U;
 8011dd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011dda:	f003 031f 	and.w	r3, r3, #31
 8011dde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  if (op2 == 0U)
 8011de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d102      	bne.n	8011df0 <convolve_1x1_s8_fpreq_bitmask+0x15a>
    return op1;
 8011dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011dee:	e005      	b.n	8011dfc <convolve_1x1_s8_fpreq_bitmask+0x166>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011df0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8011df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011df8:	fa62 f303 	ror.w	r3, r2, r3
 8011dfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e04:	fa2f f383 	sxtb16	r3, r3
 8011e08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 8011e0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011e10:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011e14:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011e18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011e20:	fa2f f383 	sxtb16	r3, r3
 8011e24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8011e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011e2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011e30:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8011e34:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8011e38:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8011e3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011e40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011e44:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8011e48:	fa93 f302 	sadd16	r3, r3, r2
 8011e4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8011e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011e54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011e58:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8011e5c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8011e60:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8011e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011e68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011e6c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8011e70:	fa93 f302 	sadd16	r3, r3, r2
 8011e74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 8011e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011e7c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011e80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011e84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011e88:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  q31_t val = value;
 8011e90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011e94:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011e98:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8011e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8011ea4:	6812      	ldr	r2, [r2, #0]
 8011ea6:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8011ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	1d1a      	adds	r2, r3, #4
 8011eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011eb4:	601a      	str	r2, [r3, #0]
 8011eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011eba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8011ebe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8011ec2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  q31_t val = value;
 8011ec6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011eca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011ece:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8011ed0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011eda:	6812      	ldr	r2, [r2, #0]
 8011edc:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8011ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	1d1a      	adds	r2, r3, #4
 8011ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011ef0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    memcpy(&val, *in_q7, 4);
 8011ef4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	461a      	mov	r2, r3
 8011efe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f02:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011f04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	1d1a      	adds	r2, r3, #4
 8011f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011f10:	601a      	str	r2, [r3, #0]
    return (val);
 8011f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f16:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8011f18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8011f1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011f20:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011f24:	2308      	movs	r3, #8
 8011f26:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  op2 %= 32U;
 8011f2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011f2e:	f003 031f 	and.w	r3, r3, #31
 8011f32:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (op2 == 0U)
 8011f36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d102      	bne.n	8011f44 <convolve_1x1_s8_fpreq_bitmask+0x2ae>
    return op1;
 8011f3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011f42:	e005      	b.n	8011f50 <convolve_1x1_s8_fpreq_bitmask+0x2ba>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011f44:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8011f48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011f4c:	fa62 f303 	ror.w	r3, r2, r3
 8011f50:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011f54:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011f58:	fa2f f383 	sxtb16	r3, r3
 8011f5c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  return(result);
 8011f60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011f64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011f68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011f6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8011f70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011f74:	fa2f f383 	sxtb16	r3, r3
 8011f78:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  return(result);
 8011f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011f80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011f84:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8011f88:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8011f8c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8011f90:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011f94:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011f98:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8011f9c:	fa93 f302 	sadd16	r3, r3, r2
 8011fa0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8011fa4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011fa8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011fac:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8011fb0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8011fb4:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8011fb8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011fbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8011fc0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8011fc4:	fa93 f302 	sadd16	r3, r3, r2
 8011fc8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8011fcc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011fd0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011fd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fd8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011fdc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011fe0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  q31_t val = value;
 8011fe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011fe8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8011fec:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8011fee:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011ff8:	6812      	ldr	r2, [r2, #0]
 8011ffa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8011ffc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	1d1a      	adds	r2, r3, #4
 8012004:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012008:	601a      	str	r2, [r3, #0]
 801200a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801200e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8012012:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012016:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  q31_t val = value;
 801201a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801201e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8012022:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8012024:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801202e:	6812      	ldr	r2, [r2, #0]
 8012030:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012032:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	1d1a      	adds	r2, r3, #4
 801203a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801203e:	601a      	str	r2, [r3, #0]
			cnt--;
 8012040:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8012044:	3b01      	subs	r3, #1
 8012046:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		while (cnt > 0) {
 801204a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801204e:	2b00      	cmp	r3, #0
 8012050:	f73f aea2 	bgt.w	8011d98 <convolve_1x1_s8_fpreq_bitmask+0x102>
		}

		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 8012054:	f8b7 122c 	ldrh.w	r1, [r7, #556]	; 0x22c
				output_ch, scales, (q7_t) out_offset, out_activation_min,
 8012058:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801205c:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(kernel, two_column_buffer,
 801205e:	4618      	mov	r0, r3
 8012060:	1dbb      	adds	r3, r7, #6
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8012068:	9206      	str	r2, [sp, #24]
 801206a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801206e:	9205      	str	r2, [sp, #20]
 8012070:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8012074:	9204      	str	r2, [sp, #16]
 8012076:	9303      	str	r3, [sp, #12]
 8012078:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801207c:	9302      	str	r3, [sp, #8]
 801207e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012082:	9301      	str	r3, [sp, #4]
 8012084:	9000      	str	r0, [sp, #0]
 8012086:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801208a:	460a      	mov	r2, r1
 801208c:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8012090:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8012094:	f002 f98e 	bl	80143b4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>
 8012098:	4603      	mov	r3, r0
 801209a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X, bias,
				out, mask);
		mask += output_ch / 4;
 801209e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80120a2:	089b      	lsrs	r3, r3, #2
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	461a      	mov	r2, r3
 80120a8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80120ac:	4413      	add	r3, r2
 80120ae:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80120b2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80120b6:	3301      	adds	r3, #1
 80120b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80120bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	da00      	bge.n	80120c6 <convolve_1x1_s8_fpreq_bitmask+0x430>
 80120c4:	3301      	adds	r3, #1
 80120c6:	105b      	asrs	r3, r3, #1
 80120c8:	461a      	mov	r2, r3
 80120ca:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80120ce:	4293      	cmp	r3, r2
 80120d0:	f6ff ae49 	blt.w	8011d66 <convolve_1x1_s8_fpreq_bitmask+0xd0>
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80120d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80120d8:	f003 0301 	and.w	r3, r3, #1
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f000 82c1 	beq.w	8012664 <convolve_1x1_s8_fpreq_bitmask+0x9ce>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
 80120e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80120e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80120ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80120ee:	3b01      	subs	r3, #1
 80120f0:	1dba      	adds	r2, r7, #6
 80120f2:	8812      	ldrh	r2, [r2, #0]
 80120f4:	fb02 f303 	mul.w	r3, r2, r3
 80120f8:	461a      	mov	r2, r3
 80120fa:	f107 030c 	add.w	r3, r7, #12
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	441a      	add	r2, r3
 8012102:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012106:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8012108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801210c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8012110:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
 8012112:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8012116:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		while (cnt > 0) {
 801211a:	e0ce      	b.n	80122ba <convolve_1x1_s8_fpreq_bitmask+0x624>
 801211c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012120:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012124:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8012126:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	461a      	mov	r2, r3
 8012132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012136:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012138:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	1d1a      	adds	r2, r3, #4
 8012142:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	601a      	str	r2, [r3, #0]
    return (val);
 801214a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801214e:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8012150:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8012154:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012158:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012162:	2208      	movs	r2, #8
 8012164:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8012166:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801216a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801216e:	6812      	ldr	r2, [r2, #0]
 8012170:	f002 021f 	and.w	r2, r2, #31
 8012174:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8012176:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d103      	bne.n	8012188 <convolve_1x1_s8_fpreq_bitmask+0x4f2>
    return op1;
 8012180:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	e007      	b.n	8012198 <convolve_1x1_s8_fpreq_bitmask+0x502>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012188:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801218c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012190:	6812      	ldr	r2, [r2, #0]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	fa62 f303 	ror.w	r3, r2, r3
 8012198:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 801219c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801219e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	fa2f f283 	sxtb16	r2, r3
 80121a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80121ac:	601a      	str	r2, [r3, #0]
  return(result);
 80121ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80121b8:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80121bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121c0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80121c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	fa2f f283 	sxtb16	r2, r3
 80121cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80121d0:	601a      	str	r2, [r3, #0]
  return(result);
 80121d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80121dc:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80121e0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80121e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80121e8:	6019      	str	r1, [r3, #0]
 80121ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80121ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80121f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80121fa:	6812      	ldr	r2, [r2, #0]
 80121fc:	fa93 f202 	sadd16	r2, r3, r2
 8012200:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012204:	601a      	str	r2, [r3, #0]
  return(result);
 8012206:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8012210:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8012214:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012218:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801221c:	6019      	str	r1, [r3, #0]
 801221e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012222:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012224:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801222e:	6812      	ldr	r2, [r2, #0]
 8012230:	fa93 f202 	sadd16	r2, r3, r2
 8012234:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012238:	601a      	str	r2, [r3, #0]
  return(result);
 801223a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8012244:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801224c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  q31_t val = value;
 8012254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012258:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801225c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801225e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012268:	6812      	ldr	r2, [r2, #0]
 801226a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801226c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	1d1a      	adds	r2, r3, #4
 8012274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012278:	601a      	str	r2, [r3, #0]
 801227a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801227e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012282:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012286:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  q31_t val = value;
 801228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801228e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8012292:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8012294:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801229e:	6812      	ldr	r2, [r2, #0]
 80122a0:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80122a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	1d1a      	adds	r2, r3, #4
 80122aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80122ae:	601a      	str	r2, [r3, #0]
			cnt--;
 80122b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80122b4:	3b01      	subs	r3, #1
 80122b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		while (cnt > 0) {
 80122ba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80122be:	2b00      	cmp	r3, #0
 80122c0:	f73f af2c 	bgt.w	801211c <convolve_1x1_s8_fpreq_bitmask+0x486>
		}

		int bit_starting_idx = 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80122ca:	2300      	movs	r3, #0
 80122cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80122d0:	e1c1      	b.n	8012656 <convolve_1x1_s8_fpreq_bitmask+0x9c0>
			q31_t sum = bias[i_ch_out];
 80122d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80122dc:	4413      	add	r3, r2
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 80122e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122e8:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80122ec:	601a      	str	r2, [r3, #0]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 80122ee:	1dbb      	adds	r3, r7, #6
 80122f0:	881b      	ldrh	r3, [r3, #0]
 80122f2:	089b      	lsrs	r3, r3, #2
 80122f4:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be

			while (col_count) {
 80122f8:	e101      	b.n	80124fe <convolve_1x1_s8_fpreq_bitmask+0x868>
 80122fa:	f107 031c 	add.w	r3, r7, #28
 80122fe:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8012302:	601a      	str	r2, [r3, #0]
 8012304:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012308:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801230c:	601a      	str	r2, [r3, #0]
 801230e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012312:	f107 0220 	add.w	r2, r7, #32
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801231c:	f107 021c 	add.w	r2, r7, #28
 8012320:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8012322:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	461a      	mov	r2, r3
 801232e:	f107 0318 	add.w	r3, r7, #24
 8012332:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012334:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	1d1a      	adds	r2, r3, #4
 801233e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	601a      	str	r2, [r3, #0]
    return (val);
 8012346:	f107 0318 	add.w	r3, r7, #24
 801234a:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801234c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012350:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8012352:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801235c:	601a      	str	r2, [r3, #0]
 801235e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012362:	2208      	movs	r2, #8
 8012364:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8012366:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801236a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801236e:	6812      	ldr	r2, [r2, #0]
 8012370:	f002 021f 	and.w	r2, r2, #31
 8012374:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8012376:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d103      	bne.n	8012388 <convolve_1x1_s8_fpreq_bitmask+0x6f2>
    return op1;
 8012380:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	e007      	b.n	8012398 <convolve_1x1_s8_fpreq_bitmask+0x702>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012388:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801238c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012390:	6812      	ldr	r2, [r2, #0]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	fa62 f303 	ror.w	r3, r2, r3
 8012398:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801239c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801239e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	fa2f f283 	sxtb16	r2, r3
 80123a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123ac:	601a      	str	r2, [r3, #0]
  return(result);
 80123ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	461a      	mov	r2, r3
 80123b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80123be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80123c8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80123ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	fa2f f283 	sxtb16	r2, r3
 80123d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80123d8:	601a      	str	r2, [r3, #0]
  return(result);
 80123da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	601a      	str	r2, [r3, #0]
    return source;
 80123ea:	f107 031c 	add.w	r3, r7, #28
 80123ee:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t in_b1, in_b2;
				ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 80123f0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80123f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80123f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80123fc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80123fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	461a      	mov	r2, r3
 801240a:	f107 0314 	add.w	r3, r7, #20
 801240e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8012410:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	1d1a      	adds	r2, r3, #4
 801241a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	601a      	str	r2, [r3, #0]
    return (val);
 8012422:	f107 0314 	add.w	r3, r7, #20
 8012426:	681b      	ldr	r3, [r3, #0]

				in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8012428:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				sum = __SMLAD(ker_a1, in_b1, sum);
 801242c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	4618      	mov	r0, r3
 8012434:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8012438:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801243c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012440:	6018      	str	r0, [r3, #0]
 8012442:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012446:	6019      	str	r1, [r3, #0]
 8012448:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801244c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801244e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8012458:	6812      	ldr	r2, [r2, #0]
 801245a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801245e:	6809      	ldr	r1, [r1, #0]
 8012460:	fb23 1202 	smlad	r2, r3, r2, r1
 8012464:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012468:	601a      	str	r2, [r3, #0]
  return(result);
 801246a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012474:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012478:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801247c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801247e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	461a      	mov	r2, r3
 801248a:	f107 0310 	add.w	r3, r7, #16
 801248e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8012490:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	1d1a      	adds	r2, r3, #4
 801249a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	601a      	str	r2, [r3, #0]
    return (val);
 80124a2:	f107 0310 	add.w	r3, r7, #16
 80124a6:	681b      	ldr	r3, [r3, #0]
				in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 80124a8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
				sum = __SMLAD(ker_a2, in_b2, sum);
 80124ac:	f107 0320 	add.w	r3, r7, #32
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80124b8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80124bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80124c0:	6018      	str	r0, [r3, #0]
 80124c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80124c6:	6019      	str	r1, [r3, #0]
 80124c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80124cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80124ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80124d8:	6812      	ldr	r2, [r2, #0]
 80124da:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80124de:	6809      	ldr	r1, [r1, #0]
 80124e0:	fb23 1202 	smlad	r2, r3, r2, r1
 80124e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80124e8:	601a      	str	r2, [r3, #0]
  return(result);
 80124ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

				col_count--;
 80124f4:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 80124f8:	3b01      	subs	r3, #1
 80124fa:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
			while (col_count) {
 80124fe:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 8012502:	2b00      	cmp	r3, #0
 8012504:	f47f aef9 	bne.w	80122fa <convolve_1x1_s8_fpreq_bitmask+0x664>
			}

			sum = (q31_t) ((float) sum * scales[i_ch_out]);
 8012508:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801250c:	ee07 3a90 	vmov	s15, r3
 8012510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012514:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801251e:	4413      	add	r3, r2
 8012520:	edd3 7a00 	vldr	s15, [r3]
 8012524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801252c:	ee17 3a90 	vmov	r3, s15
 8012530:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			sum += out_offset;
 8012534:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8012538:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801253c:	4413      	add	r3, r2
 801253e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			q7_t mask_value = 1;
 8012542:	2301      	movs	r3, #1
 8012544:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
			if (sum < out_activation_min){
 8012548:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801254c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012550:	429a      	cmp	r2, r3
 8012552:	da06      	bge.n	8012562 <convolve_1x1_s8_fpreq_bitmask+0x8cc>
				sum = out_activation_min;
 8012554:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012558:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				mask_value = 0;
 801255c:	2300      	movs	r3, #0
 801255e:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
			}
			if (sum > out_activation_max){
 8012562:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8012566:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801256a:	429a      	cmp	r2, r3
 801256c:	dd06      	ble.n	801257c <convolve_1x1_s8_fpreq_bitmask+0x8e6>
				sum = out_activation_max;
 801256e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8012572:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				mask_value = 0;
 8012576:	2300      	movs	r3, #0
 8012578:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
			}
			*out++ = (q7_t) sum;
 801257c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8012580:	1c5a      	adds	r2, r3, #1
 8012582:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8012586:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801258a:	b252      	sxtb	r2, r2
 801258c:	701a      	strb	r2, [r3, #0]
			if (mask_value == 1)
 801258e:	f997 31bd 	ldrsb.w	r3, [r7, #445]	; 0x1bd
 8012592:	2b01      	cmp	r3, #1
 8012594:	d122      	bne.n	80125dc <convolve_1x1_s8_fpreq_bitmask+0x946>
				BIT_SET(*mask, bit_starting_idx);
 8012596:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801259a:	f993 3000 	ldrsb.w	r3, [r3]
 801259e:	fa5f fc83 	uxtb.w	ip, r3
 80125a2:	f04f 0201 	mov.w	r2, #1
 80125a6:	f04f 0300 	mov.w	r3, #0
 80125aa:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80125ae:	f1a1 0620 	sub.w	r6, r1, #32
 80125b2:	f1c1 0020 	rsb	r0, r1, #32
 80125b6:	fa03 f501 	lsl.w	r5, r3, r1
 80125ba:	fa02 f606 	lsl.w	r6, r2, r6
 80125be:	4335      	orrs	r5, r6
 80125c0:	fa22 f000 	lsr.w	r0, r2, r0
 80125c4:	4305      	orrs	r5, r0
 80125c6:	fa02 f401 	lsl.w	r4, r2, r1
 80125ca:	b2e3      	uxtb	r3, r4
 80125cc:	ea4c 0303 	orr.w	r3, ip, r3
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	b25a      	sxtb	r2, r3
 80125d4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80125d8:	701a      	strb	r2, [r3, #0]
 80125da:	e026      	b.n	801262a <convolve_1x1_s8_fpreq_bitmask+0x994>
			else
				BIT_CLEAR(*mask, bit_starting_idx);
 80125dc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80125e0:	f993 3000 	ldrsb.w	r3, [r3]
 80125e4:	fa5f fc83 	uxtb.w	ip, r3
 80125e8:	f04f 0201 	mov.w	r2, #1
 80125ec:	f04f 0300 	mov.w	r3, #0
 80125f0:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80125f4:	f1a1 0620 	sub.w	r6, r1, #32
 80125f8:	f1c1 0020 	rsb	r0, r1, #32
 80125fc:	fa03 f901 	lsl.w	r9, r3, r1
 8012600:	fa02 f606 	lsl.w	r6, r2, r6
 8012604:	ea49 0906 	orr.w	r9, r9, r6
 8012608:	fa22 f000 	lsr.w	r0, r2, r0
 801260c:	ea49 0900 	orr.w	r9, r9, r0
 8012610:	fa02 f801 	lsl.w	r8, r2, r1
 8012614:	fa5f f388 	uxtb.w	r3, r8
 8012618:	43db      	mvns	r3, r3
 801261a:	b2db      	uxtb	r3, r3
 801261c:	ea0c 0303 	and.w	r3, ip, r3
 8012620:	b2db      	uxtb	r3, r3
 8012622:	b25a      	sxtb	r2, r3
 8012624:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012628:	701a      	strb	r2, [r3, #0]

			bit_starting_idx += 1;
 801262a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801262e:	3301      	adds	r3, #1
 8012630:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			if(bit_starting_idx == 8){
 8012634:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012638:	2b08      	cmp	r3, #8
 801263a:	d107      	bne.n	801264c <convolve_1x1_s8_fpreq_bitmask+0x9b6>
				bit_starting_idx = 0;
 801263c:	2300      	movs	r3, #0
 801263e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
				mask++;
 8012642:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012646:	3301      	adds	r3, #1
 8012648:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 801264c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8012650:	3301      	adds	r3, #1
 8012652:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8012656:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 801265a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801265e:	429a      	cmp	r2, r3
 8012660:	f6ff ae37 	blt.w	80122d2 <convolve_1x1_s8_fpreq_bitmask+0x63c>
			}
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8012664:	2300      	movs	r3, #0
}
 8012666:	4618      	mov	r0, r3
 8012668:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 801266c:	46bd      	mov	sp, r7
 801266e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012672 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq>:
		const float *scales, const int32_t output_offset,
		const int32_t input_offset, const int32_t output_activation_min,
		const int32_t output_activation_max, q7_t *output,
		const uint16_t output_x, const uint16_t output_y,
		const uint16_t output_ch, q15_t *runtime_buf, q15_t *kbuf,
		q7_t pad_value) {
 8012672:	b590      	push	{r4, r7, lr}
 8012674:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8012678:	af08      	add	r7, sp, #32
 801267a:	f107 040c 	add.w	r4, r7, #12
 801267e:	6020      	str	r0, [r4, #0]
 8012680:	460c      	mov	r4, r1
 8012682:	4610      	mov	r0, r2
 8012684:	4619      	mov	r1, r3
 8012686:	f107 030a 	add.w	r3, r7, #10
 801268a:	4622      	mov	r2, r4
 801268c:	801a      	strh	r2, [r3, #0]
 801268e:	f107 0308 	add.w	r3, r7, #8
 8012692:	4602      	mov	r2, r0
 8012694:	801a      	strh	r2, [r3, #0]
 8012696:	1dbb      	adds	r3, r7, #6
 8012698:	460a      	mov	r2, r1
 801269a:	801a      	strh	r2, [r3, #0]
	const int kernel_y = 3;
 801269c:	2303      	movs	r3, #3
 801269e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	const int kernel_x = 3;
 80126a2:	2303      	movs	r3, #3
 80126a4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

	int16_t i_out_y, i_out_x, i_ker_y, i_ker_x;

	/* Generate two columns from the input tensor a GEMM computation */
	q15_t *two_column_buf = runtime_buf;
 80126a8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80126ac:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
	q7_t *out = output;
 80126b0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80126b4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac

	q15_t pad16 = pad_value;
 80126b8:	f997 32fc 	ldrsb.w	r3, [r7, #764]	; 0x2fc
 80126bc:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
	const int16_t inoff16 = input_offset;
 80126c0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80126c4:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288
	q15_t pad_out = pad16;// + inoff16; The input zero should not affect the padding value
 80126c8:	f8b7 328a 	ldrh.w	r3, [r7, #650]	; 0x28a
 80126cc:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
	q31_t pad_out_q15x2 = __PKHBT(pad_out, pad_out, 16);
 80126d0:	f9b7 3286 	ldrsh.w	r3, [r7, #646]	; 0x286
 80126d4:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80126d8:	f9b7 3286 	ldrsh.w	r3, [r7, #646]	; 0x286
 80126dc:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80126e0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80126e4:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80126e8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80126ec:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 80126f0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80126f4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80126f8:	f9b7 3288 	ldrsh.w	r3, [r7, #648]	; 0x288
 80126fc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8012700:	f9b7 3288 	ldrsh.w	r3, [r7, #648]	; 0x288
 8012704:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8012708:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801270c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8012710:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8012714:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8012718:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801271c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

	const q7_t *ip_a0 = kernel;
 8012720:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8012724:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

	//This for loop takes the entire weight tensor for one layer from [Out_Ch, In_Ch, K, K] to [Out_Ch, In_Ch*K*K] organized in two columns of In_Ch*K*K each
	for (int i = 0; i < output_ch; i += 2) {
 8012728:	2300      	movs	r3, #0
 801272a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 801272e:	e346      	b.n	8012dbe <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x74c>
		q15_t *dst1 = &kbuf[i * 9]; //each q31_t store 2 elements
 8012730:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8012734:	4613      	mov	r3, r2
 8012736:	00db      	lsls	r3, r3, #3
 8012738:	4413      	add	r3, r2
 801273a:	005b      	lsls	r3, r3, #1
 801273c:	461a      	mov	r2, r3
 801273e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8012742:	4413      	add	r3, r2
 8012744:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		q15_t *dst2 = dst1 + 9;
 8012748:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801274c:	3312      	adds	r3, #18
 801274e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

		const q7_t *ip_a1 = ip_a0 + 9;
 8012752:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8012756:	3309      	adds	r3, #9
 8012758:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

		//9 for each output_ch
		q31_t *dst1_31 = dst1;
 801275c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8012760:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		q31_t *dst2_31 = dst2;
 8012764:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8012768:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
		ip_a0 = read_and_pad(ip_a0, &dst1_31[0], &dst1_31[1]);
 801276c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012770:	1d1a      	adds	r2, r3, #4
 8012772:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012776:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 801277a:	6019      	str	r1, [r3, #0]
 801277c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8012780:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8012784:	6019      	str	r1, [r3, #0]
 8012786:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801278a:	601a      	str	r2, [r3, #0]
 801278c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8012790:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012794:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8012796:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	461a      	mov	r2, r3
 80127a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80127a6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80127a8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	1d1a      	adds	r2, r3, #4
 80127b2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	601a      	str	r2, [r3, #0]
    return (val);
 80127ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80127be:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80127c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127c4:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 80127c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80127d0:	601a      	str	r2, [r3, #0]
 80127d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127d6:	2208      	movs	r2, #8
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80127de:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80127e2:	6812      	ldr	r2, [r2, #0]
 80127e4:	601a      	str	r2, [r3, #0]
 80127e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80127ea:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80127ee:	6812      	ldr	r2, [r2, #0]
 80127f0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80127f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80127f6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80127fa:	6812      	ldr	r2, [r2, #0]
 80127fc:	f002 021f 	and.w	r2, r2, #31
 8012800:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8012802:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d103      	bne.n	8012814 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x1a2>
    return op1;
 801280c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	e007      	b.n	8012824 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x1b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012814:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8012818:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801281c:	6812      	ldr	r2, [r2, #0]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	fa62 f303 	ror.w	r3, r2, r3
 8012824:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8012828:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801282a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	fa2f f283 	sxtb16	r2, r3
 8012834:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8012838:	601a      	str	r2, [r3, #0]
  return(result);
 801283a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801283e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8012840:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8012844:	601a      	str	r2, [r3, #0]
  return result;
 8012846:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012850:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8012852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801285c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801285e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	fa2f f283 	sxtb16	r2, r3
 8012868:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801286c:	601a      	str	r2, [r3, #0]
  return(result);
 801286e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012878:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801287a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801287e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8012882:	6812      	ldr	r2, [r2, #0]
 8012884:	601a      	str	r2, [r3, #0]
 8012886:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801288a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801288e:	6812      	ldr	r2, [r2, #0]
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801289c:	6812      	ldr	r2, [r2, #0]
 801289e:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 80128a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80128a6:	601a      	str	r2, [r3, #0]
 80128a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80128b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80128bc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80128c0:	6812      	ldr	r2, [r2, #0]
 80128c2:	601a      	str	r2, [r3, #0]
 80128c4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80128c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80128cc:	6812      	ldr	r2, [r2, #0]
 80128ce:	601a      	str	r2, [r3, #0]
 80128d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80128da:	6812      	ldr	r2, [r2, #0]
 80128dc:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 80128e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80128e4:	601a      	str	r2, [r3, #0]
 80128e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	461a      	mov	r2, r3
 80128ee:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	601a      	str	r2, [r3, #0]
    return source;
 80128f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
		ip_a1 = read_and_pad(ip_a1, &dst2_31[0], &dst2_31[1]);
 8012900:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012904:	1d1a      	adds	r2, r3, #4
 8012906:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801290a:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 801290e:	6019      	str	r1, [r3, #0]
 8012910:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012914:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8012918:	6019      	str	r1, [r3, #0]
 801291a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8012924:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012928:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801292a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	461a      	mov	r2, r3
 8012936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801293a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801293c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	1d1a      	adds	r2, r3, #4
 8012946:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	601a      	str	r2, [r3, #0]
    return (val);
 801294e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012952:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8012954:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8012958:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 801295a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012964:	601a      	str	r2, [r3, #0]
 8012966:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801296a:	2208      	movs	r2, #8
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012972:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8012976:	6812      	ldr	r2, [r2, #0]
 8012978:	601a      	str	r2, [r3, #0]
 801297a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801297e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8012982:	6812      	ldr	r2, [r2, #0]
 8012984:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8012986:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801298a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 801298e:	6812      	ldr	r2, [r2, #0]
 8012990:	f002 021f 	and.w	r2, r2, #31
 8012994:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8012996:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d103      	bne.n	80129a8 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x336>
    return op1;
 80129a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	e007      	b.n	80129b8 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x346>
  return (op1 >> op2) | (op1 << (32U - op2));
 80129a8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80129ac:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80129b0:	6812      	ldr	r2, [r2, #0]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	fa62 f303 	ror.w	r3, r2, r3
 80129b8:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80129bc:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80129be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	fa2f f283 	sxtb16	r2, r3
 80129c8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80129cc:	601a      	str	r2, [r3, #0]
  return(result);
 80129ce:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80129d2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 80129d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80129d8:	601a      	str	r2, [r3, #0]
  return result;
 80129da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80129e4:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 80129e6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80129f0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80129f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	fa2f f283 	sxtb16	r2, r3
 80129fc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8012a00:	601a      	str	r2, [r3, #0]
  return(result);
 8012a02:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8012a06:	681a      	ldr	r2, [r3, #0]
 8012a08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012a0c:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8012a0e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012a12:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8012a16:	6812      	ldr	r2, [r2, #0]
 8012a18:	601a      	str	r2, [r3, #0]
 8012a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012a1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012a22:	6812      	ldr	r2, [r2, #0]
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012a30:	6812      	ldr	r2, [r2, #0]
 8012a32:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8012a36:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8012a3a:	601a      	str	r2, [r3, #0]
 8012a3c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	461a      	mov	r2, r3
 8012a44:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8012a4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012a50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012a54:	6812      	ldr	r2, [r2, #0]
 8012a56:	601a      	str	r2, [r3, #0]
 8012a58:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8012a5c:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8012a60:	6812      	ldr	r2, [r2, #0]
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8012a6e:	6812      	ldr	r2, [r2, #0]
 8012a70:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8012a74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	461a      	mov	r2, r3
 8012a82:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	601a      	str	r2, [r3, #0]
    return source;
 8012a8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		dst1_31 += 2;
 8012a94:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012a98:	3308      	adds	r3, #8
 8012a9a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		dst2_31 += 2;
 8012a9e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012aa2:	3308      	adds	r3, #8
 8012aa4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		ip_a0 = read_and_pad(ip_a0, &dst1_31[0], &dst1_31[1]);
 8012aa8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012aac:	3304      	adds	r3, #4
 8012aae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012ab2:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8012ab6:	6011      	str	r1, [r2, #0]
 8012ab8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8012abc:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8012ac0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ac8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    memcpy(&val, *in_q7, 4);
 8012acc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ada:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012adc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	1d1a      	adds	r2, r3, #4
 8012ae4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012ae8:	601a      	str	r2, [r3, #0]
    return (val);
 8012aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012aee:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8012af0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012af4:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 8012af6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012afa:	681a      	ldr	r2, [r3, #0]
 8012afc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012b00:	601a      	str	r2, [r3, #0]
 8012b02:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012b06:	2208      	movs	r2, #8
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012b0e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8012b12:	6812      	ldr	r2, [r2, #0]
 8012b14:	601a      	str	r2, [r3, #0]
 8012b16:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012b1a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8012b1e:	6812      	ldr	r2, [r2, #0]
 8012b20:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8012b22:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012b26:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8012b2a:	6812      	ldr	r2, [r2, #0]
 8012b2c:	f002 021f 	and.w	r2, r2, #31
 8012b30:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8012b32:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d103      	bne.n	8012b44 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x4d2>
    return op1;
 8012b3c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	e007      	b.n	8012b54 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x4e2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012b44:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8012b48:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012b4c:	6812      	ldr	r2, [r2, #0]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	fa62 f303 	ror.w	r3, r2, r3
 8012b54:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8012b58:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012b5a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	fa2f f283 	sxtb16	r2, r3
 8012b64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b68:	601a      	str	r2, [r3, #0]
  return(result);
 8012b6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b6e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8012b70:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012b74:	601a      	str	r2, [r3, #0]
  return result;
 8012b76:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012b80:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8012b82:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012b8c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012b8e:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	fa2f f283 	sxtb16	r2, r3
 8012b98:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012b9c:	601a      	str	r2, [r3, #0]
  return(result);
 8012b9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012ba8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8012baa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012bae:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8012bb2:	6812      	ldr	r2, [r2, #0]
 8012bb4:	601a      	str	r2, [r3, #0]
 8012bb6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012bba:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8012bbe:	6812      	ldr	r2, [r2, #0]
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8012bcc:	6812      	ldr	r2, [r2, #0]
 8012bce:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8012bd2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bd6:	601a      	str	r2, [r3, #0]
 8012bd8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	461a      	mov	r2, r3
 8012be0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012be4:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8012be6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012bea:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8012bee:	6812      	ldr	r2, [r2, #0]
 8012bf0:	601a      	str	r2, [r3, #0]
 8012bf2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012bf6:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8012bfa:	6812      	ldr	r2, [r2, #0]
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8012c08:	6812      	ldr	r2, [r2, #0]
 8012c0a:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8012c0e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8012c12:	601a      	str	r2, [r3, #0]
 8012c14:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012c20:	601a      	str	r2, [r3, #0]
    return source;
 8012c22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
		ip_a1 = read_and_pad(ip_a1, &dst2_31[0], &dst2_31[1]);
 8012c2c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012c30:	3304      	adds	r3, #4
 8012c32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012c36:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8012c3a:	6011      	str	r1, [r2, #0]
 8012c3c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8012c40:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 8012c44:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8012c48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012c4c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    memcpy(&val, *in_q7, 4);
 8012c50:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012c5e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012c60:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	1d1a      	adds	r2, r3, #4
 8012c68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8012c6c:	601a      	str	r2, [r3, #0]
    return (val);
 8012c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012c72:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8012c74:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 8012c78:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c7c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8012c80:	2308      	movs	r3, #8
 8012c82:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8012c86:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8012c8a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8012c8e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8012c92:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  op2 %= 32U;
 8012c96:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012c9a:	f003 031f 	and.w	r3, r3, #31
 8012c9e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  if (op2 == 0U)
 8012ca2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d102      	bne.n	8012cb0 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x63e>
    return op1;
 8012caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8012cae:	e005      	b.n	8012cbc <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x64a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012cb0:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8012cb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8012cb8:	fa62 f303 	ror.w	r3, r2, r3
 8012cbc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8012cc4:	fa2f f383 	sxtb16	r3, r3
 8012cc8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  return(result);
 8012ccc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
    result = __SXTB16(__ROR(op1, rotate)) ;
 8012cd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8012cd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8012cd8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    q31_t inAbuf2 = __SXTB16(inA);
 8012cdc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012ce0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8012ce4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8012ce8:	fa2f f383 	sxtb16	r3, r3
 8012cec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  return(result);
 8012cf0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8012cf4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8012cf8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8012cfc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8012d00:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8012d04:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8012d08:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8012d0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8012d10:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8012d14:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8012d18:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012d22:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8012d24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8012d28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8012d2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8012d30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8012d34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8012d38:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8012d3c:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8012d40:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8012d44:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8012d48:	461a      	mov	r2, r3
 8012d4a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8012d4e:	601a      	str	r2, [r3, #0]
    return source;
 8012d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		dst1_31 += 2;
 8012d5a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012d5e:	3308      	adds	r3, #8
 8012d60:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		dst2_31 += 2;
 8012d64:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012d68:	3308      	adds	r3, #8
 8012d6a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

		//9
		dst1 = dst1_31;
 8012d6e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8012d72:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		dst2 = dst2_31;
 8012d76:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012d7a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

		dst1[0] = *ip_a0++;
 8012d7e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8012d82:	1c5a      	adds	r2, r3, #1
 8012d84:	f8c7 22a8 	str.w	r2, [r7, #680]	; 0x2a8
 8012d88:	f993 3000 	ldrsb.w	r3, [r3]
 8012d8c:	b21a      	sxth	r2, r3
 8012d8e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8012d92:	801a      	strh	r2, [r3, #0]
		dst2[0] = *ip_a1++;
 8012d94:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8012d98:	1c5a      	adds	r2, r3, #1
 8012d9a:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8012d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8012da2:	b21a      	sxth	r2, r3
 8012da4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8012da8:	801a      	strh	r2, [r3, #0]

		/* skip row */
		ip_a0 += 9;
 8012daa:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8012dae:	3309      	adds	r3, #9
 8012db0:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	for (int i = 0; i < output_ch; i += 2) {
 8012db4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8012db8:	3302      	adds	r3, #2
 8012dba:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8012dbe:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8012dc2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	f6ff acb2 	blt.w	8012730 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xbe>
	}

	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 8012dcc:	2300      	movs	r3, #0
 8012dce:	f8a7 32b6 	strh.w	r3, [r7, #694]	; 0x2b6
 8012dd2:	e322      	b.n	801341a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xda8>
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f8a7 32b4 	strh.w	r3, [r7, #692]	; 0x2b4
 8012dda:	e310      	b.n	80133fe <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xd8c>
			/* This part implements the im2col function */
			const int16_t base_idx_y = (i_out_y * 2) - 1;
 8012ddc:	f8b7 32b6 	ldrh.w	r3, [r7, #694]	; 0x2b6
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	3b01      	subs	r3, #1
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	f8a7 3256 	strh.w	r3, [r7, #598]	; 0x256
			const int16_t base_idx_x = (i_out_x * 2) - 1;
 8012dec:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	; 0x2b4
 8012df0:	005b      	lsls	r3, r3, #1
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	3b01      	subs	r3, #1
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	f8a7 3254 	strh.w	r3, [r7, #596]	; 0x254
			const q15_t *col_buffer = two_column_buf;
 8012dfc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8012e00:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
			q15_t *dst;
			q15_t *dst2;
			q15_t *dst3;

			//int input_row_offset = 3 * input_x;
			int input_row_offset = input_x;
 8012e04:	f107 030a 	add.w	r3, r7, #10
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			dst = col_buffer;
 8012e0e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012e12:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
			dst2 = dst + 3;
 8012e16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012e1a:	3306      	adds	r3, #6
 8012e1c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			dst3 = dst2 + 3;
 8012e20:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012e24:	3306      	adds	r3, #6
 8012e26:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			if (base_idx_y != -1) {
 8012e2a:	f9b7 3256 	ldrsh.w	r3, [r7, #598]	; 0x256
 8012e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e32:	f000 818f 	beq.w	8013154 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xae2>
				if (base_idx_x != -1) { //load all for now and unroll all
 8012e36:	f9b7 3254 	ldrsh.w	r3, [r7, #596]	; 0x254
 8012e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e3e:	f000 80d8 	beq.w	8012ff2 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x980>
					//3x3 = 9 elements
					src = input
							+ (base_idx_y * input_x + base_idx_x) * input_ch;
 8012e42:	f9b7 3256 	ldrsh.w	r3, [r7, #598]	; 0x256
 8012e46:	f107 020a 	add.w	r2, r7, #10
 8012e4a:	8812      	ldrh	r2, [r2, #0]
 8012e4c:	fb02 f203 	mul.w	r2, r2, r3
 8012e50:	f9b7 3254 	ldrsh.w	r3, [r7, #596]	; 0x254
 8012e54:	4413      	add	r3, r2
 8012e56:	1dba      	adds	r2, r7, #6
 8012e58:	8812      	ldrh	r2, [r2, #0]
 8012e5a:	fb02 f303 	mul.w	r3, r2, r3
 8012e5e:	461a      	mov	r2, r3
					src = input
 8012e60:	f107 030c 	add.w	r3, r7, #12
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4413      	add	r3, r2
 8012e68:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
					src2 = src + input_row_offset;
 8012e6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012e70:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8012e74:	4413      	add	r3, r2
 8012e76:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
					src3 = src2 + input_row_offset;
 8012e7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012e7e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012e82:	4413      	add	r3, r2
 8012e84:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

					//3 x 1 = 3
					*dst++ = *src++ + input_offset;
 8012e88:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8012e8c:	1c5a      	adds	r2, r3, #1
 8012e8e:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 8012e92:	f993 3000 	ldrsb.w	r3, [r3]
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	4413      	add	r3, r2
 8012ea0:	b299      	uxth	r1, r3
 8012ea2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012ea6:	1c9a      	adds	r2, r3, #2
 8012ea8:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 8012eac:	b20a      	sxth	r2, r1
 8012eae:	801a      	strh	r2, [r3, #0]
					*dst++ = *src++ + input_offset;
 8012eb0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8012eb4:	1c5a      	adds	r2, r3, #1
 8012eb6:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 8012eba:	f993 3000 	ldrsb.w	r3, [r3]
 8012ebe:	b29a      	uxth	r2, r3
 8012ec0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	4413      	add	r3, r2
 8012ec8:	b299      	uxth	r1, r3
 8012eca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012ece:	1c9a      	adds	r2, r3, #2
 8012ed0:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 8012ed4:	b20a      	sxth	r2, r1
 8012ed6:	801a      	strh	r2, [r3, #0]
					*dst++ = *src++ + input_offset;
 8012ed8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8012edc:	1c5a      	adds	r2, r3, #1
 8012ede:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 8012ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8012ee6:	b29a      	uxth	r2, r3
 8012ee8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	4413      	add	r3, r2
 8012ef0:	b299      	uxth	r1, r3
 8012ef2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012ef6:	1c9a      	adds	r2, r3, #2
 8012ef8:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 8012efc:	b20a      	sxth	r2, r1
 8012efe:	801a      	strh	r2, [r3, #0]
					//
					*dst2++ = *src2++ + input_offset;
 8012f00:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012f04:	1c5a      	adds	r2, r3, #1
 8012f06:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8012f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	4413      	add	r3, r2
 8012f18:	b299      	uxth	r1, r3
 8012f1a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012f1e:	1c9a      	adds	r2, r3, #2
 8012f20:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8012f24:	b20a      	sxth	r2, r1
 8012f26:	801a      	strh	r2, [r3, #0]
					*dst2++ = *src2++ + input_offset;
 8012f28:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012f2c:	1c5a      	adds	r2, r3, #1
 8012f2e:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8012f32:	f993 3000 	ldrsb.w	r3, [r3]
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	4413      	add	r3, r2
 8012f40:	b299      	uxth	r1, r3
 8012f42:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012f46:	1c9a      	adds	r2, r3, #2
 8012f48:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8012f4c:	b20a      	sxth	r2, r1
 8012f4e:	801a      	strh	r2, [r3, #0]
					*dst2++ = *src2++ + input_offset;
 8012f50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012f54:	1c5a      	adds	r2, r3, #1
 8012f56:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 8012f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	4413      	add	r3, r2
 8012f68:	b299      	uxth	r1, r3
 8012f6a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012f6e:	1c9a      	adds	r2, r3, #2
 8012f70:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8012f74:	b20a      	sxth	r2, r1
 8012f76:	801a      	strh	r2, [r3, #0]
					//
					*dst3++ = *src3++ + input_offset;
 8012f78:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8012f7c:	1c5a      	adds	r2, r3, #1
 8012f7e:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8012f82:	f993 3000 	ldrsb.w	r3, [r3]
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	4413      	add	r3, r2
 8012f90:	b299      	uxth	r1, r3
 8012f92:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8012f96:	1c9a      	adds	r2, r3, #2
 8012f98:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 8012f9c:	b20a      	sxth	r2, r1
 8012f9e:	801a      	strh	r2, [r3, #0]
					*dst3++ = *src3++ + input_offset;
 8012fa0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8012fa4:	1c5a      	adds	r2, r3, #1
 8012fa6:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8012faa:	f993 3000 	ldrsb.w	r3, [r3]
 8012fae:	b29a      	uxth	r2, r3
 8012fb0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	4413      	add	r3, r2
 8012fb8:	b299      	uxth	r1, r3
 8012fba:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8012fbe:	1c9a      	adds	r2, r3, #2
 8012fc0:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 8012fc4:	b20a      	sxth	r2, r1
 8012fc6:	801a      	strh	r2, [r3, #0]
					*dst3++ = *src3++ + input_offset;
 8012fc8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8012fcc:	1c5a      	adds	r2, r3, #1
 8012fce:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8012fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	4413      	add	r3, r2
 8012fe0:	b299      	uxth	r1, r3
 8012fe2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8012fe6:	1c9a      	adds	r2, r3, #2
 8012fe8:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 8012fec:	b20a      	sxth	r2, r1
 8012fee:	801a      	strh	r2, [r3, #0]
 8012ff0:	e1c3      	b.n	801337a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xd08>
				} else {						//first element is pad
												//3x3 = 9 elements
					src = input + (base_idx_y * input_x) * input_ch;
 8012ff2:	f9b7 3256 	ldrsh.w	r3, [r7, #598]	; 0x256
 8012ff6:	f107 020a 	add.w	r2, r7, #10
 8012ffa:	8812      	ldrh	r2, [r2, #0]
 8012ffc:	fb02 f303 	mul.w	r3, r2, r3
 8013000:	1dba      	adds	r2, r7, #6
 8013002:	8812      	ldrh	r2, [r2, #0]
 8013004:	fb02 f303 	mul.w	r3, r2, r3
 8013008:	461a      	mov	r2, r3
 801300a:	f107 030c 	add.w	r3, r7, #12
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	4413      	add	r3, r2
 8013012:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
					src2 = src + input_row_offset;
 8013016:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801301a:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801301e:	4413      	add	r3, r2
 8013020:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
					src3 = src2 + input_row_offset;
 8013024:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013028:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801302c:	4413      	add	r3, r2
 801302e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

					//pad the first one: 1x3 = 3
					*dst++ = pad_out;
 8013032:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013036:	1c9a      	adds	r2, r3, #2
 8013038:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 801303c:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 8013040:	801a      	strh	r2, [r3, #0]
					*dst2++ = pad_out;
 8013042:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013046:	1c9a      	adds	r2, r3, #2
 8013048:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 801304c:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 8013050:	801a      	strh	r2, [r3, #0]
					*dst3++ = pad_out;
 8013052:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013056:	1c9a      	adds	r2, r3, #2
 8013058:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 801305c:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 8013060:	801a      	strh	r2, [r3, #0]
					//load 6 elements
					//4 * 1 = 6
					*dst++ = *src++ + input_offset;
 8013062:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8013066:	1c5a      	adds	r2, r3, #1
 8013068:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 801306c:	f993 3000 	ldrsb.w	r3, [r3]
 8013070:	b29a      	uxth	r2, r3
 8013072:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8013076:	b29b      	uxth	r3, r3
 8013078:	4413      	add	r3, r2
 801307a:	b299      	uxth	r1, r3
 801307c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013080:	1c9a      	adds	r2, r3, #2
 8013082:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 8013086:	b20a      	sxth	r2, r1
 8013088:	801a      	strh	r2, [r3, #0]
					*dst++ = *src++ + input_offset;
 801308a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801308e:	1c5a      	adds	r2, r3, #1
 8013090:	f8c7 2230 	str.w	r2, [r7, #560]	; 0x230
 8013094:	f993 3000 	ldrsb.w	r3, [r3]
 8013098:	b29a      	uxth	r2, r3
 801309a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801309e:	b29b      	uxth	r3, r3
 80130a0:	4413      	add	r3, r2
 80130a2:	b299      	uxth	r1, r3
 80130a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80130a8:	1c9a      	adds	r2, r3, #2
 80130aa:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 80130ae:	b20a      	sxth	r2, r1
 80130b0:	801a      	strh	r2, [r3, #0]
					//
					*dst2++ = *src2++ + input_offset;
 80130b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80130b6:	1c5a      	adds	r2, r3, #1
 80130b8:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 80130bc:	f993 3000 	ldrsb.w	r3, [r3]
 80130c0:	b29a      	uxth	r2, r3
 80130c2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	4413      	add	r3, r2
 80130ca:	b299      	uxth	r1, r3
 80130cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80130d0:	1c9a      	adds	r2, r3, #2
 80130d2:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80130d6:	b20a      	sxth	r2, r1
 80130d8:	801a      	strh	r2, [r3, #0]
					*dst2++ = *src2++ + input_offset;
 80130da:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80130de:	1c5a      	adds	r2, r3, #1
 80130e0:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 80130e4:	f993 3000 	ldrsb.w	r3, [r3]
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	4413      	add	r3, r2
 80130f2:	b299      	uxth	r1, r3
 80130f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80130f8:	1c9a      	adds	r2, r3, #2
 80130fa:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80130fe:	b20a      	sxth	r2, r1
 8013100:	801a      	strh	r2, [r3, #0]
					//
					*dst3++ = *src3++ + input_offset;
 8013102:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8013106:	1c5a      	adds	r2, r3, #1
 8013108:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 801310c:	f993 3000 	ldrsb.w	r3, [r3]
 8013110:	b29a      	uxth	r2, r3
 8013112:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8013116:	b29b      	uxth	r3, r3
 8013118:	4413      	add	r3, r2
 801311a:	b299      	uxth	r1, r3
 801311c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013120:	1c9a      	adds	r2, r3, #2
 8013122:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 8013126:	b20a      	sxth	r2, r1
 8013128:	801a      	strh	r2, [r3, #0]
					*dst3++ = *src3++ + input_offset;
 801312a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801312e:	1c5a      	adds	r2, r3, #1
 8013130:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8013134:	f993 3000 	ldrsb.w	r3, [r3]
 8013138:	b29a      	uxth	r2, r3
 801313a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801313e:	b29b      	uxth	r3, r3
 8013140:	4413      	add	r3, r2
 8013142:	b299      	uxth	r1, r3
 8013144:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013148:	1c9a      	adds	r2, r3, #2
 801314a:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 801314e:	b20a      	sxth	r2, r1
 8013150:	801a      	strh	r2, [r3, #0]
 8013152:	e112      	b.n	801337a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xd08>
				}
			} else {						// first row is padded
											//3x1 = 3 elements
				*dst++ = pad_out;
 8013154:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013158:	1c9a      	adds	r2, r3, #2
 801315a:	f8c7 2248 	str.w	r2, [r7, #584]	; 0x248
 801315e:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 8013162:	801a      	strh	r2, [r3, #0]
				q31_t *dst_31 = dst;
 8013164:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013168:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				*dst_31++ = pad_out_q15x2;
 801316c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8013170:	1d1a      	adds	r2, r3, #4
 8013172:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8013176:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 801317a:	601a      	str	r2, [r3, #0]

				if (base_idx_x != -1) {	//load all for now and unroll all
 801317c:	f9b7 3254 	ldrsh.w	r3, [r7, #596]	; 0x254
 8013180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013184:	f000 808d 	beq.w	80132a2 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xc30>
					//3x3 = 9 elements
					src2 = input + (base_idx_x) * input_ch;
 8013188:	f9b7 3254 	ldrsh.w	r3, [r7, #596]	; 0x254
 801318c:	1dba      	adds	r2, r7, #6
 801318e:	8812      	ldrh	r2, [r2, #0]
 8013190:	fb02 f303 	mul.w	r3, r2, r3
 8013194:	461a      	mov	r2, r3
 8013196:	f107 030c 	add.w	r3, r7, #12
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	4413      	add	r3, r2
 801319e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
					src3 = src2 + input_row_offset;
 80131a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80131a6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80131aa:	4413      	add	r3, r2
 80131ac:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

					//3x1 = 3
					*dst2++ = *src2++ + input_offset;
 80131b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80131b4:	1c5a      	adds	r2, r3, #1
 80131b6:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 80131ba:	f993 3000 	ldrsb.w	r3, [r3]
 80131be:	b29a      	uxth	r2, r3
 80131c0:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80131c4:	b29b      	uxth	r3, r3
 80131c6:	4413      	add	r3, r2
 80131c8:	b299      	uxth	r1, r3
 80131ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80131ce:	1c9a      	adds	r2, r3, #2
 80131d0:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80131d4:	b20a      	sxth	r2, r1
 80131d6:	801a      	strh	r2, [r3, #0]
					*dst2++ = *src2++ + input_offset;
 80131d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80131dc:	1c5a      	adds	r2, r3, #1
 80131de:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 80131e2:	f993 3000 	ldrsb.w	r3, [r3]
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	4413      	add	r3, r2
 80131f0:	b299      	uxth	r1, r3
 80131f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80131f6:	1c9a      	adds	r2, r3, #2
 80131f8:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80131fc:	b20a      	sxth	r2, r1
 80131fe:	801a      	strh	r2, [r3, #0]
					*dst2++ = *src2++ + input_offset;
 8013200:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013204:	1c5a      	adds	r2, r3, #1
 8013206:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 801320a:	f993 3000 	ldrsb.w	r3, [r3]
 801320e:	b29a      	uxth	r2, r3
 8013210:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8013214:	b29b      	uxth	r3, r3
 8013216:	4413      	add	r3, r2
 8013218:	b299      	uxth	r1, r3
 801321a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801321e:	1c9a      	adds	r2, r3, #2
 8013220:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8013224:	b20a      	sxth	r2, r1
 8013226:	801a      	strh	r2, [r3, #0]
					//
					*dst3++ = *src3++ + input_offset;
 8013228:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801322c:	1c5a      	adds	r2, r3, #1
 801322e:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8013232:	f993 3000 	ldrsb.w	r3, [r3]
 8013236:	b29a      	uxth	r2, r3
 8013238:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801323c:	b29b      	uxth	r3, r3
 801323e:	4413      	add	r3, r2
 8013240:	b299      	uxth	r1, r3
 8013242:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013246:	1c9a      	adds	r2, r3, #2
 8013248:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 801324c:	b20a      	sxth	r2, r1
 801324e:	801a      	strh	r2, [r3, #0]
					*dst3++ = *src3++ + input_offset;
 8013250:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8013254:	1c5a      	adds	r2, r3, #1
 8013256:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 801325a:	f993 3000 	ldrsb.w	r3, [r3]
 801325e:	b29a      	uxth	r2, r3
 8013260:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8013264:	b29b      	uxth	r3, r3
 8013266:	4413      	add	r3, r2
 8013268:	b299      	uxth	r1, r3
 801326a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801326e:	1c9a      	adds	r2, r3, #2
 8013270:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 8013274:	b20a      	sxth	r2, r1
 8013276:	801a      	strh	r2, [r3, #0]
					*dst3++ = *src3++ + input_offset;
 8013278:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801327c:	1c5a      	adds	r2, r3, #1
 801327e:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8013282:	f993 3000 	ldrsb.w	r3, [r3]
 8013286:	b29a      	uxth	r2, r3
 8013288:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801328c:	b29b      	uxth	r3, r3
 801328e:	4413      	add	r3, r2
 8013290:	b299      	uxth	r1, r3
 8013292:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013296:	1c9a      	adds	r2, r3, #2
 8013298:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 801329c:	b20a      	sxth	r2, r1
 801329e:	801a      	strh	r2, [r3, #0]
 80132a0:	e06b      	b.n	801337a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xd08>
				} else {						//first element is pad
												//3x3 = 9 elements
					src2 = input;
 80132a2:	f107 030c 	add.w	r3, r7, #12
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
					src3 = src2 + input_row_offset;
 80132ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80132b0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80132b4:	4413      	add	r3, r2
 80132b6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

					//pad the first one: 1x1 = 1
					*dst2++ = pad_out;
 80132ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80132be:	1c9a      	adds	r2, r3, #2
 80132c0:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80132c4:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 80132c8:	801a      	strh	r2, [r3, #0]
					*dst3++ = pad_out;
 80132ca:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80132ce:	1c9a      	adds	r2, r3, #2
 80132d0:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 80132d4:	f8b7 2286 	ldrh.w	r2, [r7, #646]	; 0x286
 80132d8:	801a      	strh	r2, [r3, #0]
					//load 6 elements
					*dst2++ = *src2++ + input_offset;
 80132da:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 80132e4:	f993 3000 	ldrsb.w	r3, [r3]
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	4413      	add	r3, r2
 80132f2:	b299      	uxth	r1, r3
 80132f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80132f8:	1c9a      	adds	r2, r3, #2
 80132fa:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80132fe:	b20a      	sxth	r2, r1
 8013300:	801a      	strh	r2, [r3, #0]
					*dst2++ = *src2++ + input_offset;
 8013302:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013306:	1c5a      	adds	r2, r3, #1
 8013308:	f8c7 2238 	str.w	r2, [r7, #568]	; 0x238
 801330c:	f993 3000 	ldrsb.w	r3, [r3]
 8013310:	b29a      	uxth	r2, r3
 8013312:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8013316:	b29b      	uxth	r3, r3
 8013318:	4413      	add	r3, r2
 801331a:	b299      	uxth	r1, r3
 801331c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013320:	1c9a      	adds	r2, r3, #2
 8013322:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8013326:	b20a      	sxth	r2, r1
 8013328:	801a      	strh	r2, [r3, #0]
					//
					*dst3++ = *src3++ + input_offset;
 801332a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801332e:	1c5a      	adds	r2, r3, #1
 8013330:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8013334:	f993 3000 	ldrsb.w	r3, [r3]
 8013338:	b29a      	uxth	r2, r3
 801333a:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801333e:	b29b      	uxth	r3, r3
 8013340:	4413      	add	r3, r2
 8013342:	b299      	uxth	r1, r3
 8013344:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013348:	1c9a      	adds	r2, r3, #2
 801334a:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 801334e:	b20a      	sxth	r2, r1
 8013350:	801a      	strh	r2, [r3, #0]
					*dst3++ = *src3++ + input_offset;
 8013352:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8013356:	1c5a      	adds	r2, r3, #1
 8013358:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 801335c:	f993 3000 	ldrsb.w	r3, [r3]
 8013360:	b29a      	uxth	r2, r3
 8013362:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8013366:	b29b      	uxth	r3, r3
 8013368:	4413      	add	r3, r2
 801336a:	b299      	uxth	r1, r3
 801336c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8013370:	1c9a      	adds	r2, r3, #2
 8013372:	f8c7 2240 	str.w	r2, [r7, #576]	; 0x240
 8013376:	b20a      	sxth	r2, r1
 8013378:	801a      	strh	r2, [r3, #0]
				}
			}

			two_column_buf += 9;
 801337a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 801337e:	3312      	adds	r3, #18
 8013380:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
			/* Computation is filed for every 2 columns */
			if (two_column_buf == runtime_buf + 2 * 9) {
 8013384:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8013388:	3324      	adds	r3, #36	; 0x24
 801338a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 801338e:	429a      	cmp	r2, r3
 8013390:	d12e      	bne.n	80133f0 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xd7e>

				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 8013392:	f8b7 12f0 	ldrh.w	r1, [r7, #752]	; 0x2f0
						output_ch, scales, output_offset, output_activation_min,
						output_activation_max, input_ch * kernel_y * kernel_x,
 8013396:	1dbb      	adds	r3, r7, #6
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801339e:	fb02 f303 	mul.w	r3, r2, r3
				out = mat_mult_kernel3_input3_s8_s16_fpreq(kernel, runtime_buf,
 80133a2:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80133a6:	fb02 f303 	mul.w	r3, r2, r3
 80133aa:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80133ae:	9206      	str	r2, [sp, #24]
 80133b0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80133b4:	9205      	str	r2, [sp, #20]
 80133b6:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80133ba:	9204      	str	r2, [sp, #16]
 80133bc:	9303      	str	r3, [sp, #12]
 80133be:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80133c2:	9302      	str	r3, [sp, #8]
 80133c4:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80133c8:	9301      	str	r3, [sp, #4]
 80133ca:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80133d4:	460a      	mov	r2, r1
 80133d6:	f8d7 12f4 	ldr.w	r1, [r7, #756]	; 0x2f4
 80133da:	f8d7 02c8 	ldr.w	r0, [r7, #712]	; 0x2c8
 80133de:	f001 fd06 	bl	8014dee <mat_mult_kernel3_input3_s8_s16_fpreq>
 80133e2:	4603      	mov	r3, r0
 80133e4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						bias, out, kbuf);

				/* counter reset */
				two_column_buf = runtime_buf;
 80133e8:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80133ec:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
		for (i_out_x = 0; i_out_x < output_x; i_out_x++) {
 80133f0:	f9b7 32b4 	ldrsh.w	r3, [r7, #692]	; 0x2b4
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	3301      	adds	r3, #1
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	f8a7 32b4 	strh.w	r3, [r7, #692]	; 0x2b4
 80133fe:	f9b7 22b4 	ldrsh.w	r2, [r7, #692]	; 0x2b4
 8013402:	f8b7 32e8 	ldrh.w	r3, [r7, #744]	; 0x2e8
 8013406:	429a      	cmp	r2, r3
 8013408:	f6ff ace8 	blt.w	8012ddc <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x76a>
	for (i_out_y = 0; i_out_y < output_y; i_out_y++) {
 801340c:	f9b7 32b6 	ldrsh.w	r3, [r7, #694]	; 0x2b6
 8013410:	b29b      	uxth	r3, r3
 8013412:	3301      	adds	r3, #1
 8013414:	b29b      	uxth	r3, r3
 8013416:	f8a7 32b6 	strh.w	r3, [r7, #694]	; 0x2b6
 801341a:	f9b7 22b6 	ldrsh.w	r2, [r7, #694]	; 0x2b6
 801341e:	f8b7 32ec 	ldrh.w	r3, [r7, #748]	; 0x2ec
 8013422:	429a      	cmp	r2, r3
 8013424:	f6ff acd6 	blt.w	8012dd4 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x762>
			}
		}
	}

	/* left-over because odd number of output pixels IT'S DOING 125 X 9 ALLOCATIONS, BUT OPERATES EVERY PAIR, 125TH WILL NOT HAVE THE OPERATION */
	if (two_column_buf != runtime_buf) {
 8013428:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 801342c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8013430:	429a      	cmp	r2, r3
 8013432:	f000 81fa 	beq.w	801382a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x11b8>
		const q7_t *ker_a = kernel;
 8013436:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801343a:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
		int i;

		for (i = 0; i < output_ch; i++) {
 801343e:	2300      	movs	r3, #0
 8013440:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8013444:	e1ea      	b.n	801381c <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x11aa>
			/* Load the accumulator with bias first */
			q31_t sum = bias[i];
 8013446:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8013450:	4413      	add	r3, r2
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 8013458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801345c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8013460:	601a      	str	r2, [r3, #0]

			/* 4 multiply and accumulates are done in one loop. */
			uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2; //1x3x3 = 9 1001, >> 2 = 10 = 2
 8013462:	1dbb      	adds	r3, r7, #6
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 801346a:	fb02 f303 	mul.w	r3, r2, r3
 801346e:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8013472:	fb02 f303 	mul.w	r3, r2, r3
 8013476:	109b      	asrs	r3, r3, #2
 8013478:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296

			while (col_count) {
 801347c:	e14d      	b.n	801371a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x10a8>
 801347e:	f107 0320 	add.w	r3, r7, #32
 8013482:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8013486:	601a      	str	r2, [r3, #0]
 8013488:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801348c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013496:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801349a:	601a      	str	r2, [r3, #0]
 801349c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80134a0:	f107 0220 	add.w	r2, r7, #32
 80134a4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80134a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	461a      	mov	r2, r3
 80134b2:	f107 031c 	add.w	r3, r7, #28
 80134b6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80134b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	1d1a      	adds	r2, r3, #4
 80134c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	601a      	str	r2, [r3, #0]
    return (val);
 80134ca:	f107 031c 	add.w	r3, r7, #28
 80134ce:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80134d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80134d4:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16_RORn((uint32_t)inA, 8);
 80134d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80134da:	681a      	ldr	r2, [r3, #0]
 80134dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80134e6:	2208      	movs	r2, #8
 80134e8:	601a      	str	r2, [r3, #0]
 80134ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80134ee:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80134f2:	6812      	ldr	r2, [r2, #0]
 80134f4:	601a      	str	r2, [r3, #0]
 80134f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80134fa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80134fe:	6812      	ldr	r2, [r2, #0]
 8013500:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013502:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013506:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801350a:	6812      	ldr	r2, [r2, #0]
 801350c:	f002 021f 	and.w	r2, r2, #31
 8013510:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013512:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d103      	bne.n	8013524 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xeb2>
    return op1;
 801351c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	e007      	b.n	8013534 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xec2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013524:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8013528:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801352c:	6812      	ldr	r2, [r2, #0]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	fa62 f303 	ror.w	r3, r2, r3
 8013534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013538:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801353a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	fa2f f283 	sxtb16	r2, r3
 8013544:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013548:	601a      	str	r2, [r3, #0]
  return(result);
 801354a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801354e:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 8013550:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013554:	601a      	str	r2, [r3, #0]
  return result;
 8013556:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013560:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8013562:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801356c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801356e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	fa2f f283 	sxtb16	r2, r3
 8013578:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801357c:	601a      	str	r2, [r3, #0]
  return(result);
 801357e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013588:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 801358a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801358e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8013592:	6812      	ldr	r2, [r2, #0]
 8013594:	601a      	str	r2, [r3, #0]
 8013596:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801359a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801359e:	6812      	ldr	r2, [r2, #0]
 80135a0:	601a      	str	r2, [r3, #0]
 80135a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80135ac:	6812      	ldr	r2, [r2, #0]
 80135ae:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 80135b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80135b6:	601a      	str	r2, [r3, #0]
 80135b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	461a      	mov	r2, r3
 80135c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80135c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80135cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80135d0:	6812      	ldr	r2, [r2, #0]
 80135d2:	601a      	str	r2, [r3, #0]
 80135d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80135d8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80135dc:	6812      	ldr	r2, [r2, #0]
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80135ea:	6812      	ldr	r2, [r2, #0]
 80135ec:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 80135f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80135f4:	601a      	str	r2, [r3, #0]
 80135f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	461a      	mov	r2, r3
 80135fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	601a      	str	r2, [r3, #0]
    return source;
 8013606:	f107 0320 	add.w	r3, r7, #32
 801360a:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t ip_b1, ip_b2;

				ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 801360c:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8013610:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013614:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013618:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801361a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	461a      	mov	r2, r3
 8013626:	f107 0318 	add.w	r3, r7, #24
 801362a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801362c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	1d1a      	adds	r2, r3, #4
 8013636:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	601a      	str	r2, [r3, #0]
    return (val);
 801363e:	f107 0318 	add.w	r3, r7, #24
 8013642:	681b      	ldr	r3, [r3, #0]

				ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8013644:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				sum = __SMLAD(ker_a1, ip_b1, sum);
 8013648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	4618      	mov	r0, r3
 8013650:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8013654:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8013658:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801365c:	6018      	str	r0, [r3, #0]
 801365e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013662:	6019      	str	r1, [r3, #0]
 8013664:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801366a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8013674:	6812      	ldr	r2, [r2, #0]
 8013676:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 801367a:	6809      	ldr	r1, [r1, #0]
 801367c:	fb23 1202 	smlad	r2, r3, r2, r1
 8013680:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013684:	601a      	str	r2, [r3, #0]
  return(result);
 8013686:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8013690:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013694:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013698:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801369a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	461a      	mov	r2, r3
 80136a6:	f107 0314 	add.w	r3, r7, #20
 80136aa:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80136ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	1d1a      	adds	r2, r3, #4
 80136b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	601a      	str	r2, [r3, #0]
    return (val);
 80136be:	f107 0314 	add.w	r3, r7, #20
 80136c2:	681b      	ldr	r3, [r3, #0]
				ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 80136c4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
				sum = __SMLAD(ker_a2, ip_b2, sum);
 80136c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	4618      	mov	r0, r3
 80136d0:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80136d4:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80136d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80136dc:	6018      	str	r0, [r3, #0]
 80136de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80136e2:	6019      	str	r1, [r3, #0]
 80136e4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80136e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80136ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80136f4:	6812      	ldr	r2, [r2, #0]
 80136f6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80136fa:	6809      	ldr	r1, [r1, #0]
 80136fc:	fb23 1202 	smlad	r2, r3, r2, r1
 8013700:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013704:	601a      	str	r2, [r3, #0]
  return(result);
 8013706:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298

				col_count--;
 8013710:	f8b7 3296 	ldrh.w	r3, [r7, #662]	; 0x296
 8013714:	3b01      	subs	r3, #1
 8013716:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
			while (col_count) {
 801371a:	f8b7 3296 	ldrh.w	r3, [r7, #662]	; 0x296
 801371e:	2b00      	cmp	r3, #0
 8013720:	f47f aead 	bne.w	801347e <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xe0c>
			}
			/* Handle left over mac */
			col_count = input_ch * kernel_y * kernel_x & 0x3;
 8013724:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8013728:	b29b      	uxth	r3, r3
 801372a:	1dba      	adds	r2, r7, #6
 801372c:	8812      	ldrh	r2, [r2, #0]
 801372e:	fb12 f303 	smulbb	r3, r2, r3
 8013732:	b29a      	uxth	r2, r3
 8013734:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8013738:	b29b      	uxth	r3, r3
 801373a:	fb12 f303 	smulbb	r3, r2, r3
 801373e:	b29b      	uxth	r3, r3
 8013740:	f003 0303 	and.w	r3, r3, #3
 8013744:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
			while (col_count) {
 8013748:	e021      	b.n	801378e <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x111c>
				q7_t ker_a1 = *ker_a++;
 801374a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801374e:	1c5a      	adds	r2, r3, #1
 8013750:	f8c7 22a0 	str.w	r2, [r7, #672]	; 0x2a0
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
				q15_t ip_b1 = *ip_as_col++;
 801375a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	1c99      	adds	r1, r3, #2
 8013762:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013766:	6011      	str	r1, [r2, #0]
 8013768:	881b      	ldrh	r3, [r3, #0]
 801376a:	f8a7 3260 	strh.w	r3, [r7, #608]	; 0x260
				sum += ker_a1 * ip_b1;
 801376e:	f997 3263 	ldrsb.w	r3, [r7, #611]	; 0x263
 8013772:	f9b7 2260 	ldrsh.w	r2, [r7, #608]	; 0x260
 8013776:	fb02 f303 	mul.w	r3, r2, r3
 801377a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801377e:	4413      	add	r3, r2
 8013780:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
				col_count--;
 8013784:	f8b7 3296 	ldrh.w	r3, [r7, #662]	; 0x296
 8013788:	3b01      	subs	r3, #1
 801378a:	f8a7 3296 	strh.w	r3, [r7, #662]	; 0x296
			while (col_count) {
 801378e:	f8b7 3296 	ldrh.w	r3, [r7, #662]	; 0x296
 8013792:	2b00      	cmp	r3, #0
 8013794:	d1d9      	bne.n	801374a <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0x10d8>
			}

			sum = MAX(sum, 0); //ReLU
 8013796:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801379a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801379e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
			sum = (float) sum * scales[i];
 80137a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80137a6:	ee07 3a90 	vmov	s15, r3
 80137aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80137ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80137b8:	4413      	add	r3, r2
 80137ba:	edd3 7a00 	vldr	s15, [r3]
 80137be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137c6:	ee17 3a90 	vmov	r3, s15
 80137ca:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
			sum += output_offset; //Output offset is the next layer input zero
 80137ce:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80137d2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80137d6:	4413      	add	r3, r2
 80137d8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
			sum = MAX(sum, output_activation_min);
 80137dc:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80137e0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80137e4:	4293      	cmp	r3, r2
 80137e6:	bfb8      	it	lt
 80137e8:	4613      	movlt	r3, r2
 80137ea:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
			sum = MIN(sum, output_activation_max);
 80137ee:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 80137f2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80137f6:	4293      	cmp	r3, r2
 80137f8:	bfa8      	it	ge
 80137fa:	4613      	movge	r3, r2
 80137fc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
			*out++ = (q7_t) sum;
 8013800:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8013804:	1c5a      	adds	r2, r3, #1
 8013806:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 801380a:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 801380e:	b252      	sxtb	r2, r2
 8013810:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < output_ch; i++) {
 8013812:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8013816:	3301      	adds	r3, #1
 8013818:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 801381c:	f8b7 32f0 	ldrh.w	r3, [r7, #752]	; 0x2f0
 8013820:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8013824:	429a      	cmp	r2, r3
 8013826:	f6ff ae0e 	blt.w	8013446 <convolve_s8_kernel3_inputch1_stride2_pad1_fpreq+0xdd4>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 801382a:	2300      	movs	r3, #0
}
 801382c:	4618      	mov	r0, r3
 801382e:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8013832:	46bd      	mov	sp, r7
 8013834:	bd90      	pop	{r4, r7, pc}

08013836 <mat_mult_kernel_s8_s16_reordered_fpreq>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0) {
 8013836:	b490      	push	{r4, r7}
 8013838:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 801383c:	af00      	add	r7, sp, #0
 801383e:	f107 040c 	add.w	r4, r7, #12
 8013842:	6020      	str	r0, [r4, #0]
 8013844:	f107 0008 	add.w	r0, r7, #8
 8013848:	6001      	str	r1, [r0, #0]
 801384a:	4611      	mov	r1, r2
 801384c:	463a      	mov	r2, r7
 801384e:	6013      	str	r3, [r2, #0]
 8013850:	1dbb      	adds	r3, r7, #6
 8013852:	460a      	mov	r2, r1
 8013854:	801a      	strh	r2, [r3, #0]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8013856:	1dbb      	adds	r3, r7, #6
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801385e:	4413      	add	r3, r2
 8013860:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	const int32_t *bias = output_bias;
 8013864:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8013868:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

	uint16_t row_count = output_ch / 2;
 801386c:	1dbb      	adds	r3, r7, #6
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	085b      	lsrs	r3, r3, #1
 8013872:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	const q7_t *ip_a0 = input_a;
 8013876:	f107 030c 	add.w	r3, r7, #12
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	/* this loop over rows in A (Kernel) */
	while (row_count) {
 8013880:	e362      	b.n	8013f48 <mat_mult_kernel_s8_s16_reordered_fpreq+0x712>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
 8013882:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013886:	f107 0208 	add.w	r2, r7, #8
 801388a:	6812      	ldr	r2, [r2, #0]
 801388c:	601a      	str	r2, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a; //+ input_channels
 801388e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	441a      	add	r2, r3
 801389c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80138a0:	601a      	str	r2, [r3, #0]

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 80138a2:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80138a6:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80138aa:	4413      	add	r3, r2
 80138ac:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
		const float scale_0 = scales[0];
 80138b0:	463b      	mov	r3, r7
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		const float scale_1 = scales[1];
 80138ba:	463b      	mov	r3, r7
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 80138c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		q31_t ch_0_out_1 = *bias++;
 80138ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80138d2:	1d1a      	adds	r2, r3, #4
 80138d4:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		q31_t ch_1_out_0 = *bias;
 80138de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		q31_t ch_1_out_1 = *bias++;
 80138e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80138ec:	1d1a      	adds	r2, r3, #4
 80138ee:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

		uint16_t col_count = num_col_a / 4;
 80138f8:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80138fc:	089b      	lsrs	r3, r3, #2
 80138fe:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
		/* accumulate over the vector */
		while (col_count) {
 8013902:	e22b      	b.n	8013d5c <mat_mult_kernel_s8_s16_reordered_fpreq+0x526>
 8013904:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8013908:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801390c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801390e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	461a      	mov	r2, r3
 801391a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801391e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013920:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	1d1a      	adds	r2, r3, #4
 801392a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	601a      	str	r2, [r3, #0]
    return (val);
 8013932:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013936:	681b      	ldr	r3, [r3, #0]
			q31_t a01, a02, a11, a12; //Each one of this is a weight (a[out_ch][in_ch])
			q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8013938:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 801393c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013940:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8013944:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8013946:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	461a      	mov	r2, r3
 8013952:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013956:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013958:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	1d1a      	adds	r2, r3, #4
 8013962:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	601a      	str	r2, [r3, #0]
    return (val);
 801396a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801396e:	681b      	ldr	r3, [r3, #0]
			q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8013970:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8013974:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013978:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801397c:	601a      	str	r2, [r3, #0]
 801397e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013982:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801398c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013990:	601a      	str	r2, [r3, #0]
 8013992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013996:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801399a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801399c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	461a      	mov	r2, r3
 80139a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80139ac:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80139ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	1d1a      	adds	r2, r3, #4
 80139b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	601a      	str	r2, [r3, #0]
    return (val);
 80139c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80139c4:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80139c6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80139ca:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 80139cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80139dc:	2208      	movs	r2, #8
 80139de:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80139e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80139e4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80139e8:	6812      	ldr	r2, [r2, #0]
 80139ea:	f002 021f 	and.w	r2, r2, #31
 80139ee:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80139f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d103      	bne.n	8013a02 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1cc>
    return op1;
 80139fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	e007      	b.n	8013a12 <mat_mult_kernel_s8_s16_reordered_fpreq+0x1dc>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013a02:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8013a06:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013a0a:	6812      	ldr	r2, [r2, #0]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	fa62 f303 	ror.w	r3, r2, r3
 8013a12:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8013a16:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013a18:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	fa2f f283 	sxtb16	r2, r3
 8013a22:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8013a26:	601a      	str	r2, [r3, #0]
  return(result);
 8013a28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	461a      	mov	r2, r3
 8013a30:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8013a38:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013a42:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013a44:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	fa2f f283 	sxtb16	r2, r3
 8013a4e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8013a52:	601a      	str	r2, [r3, #0]
  return(result);
 8013a54:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	601a      	str	r2, [r3, #0]
    return source;
 8013a64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013a68:	681b      	ldr	r3, [r3, #0]

			ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 8013a6a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

			ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8013a6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	4619      	mov	r1, r3
 8013a76:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013a7e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8013a82:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8013a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a8e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8013a92:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013a96:	fb23 1302 	smlad	r3, r3, r2, r1
 8013a9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  return(result);
 8013a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013aa2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8013aa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013aaa:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8013aae:	601a      	str	r2, [r3, #0]
 8013ab0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013ab4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8013ab8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013abc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ac4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    memcpy(&val, *in_q7, 4);
 8013ac8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ad6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013ad8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	1d1a      	adds	r2, r3, #4
 8013ae0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013ae4:	601a      	str	r2, [r3, #0]
    return (val);
 8013ae6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013aea:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8013aec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8013af0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013af4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8013af8:	2308      	movs	r3, #8
 8013afa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  op2 %= 32U;
 8013afe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013b02:	f003 031f 	and.w	r3, r3, #31
 8013b06:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (op2 == 0U)
 8013b0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d102      	bne.n	8013b18 <mat_mult_kernel_s8_s16_reordered_fpreq+0x2e2>
    return op1;
 8013b12:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013b16:	e005      	b.n	8013b24 <mat_mult_kernel_s8_s16_reordered_fpreq+0x2ee>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013b18:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013b1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013b20:	fa62 f303 	ror.w	r3, r2, r3
 8013b24:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013b28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013b2c:	fa2f f383 	sxtb16	r3, r3
 8013b30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return(result);
 8013b34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013b38:	461a      	mov	r2, r3
 8013b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b3e:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8013b40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013b44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8013b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013b4c:	fa2f f383 	sxtb16	r3, r3
 8013b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return(result);
 8013b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013b58:	461a      	mov	r2, r3
 8013b5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8013b5e:	601a      	str	r2, [r3, #0]
    return source;
 8013b60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b64:	681b      	ldr	r3, [r3, #0]
			ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
 8013b66:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
			ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8013b6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4619      	mov	r1, r3
 8013b72:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013b76:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013b7a:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8013b7e:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8013b82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013b86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8013b8a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8013b8e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8013b92:	fb23 1302 	smlad	r3, r3, r2, r1
 8013b96:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  return(result);
 8013b9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8013b9e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8013ba2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	4619      	mov	r1, r3
 8013baa:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8013bb2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8013bb6:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8013bba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013bbe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8013bc2:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8013bc6:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8013bca:	fb23 1302 	smlad	r3, r3, r2, r1
 8013bce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return(result);
 8013bd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8013bd6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8013bda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013bde:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    memcpy(&val, *in_q15, 4);
 8013be2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	461a      	mov	r2, r3
 8013bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013bf0:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013bf2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	1d1a      	adds	r2, r3, #4
 8013bfa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013bfe:	601a      	str	r2, [r3, #0]
    return (val);
 8013c00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c04:	681b      	ldr	r3, [r3, #0]
			b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8013c06:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8013c0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4619      	mov	r1, r3
 8013c12:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013c16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013c1a:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8013c1e:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8013c22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013c26:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013c2a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8013c2e:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8013c32:	fb23 1302 	smlad	r3, r3, r2, r1
 8013c36:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8013c3a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013c3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8013c42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013c46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    memcpy(&val, *in_q15, 4);
 8013c4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	461a      	mov	r2, r3
 8013c54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013c58:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013c5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	1d1a      	adds	r2, r3, #4
 8013c62:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013c66:	601a      	str	r2, [r3, #0]
    return (val);
 8013c68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013c6c:	681b      	ldr	r3, [r3, #0]

			b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8013c6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8013c72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4619      	mov	r1, r3
 8013c7a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013c82:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8013c86:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8013c8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013c8e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013c92:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013c96:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 8013c9a:	fb23 1302 	smlad	r3, r3, r2, r1
 8013c9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return(result);
 8013ca2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8013ca6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8013caa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013cb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013cba:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8013cbe:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8013cc2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013cc6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013cca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013cce:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8013cd2:	fb23 1302 	smlad	r3, r3, r2, r1
 8013cd6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  return(result);
 8013cda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8013cde:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8013ce2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	4619      	mov	r1, r3
 8013cea:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8013cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8013cf2:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8013cf6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8013cfa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013cfe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013d02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013d06:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8013d0a:	fb23 1302 	smlad	r3, r3, r2, r1
 8013d0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return(result);
 8013d12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8013d16:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8013d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4619      	mov	r1, r3
 8013d22:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013d26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013d2a:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8013d2e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8013d32:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013d36:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013d3a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8013d3e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8013d42:	fb23 1302 	smlad	r3, r3, r2, r1
 8013d46:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  return(result);
 8013d4a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013d4e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

			col_count--;
 8013d52:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	; 0x1f2
 8013d56:	3b01      	subs	r3, #1
 8013d58:	f8a7 31f2 	strh.w	r3, [r7, #498]	; 0x1f2
		while (col_count) {
 8013d5c:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	; 0x1f2
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	f47f adcf 	bne.w	8013904 <mat_mult_kernel_s8_s16_reordered_fpreq+0xce>
		} /* while over col_count */

		ch_0_out_0 = MAX(ch_0_out_0, 0); //ReLU
 8013d66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013d6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d6e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 8013d72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8013d76:	ee07 3a90 	vmov	s15, r3
 8013d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013d7e:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8013d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d8a:	ee17 3a90 	vmov	r3, s15
 8013d8e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		ch_0_out_0 += out_offset; //Output offset is the next layer input zero
 8013d92:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8013d96:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8013d9a:	4413      	add	r3, r2
 8013d9c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8013da0:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 8013da4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8013da8:	4293      	cmp	r3, r2
 8013daa:	bfb8      	it	lt
 8013dac:	4613      	movlt	r3, r2
 8013dae:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8013db2:	f9b7 3228 	ldrsh.w	r3, [r7, #552]	; 0x228
 8013db6:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	bfa8      	it	ge
 8013dbe:	4613      	movge	r3, r2
 8013dc0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		*out_0++ = (q7_t) ch_0_out_0;
 8013dc4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8013dc8:	1c5a      	adds	r2, r3, #1
 8013dca:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8013dce:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8013dd2:	b252      	sxtb	r2, r2
 8013dd4:	701a      	strb	r2, [r3, #0]

		ch_0_out_1 = MAX(ch_0_out_1, 0); //ReLU
 8013dd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013dda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013dde:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8013de2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8013de6:	ee07 3a90 	vmov	s15, r3
 8013dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013dee:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8013df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013dfa:	ee17 3a90 	vmov	r3, s15
 8013dfe:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		ch_0_out_1 += out_offset; //Output offset is the next layer input zero
 8013e02:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8013e06:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8013e0a:	4413      	add	r3, r2
 8013e0c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8013e10:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 8013e14:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	bfb8      	it	lt
 8013e1c:	4613      	movlt	r3, r2
 8013e1e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8013e22:	f9b7 3228 	ldrsh.w	r3, [r7, #552]	; 0x228
 8013e26:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	bfa8      	it	ge
 8013e2e:	4613      	movge	r3, r2
 8013e30:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
		*out_1++ = (q7_t) ch_0_out_1;
 8013e34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013e38:	1c5a      	adds	r2, r3, #1
 8013e3a:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8013e3e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8013e42:	b252      	sxtb	r2, r2
 8013e44:	701a      	strb	r2, [r3, #0]

		ch_1_out_0 = MAX(ch_1_out_0, 0); //ReLU
 8013e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8013e4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e4e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8013e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8013e56:	ee07 3a90 	vmov	s15, r3
 8013e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e5e:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8013e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e6a:	ee17 3a90 	vmov	r3, s15
 8013e6e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		ch_1_out_0 += out_offset; //Output offset is the next layer input zero
 8013e72:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8013e76:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8013e7a:	4413      	add	r3, r2
 8013e7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8013e80:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 8013e84:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	bfb8      	it	lt
 8013e8c:	4613      	movlt	r3, r2
 8013e8e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8013e92:	f9b7 3228 	ldrsh.w	r3, [r7, #552]	; 0x228
 8013e96:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	bfa8      	it	ge
 8013e9e:	4613      	movge	r3, r2
 8013ea0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		*out_0++ = (q7_t) ch_1_out_0;
 8013ea4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8013ea8:	1c5a      	adds	r2, r3, #1
 8013eaa:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 8013eae:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8013eb2:	b252      	sxtb	r2, r2
 8013eb4:	701a      	strb	r2, [r3, #0]

		ch_1_out_1 = MAX(ch_1_out_1, 0); //ReLU
 8013eb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013eba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ebe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8013ec2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013ec6:	ee07 3a90 	vmov	s15, r3
 8013eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ece:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8013ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013eda:	ee17 3a90 	vmov	r3, s15
 8013ede:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		ch_1_out_1 += out_offset; //Output offset is the next layer input zero
 8013ee2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013ee6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8013eea:	4413      	add	r3, r2
 8013eec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8013ef0:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 8013ef4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	bfb8      	it	lt
 8013efc:	4613      	movlt	r3, r2
 8013efe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8013f02:	f9b7 3228 	ldrsh.w	r3, [r7, #552]	; 0x228
 8013f06:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	bfa8      	it	ge
 8013f0e:	4613      	movge	r3, r2
 8013f10:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		*out_1++ = (q7_t) ch_1_out_1;
 8013f14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f18:	1c5a      	adds	r2, r3, #1
 8013f1a:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8013f1e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013f22:	b252      	sxtb	r2, r2
 8013f24:	701a      	strb	r2, [r3, #0]
		scales += 2;
 8013f26:	463b      	mov	r3, r7
 8013f28:	463a      	mov	r2, r7
 8013f2a:	6812      	ldr	r2, [r2, #0]
 8013f2c:	3208      	adds	r2, #8
 8013f2e:	601a      	str	r2, [r3, #0]

		/* skip row */
		ip_a0 += num_col_a;
 8013f30:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8013f34:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8013f38:	4413      	add	r3, r2
 8013f3a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		row_count--;
 8013f3e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8013f42:	3b01      	subs	r3, #1
 8013f44:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	while (row_count) {
 8013f48:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f47f ac98 	bne.w	8013882 <mat_mult_kernel_s8_s16_reordered_fpreq+0x4c>
	}

	if (output_ch & 1) {
 8013f52:	1dbb      	adds	r3, r7, #6
 8013f54:	881b      	ldrh	r3, [r3, #0]
 8013f56:	f003 0301 	and.w	r3, r3, #1
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f000 821b 	beq.w	8014396 <mat_mult_kernel_s8_s16_reordered_fpreq+0xb60>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
 8013f60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013f64:	f107 0208 	add.w	r2, r7, #8
 8013f68:	6812      	ldr	r2, [r2, #0]
 8013f6a:	601a      	str	r2, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8013f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8013f76:	005b      	lsls	r3, r3, #1
 8013f78:	441a      	add	r2, r3
 8013f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013f7e:	601a      	str	r2, [r3, #0]

		/* Init accumulator with bias for channel N + 1 */
		q31_t ch_0_out_0 = *bias;
 8013f80:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		q31_t ch_0_out_1 = ch_0_out_0;
 8013f8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f8e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

		int32_t col_count = num_col_a / 4;
 8013f92:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8013f96:	089b      	lsrs	r3, r3, #2
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		while (col_count) {
 8013f9e:	e181      	b.n	80142a4 <mat_mult_kernel_s8_s16_reordered_fpreq+0xa6e>
 8013fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013fa4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013fa8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8013faa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013fba:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013fbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	1d1a      	adds	r2, r3, #4
 8013fc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	601a      	str	r2, [r3, #0]
    return (val);
 8013fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013fd2:	681b      	ldr	r3, [r3, #0]
			q31_t a01, a02;
			q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8013fd4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8013fd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013fdc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013fe0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8013fe2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	461a      	mov	r2, r3
 8013fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ff2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8013ff4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	1d1a      	adds	r2, r3, #4
 8013ffe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	601a      	str	r2, [r3, #0]
    return (val);
 8014006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801400a:	681b      	ldr	r3, [r3, #0]
			q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801400c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8014010:	f107 0320 	add.w	r3, r7, #32
 8014014:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8014018:	601a      	str	r2, [r3, #0]
 801401a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801401e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014028:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801402c:	601a      	str	r2, [r3, #0]
 801402e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014032:	f107 0220 	add.w	r2, r7, #32
 8014036:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8014038:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	461a      	mov	r2, r3
 8014044:	f107 031c 	add.w	r3, r7, #28
 8014048:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801404a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	1d1a      	adds	r2, r3, #4
 8014054:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	601a      	str	r2, [r3, #0]
    return (val);
 801405c:	f107 031c 	add.w	r3, r7, #28
 8014060:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8014062:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014066:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8014068:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014072:	601a      	str	r2, [r3, #0]
 8014074:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014078:	2208      	movs	r2, #8
 801407a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801407c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014080:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014084:	6812      	ldr	r2, [r2, #0]
 8014086:	f002 021f 	and.w	r2, r2, #31
 801408a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801408c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d103      	bne.n	801409e <mat_mult_kernel_s8_s16_reordered_fpreq+0x868>
    return op1;
 8014096:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	e007      	b.n	80140ae <mat_mult_kernel_s8_s16_reordered_fpreq+0x878>
  return (op1 >> op2) | (op1 << (32U - op2));
 801409e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80140a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80140a6:	6812      	ldr	r2, [r2, #0]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	fa62 f303 	ror.w	r3, r2, r3
 80140ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80140b2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80140b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	fa2f f283 	sxtb16	r2, r3
 80140be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80140c2:	601a      	str	r2, [r3, #0]
  return(result);
 80140c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	461a      	mov	r2, r3
 80140cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80140d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80140d8:	681a      	ldr	r2, [r3, #0]
 80140da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80140de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80140e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	fa2f f283 	sxtb16	r2, r3
 80140ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80140ee:	601a      	str	r2, [r3, #0]
  return(result);
 80140f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	461a      	mov	r2, r3
 80140f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	601a      	str	r2, [r3, #0]
    return source;
 8014100:	f107 0320 	add.w	r3, r7, #32
 8014104:	681b      	ldr	r3, [r3, #0]

			ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 8014106:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

			ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 801410a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	4618      	mov	r0, r3
 8014112:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8014116:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801411a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801411e:	6018      	str	r0, [r3, #0]
 8014120:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014124:	6019      	str	r1, [r3, #0]
 8014126:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801412a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801412c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8014136:	6812      	ldr	r2, [r2, #0]
 8014138:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 801413c:	6809      	ldr	r1, [r1, #0]
 801413e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014142:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014146:	601a      	str	r2, [r3, #0]
  return(result);
 8014148:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
			ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8014152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	4618      	mov	r0, r3
 801415a:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 801415e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014162:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014166:	6018      	str	r0, [r3, #0]
 8014168:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801416c:	6019      	str	r1, [r3, #0]
 801416e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014172:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014174:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801417e:	6812      	ldr	r2, [r2, #0]
 8014180:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8014184:	6809      	ldr	r1, [r1, #0]
 8014186:	fb23 1202 	smlad	r2, r3, r2, r1
 801418a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801418e:	601a      	str	r2, [r3, #0]
  return(result);
 8014190:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801419a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801419e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80141a2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80141a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	461a      	mov	r2, r3
 80141b0:	f107 0318 	add.w	r3, r7, #24
 80141b4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80141b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	1d1a      	adds	r2, r3, #4
 80141c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	601a      	str	r2, [r3, #0]
    return (val);
 80141c8:	f107 0318 	add.w	r3, r7, #24
 80141cc:	681b      	ldr	r3, [r3, #0]

			b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80141ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80141d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80141d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80141da:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80141dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	461a      	mov	r2, r3
 80141e8:	f107 0314 	add.w	r3, r7, #20
 80141ec:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80141ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	1d1a      	adds	r2, r3, #4
 80141f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	601a      	str	r2, [r3, #0]
    return (val);
 8014200:	f107 0314 	add.w	r3, r7, #20
 8014204:	681b      	ldr	r3, [r3, #0]
			b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8014206:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 801420a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4618      	mov	r0, r3
 8014212:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8014216:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801421a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801421e:	6018      	str	r0, [r3, #0]
 8014220:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014224:	6019      	str	r1, [r3, #0]
 8014226:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801422a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801422c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8014236:	6812      	ldr	r2, [r2, #0]
 8014238:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 801423c:	6809      	ldr	r1, [r1, #0]
 801423e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014242:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014246:	601a      	str	r2, [r3, #0]
  return(result);
 8014248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8014252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	4618      	mov	r0, r3
 801425a:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 801425e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014262:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014266:	6018      	str	r0, [r3, #0]
 8014268:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801426c:	6019      	str	r1, [r3, #0]
 801426e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014272:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014274:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801427e:	6812      	ldr	r2, [r2, #0]
 8014280:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8014284:	6809      	ldr	r1, [r1, #0]
 8014286:	fb23 1202 	smlad	r2, r3, r2, r1
 801428a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801428e:	601a      	str	r2, [r3, #0]
  return(result);
 8014290:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

			col_count--;
 801429a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801429e:	3b01      	subs	r3, #1
 80142a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		while (col_count) {
 80142a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	f47f ae79 	bne.w	8013fa0 <mat_mult_kernel_s8_s16_reordered_fpreq+0x76a>
		} /* while over col_count */

		ch_0_out_0 = MAX(ch_0_out_0, 0); //ReLU
 80142ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80142b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80142b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * *scales);
 80142ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80142be:	ee07 3a90 	vmov	s15, r3
 80142c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80142c6:	463b      	mov	r3, r7
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	edd3 7a00 	vldr	s15, [r3]
 80142ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80142d6:	ee17 3a90 	vmov	r3, s15
 80142da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		ch_0_out_0 += out_offset; //Output offset is the next layer input zero
 80142de:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80142e2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80142e6:	4413      	add	r3, r2
 80142e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 80142ec:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 80142f0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80142f4:	4293      	cmp	r3, r2
 80142f6:	bfb8      	it	lt
 80142f8:	4613      	movlt	r3, r2
 80142fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80142fe:	f9b7 3228 	ldrsh.w	r3, [r7, #552]	; 0x228
 8014302:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014306:	4293      	cmp	r3, r2
 8014308:	bfa8      	it	ge
 801430a:	4613      	movge	r3, r2
 801430c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		*out_0++ = (q7_t) ch_0_out_0;
 8014310:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8014314:	1c5a      	adds	r2, r3, #1
 8014316:	f8c7 2234 	str.w	r2, [r7, #564]	; 0x234
 801431a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801431e:	b252      	sxtb	r2, r2
 8014320:	701a      	strb	r2, [r3, #0]

		ch_0_out_1 = MAX(ch_0_out_1, 0); //ReLU
 8014322:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801432a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * *scales);
 801432e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014332:	ee07 3a90 	vmov	s15, r3
 8014336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801433a:	463b      	mov	r3, r7
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	edd3 7a00 	vldr	s15, [r3]
 8014342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801434a:	ee17 3a90 	vmov	r3, s15
 801434e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		ch_0_out_1 += out_offset; //Output offset is the next layer input zero
 8014352:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014356:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801435a:	4413      	add	r3, r2
 801435c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8014360:	f9b7 3224 	ldrsh.w	r3, [r7, #548]	; 0x224
 8014364:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014368:	4293      	cmp	r3, r2
 801436a:	bfb8      	it	lt
 801436c:	4613      	movlt	r3, r2
 801436e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8014372:	f9b7 3228 	ldrsh.w	r3, [r7, #552]	; 0x228
 8014376:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801437a:	4293      	cmp	r3, r2
 801437c:	bfa8      	it	ge
 801437e:	4613      	movge	r3, r2
 8014380:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		*out_1++ = (q7_t) ch_0_out_1;
 8014384:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014388:	1c5a      	adds	r2, r3, #1
 801438a:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 801438e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014392:	b252      	sxtb	r2, r2
 8014394:	701a      	strb	r2, [r3, #0]
	}

	out_0 += output_ch;
 8014396:	1dbb      	adds	r3, r7, #6
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801439e:	4413      	add	r3, r2
 80143a0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

	/* return the new output pointer with offset */
	return out_0;
 80143a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bc90      	pop	{r4, r7}
 80143b2:	4770      	bx	lr

080143b4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask>:

q7_t* mat_mult_kernel_s8_s16_reordered_fpreq_bitmask(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q7_t *mask) {
 80143b4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80143b8:	b0e6      	sub	sp, #408	; 0x198
 80143ba:	af00      	add	r7, sp, #0
 80143bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80143c0:	6020      	str	r0, [r4, #0]
 80143c2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80143c6:	6001      	str	r1, [r0, #0]
 80143c8:	4611      	mov	r1, r2
 80143ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143ce:	6013      	str	r3, [r2, #0]
 80143d0:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80143d4:	460b      	mov	r3, r1
 80143d6:	8013      	strh	r3, [r2, #0]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 80143d8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80143dc:	881a      	ldrh	r2, [r3, #0]
 80143de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80143e2:	4413      	add	r3, r2
 80143e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	q7_t *mask1 = mask + output_ch / 8;
 80143e8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	08db      	lsrs	r3, r3, #3
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	461a      	mov	r2, r3
 80143f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80143f8:	4413      	add	r3, r2
 80143fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	const int32_t *bias = output_bias;
 80143fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8014402:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

	uint16_t row_count = output_ch / 2;
 8014406:	f107 0336 	add.w	r3, r7, #54	; 0x36
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	085b      	lsrs	r3, r3, #1
 801440e:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
	const q7_t *ip_a0 = input_a;
 8014412:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int bit_starting_idx = 0;
 801441c:	2300      	movs	r3, #0
 801441e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	/* this loop over rows in A */
	while (row_count) {
 8014422:	f000 bcce 	b.w	8014dc2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xa0e>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
 8014426:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801442a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	6013      	str	r3, [r2, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8014432:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	441a      	add	r2, r3
 8014440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014444:	601a      	str	r2, [r3, #0]

		/* align the second pointer for A */
		const q7_t *ip_a1 = ip_a0 + num_col_a;
 8014446:	f8b7 21c4 	ldrh.w	r2, [r7, #452]	; 0x1c4
 801444a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801444e:	4413      	add	r3, r2
 8014450:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		const float scale_0 = scales[0];
 8014454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		const float scale_1 = scales[1];
 8014460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 801446c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		q31_t ch_0_out_1 = *bias++;
 8014476:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801447a:	1d13      	adds	r3, r2, #4
 801447c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8014480:	6813      	ldr	r3, [r2, #0]
 8014482:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		q31_t ch_1_out_0 = *bias;
 8014486:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		q31_t ch_1_out_1 = *bias++;
 8014490:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8014494:	1d13      	adds	r3, r2, #4
 8014496:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 801449a:	6813      	ldr	r3, [r2, #0]
 801449c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

		uint16_t col_count = num_col_a / 4;
 80144a0:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 80144a4:	089b      	lsrs	r3, r3, #2
 80144a6:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
		/* accumulate over the vector */
		while (col_count) {
 80144aa:	e222      	b.n	80148f2 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x53e>
 80144ac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80144b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80144b4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80144b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	461a      	mov	r2, r3
 80144c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80144c6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80144c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	1d1a      	adds	r2, r3, #4
 80144d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	601a      	str	r2, [r3, #0]
    return (val);
 80144da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80144de:	681b      	ldr	r3, [r3, #0]
			q31_t a01, a02, a11, a12;
			q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80144e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80144e4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80144e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80144ec:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80144ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	461a      	mov	r2, r3
 80144fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144fe:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014500:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	1d1a      	adds	r2, r3, #4
 801450a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	601a      	str	r2, [r3, #0]
    return (val);
 8014512:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014516:	681b      	ldr	r3, [r3, #0]
			q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8014518:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801451c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014520:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8014524:	6013      	str	r3, [r2, #0]
 8014526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801452a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801452e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014536:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801453a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    memcpy(&val, *in_q7, 4);
 801453e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	461a      	mov	r2, r3
 8014548:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801454c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801454e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	1d1a      	adds	r2, r3, #4
 8014556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801455a:	601a      	str	r2, [r3, #0]
    return (val);
 801455c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014560:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8014562:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014566:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8014568:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8014578:	2308      	movs	r3, #8
 801457a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801457c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8014580:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f003 031f 	and.w	r3, r3, #31
 801458a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801458c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d103      	bne.n	801459e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1ea>
    return op1;
 8014596:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	e006      	b.n	80145ac <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x1f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801459e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80145a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80145a6:	6812      	ldr	r2, [r2, #0]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	41da      	rors	r2, r3
 80145ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80145b0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80145b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	fa2f f283 	sxtb16	r2, r3
 80145bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80145c0:	601a      	str	r2, [r3, #0]
  return(result);
 80145c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	461a      	mov	r2, r3
 80145ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80145ce:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80145d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80145da:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80145dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	fa2f f283 	sxtb16	r2, r3
 80145e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80145ea:	601a      	str	r2, [r3, #0]
  return(result);
 80145ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	461a      	mov	r2, r3
 80145f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80145f8:	601a      	str	r2, [r3, #0]
    return source;
 80145fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80145fe:	681b      	ldr	r3, [r3, #0]

			ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 8014600:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

			ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8014604:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	4619      	mov	r1, r3
 801460c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8014610:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014614:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8014618:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801461c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014620:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8014624:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801462c:	fb21 3302 	smlad	r3, r1, r2, r3
 8014630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8014634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014638:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801463c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014640:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014644:	6013      	str	r3, [r2, #0]
 8014646:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801464a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801464e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801465a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memcpy(&val, *in_q7, 4);
 801465e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	461a      	mov	r2, r3
 8014668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801466c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801466e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	1d1a      	adds	r2, r3, #4
 8014676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801467a:	601a      	str	r2, [r3, #0]
    return (val);
 801467c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014680:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8014682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8014686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801468a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801468e:	2308      	movs	r3, #8
 8014690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  op2 %= 32U;
 8014694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014698:	f003 031f 	and.w	r3, r3, #31
 801469c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (op2 == 0U)
 80146a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d102      	bne.n	80146ae <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x2fa>
    return op1;
 80146a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80146ac:	e005      	b.n	80146ba <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x306>
  return (op1 >> op2) | (op1 << (32U - op2));
 80146ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80146b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80146b6:	fa62 f303 	ror.w	r3, r2, r3
 80146ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80146be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80146c2:	fa2f f383 	sxtb16	r3, r3
 80146c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 80146ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80146ce:	461a      	mov	r2, r3
 80146d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80146d4:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80146d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80146da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80146de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80146e2:	fa2f f383 	sxtb16	r3, r3
 80146e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80146ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80146ee:	461a      	mov	r2, r3
 80146f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80146f4:	601a      	str	r2, [r3, #0]
    return source;
 80146f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80146fa:	681b      	ldr	r3, [r3, #0]
			ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
 80146fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
			ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8014700:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	4619      	mov	r1, r3
 8014708:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801470c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014710:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8014714:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8014718:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801471c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8014720:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014728:	fb21 3302 	smlad	r3, r1, r2, r3
 801472c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 8014730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014734:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8014738:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	4619      	mov	r1, r3
 8014740:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8014744:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8014748:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 801474c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8014750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014754:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8014758:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014760:	fb21 3302 	smlad	r3, r1, r2, r3
 8014764:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8014768:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801476c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8014770:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014774:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    memcpy(&val, *in_q15, 4);
 8014778:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	461a      	mov	r2, r3
 8014782:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014786:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014788:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	1d1a      	adds	r2, r3, #4
 8014790:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014794:	601a      	str	r2, [r3, #0]
    return (val);
 8014796:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801479a:	681b      	ldr	r3, [r3, #0]
			b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801479c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 80147a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	4619      	mov	r1, r3
 80147a8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80147ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80147b0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80147b4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80147b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80147bc:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80147c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80147c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80147c8:	fb21 3302 	smlad	r3, r1, r2, r3
 80147cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  return(result);
 80147d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80147d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80147d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80147dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    memcpy(&val, *in_q15, 4);
 80147e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	461a      	mov	r2, r3
 80147ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80147ee:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80147f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	1d1a      	adds	r2, r3, #4
 80147f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80147fc:	601a      	str	r2, [r3, #0]
    return (val);
 80147fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014802:	681b      	ldr	r3, [r3, #0]

			b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8014804:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8014808:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	4619      	mov	r1, r3
 8014810:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8014814:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014818:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 801481c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8014820:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014824:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8014828:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801482c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014830:	fb21 3302 	smlad	r3, r1, r2, r3
 8014834:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8014838:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801483c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8014840:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4619      	mov	r1, r3
 8014848:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801484c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014850:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8014854:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8014858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801485c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8014860:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8014864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014868:	fb21 3302 	smlad	r3, r1, r2, r3
 801486c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8014870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014874:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8014878:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	4619      	mov	r1, r3
 8014880:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8014884:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8014888:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 801488c:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8014890:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014894:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8014898:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801489c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80148a0:	fb21 3302 	smlad	r3, r1, r2, r3
 80148a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80148a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80148ac:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 80148b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	4619      	mov	r1, r3
 80148b8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80148bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80148c0:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80148c4:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80148c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80148cc:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80148d0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80148d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80148d8:	fb21 3302 	smlad	r3, r1, r2, r3
 80148dc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 80148e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80148e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

			col_count--;
 80148e8:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 80148ec:	3b01      	subs	r3, #1
 80148ee:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
		while (col_count) {
 80148f2:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	f47f add8 	bne.w	80144ac <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0xf8>
		} /* while over col_count */

		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0);
 80148fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014900:	ee07 3a90 	vmov	s15, r3
 8014904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014908:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 801490c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014914:	ee17 3a90 	vmov	r3, s15
 8014918:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		ch_0_out_0 += out_offset;
 801491c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8014920:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014924:	4413      	add	r3, r2
 8014926:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		q7_t mask_value = 1;
 801492a:	2301      	movs	r3, #1
 801492c:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		if (ch_0_out_0 < activation_min){
 8014930:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8014934:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014938:	4293      	cmp	r3, r2
 801493a:	da06      	bge.n	801494a <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x596>
			ch_0_out_0 = activation_min;
 801493c:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	; 0x1bc
 8014940:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			mask_value = 0;
 8014944:	2300      	movs	r3, #0
 8014946:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (ch_0_out_0 > activation_max){
 801494a:	f9b7 21c0 	ldrsh.w	r2, [r7, #448]	; 0x1c0
 801494e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014952:	4293      	cmp	r3, r2
 8014954:	dd06      	ble.n	8014964 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x5b0>
			ch_0_out_0 = activation_max;
 8014956:	f9b7 31c0 	ldrsh.w	r3, [r7, #448]	; 0x1c0
 801495a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			mask_value = 0;
 801495e:	2300      	movs	r3, #0
 8014960:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (mask_value == 1)
 8014964:	f997 3169 	ldrsb.w	r3, [r7, #361]	; 0x169
 8014968:	2b01      	cmp	r3, #1
 801496a:	d123      	bne.n	80149b4 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x600>
			BIT_SET(*mask, bit_starting_idx);
 801496c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014970:	f993 3000 	ldrsb.w	r3, [r3]
 8014974:	b2dd      	uxtb	r5, r3
 8014976:	f04f 0301 	mov.w	r3, #1
 801497a:	f04f 0400 	mov.w	r4, #0
 801497e:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8014982:	f1a0 0220 	sub.w	r2, r0, #32
 8014986:	f1c0 0120 	rsb	r1, r0, #32
 801498a:	fa04 f900 	lsl.w	r9, r4, r0
 801498e:	fa03 f202 	lsl.w	r2, r3, r2
 8014992:	ea49 0902 	orr.w	r9, r9, r2
 8014996:	fa23 f101 	lsr.w	r1, r3, r1
 801499a:	ea49 0901 	orr.w	r9, r9, r1
 801499e:	fa03 f800 	lsl.w	r8, r3, r0
 80149a2:	fa5f f388 	uxtb.w	r3, r8
 80149a6:	432b      	orrs	r3, r5
 80149a8:	b2db      	uxtb	r3, r3
 80149aa:	b25b      	sxtb	r3, r3
 80149ac:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80149b0:	7013      	strb	r3, [r2, #0]
 80149b2:	e027      	b.n	8014a04 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x650>
		else
			BIT_CLEAR(*mask, bit_starting_idx);
 80149b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80149b8:	f993 3000 	ldrsb.w	r3, [r3]
 80149bc:	b2dd      	uxtb	r5, r3
 80149be:	f04f 0301 	mov.w	r3, #1
 80149c2:	f04f 0400 	mov.w	r4, #0
 80149c6:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80149ca:	f1a0 0220 	sub.w	r2, r0, #32
 80149ce:	f1c0 0120 	rsb	r1, r0, #32
 80149d2:	fa04 f600 	lsl.w	r6, r4, r0
 80149d6:	62fe      	str	r6, [r7, #44]	; 0x2c
 80149d8:	fa03 f202 	lsl.w	r2, r3, r2
 80149dc:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 80149de:	4316      	orrs	r6, r2
 80149e0:	62fe      	str	r6, [r7, #44]	; 0x2c
 80149e2:	fa23 f101 	lsr.w	r1, r3, r1
 80149e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80149e8:	430a      	orrs	r2, r1
 80149ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80149ec:	4083      	lsls	r3, r0
 80149ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80149f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149f4:	43db      	mvns	r3, r3
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	402b      	ands	r3, r5
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	b25b      	sxtb	r3, r3
 80149fe:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014a02:	7013      	strb	r3, [r2, #0]
		*out_0++ = (q7_t) ch_0_out_0;
 8014a04:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8014a08:	1c53      	adds	r3, r2, #1
 8014a0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8014a0e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014a12:	b25b      	sxtb	r3, r3
 8014a14:	7013      	strb	r3, [r2, #0]


		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8014a16:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014a1a:	ee07 3a90 	vmov	s15, r3
 8014a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014a22:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8014a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a2e:	ee17 3a90 	vmov	r3, s15
 8014a32:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		ch_0_out_1 += out_offset;
 8014a36:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8014a3a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014a3e:	4413      	add	r3, r2
 8014a40:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		mask_value = 1;
 8014a44:	2301      	movs	r3, #1
 8014a46:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		if (ch_0_out_1 < activation_min){
 8014a4a:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8014a4e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014a52:	4293      	cmp	r3, r2
 8014a54:	da06      	bge.n	8014a64 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x6b0>
			ch_0_out_1 = activation_min;
 8014a56:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	; 0x1bc
 8014a5a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			mask_value = 0;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (ch_0_out_1 > activation_max){
 8014a64:	f9b7 21c0 	ldrsh.w	r2, [r7, #448]	; 0x1c0
 8014a68:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	dd06      	ble.n	8014a7e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x6ca>
			ch_0_out_1 = activation_max;
 8014a70:	f9b7 31c0 	ldrsh.w	r3, [r7, #448]	; 0x1c0
 8014a74:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			mask_value = 0;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (mask_value == 1)
 8014a7e:	f997 3169 	ldrsb.w	r3, [r7, #361]	; 0x169
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d123      	bne.n	8014ace <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x71a>
			BIT_SET(*mask1, bit_starting_idx);
 8014a86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8014a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8014a8e:	b2dd      	uxtb	r5, r3
 8014a90:	f04f 0301 	mov.w	r3, #1
 8014a94:	f04f 0400 	mov.w	r4, #0
 8014a98:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8014a9c:	f1a0 0220 	sub.w	r2, r0, #32
 8014aa0:	f1c0 0120 	rsb	r1, r0, #32
 8014aa4:	fa04 fb00 	lsl.w	fp, r4, r0
 8014aa8:	fa03 f202 	lsl.w	r2, r3, r2
 8014aac:	ea4b 0b02 	orr.w	fp, fp, r2
 8014ab0:	fa23 f101 	lsr.w	r1, r3, r1
 8014ab4:	ea4b 0b01 	orr.w	fp, fp, r1
 8014ab8:	fa03 fa00 	lsl.w	sl, r3, r0
 8014abc:	fa5f f38a 	uxtb.w	r3, sl
 8014ac0:	432b      	orrs	r3, r5
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	b25b      	sxtb	r3, r3
 8014ac6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8014aca:	7013      	strb	r3, [r2, #0]
 8014acc:	e027      	b.n	8014b1e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x76a>
		else
			BIT_CLEAR(*mask1, bit_starting_idx);
 8014ace:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8014ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8014ad6:	b2dd      	uxtb	r5, r3
 8014ad8:	f04f 0301 	mov.w	r3, #1
 8014adc:	f04f 0400 	mov.w	r4, #0
 8014ae0:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8014ae4:	f1a0 0220 	sub.w	r2, r0, #32
 8014ae8:	f1c0 0120 	rsb	r1, r0, #32
 8014aec:	fa04 f600 	lsl.w	r6, r4, r0
 8014af0:	627e      	str	r6, [r7, #36]	; 0x24
 8014af2:	fa03 f202 	lsl.w	r2, r3, r2
 8014af6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8014af8:	4316      	orrs	r6, r2
 8014afa:	627e      	str	r6, [r7, #36]	; 0x24
 8014afc:	fa23 f101 	lsr.w	r1, r3, r1
 8014b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b02:	430a      	orrs	r2, r1
 8014b04:	627a      	str	r2, [r7, #36]	; 0x24
 8014b06:	4083      	lsls	r3, r0
 8014b08:	623b      	str	r3, [r7, #32]
 8014b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014b0e:	43db      	mvns	r3, r3
 8014b10:	b2db      	uxtb	r3, r3
 8014b12:	402b      	ands	r3, r5
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	b25b      	sxtb	r3, r3
 8014b18:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8014b1c:	7013      	strb	r3, [r2, #0]
		*out_1++ = (q7_t) ch_0_out_1;
 8014b1e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8014b22:	1c53      	adds	r3, r2, #1
 8014b24:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8014b28:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014b2c:	b25b      	sxtb	r3, r3
 8014b2e:	7013      	strb	r3, [r2, #0]

		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 8014b30:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8014b34:	ee07 3a90 	vmov	s15, r3
 8014b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014b3c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8014b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b48:	ee17 3a90 	vmov	r3, s15
 8014b4c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_1_out_0 += out_offset;
 8014b50:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8014b54:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014b58:	4413      	add	r3, r2
 8014b5a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		mask_value = 1;
 8014b5e:	2301      	movs	r3, #1
 8014b60:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		if (ch_1_out_0 < activation_min){
 8014b64:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8014b68:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	da06      	bge.n	8014b7e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x7ca>
			ch_1_out_0 = activation_min;
 8014b70:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	; 0x1bc
 8014b74:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			mask_value = 0;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (ch_1_out_0 > activation_max){
 8014b7e:	f9b7 21c0 	ldrsh.w	r2, [r7, #448]	; 0x1c0
 8014b82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8014b86:	4293      	cmp	r3, r2
 8014b88:	dd06      	ble.n	8014b98 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x7e4>
			ch_1_out_0 = activation_max;
 8014b8a:	f9b7 31c0 	ldrsh.w	r3, [r7, #448]	; 0x1c0
 8014b8e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
			mask_value = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (mask_value == 1)
 8014b98:	f997 3169 	ldrsb.w	r3, [r7, #361]	; 0x169
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d126      	bne.n	8014bee <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x83a>
			BIT_SET(*mask, bit_starting_idx+1);
 8014ba0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8014ba8:	b2dd      	uxtb	r5, r3
 8014baa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014bae:	1c58      	adds	r0, r3, #1
 8014bb0:	f04f 0301 	mov.w	r3, #1
 8014bb4:	f04f 0400 	mov.w	r4, #0
 8014bb8:	f1a0 0220 	sub.w	r2, r0, #32
 8014bbc:	f1c0 0120 	rsb	r1, r0, #32
 8014bc0:	fa04 f600 	lsl.w	r6, r4, r0
 8014bc4:	61fe      	str	r6, [r7, #28]
 8014bc6:	fa03 f202 	lsl.w	r2, r3, r2
 8014bca:	69fe      	ldr	r6, [r7, #28]
 8014bcc:	4316      	orrs	r6, r2
 8014bce:	61fe      	str	r6, [r7, #28]
 8014bd0:	fa23 f101 	lsr.w	r1, r3, r1
 8014bd4:	69fa      	ldr	r2, [r7, #28]
 8014bd6:	430a      	orrs	r2, r1
 8014bd8:	61fa      	str	r2, [r7, #28]
 8014bda:	4083      	lsls	r3, r0
 8014bdc:	61bb      	str	r3, [r7, #24]
 8014bde:	7e3b      	ldrb	r3, [r7, #24]
 8014be0:	432b      	orrs	r3, r5
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	b25b      	sxtb	r3, r3
 8014be6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014bea:	7013      	strb	r3, [r2, #0]
 8014bec:	e027      	b.n	8014c3e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x88a>
		else
			BIT_CLEAR(*mask, bit_starting_idx+1);
 8014bee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8014bf6:	b2dd      	uxtb	r5, r3
 8014bf8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014bfc:	1c58      	adds	r0, r3, #1
 8014bfe:	f04f 0301 	mov.w	r3, #1
 8014c02:	f04f 0400 	mov.w	r4, #0
 8014c06:	f1a0 0220 	sub.w	r2, r0, #32
 8014c0a:	f1c0 0120 	rsb	r1, r0, #32
 8014c0e:	fa04 f600 	lsl.w	r6, r4, r0
 8014c12:	617e      	str	r6, [r7, #20]
 8014c14:	fa03 f202 	lsl.w	r2, r3, r2
 8014c18:	697e      	ldr	r6, [r7, #20]
 8014c1a:	4316      	orrs	r6, r2
 8014c1c:	617e      	str	r6, [r7, #20]
 8014c1e:	fa23 f101 	lsr.w	r1, r3, r1
 8014c22:	697a      	ldr	r2, [r7, #20]
 8014c24:	430a      	orrs	r2, r1
 8014c26:	617a      	str	r2, [r7, #20]
 8014c28:	4083      	lsls	r3, r0
 8014c2a:	613b      	str	r3, [r7, #16]
 8014c2c:	7c3b      	ldrb	r3, [r7, #16]
 8014c2e:	43db      	mvns	r3, r3
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	402b      	ands	r3, r5
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	b25b      	sxtb	r3, r3
 8014c38:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014c3c:	7013      	strb	r3, [r2, #0]
		*out_0++ = (q7_t) ch_1_out_0;
 8014c3e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8014c42:	1c53      	adds	r3, r2, #1
 8014c44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8014c48:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8014c4c:	b25b      	sxtb	r3, r3
 8014c4e:	7013      	strb	r3, [r2, #0]

		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8014c50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014c54:	ee07 3a90 	vmov	s15, r3
 8014c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014c5c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8014c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c68:	ee17 3a90 	vmov	r3, s15
 8014c6c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_1_out_1 += out_offset;
 8014c70:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8014c74:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014c78:	4413      	add	r3, r2
 8014c7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		mask_value = 1;
 8014c7e:	2301      	movs	r3, #1
 8014c80:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		if (ch_1_out_1 < activation_min){
 8014c84:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8014c88:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	da06      	bge.n	8014c9e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x8ea>
			ch_1_out_1 = activation_min;
 8014c90:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	; 0x1bc
 8014c94:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			mask_value = 0;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (ch_1_out_1 > activation_max){
 8014c9e:	f9b7 21c0 	ldrsh.w	r2, [r7, #448]	; 0x1c0
 8014ca2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	dd06      	ble.n	8014cb8 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x904>
			ch_1_out_1 = activation_max;
 8014caa:	f9b7 31c0 	ldrsh.w	r3, [r7, #448]	; 0x1c0
 8014cae:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			mask_value = 0;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	f887 3169 	strb.w	r3, [r7, #361]	; 0x169
		}
		if (mask_value == 1)
 8014cb8:	f997 3169 	ldrsb.w	r3, [r7, #361]	; 0x169
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d126      	bne.n	8014d0e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x95a>
			BIT_SET(*mask1, bit_starting_idx+1);
 8014cc0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8014cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8014cc8:	b2dd      	uxtb	r5, r3
 8014cca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014cce:	1c58      	adds	r0, r3, #1
 8014cd0:	f04f 0301 	mov.w	r3, #1
 8014cd4:	f04f 0400 	mov.w	r4, #0
 8014cd8:	f1a0 0220 	sub.w	r2, r0, #32
 8014cdc:	f1c0 0120 	rsb	r1, r0, #32
 8014ce0:	fa04 f600 	lsl.w	r6, r4, r0
 8014ce4:	60fe      	str	r6, [r7, #12]
 8014ce6:	fa03 f202 	lsl.w	r2, r3, r2
 8014cea:	68fe      	ldr	r6, [r7, #12]
 8014cec:	4316      	orrs	r6, r2
 8014cee:	60fe      	str	r6, [r7, #12]
 8014cf0:	fa23 f101 	lsr.w	r1, r3, r1
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	430a      	orrs	r2, r1
 8014cf8:	60fa      	str	r2, [r7, #12]
 8014cfa:	4083      	lsls	r3, r0
 8014cfc:	60bb      	str	r3, [r7, #8]
 8014cfe:	7a3b      	ldrb	r3, [r7, #8]
 8014d00:	432b      	orrs	r3, r5
 8014d02:	b2db      	uxtb	r3, r3
 8014d04:	b25b      	sxtb	r3, r3
 8014d06:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8014d0a:	7013      	strb	r3, [r2, #0]
 8014d0c:	e027      	b.n	8014d5e <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x9aa>
		else
			BIT_CLEAR(*mask1, bit_starting_idx+1);
 8014d0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8014d12:	f993 3000 	ldrsb.w	r3, [r3]
 8014d16:	b2dd      	uxtb	r5, r3
 8014d18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014d1c:	1c58      	adds	r0, r3, #1
 8014d1e:	f04f 0301 	mov.w	r3, #1
 8014d22:	f04f 0400 	mov.w	r4, #0
 8014d26:	f1a0 0220 	sub.w	r2, r0, #32
 8014d2a:	f1c0 0120 	rsb	r1, r0, #32
 8014d2e:	fa04 f600 	lsl.w	r6, r4, r0
 8014d32:	607e      	str	r6, [r7, #4]
 8014d34:	fa03 f202 	lsl.w	r2, r3, r2
 8014d38:	687e      	ldr	r6, [r7, #4]
 8014d3a:	4316      	orrs	r6, r2
 8014d3c:	607e      	str	r6, [r7, #4]
 8014d3e:	fa23 f101 	lsr.w	r1, r3, r1
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	430a      	orrs	r2, r1
 8014d46:	607a      	str	r2, [r7, #4]
 8014d48:	4083      	lsls	r3, r0
 8014d4a:	603b      	str	r3, [r7, #0]
 8014d4c:	783b      	ldrb	r3, [r7, #0]
 8014d4e:	43db      	mvns	r3, r3
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	402b      	ands	r3, r5
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	b25b      	sxtb	r3, r3
 8014d58:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8014d5c:	7013      	strb	r3, [r2, #0]
		*out_1++ = (q7_t) ch_1_out_1;
 8014d5e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8014d62:	1c53      	adds	r3, r2, #1
 8014d64:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8014d68:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014d6c:	b25b      	sxtb	r3, r3
 8014d6e:	7013      	strb	r3, [r2, #0]
		scales += 2;
 8014d70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	3308      	adds	r3, #8
 8014d7c:	6013      	str	r3, [r2, #0]

		bit_starting_idx += 2;
 8014d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014d82:	3302      	adds	r3, #2
 8014d84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		if(bit_starting_idx == 8){
 8014d88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014d8c:	2b08      	cmp	r3, #8
 8014d8e:	d10c      	bne.n	8014daa <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x9f6>
			bit_starting_idx = 0;
 8014d90:	2300      	movs	r3, #0
 8014d92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
			mask++;
 8014d96:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			mask1++;
 8014da0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8014da4:	3301      	adds	r3, #1
 8014da6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		}

		/* skip row */
		ip_a0 += num_col_a;
 8014daa:	f8b7 21c4 	ldrh.w	r2, [r7, #452]	; 0x1c4
 8014dae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8014db2:	4413      	add	r3, r2
 8014db4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
		row_count--;
 8014db8:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
 8014dbc:	3b01      	subs	r3, #1
 8014dbe:	f8a7 318a 	strh.w	r3, [r7, #394]	; 0x18a
	while (row_count) {
 8014dc2:	f8b7 318a 	ldrh.w	r3, [r7, #394]	; 0x18a
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	f47f ab2d 	bne.w	8014426 <mat_mult_kernel_s8_s16_reordered_fpreq_bitmask+0x72>
	}

	out_0 += output_ch;
 8014dcc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8014dd0:	881b      	ldrh	r3, [r3, #0]
 8014dd2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8014dd6:	4413      	add	r3, r2
 8014dd8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

	/* return the new output pointer with offset */
	return out_0;
 8014ddc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8014de6:	46bd      	mov	sp, r7
 8014de8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014dec:	4770      	bx	lr

08014dee <mat_mult_kernel3_input3_s8_s16_fpreq>:

q7_t* mat_mult_kernel3_input3_s8_s16_fpreq(const q7_t *input_a,
		const q15_t *input_b, const uint16_t output_ch, const float *scales,
		const int32_t out_offset, const int16_t activation_min,
		const int16_t activation_max, const uint16_t num_col_a,
		const int32_t *const output_bias, q7_t *out_0, q15_t *kbuf) {
 8014dee:	b490      	push	{r4, r7}
 8014df0:	b0e8      	sub	sp, #416	; 0x1a0
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	f107 040c 	add.w	r4, r7, #12
 8014df8:	6020      	str	r0, [r4, #0]
 8014dfa:	f107 0008 	add.w	r0, r7, #8
 8014dfe:	6001      	str	r1, [r0, #0]
 8014e00:	4611      	mov	r1, r2
 8014e02:	463a      	mov	r2, r7
 8014e04:	6013      	str	r3, [r2, #0]
 8014e06:	1dbb      	adds	r3, r7, #6
 8014e08:	460a      	mov	r2, r1
 8014e0a:	801a      	strh	r2, [r3, #0]
	/* set up the second output pointers */
	q7_t *out_1 = out_0 + output_ch;
 8014e0c:	1dbb      	adds	r3, r7, #6
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8014e14:	4413      	add	r3, r2
 8014e16:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	const int32_t *bias = output_bias;
 8014e1a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014e1e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

	uint16_t row_count = output_ch / 2;
 8014e22:	1dbb      	adds	r3, r7, #6
 8014e24:	881b      	ldrh	r3, [r3, #0]
 8014e26:	085b      	lsrs	r3, r3, #1
 8014e28:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
	const q15_t *ksrc = &kbuf[0];
 8014e2c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8014e30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	/* this loop over rows in A */
	while (row_count) {
 8014e34:	f000 bc56 	b.w	80156e4 <mat_mult_kernel3_input3_s8_s16_fpreq+0x8f6>
		/* setup pointers for B */
		const q15_t *ip_b0 = input_b;
 8014e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014e3c:	f107 0208 	add.w	r2, r7, #8
 8014e40:	6812      	ldr	r2, [r2, #0]
 8014e42:	601a      	str	r2, [r3, #0]
		const q15_t *ip_b1 = ip_b0 + num_col_a;
 8014e44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	441a      	add	r2, r3
 8014e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014e56:	601a      	str	r2, [r3, #0]
		const q31_t *ip31_b0 = ip_b0;
 8014e58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		const q31_t *ip31_b1 = ip_b1;
 8014e62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		const float scale_0 = scales[0];
 8014e6c:	463b      	mov	r3, r7
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
		const float scale_1 = scales[1];
 8014e76:	463b      	mov	r3, r7
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

		/* align the second pointer for A */
		const q15_t *ksrc2 = ksrc + num_col_a;
 8014e80:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 8014e84:	005b      	lsls	r3, r3, #1
 8014e86:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8014e8a:	4413      	add	r3, r2
 8014e8c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		q31_t *ksrc_31 = ksrc;
 8014e90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8014e94:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		q31_t *ksrc2_31 = ksrc2;
 8014e98:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014e9c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

		/* Init accumulator with bias for channel N and N + 1 */
		q31_t ch_0_out_0 = *bias;
 8014ea0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		q31_t ch_0_out_1 = *bias++;
 8014eaa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8014eae:	1d1a      	adds	r2, r3, #4
 8014eb0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		q31_t ch_1_out_0 = *bias;
 8014eba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		q31_t ch_1_out_1 = *bias++;
 8014ec4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8014ec8:	1d1a      	adds	r2, r3, #4
 8014eca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8014ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014ed8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014edc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8014ede:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	461a      	mov	r2, r3
 8014eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014eee:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	1d1a      	adds	r2, r3, #4
 8014efa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	601a      	str	r2, [r3, #0]
    return (val);
 8014f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014f06:	681b      	ldr	r3, [r3, #0]

		//------------------4
		q31_t a01, a02, a11, a12;
		q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8014f08:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8014f0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014f10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014f14:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8014f16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	461a      	mov	r2, r3
 8014f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014f26:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8014f28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	1d1a      	adds	r2, r3, #4
 8014f32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	601a      	str	r2, [r3, #0]
    return (val);
 8014f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014f3e:	681b      	ldr	r3, [r3, #0]
		q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8014f40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		ch_0_out_0 = __SMLAD(ksrc_31[0], b0, ch_0_out_0);
 8014f44:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8014f50:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8014f54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014f58:	6018      	str	r0, [r3, #0]
 8014f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f5e:	6019      	str	r1, [r3, #0]
 8014f60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014f66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014f70:	6812      	ldr	r2, [r2, #0]
 8014f72:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8014f76:	6809      	ldr	r1, [r1, #0]
 8014f78:	fb23 1202 	smlad	r2, r3, r2, r1
 8014f7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f80:	601a      	str	r2, [r3, #0]
  return(result);
 8014f82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_1 = __SMLAD(ksrc_31[0], b1, ch_0_out_1);
 8014f8c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8014f98:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8014f9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014fa0:	6018      	str	r0, [r3, #0]
 8014fa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014fa6:	6019      	str	r1, [r3, #0]
 8014fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014fac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014fae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014fb8:	6812      	ldr	r2, [r2, #0]
 8014fba:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8014fbe:	6809      	ldr	r1, [r1, #0]
 8014fc0:	fb23 1202 	smlad	r2, r3, r2, r1
 8014fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014fc8:	601a      	str	r2, [r3, #0]
  return(result);
 8014fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_1_out_0 = __SMLAD(ksrc2_31[0], b0, ch_1_out_0);
 8014fd4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8014fe0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8014fe4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014fe8:	6018      	str	r0, [r3, #0]
 8014fea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014fee:	6019      	str	r1, [r3, #0]
 8014ff0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014ff4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014ff6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8015000:	6812      	ldr	r2, [r2, #0]
 8015002:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8015006:	6809      	ldr	r1, [r1, #0]
 8015008:	fb23 1202 	smlad	r2, r3, r2, r1
 801500c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015010:	601a      	str	r2, [r3, #0]
  return(result);
 8015012:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_1 = __SMLAD(ksrc2_31[0], b1, ch_1_out_1);
 801501c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	4618      	mov	r0, r3
 8015024:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8015028:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801502c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015030:	6018      	str	r0, [r3, #0]
 8015032:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015036:	6019      	str	r1, [r3, #0]
 8015038:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801503c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801503e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8015048:	6812      	ldr	r2, [r2, #0]
 801504a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 801504e:	6809      	ldr	r1, [r1, #0]
 8015050:	fb23 1202 	smlad	r2, r3, r2, r1
 8015054:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015058:	601a      	str	r2, [r3, #0]
  return(result);
 801505a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8015064:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015068:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801506c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801506e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	461a      	mov	r2, r3
 801507a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801507e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8015080:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	1d1a      	adds	r2, r3, #4
 801508a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	601a      	str	r2, [r3, #0]
    return (val);
 8015092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015096:	681b      	ldr	r3, [r3, #0]

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8015098:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 801509c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80150a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80150a4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80150a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	461a      	mov	r2, r3
 80150b2:	f107 0320 	add.w	r3, r7, #32
 80150b6:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80150b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	1d1a      	adds	r2, r3, #4
 80150c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	601a      	str	r2, [r3, #0]
    return (val);
 80150ca:	f107 0320 	add.w	r3, r7, #32
 80150ce:	681b      	ldr	r3, [r3, #0]
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80150d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		ch_0_out_0 = __SMLAD(ksrc_31[1], b0, ch_0_out_0);
 80150d4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80150d8:	3304      	adds	r3, #4
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4618      	mov	r0, r3
 80150de:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80150e2:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80150e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80150ea:	6018      	str	r0, [r3, #0]
 80150ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80150f0:	6019      	str	r1, [r3, #0]
 80150f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80150f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80150f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8015102:	6812      	ldr	r2, [r2, #0]
 8015104:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8015108:	6809      	ldr	r1, [r1, #0]
 801510a:	fb23 1202 	smlad	r2, r3, r2, r1
 801510e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015112:	601a      	str	r2, [r3, #0]
  return(result);
 8015114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_1 = __SMLAD(ksrc_31[1], b1, ch_0_out_1);
 801511e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8015122:	3304      	adds	r3, #4
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 801512a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801512e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015132:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015136:	6019      	str	r1, [r3, #0]
 8015138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801513c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801513e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015142:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8015146:	6812      	ldr	r2, [r2, #0]
 8015148:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 801514c:	6809      	ldr	r1, [r1, #0]
 801514e:	fb23 1202 	smlad	r2, r3, r2, r1
 8015152:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015156:	601a      	str	r2, [r3, #0]
  return(result);
 8015158:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_1_out_0 = __SMLAD(ksrc2_31[1], b0, ch_1_out_0);
 8015162:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015166:	3304      	adds	r3, #4
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	4619      	mov	r1, r3
 801516c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8015170:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015174:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8015178:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801517c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015184:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015188:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801518c:	fb23 1302 	smlad	r3, r3, r2, r1
 8015190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8015194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015198:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_1 = __SMLAD(ksrc2_31[1], b1, ch_1_out_1);
 801519c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80151a0:	3304      	adds	r3, #4
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4619      	mov	r1, r3
 80151a6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80151aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80151ae:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80151b2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80151b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80151ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80151be:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80151c2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80151c6:	fb23 1302 	smlad	r3, r3, r2, r1
 80151ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80151ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80151d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80151d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80151da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    memcpy(&val, *in_q15, 4);
 80151de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	461a      	mov	r2, r3
 80151e8:	f107 031c 	add.w	r3, r7, #28
 80151ec:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80151ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	1d1a      	adds	r2, r3, #4
 80151f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80151fa:	601a      	str	r2, [r3, #0]
    return (val);
 80151fc:	f107 031c 	add.w	r3, r7, #28
 8015200:	681b      	ldr	r3, [r3, #0]

		//------------------8
		b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8015202:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8015206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801520a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    memcpy(&val, *in_q15, 4);
 801520e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	461a      	mov	r2, r3
 8015218:	f107 0318 	add.w	r3, r7, #24
 801521c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801521e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	1d1a      	adds	r2, r3, #4
 8015226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801522a:	601a      	str	r2, [r3, #0]
    return (val);
 801522c:	f107 0318 	add.w	r3, r7, #24
 8015230:	681b      	ldr	r3, [r3, #0]
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8015232:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		ch_0_out_0 = __SMLAD(ksrc_31[2], b0, ch_0_out_0);
 8015236:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801523a:	3308      	adds	r3, #8
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	4619      	mov	r1, r3
 8015240:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8015244:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015248:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 801524c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8015250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015258:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801525c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8015260:	fb23 1302 	smlad	r3, r3, r2, r1
 8015264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8015268:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801526c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_1 = __SMLAD(ksrc_31[2], b1, ch_0_out_1);
 8015270:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8015274:	3308      	adds	r3, #8
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	4619      	mov	r1, r3
 801527a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801527e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015282:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8015286:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801528a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801528e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015292:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8015296:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801529a:	fb23 1302 	smlad	r3, r3, r2, r1
 801529e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80152a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80152a6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_1_out_0 = __SMLAD(ksrc2_31[2], b0, ch_1_out_0);
 80152aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80152ae:	3308      	adds	r3, #8
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	4619      	mov	r1, r3
 80152b4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80152b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80152bc:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80152c0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80152c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80152c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80152cc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80152d0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80152d4:	fb23 1302 	smlad	r3, r3, r2, r1
 80152d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 80152dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80152e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_1 = __SMLAD(ksrc2_31[2], b1, ch_1_out_1);
 80152e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80152e8:	3308      	adds	r3, #8
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4619      	mov	r1, r3
 80152ee:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80152f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80152f6:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80152fa:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80152fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8015306:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801530a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801530e:	fb23 1302 	smlad	r3, r3, r2, r1
 8015312:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 8015316:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801531a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801531e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015322:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    memcpy(&val, *in_q15, 4);
 8015326:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	461a      	mov	r2, r3
 8015330:	f107 0314 	add.w	r3, r7, #20
 8015334:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8015336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	1d1a      	adds	r2, r3, #4
 801533e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8015342:	601a      	str	r2, [r3, #0]
    return (val);
 8015344:	f107 0314 	add.w	r3, r7, #20
 8015348:	681b      	ldr	r3, [r3, #0]

		b0 = arm_nn_read_q15x2_ia(&ip_b0);
 801534a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 801534e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    memcpy(&val, *in_q15, 4);
 8015356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	461a      	mov	r2, r3
 8015360:	f107 0310 	add.w	r3, r7, #16
 8015364:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8015366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	1d1a      	adds	r2, r3, #4
 801536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015372:	601a      	str	r2, [r3, #0]
    return (val);
 8015374:	f107 0310 	add.w	r3, r7, #16
 8015378:	681b      	ldr	r3, [r3, #0]
		b1 = arm_nn_read_q15x2_ia(&ip_b1);
 801537a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		ch_0_out_0 = __SMLAD(ksrc_31[3], b0, ch_0_out_0);
 801537e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8015382:	330c      	adds	r3, #12
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	4619      	mov	r1, r3
 8015388:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801538c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015390:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8015394:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8015398:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801539c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80153a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80153a4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80153a8:	fb23 1302 	smlad	r3, r3, r2, r1
 80153ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80153b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80153b4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_1 = __SMLAD(ksrc_31[3], b1, ch_0_out_1);
 80153b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80153bc:	330c      	adds	r3, #12
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4619      	mov	r1, r3
 80153c2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80153c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80153ca:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80153ce:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80153d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80153d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80153da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80153de:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80153e2:	fb23 1302 	smlad	r3, r3, r2, r1
 80153e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 80153ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80153ee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_1_out_0 = __SMLAD(ksrc2_31[3], b0, ch_1_out_0);
 80153f2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80153f6:	330c      	adds	r3, #12
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	4619      	mov	r1, r3
 80153fc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8015400:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015404:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8015408:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 801540c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8015410:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015414:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015418:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801541c:	fb23 1302 	smlad	r3, r3, r2, r1
 8015420:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8015424:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015428:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_1 = __SMLAD(ksrc2_31[3], b1, ch_1_out_1);
 801542c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015430:	330c      	adds	r3, #12
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4619      	mov	r1, r3
 8015436:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801543a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801543e:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8015442:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8015446:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801544a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801544e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8015452:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8015456:	fb23 1302 	smlad	r3, r3, r2, r1
 801545a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 801545e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015462:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		ch_0_out_1 = __SMLAD(ksrc_31[12], b1, ch_0_out_1);
		ch_1_out_0 = __SMLAD(ksrc2_31[12], b0, ch_1_out_0);
		ch_1_out_1 = __SMLAD(ksrc2_31[12], b1, ch_1_out_1);
		*/
		//------------------9
		q15_t _b0 = *ip_b0++;
 8015466:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	1c99      	adds	r1, r3, #2
 801546e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015472:	6011      	str	r1, [r2, #0]
 8015474:	881b      	ldrh	r3, [r3, #0]
 8015476:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
		q15_t _b1 = *ip_b1++;
 801547a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	1c99      	adds	r1, r3, #2
 8015482:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015486:	6011      	str	r1, [r2, #0]
 8015488:	881b      	ldrh	r3, [r3, #0]
 801548a:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
		ch_0_out_0 += ksrc[8] * _b0;
 801548e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8015492:	3310      	adds	r3, #16
 8015494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015498:	461a      	mov	r2, r3
 801549a:	f9b7 315a 	ldrsh.w	r3, [r7, #346]	; 0x15a
 801549e:	fb03 f302 	mul.w	r3, r3, r2
 80154a2:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80154a6:	4413      	add	r3, r2
 80154a8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_1 += ksrc[8] * _b1;
 80154ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80154b0:	3310      	adds	r3, #16
 80154b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154b6:	461a      	mov	r2, r3
 80154b8:	f9b7 3158 	ldrsh.w	r3, [r7, #344]	; 0x158
 80154bc:	fb03 f302 	mul.w	r3, r3, r2
 80154c0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80154c4:	4413      	add	r3, r2
 80154c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_1_out_0 += ksrc2[8] * _b0;
 80154ca:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80154ce:	3310      	adds	r3, #16
 80154d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154d4:	461a      	mov	r2, r3
 80154d6:	f9b7 315a 	ldrsh.w	r3, [r7, #346]	; 0x15a
 80154da:	fb03 f302 	mul.w	r3, r3, r2
 80154de:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80154e2:	4413      	add	r3, r2
 80154e4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_1 += ksrc2[8] * _b1;
 80154e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80154ec:	3310      	adds	r3, #16
 80154ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154f2:	461a      	mov	r2, r3
 80154f4:	f9b7 3158 	ldrsh.w	r3, [r7, #344]	; 0x158
 80154f8:	fb03 f302 	mul.w	r3, r3, r2
 80154fc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8015500:	4413      	add	r3, r2
 8015502:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

		ch_0_out_0 = MAX(ch_0_out_0, 0); //ReLU
 8015506:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801550a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801550e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_0 = (q31_t) ((float) ch_0_out_0 * scale_0); //Scale factor is: Sx1*Sw1/Sx2 to convert the result into the next input
 8015512:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015516:	ee07 3a90 	vmov	s15, r3
 801551a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801551e:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8015522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801552a:	ee17 3a90 	vmov	r3, s15
 801552e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_0 += out_offset; //Output offset is the next layer input zero
 8015532:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015536:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801553a:	4413      	add	r3, r2
 801553c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8015540:	f9b7 31ac 	ldrsh.w	r3, [r7, #428]	; 0x1ac
 8015544:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015548:	4293      	cmp	r3, r2
 801554a:	bfb8      	it	lt
 801554c:	4613      	movlt	r3, r2
 801554e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8015552:	f9b7 31b0 	ldrsh.w	r3, [r7, #432]	; 0x1b0
 8015556:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 801555a:	4293      	cmp	r3, r2
 801555c:	bfa8      	it	ge
 801555e:	4613      	movge	r3, r2
 8015560:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		*out_0++ = (q7_t) ch_0_out_0;
 8015564:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8015568:	1c5a      	adds	r2, r3, #1
 801556a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 801556e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8015572:	b252      	sxtb	r2, r2
 8015574:	701a      	strb	r2, [r3, #0]

		ch_0_out_1 = MAX(ch_0_out_1, 0); //ReLU
 8015576:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801557a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801557e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_0_out_1 = (q31_t) ((float) ch_0_out_1 * scale_0);
 8015582:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015586:	ee07 3a90 	vmov	s15, r3
 801558a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801558e:	edd7 7a61 	vldr	s15, [r7, #388]	; 0x184
 8015592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801559a:	ee17 3a90 	vmov	r3, s15
 801559e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_0_out_1 += out_offset; //Output offset is the next layer input zero
 80155a2:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80155a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80155aa:	4413      	add	r3, r2
 80155ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80155b0:	f9b7 31ac 	ldrsh.w	r3, [r7, #428]	; 0x1ac
 80155b4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80155b8:	4293      	cmp	r3, r2
 80155ba:	bfb8      	it	lt
 80155bc:	4613      	movlt	r3, r2
 80155be:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 80155c2:	f9b7 31b0 	ldrsh.w	r3, [r7, #432]	; 0x1b0
 80155c6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80155ca:	4293      	cmp	r3, r2
 80155cc:	bfa8      	it	ge
 80155ce:	4613      	movge	r3, r2
 80155d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		*out_1++ = (q7_t) ch_0_out_1;
 80155d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80155d8:	1c5a      	adds	r2, r3, #1
 80155da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80155de:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80155e2:	b252      	sxtb	r2, r2
 80155e4:	701a      	strb	r2, [r3, #0]

		ch_1_out_0 = MAX(ch_1_out_0, 0); //ReLU
 80155e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80155ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80155ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_0 = (q31_t) ((float) ch_1_out_0 * scale_1);
 80155f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80155f6:	ee07 3a90 	vmov	s15, r3
 80155fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80155fe:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 8015602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801560a:	ee17 3a90 	vmov	r3, s15
 801560e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_0 += out_offset; //Output offset is the next layer input zero
 8015612:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015616:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801561a:	4413      	add	r3, r2
 801561c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8015620:	f9b7 31ac 	ldrsh.w	r3, [r7, #428]	; 0x1ac
 8015624:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015628:	4293      	cmp	r3, r2
 801562a:	bfb8      	it	lt
 801562c:	4613      	movlt	r3, r2
 801562e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 8015632:	f9b7 31b0 	ldrsh.w	r3, [r7, #432]	; 0x1b0
 8015636:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 801563a:	4293      	cmp	r3, r2
 801563c:	bfa8      	it	ge
 801563e:	4613      	movge	r3, r2
 8015640:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		*out_0++ = (q7_t) ch_1_out_0;
 8015644:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8015648:	1c5a      	adds	r2, r3, #1
 801564a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 801564e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8015652:	b252      	sxtb	r2, r2
 8015654:	701a      	strb	r2, [r3, #0]

		ch_1_out_1 = MAX(ch_1_out_1, 0); //ReLU
 8015656:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801565a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801565e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		ch_1_out_1 = (q31_t) ((float) ch_1_out_1 * scale_1);
 8015662:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015666:	ee07 3a90 	vmov	s15, r3
 801566a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801566e:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 8015672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801567a:	ee17 3a90 	vmov	r3, s15
 801567e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		ch_1_out_1 += out_offset; //Output offset is the next layer input zero
 8015682:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8015686:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801568a:	4413      	add	r3, r2
 801568c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8015690:	f9b7 31ac 	ldrsh.w	r3, [r7, #428]	; 0x1ac
 8015694:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8015698:	4293      	cmp	r3, r2
 801569a:	bfb8      	it	lt
 801569c:	4613      	movlt	r3, r2
 801569e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80156a2:	f9b7 31b0 	ldrsh.w	r3, [r7, #432]	; 0x1b0
 80156a6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80156aa:	4293      	cmp	r3, r2
 80156ac:	bfa8      	it	ge
 80156ae:	4613      	movge	r3, r2
 80156b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
		*out_1++ = (q7_t) ch_1_out_1;
 80156b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80156b8:	1c5a      	adds	r2, r3, #1
 80156ba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80156be:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80156c2:	b252      	sxtb	r2, r2
 80156c4:	701a      	strb	r2, [r3, #0]
		scales += 2;
 80156c6:	463b      	mov	r3, r7
 80156c8:	463a      	mov	r2, r7
 80156ca:	6812      	ldr	r2, [r2, #0]
 80156cc:	3208      	adds	r2, #8
 80156ce:	601a      	str	r2, [r3, #0]

		/* skip row */
		ksrc += 18;
 80156d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80156d4:	3324      	adds	r3, #36	; 0x24
 80156d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		row_count--;
 80156da:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 80156de:	3b01      	subs	r3, #1
 80156e0:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
	while (row_count) {
 80156e4:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	f47f aba5 	bne.w	8014e38 <mat_mult_kernel3_input3_s8_s16_fpreq+0x4a>
	}

	out_0 += output_ch;
 80156ee:	1dbb      	adds	r3, r7, #6
 80156f0:	881b      	ldrh	r3, [r3, #0]
 80156f2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80156f6:	4413      	add	r3, r2
 80156f8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

	/* return the new output pointer with offset */
	return out_0;
 80156fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
}
 8015700:	4618      	mov	r0, r3
 8015702:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8015706:	46bd      	mov	sp, r7
 8015708:	bc90      	pop	{r4, r7}
 801570a:	4770      	bx	lr

0801570c <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 801570c:	b480      	push	{r7}
 801570e:	b08f      	sub	sp, #60	; 0x3c
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	4608      	mov	r0, r1
 8015716:	4611      	mov	r1, r2
 8015718:	461a      	mov	r2, r3
 801571a:	4603      	mov	r3, r0
 801571c:	817b      	strh	r3, [r7, #10]
 801571e:	460b      	mov	r3, r1
 8015720:	813b      	strh	r3, [r7, #8]
 8015722:	4613      	mov	r3, r2
 8015724:	80fb      	strh	r3, [r7, #6]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 8015726:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801572a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801572e:	fb02 f303 	mul.w	r3, r2, r3
 8015732:	2b00      	cmp	r3, #0
 8015734:	da00      	bge.n	8015738 <avg_pooling+0x2c>
 8015736:	3301      	adds	r3, #1
 8015738:	105b      	asrs	r3, r3, #1
 801573a:	61fb      	str	r3, [r7, #28]
	for(c = 0; c < input_c; c++){
 801573c:	2300      	movs	r3, #0
 801573e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015740:	e089      	b.n	8015856 <avg_pooling+0x14a>
		for(h = 0; h < output_h; h++){
 8015742:	2300      	movs	r3, #0
 8015744:	637b      	str	r3, [r7, #52]	; 0x34
 8015746:	e07d      	b.n	8015844 <avg_pooling+0x138>
			for(w = 0; w < output_w; w++){
 8015748:	2300      	movs	r3, #0
 801574a:	633b      	str	r3, [r7, #48]	; 0x30
 801574c:	e072      	b.n	8015834 <avg_pooling+0x128>
				int avg = 0;
 801574e:	2300      	movs	r3, #0
 8015750:	623b      	str	r3, [r7, #32]

				for(sh = 0; sh < sample_h; sh++){
 8015752:	2300      	movs	r3, #0
 8015754:	62bb      	str	r3, [r7, #40]	; 0x28
 8015756:	e031      	b.n	80157bc <avg_pooling+0xb0>
					int height = sh + h * sample_h;
 8015758:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801575c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801575e:	fb02 f303 	mul.w	r3, r2, r3
 8015762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015764:	4413      	add	r3, r2
 8015766:	617b      	str	r3, [r7, #20]
					for(sw = 0; sw < sample_w; sw++){
 8015768:	2300      	movs	r3, #0
 801576a:	627b      	str	r3, [r7, #36]	; 0x24
 801576c:	e01e      	b.n	80157ac <avg_pooling+0xa0>
						int width = sw + w * sample_w;
 801576e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015774:	fb02 f303 	mul.w	r3, r2, r3
 8015778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801577a:	4413      	add	r3, r2
 801577c:	613b      	str	r3, [r7, #16]
						avg += input[(width + height * input_w) * input_c + c];
 801577e:	893b      	ldrh	r3, [r7, #8]
 8015780:	697a      	ldr	r2, [r7, #20]
 8015782:	fb02 f203 	mul.w	r2, r2, r3
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	4413      	add	r3, r2
 801578a:	88fa      	ldrh	r2, [r7, #6]
 801578c:	fb02 f203 	mul.w	r2, r2, r3
 8015790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015792:	4413      	add	r3, r2
 8015794:	461a      	mov	r2, r3
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	4413      	add	r3, r2
 801579a:	f993 3000 	ldrsb.w	r3, [r3]
 801579e:	461a      	mov	r2, r3
 80157a0:	6a3b      	ldr	r3, [r7, #32]
 80157a2:	4413      	add	r3, r2
 80157a4:	623b      	str	r3, [r7, #32]
					for(sw = 0; sw < sample_w; sw++){
 80157a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157a8:	3301      	adds	r3, #1
 80157aa:	627b      	str	r3, [r7, #36]	; 0x24
 80157ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80157b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157b2:	429a      	cmp	r2, r3
 80157b4:	dbdb      	blt.n	801576e <avg_pooling+0x62>
				for(sh = 0; sh < sample_h; sh++){
 80157b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b8:	3301      	adds	r3, #1
 80157ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80157bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157c2:	429a      	cmp	r2, r3
 80157c4:	dbc8      	blt.n	8015758 <avg_pooling+0x4c>
					}
				}

				// for rounded div
				if (avg > 0)
 80157c6:	6a3b      	ldr	r3, [r7, #32]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	dd04      	ble.n	80157d6 <avg_pooling+0xca>
					avg += divider_half;
 80157cc:	6a3a      	ldr	r2, [r7, #32]
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	4413      	add	r3, r2
 80157d2:	623b      	str	r3, [r7, #32]
 80157d4:	e003      	b.n	80157de <avg_pooling+0xd2>
				else
					avg -= divider_half;
 80157d6:	6a3a      	ldr	r2, [r7, #32]
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	1ad3      	subs	r3, r2, r3
 80157dc:	623b      	str	r3, [r7, #32]

				int out = avg / (sample_h * sample_w);
 80157de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80157e6:	fb02 f303 	mul.w	r3, r2, r3
 80157ea:	6a3a      	ldr	r2, [r7, #32]
 80157ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80157f0:	61bb      	str	r3, [r7, #24]
				out = TN_MAX(out, out_activation_min);
 80157f2:	69ba      	ldr	r2, [r7, #24]
 80157f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157f6:	4293      	cmp	r3, r2
 80157f8:	bfb8      	it	lt
 80157fa:	4613      	movlt	r3, r2
 80157fc:	61bb      	str	r3, [r7, #24]
				out = TN_MIN(out, out_activation_max);
 80157fe:	69ba      	ldr	r2, [r7, #24]
 8015800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015802:	4293      	cmp	r3, r2
 8015804:	bfa8      	it	ge
 8015806:	4613      	movge	r3, r2
 8015808:	61bb      	str	r3, [r7, #24]
				output[(w + h * output_w) * input_c + c] = out;
 801580a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801580e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015810:	fb02 f203 	mul.w	r2, r2, r3
 8015814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015816:	4413      	add	r3, r2
 8015818:	88fa      	ldrh	r2, [r7, #6]
 801581a:	fb02 f203 	mul.w	r2, r2, r3
 801581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015820:	4413      	add	r3, r2
 8015822:	461a      	mov	r2, r3
 8015824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015826:	4413      	add	r3, r2
 8015828:	69ba      	ldr	r2, [r7, #24]
 801582a:	b252      	sxtb	r2, r2
 801582c:	701a      	strb	r2, [r3, #0]
			for(w = 0; w < output_w; w++){
 801582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015830:	3301      	adds	r3, #1
 8015832:	633b      	str	r3, [r7, #48]	; 0x30
 8015834:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8015838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801583a:	429a      	cmp	r2, r3
 801583c:	db87      	blt.n	801574e <avg_pooling+0x42>
		for(h = 0; h < output_h; h++){
 801583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015840:	3301      	adds	r3, #1
 8015842:	637b      	str	r3, [r7, #52]	; 0x34
 8015844:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801584a:	429a      	cmp	r2, r3
 801584c:	f6ff af7c 	blt.w	8015748 <avg_pooling+0x3c>
	for(c = 0; c < input_c; c++){
 8015850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015852:	3301      	adds	r3, #1
 8015854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015856:	88fb      	ldrh	r3, [r7, #6]
 8015858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801585a:	429a      	cmp	r2, r3
 801585c:	f6ff af71 	blt.w	8015742 <avg_pooling+0x36>
			}
		}
	}
}
 8015860:	bf00      	nop
 8015862:	4618      	mov	r0, r3
 8015864:	373c      	adds	r7, #60	; 0x3c
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr
	...

08015870 <_ZdaPv>:
 8015870:	f000 b800 	b.w	8015874 <_ZdlPv>

08015874 <_ZdlPv>:
 8015874:	f001 bf80 	b.w	8017778 <free>

08015878 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8015878:	b538      	push	{r3, r4, r5, lr}
 801587a:	4c08      	ldr	r4, [pc, #32]	; (801589c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 801587c:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8015880:	4628      	mov	r0, r5
 8015882:	60e5      	str	r5, [r4, #12]
 8015884:	f001 ff70 	bl	8017768 <malloc>
 8015888:	60a0      	str	r0, [r4, #8]
 801588a:	b120      	cbz	r0, 8015896 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 801588c:	2300      	movs	r3, #0
 801588e:	6060      	str	r0, [r4, #4]
 8015890:	e9c0 5300 	strd	r5, r3, [r0]
 8015894:	bd38      	pop	{r3, r4, r5, pc}
 8015896:	60e0      	str	r0, [r4, #12]
 8015898:	6060      	str	r0, [r4, #4]
 801589a:	bd38      	pop	{r3, r4, r5, pc}
 801589c:	20021244 	.word	0x20021244

080158a0 <cos>:
 80158a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80158a2:	ec51 0b10 	vmov	r0, r1, d0
 80158a6:	4a1e      	ldr	r2, [pc, #120]	; (8015920 <cos+0x80>)
 80158a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80158ac:	4293      	cmp	r3, r2
 80158ae:	dc06      	bgt.n	80158be <cos+0x1e>
 80158b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8015918 <cos+0x78>
 80158b4:	f001 f90c 	bl	8016ad0 <__kernel_cos>
 80158b8:	ec51 0b10 	vmov	r0, r1, d0
 80158bc:	e007      	b.n	80158ce <cos+0x2e>
 80158be:	4a19      	ldr	r2, [pc, #100]	; (8015924 <cos+0x84>)
 80158c0:	4293      	cmp	r3, r2
 80158c2:	dd09      	ble.n	80158d8 <cos+0x38>
 80158c4:	ee10 2a10 	vmov	r2, s0
 80158c8:	460b      	mov	r3, r1
 80158ca:	f7ea fd5d 	bl	8000388 <__aeabi_dsub>
 80158ce:	ec41 0b10 	vmov	d0, r0, r1
 80158d2:	b005      	add	sp, #20
 80158d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80158d8:	4668      	mov	r0, sp
 80158da:	f000 fd65 	bl	80163a8 <__ieee754_rem_pio2>
 80158de:	f000 0003 	and.w	r0, r0, #3
 80158e2:	2801      	cmp	r0, #1
 80158e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80158e8:	ed9d 0b00 	vldr	d0, [sp]
 80158ec:	d007      	beq.n	80158fe <cos+0x5e>
 80158ee:	2802      	cmp	r0, #2
 80158f0:	d00e      	beq.n	8015910 <cos+0x70>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d0de      	beq.n	80158b4 <cos+0x14>
 80158f6:	2001      	movs	r0, #1
 80158f8:	f001 fcf2 	bl	80172e0 <__kernel_sin>
 80158fc:	e7dc      	b.n	80158b8 <cos+0x18>
 80158fe:	f001 fcef 	bl	80172e0 <__kernel_sin>
 8015902:	ec53 2b10 	vmov	r2, r3, d0
 8015906:	ee10 0a10 	vmov	r0, s0
 801590a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801590e:	e7de      	b.n	80158ce <cos+0x2e>
 8015910:	f001 f8de 	bl	8016ad0 <__kernel_cos>
 8015914:	e7f5      	b.n	8015902 <cos+0x62>
 8015916:	bf00      	nop
	...
 8015920:	3fe921fb 	.word	0x3fe921fb
 8015924:	7fefffff 	.word	0x7fefffff

08015928 <exp>:
 8015928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801592a:	ed2d 8b02 	vpush	{d8}
 801592e:	4e38      	ldr	r6, [pc, #224]	; (8015a10 <exp+0xe8>)
 8015930:	b08b      	sub	sp, #44	; 0x2c
 8015932:	ec55 4b10 	vmov	r4, r5, d0
 8015936:	f000 fa13 	bl	8015d60 <__ieee754_exp>
 801593a:	f996 3000 	ldrsb.w	r3, [r6]
 801593e:	eeb0 8a40 	vmov.f32	s16, s0
 8015942:	eef0 8a60 	vmov.f32	s17, s1
 8015946:	3301      	adds	r3, #1
 8015948:	d02c      	beq.n	80159a4 <exp+0x7c>
 801594a:	ec45 4b10 	vmov	d0, r4, r5
 801594e:	f001 fd8a 	bl	8017466 <finite>
 8015952:	b338      	cbz	r0, 80159a4 <exp+0x7c>
 8015954:	a32a      	add	r3, pc, #168	; (adr r3, 8015a00 <exp+0xd8>)
 8015956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595a:	4620      	mov	r0, r4
 801595c:	4629      	mov	r1, r5
 801595e:	f7eb f95b 	bl	8000c18 <__aeabi_dcmpgt>
 8015962:	4607      	mov	r7, r0
 8015964:	2800      	cmp	r0, #0
 8015966:	d030      	beq.n	80159ca <exp+0xa2>
 8015968:	2303      	movs	r3, #3
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	4b29      	ldr	r3, [pc, #164]	; (8015a14 <exp+0xec>)
 801596e:	9301      	str	r3, [sp, #4]
 8015970:	2300      	movs	r3, #0
 8015972:	9308      	str	r3, [sp, #32]
 8015974:	f996 3000 	ldrsb.w	r3, [r6]
 8015978:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801597c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015980:	b9c3      	cbnz	r3, 80159b4 <exp+0x8c>
 8015982:	4b25      	ldr	r3, [pc, #148]	; (8015a18 <exp+0xf0>)
 8015984:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015988:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801598c:	4668      	mov	r0, sp
 801598e:	f001 fdf7 	bl	8017580 <matherr>
 8015992:	b1a8      	cbz	r0, 80159c0 <exp+0x98>
 8015994:	9b08      	ldr	r3, [sp, #32]
 8015996:	b11b      	cbz	r3, 80159a0 <exp+0x78>
 8015998:	f001 feba 	bl	8017710 <__errno>
 801599c:	9b08      	ldr	r3, [sp, #32]
 801599e:	6003      	str	r3, [r0, #0]
 80159a0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80159a4:	eeb0 0a48 	vmov.f32	s0, s16
 80159a8:	eef0 0a68 	vmov.f32	s1, s17
 80159ac:	b00b      	add	sp, #44	; 0x2c
 80159ae:	ecbd 8b02 	vpop	{d8}
 80159b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b4:	4919      	ldr	r1, [pc, #100]	; (8015a1c <exp+0xf4>)
 80159b6:	2000      	movs	r0, #0
 80159b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159bc:	2b02      	cmp	r3, #2
 80159be:	d1e5      	bne.n	801598c <exp+0x64>
 80159c0:	f001 fea6 	bl	8017710 <__errno>
 80159c4:	2322      	movs	r3, #34	; 0x22
 80159c6:	6003      	str	r3, [r0, #0]
 80159c8:	e7e4      	b.n	8015994 <exp+0x6c>
 80159ca:	a30f      	add	r3, pc, #60	; (adr r3, 8015a08 <exp+0xe0>)
 80159cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d0:	4620      	mov	r0, r4
 80159d2:	4629      	mov	r1, r5
 80159d4:	f7eb f902 	bl	8000bdc <__aeabi_dcmplt>
 80159d8:	2800      	cmp	r0, #0
 80159da:	d0e3      	beq.n	80159a4 <exp+0x7c>
 80159dc:	2304      	movs	r3, #4
 80159de:	9300      	str	r3, [sp, #0]
 80159e0:	4b0c      	ldr	r3, [pc, #48]	; (8015a14 <exp+0xec>)
 80159e2:	9301      	str	r3, [sp, #4]
 80159e4:	2200      	movs	r2, #0
 80159e6:	2300      	movs	r3, #0
 80159e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80159ec:	9708      	str	r7, [sp, #32]
 80159ee:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80159f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80159f6:	f996 3000 	ldrsb.w	r3, [r6]
 80159fa:	e7df      	b.n	80159bc <exp+0x94>
 80159fc:	f3af 8000 	nop.w
 8015a00:	fefa39ef 	.word	0xfefa39ef
 8015a04:	40862e42 	.word	0x40862e42
 8015a08:	d52d3051 	.word	0xd52d3051
 8015a0c:	c0874910 	.word	0xc0874910
 8015a10:	20009dcc 	.word	0x20009dcc
 8015a14:	08037eec 	.word	0x08037eec
 8015a18:	47efffff 	.word	0x47efffff
 8015a1c:	7ff00000 	.word	0x7ff00000

08015a20 <log>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	ed2d 8b02 	vpush	{d8}
 8015a26:	b08a      	sub	sp, #40	; 0x28
 8015a28:	ec55 4b10 	vmov	r4, r5, d0
 8015a2c:	f000 fb08 	bl	8016040 <__ieee754_log>
 8015a30:	4b36      	ldr	r3, [pc, #216]	; (8015b0c <log+0xec>)
 8015a32:	eeb0 8a40 	vmov.f32	s16, s0
 8015a36:	eef0 8a60 	vmov.f32	s17, s1
 8015a3a:	f993 6000 	ldrsb.w	r6, [r3]
 8015a3e:	1c73      	adds	r3, r6, #1
 8015a40:	d05b      	beq.n	8015afa <log+0xda>
 8015a42:	4622      	mov	r2, r4
 8015a44:	462b      	mov	r3, r5
 8015a46:	4620      	mov	r0, r4
 8015a48:	4629      	mov	r1, r5
 8015a4a:	f7eb f8ef 	bl	8000c2c <__aeabi_dcmpun>
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	d153      	bne.n	8015afa <log+0xda>
 8015a52:	2200      	movs	r2, #0
 8015a54:	2300      	movs	r3, #0
 8015a56:	4620      	mov	r0, r4
 8015a58:	4629      	mov	r1, r5
 8015a5a:	f7eb f8dd 	bl	8000c18 <__aeabi_dcmpgt>
 8015a5e:	2800      	cmp	r0, #0
 8015a60:	d14b      	bne.n	8015afa <log+0xda>
 8015a62:	4b2b      	ldr	r3, [pc, #172]	; (8015b10 <log+0xf0>)
 8015a64:	9301      	str	r3, [sp, #4]
 8015a66:	9008      	str	r0, [sp, #32]
 8015a68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015a6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015a70:	b9a6      	cbnz	r6, 8015a9c <log+0x7c>
 8015a72:	4b28      	ldr	r3, [pc, #160]	; (8015b14 <log+0xf4>)
 8015a74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a7c:	4620      	mov	r0, r4
 8015a7e:	2200      	movs	r2, #0
 8015a80:	2300      	movs	r3, #0
 8015a82:	4629      	mov	r1, r5
 8015a84:	f7eb f8a0 	bl	8000bc8 <__aeabi_dcmpeq>
 8015a88:	bb40      	cbnz	r0, 8015adc <log+0xbc>
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	2e02      	cmp	r6, #2
 8015a8e:	9300      	str	r3, [sp, #0]
 8015a90:	d119      	bne.n	8015ac6 <log+0xa6>
 8015a92:	f001 fe3d 	bl	8017710 <__errno>
 8015a96:	2321      	movs	r3, #33	; 0x21
 8015a98:	6003      	str	r3, [r0, #0]
 8015a9a:	e019      	b.n	8015ad0 <log+0xb0>
 8015a9c:	4b1e      	ldr	r3, [pc, #120]	; (8015b18 <log+0xf8>)
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4629      	mov	r1, r5
 8015aac:	f7eb f88c 	bl	8000bc8 <__aeabi_dcmpeq>
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	d0ea      	beq.n	8015a8a <log+0x6a>
 8015ab4:	2302      	movs	r3, #2
 8015ab6:	429e      	cmp	r6, r3
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	d111      	bne.n	8015ae0 <log+0xc0>
 8015abc:	f001 fe28 	bl	8017710 <__errno>
 8015ac0:	2322      	movs	r3, #34	; 0x22
 8015ac2:	6003      	str	r3, [r0, #0]
 8015ac4:	e011      	b.n	8015aea <log+0xca>
 8015ac6:	4668      	mov	r0, sp
 8015ac8:	f001 fd5a 	bl	8017580 <matherr>
 8015acc:	2800      	cmp	r0, #0
 8015ace:	d0e0      	beq.n	8015a92 <log+0x72>
 8015ad0:	4812      	ldr	r0, [pc, #72]	; (8015b1c <log+0xfc>)
 8015ad2:	f001 fd59 	bl	8017588 <nan>
 8015ad6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8015ada:	e006      	b.n	8015aea <log+0xca>
 8015adc:	2302      	movs	r3, #2
 8015ade:	9300      	str	r3, [sp, #0]
 8015ae0:	4668      	mov	r0, sp
 8015ae2:	f001 fd4d 	bl	8017580 <matherr>
 8015ae6:	2800      	cmp	r0, #0
 8015ae8:	d0e8      	beq.n	8015abc <log+0x9c>
 8015aea:	9b08      	ldr	r3, [sp, #32]
 8015aec:	b11b      	cbz	r3, 8015af6 <log+0xd6>
 8015aee:	f001 fe0f 	bl	8017710 <__errno>
 8015af2:	9b08      	ldr	r3, [sp, #32]
 8015af4:	6003      	str	r3, [r0, #0]
 8015af6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8015afa:	eeb0 0a48 	vmov.f32	s0, s16
 8015afe:	eef0 0a68 	vmov.f32	s1, s17
 8015b02:	b00a      	add	sp, #40	; 0x28
 8015b04:	ecbd 8b02 	vpop	{d8}
 8015b08:	bd70      	pop	{r4, r5, r6, pc}
 8015b0a:	bf00      	nop
 8015b0c:	20009dcc 	.word	0x20009dcc
 8015b10:	08037ef0 	.word	0x08037ef0
 8015b14:	c7efffff 	.word	0xc7efffff
 8015b18:	fff00000 	.word	0xfff00000
 8015b1c:	0803827d 	.word	0x0803827d

08015b20 <sqrt>:
 8015b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b24:	ed2d 8b02 	vpush	{d8}
 8015b28:	b08b      	sub	sp, #44	; 0x2c
 8015b2a:	ec55 4b10 	vmov	r4, r5, d0
 8015b2e:	f000 fe2d 	bl	801678c <__ieee754_sqrt>
 8015b32:	4b26      	ldr	r3, [pc, #152]	; (8015bcc <sqrt+0xac>)
 8015b34:	eeb0 8a40 	vmov.f32	s16, s0
 8015b38:	eef0 8a60 	vmov.f32	s17, s1
 8015b3c:	f993 6000 	ldrsb.w	r6, [r3]
 8015b40:	1c73      	adds	r3, r6, #1
 8015b42:	d02a      	beq.n	8015b9a <sqrt+0x7a>
 8015b44:	4622      	mov	r2, r4
 8015b46:	462b      	mov	r3, r5
 8015b48:	4620      	mov	r0, r4
 8015b4a:	4629      	mov	r1, r5
 8015b4c:	f7eb f86e 	bl	8000c2c <__aeabi_dcmpun>
 8015b50:	4607      	mov	r7, r0
 8015b52:	bb10      	cbnz	r0, 8015b9a <sqrt+0x7a>
 8015b54:	f04f 0800 	mov.w	r8, #0
 8015b58:	f04f 0900 	mov.w	r9, #0
 8015b5c:	4642      	mov	r2, r8
 8015b5e:	464b      	mov	r3, r9
 8015b60:	4620      	mov	r0, r4
 8015b62:	4629      	mov	r1, r5
 8015b64:	f7eb f83a 	bl	8000bdc <__aeabi_dcmplt>
 8015b68:	b1b8      	cbz	r0, 8015b9a <sqrt+0x7a>
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	9300      	str	r3, [sp, #0]
 8015b6e:	4b18      	ldr	r3, [pc, #96]	; (8015bd0 <sqrt+0xb0>)
 8015b70:	9301      	str	r3, [sp, #4]
 8015b72:	9708      	str	r7, [sp, #32]
 8015b74:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015b78:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015b7c:	b9b6      	cbnz	r6, 8015bac <sqrt+0x8c>
 8015b7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8015b82:	4668      	mov	r0, sp
 8015b84:	f001 fcfc 	bl	8017580 <matherr>
 8015b88:	b1d0      	cbz	r0, 8015bc0 <sqrt+0xa0>
 8015b8a:	9b08      	ldr	r3, [sp, #32]
 8015b8c:	b11b      	cbz	r3, 8015b96 <sqrt+0x76>
 8015b8e:	f001 fdbf 	bl	8017710 <__errno>
 8015b92:	9b08      	ldr	r3, [sp, #32]
 8015b94:	6003      	str	r3, [r0, #0]
 8015b96:	ed9d 8b06 	vldr	d8, [sp, #24]
 8015b9a:	eeb0 0a48 	vmov.f32	s0, s16
 8015b9e:	eef0 0a68 	vmov.f32	s1, s17
 8015ba2:	b00b      	add	sp, #44	; 0x2c
 8015ba4:	ecbd 8b02 	vpop	{d8}
 8015ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bac:	4642      	mov	r2, r8
 8015bae:	464b      	mov	r3, r9
 8015bb0:	4640      	mov	r0, r8
 8015bb2:	4649      	mov	r1, r9
 8015bb4:	f7ea feca 	bl	800094c <__aeabi_ddiv>
 8015bb8:	2e02      	cmp	r6, #2
 8015bba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015bbe:	d1e0      	bne.n	8015b82 <sqrt+0x62>
 8015bc0:	f001 fda6 	bl	8017710 <__errno>
 8015bc4:	2321      	movs	r3, #33	; 0x21
 8015bc6:	6003      	str	r3, [r0, #0]
 8015bc8:	e7df      	b.n	8015b8a <sqrt+0x6a>
 8015bca:	bf00      	nop
 8015bcc:	20009dcc 	.word	0x20009dcc
 8015bd0:	08037ef4 	.word	0x08037ef4

08015bd4 <logf>:
 8015bd4:	b510      	push	{r4, lr}
 8015bd6:	ed2d 8b02 	vpush	{d8}
 8015bda:	b08a      	sub	sp, #40	; 0x28
 8015bdc:	eeb0 8a40 	vmov.f32	s16, s0
 8015be0:	f000 fe84 	bl	80168ec <__ieee754_logf>
 8015be4:	4b31      	ldr	r3, [pc, #196]	; (8015cac <logf+0xd8>)
 8015be6:	f993 4000 	ldrsb.w	r4, [r3]
 8015bea:	1c63      	adds	r3, r4, #1
 8015bec:	d059      	beq.n	8015ca2 <logf+0xce>
 8015bee:	eeb4 8a48 	vcmp.f32	s16, s16
 8015bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf6:	d654      	bvs.n	8015ca2 <logf+0xce>
 8015bf8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c00:	dc4f      	bgt.n	8015ca2 <logf+0xce>
 8015c02:	4b2b      	ldr	r3, [pc, #172]	; (8015cb0 <logf+0xdc>)
 8015c04:	9301      	str	r3, [sp, #4]
 8015c06:	ee18 0a10 	vmov	r0, s16
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	9308      	str	r3, [sp, #32]
 8015c0e:	f7ea fd1b 	bl	8000648 <__aeabi_f2d>
 8015c12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c1a:	b994      	cbnz	r4, 8015c42 <logf+0x6e>
 8015c1c:	4b25      	ldr	r3, [pc, #148]	; (8015cb4 <logf+0xe0>)
 8015c1e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015c22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015c2e:	d025      	beq.n	8015c7c <logf+0xa8>
 8015c30:	2301      	movs	r3, #1
 8015c32:	2c02      	cmp	r4, #2
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	d116      	bne.n	8015c66 <logf+0x92>
 8015c38:	f001 fd6a 	bl	8017710 <__errno>
 8015c3c:	2321      	movs	r3, #33	; 0x21
 8015c3e:	6003      	str	r3, [r0, #0]
 8015c40:	e016      	b.n	8015c70 <logf+0x9c>
 8015c42:	4b1d      	ldr	r3, [pc, #116]	; (8015cb8 <logf+0xe4>)
 8015c44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015c48:	2200      	movs	r2, #0
 8015c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015c52:	d1ed      	bne.n	8015c30 <logf+0x5c>
 8015c54:	2302      	movs	r3, #2
 8015c56:	429c      	cmp	r4, r3
 8015c58:	9300      	str	r3, [sp, #0]
 8015c5a:	d111      	bne.n	8015c80 <logf+0xac>
 8015c5c:	f001 fd58 	bl	8017710 <__errno>
 8015c60:	2322      	movs	r3, #34	; 0x22
 8015c62:	6003      	str	r3, [r0, #0]
 8015c64:	e011      	b.n	8015c8a <logf+0xb6>
 8015c66:	4668      	mov	r0, sp
 8015c68:	f001 fc8a 	bl	8017580 <matherr>
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	d0e3      	beq.n	8015c38 <logf+0x64>
 8015c70:	4812      	ldr	r0, [pc, #72]	; (8015cbc <logf+0xe8>)
 8015c72:	f001 fc89 	bl	8017588 <nan>
 8015c76:	ed8d 0b06 	vstr	d0, [sp, #24]
 8015c7a:	e006      	b.n	8015c8a <logf+0xb6>
 8015c7c:	2302      	movs	r3, #2
 8015c7e:	9300      	str	r3, [sp, #0]
 8015c80:	4668      	mov	r0, sp
 8015c82:	f001 fc7d 	bl	8017580 <matherr>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	d0e8      	beq.n	8015c5c <logf+0x88>
 8015c8a:	9b08      	ldr	r3, [sp, #32]
 8015c8c:	b11b      	cbz	r3, 8015c96 <logf+0xc2>
 8015c8e:	f001 fd3f 	bl	8017710 <__errno>
 8015c92:	9b08      	ldr	r3, [sp, #32]
 8015c94:	6003      	str	r3, [r0, #0]
 8015c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c9a:	f7eb f805 	bl	8000ca8 <__aeabi_d2f>
 8015c9e:	ee00 0a10 	vmov	s0, r0
 8015ca2:	b00a      	add	sp, #40	; 0x28
 8015ca4:	ecbd 8b02 	vpop	{d8}
 8015ca8:	bd10      	pop	{r4, pc}
 8015caa:	bf00      	nop
 8015cac:	20009dcc 	.word	0x20009dcc
 8015cb0:	08037ef9 	.word	0x08037ef9
 8015cb4:	c7efffff 	.word	0xc7efffff
 8015cb8:	fff00000 	.word	0xfff00000
 8015cbc:	0803827d 	.word	0x0803827d

08015cc0 <sqrtf>:
 8015cc0:	b510      	push	{r4, lr}
 8015cc2:	ed2d 8b02 	vpush	{d8}
 8015cc6:	b08a      	sub	sp, #40	; 0x28
 8015cc8:	eeb0 8a40 	vmov.f32	s16, s0
 8015ccc:	f000 fefc 	bl	8016ac8 <__ieee754_sqrtf>
 8015cd0:	4b21      	ldr	r3, [pc, #132]	; (8015d58 <sqrtf+0x98>)
 8015cd2:	f993 4000 	ldrsb.w	r4, [r3]
 8015cd6:	1c63      	adds	r3, r4, #1
 8015cd8:	d02c      	beq.n	8015d34 <sqrtf+0x74>
 8015cda:	eeb4 8a48 	vcmp.f32	s16, s16
 8015cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce2:	d627      	bvs.n	8015d34 <sqrtf+0x74>
 8015ce4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cec:	d522      	bpl.n	8015d34 <sqrtf+0x74>
 8015cee:	2301      	movs	r3, #1
 8015cf0:	9300      	str	r3, [sp, #0]
 8015cf2:	4b1a      	ldr	r3, [pc, #104]	; (8015d5c <sqrtf+0x9c>)
 8015cf4:	9301      	str	r3, [sp, #4]
 8015cf6:	ee18 0a10 	vmov	r0, s16
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	9308      	str	r3, [sp, #32]
 8015cfe:	f7ea fca3 	bl	8000648 <__aeabi_f2d>
 8015d02:	2200      	movs	r2, #0
 8015d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	b9ac      	cbnz	r4, 8015d3c <sqrtf+0x7c>
 8015d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015d14:	4668      	mov	r0, sp
 8015d16:	f001 fc33 	bl	8017580 <matherr>
 8015d1a:	b1b8      	cbz	r0, 8015d4c <sqrtf+0x8c>
 8015d1c:	9b08      	ldr	r3, [sp, #32]
 8015d1e:	b11b      	cbz	r3, 8015d28 <sqrtf+0x68>
 8015d20:	f001 fcf6 	bl	8017710 <__errno>
 8015d24:	9b08      	ldr	r3, [sp, #32]
 8015d26:	6003      	str	r3, [r0, #0]
 8015d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d2c:	f7ea ffbc 	bl	8000ca8 <__aeabi_d2f>
 8015d30:	ee00 0a10 	vmov	s0, r0
 8015d34:	b00a      	add	sp, #40	; 0x28
 8015d36:	ecbd 8b02 	vpop	{d8}
 8015d3a:	bd10      	pop	{r4, pc}
 8015d3c:	4610      	mov	r0, r2
 8015d3e:	4619      	mov	r1, r3
 8015d40:	f7ea fe04 	bl	800094c <__aeabi_ddiv>
 8015d44:	2c02      	cmp	r4, #2
 8015d46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015d4a:	d1e3      	bne.n	8015d14 <sqrtf+0x54>
 8015d4c:	f001 fce0 	bl	8017710 <__errno>
 8015d50:	2321      	movs	r3, #33	; 0x21
 8015d52:	6003      	str	r3, [r0, #0]
 8015d54:	e7e2      	b.n	8015d1c <sqrtf+0x5c>
 8015d56:	bf00      	nop
 8015d58:	20009dcc 	.word	0x20009dcc
 8015d5c:	08037efe 	.word	0x08037efe

08015d60 <__ieee754_exp>:
 8015d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d64:	ec55 4b10 	vmov	r4, r5, d0
 8015d68:	4aab      	ldr	r2, [pc, #684]	; (8016018 <__ieee754_exp+0x2b8>)
 8015d6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015d6e:	4296      	cmp	r6, r2
 8015d70:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8015d74:	d932      	bls.n	8015ddc <__ieee754_exp+0x7c>
 8015d76:	4aa9      	ldr	r2, [pc, #676]	; (801601c <__ieee754_exp+0x2bc>)
 8015d78:	4296      	cmp	r6, r2
 8015d7a:	d913      	bls.n	8015da4 <__ieee754_exp+0x44>
 8015d7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8015d80:	4323      	orrs	r3, r4
 8015d82:	ee10 2a10 	vmov	r2, s0
 8015d86:	d007      	beq.n	8015d98 <__ieee754_exp+0x38>
 8015d88:	462b      	mov	r3, r5
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	4629      	mov	r1, r5
 8015d8e:	f7ea fafd 	bl	800038c <__adddf3>
 8015d92:	4604      	mov	r4, r0
 8015d94:	460d      	mov	r5, r1
 8015d96:	e000      	b.n	8015d9a <__ieee754_exp+0x3a>
 8015d98:	b9ef      	cbnz	r7, 8015dd6 <__ieee754_exp+0x76>
 8015d9a:	ec45 4b10 	vmov	d0, r4, r5
 8015d9e:	b004      	add	sp, #16
 8015da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015da4:	a386      	add	r3, pc, #536	; (adr r3, 8015fc0 <__ieee754_exp+0x260>)
 8015da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015daa:	ee10 0a10 	vmov	r0, s0
 8015dae:	4629      	mov	r1, r5
 8015db0:	f7ea ff32 	bl	8000c18 <__aeabi_dcmpgt>
 8015db4:	b138      	cbz	r0, 8015dc6 <__ieee754_exp+0x66>
 8015db6:	a384      	add	r3, pc, #528	; (adr r3, 8015fc8 <__ieee754_exp+0x268>)
 8015db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dbc:	4610      	mov	r0, r2
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	f7ea fc9a 	bl	80006f8 <__aeabi_dmul>
 8015dc4:	e7e5      	b.n	8015d92 <__ieee754_exp+0x32>
 8015dc6:	a382      	add	r3, pc, #520	; (adr r3, 8015fd0 <__ieee754_exp+0x270>)
 8015dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dcc:	4620      	mov	r0, r4
 8015dce:	4629      	mov	r1, r5
 8015dd0:	f7ea ff04 	bl	8000bdc <__aeabi_dcmplt>
 8015dd4:	b130      	cbz	r0, 8015de4 <__ieee754_exp+0x84>
 8015dd6:	2400      	movs	r4, #0
 8015dd8:	2500      	movs	r5, #0
 8015dda:	e7de      	b.n	8015d9a <__ieee754_exp+0x3a>
 8015ddc:	4b90      	ldr	r3, [pc, #576]	; (8016020 <__ieee754_exp+0x2c0>)
 8015dde:	429e      	cmp	r6, r3
 8015de0:	f240 80a6 	bls.w	8015f30 <__ieee754_exp+0x1d0>
 8015de4:	4b8f      	ldr	r3, [pc, #572]	; (8016024 <__ieee754_exp+0x2c4>)
 8015de6:	429e      	cmp	r6, r3
 8015de8:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8015dec:	d875      	bhi.n	8015eda <__ieee754_exp+0x17a>
 8015dee:	4b8e      	ldr	r3, [pc, #568]	; (8016028 <__ieee754_exp+0x2c8>)
 8015df0:	4e8e      	ldr	r6, [pc, #568]	; (801602c <__ieee754_exp+0x2cc>)
 8015df2:	4443      	add	r3, r8
 8015df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df8:	4620      	mov	r0, r4
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	f7ea fac4 	bl	8000388 <__aeabi_dsub>
 8015e00:	4446      	add	r6, r8
 8015e02:	e9cd 0100 	strd	r0, r1, [sp]
 8015e06:	e9d6 8900 	ldrd	r8, r9, [r6]
 8015e0a:	f1c7 0a01 	rsb	sl, r7, #1
 8015e0e:	ebaa 0a07 	sub.w	sl, sl, r7
 8015e12:	4642      	mov	r2, r8
 8015e14:	464b      	mov	r3, r9
 8015e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e1a:	f7ea fab5 	bl	8000388 <__aeabi_dsub>
 8015e1e:	4604      	mov	r4, r0
 8015e20:	460d      	mov	r5, r1
 8015e22:	4622      	mov	r2, r4
 8015e24:	462b      	mov	r3, r5
 8015e26:	4620      	mov	r0, r4
 8015e28:	4629      	mov	r1, r5
 8015e2a:	f7ea fc65 	bl	80006f8 <__aeabi_dmul>
 8015e2e:	a36a      	add	r3, pc, #424	; (adr r3, 8015fd8 <__ieee754_exp+0x278>)
 8015e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e34:	4606      	mov	r6, r0
 8015e36:	460f      	mov	r7, r1
 8015e38:	f7ea fc5e 	bl	80006f8 <__aeabi_dmul>
 8015e3c:	a368      	add	r3, pc, #416	; (adr r3, 8015fe0 <__ieee754_exp+0x280>)
 8015e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e42:	f7ea faa1 	bl	8000388 <__aeabi_dsub>
 8015e46:	4632      	mov	r2, r6
 8015e48:	463b      	mov	r3, r7
 8015e4a:	f7ea fc55 	bl	80006f8 <__aeabi_dmul>
 8015e4e:	a366      	add	r3, pc, #408	; (adr r3, 8015fe8 <__ieee754_exp+0x288>)
 8015e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e54:	f7ea fa9a 	bl	800038c <__adddf3>
 8015e58:	4632      	mov	r2, r6
 8015e5a:	463b      	mov	r3, r7
 8015e5c:	f7ea fc4c 	bl	80006f8 <__aeabi_dmul>
 8015e60:	a363      	add	r3, pc, #396	; (adr r3, 8015ff0 <__ieee754_exp+0x290>)
 8015e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e66:	f7ea fa8f 	bl	8000388 <__aeabi_dsub>
 8015e6a:	4632      	mov	r2, r6
 8015e6c:	463b      	mov	r3, r7
 8015e6e:	f7ea fc43 	bl	80006f8 <__aeabi_dmul>
 8015e72:	a361      	add	r3, pc, #388	; (adr r3, 8015ff8 <__ieee754_exp+0x298>)
 8015e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e78:	f7ea fa88 	bl	800038c <__adddf3>
 8015e7c:	4632      	mov	r2, r6
 8015e7e:	463b      	mov	r3, r7
 8015e80:	f7ea fc3a 	bl	80006f8 <__aeabi_dmul>
 8015e84:	4602      	mov	r2, r0
 8015e86:	460b      	mov	r3, r1
 8015e88:	4620      	mov	r0, r4
 8015e8a:	4629      	mov	r1, r5
 8015e8c:	f7ea fa7c 	bl	8000388 <__aeabi_dsub>
 8015e90:	4602      	mov	r2, r0
 8015e92:	460b      	mov	r3, r1
 8015e94:	4606      	mov	r6, r0
 8015e96:	460f      	mov	r7, r1
 8015e98:	4620      	mov	r0, r4
 8015e9a:	4629      	mov	r1, r5
 8015e9c:	f7ea fc2c 	bl	80006f8 <__aeabi_dmul>
 8015ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ea4:	f1ba 0f00 	cmp.w	sl, #0
 8015ea8:	d15c      	bne.n	8015f64 <__ieee754_exp+0x204>
 8015eaa:	2200      	movs	r2, #0
 8015eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	4639      	mov	r1, r7
 8015eb4:	f7ea fa68 	bl	8000388 <__aeabi_dsub>
 8015eb8:	4602      	mov	r2, r0
 8015eba:	460b      	mov	r3, r1
 8015ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ec0:	f7ea fd44 	bl	800094c <__aeabi_ddiv>
 8015ec4:	4622      	mov	r2, r4
 8015ec6:	462b      	mov	r3, r5
 8015ec8:	f7ea fa5e 	bl	8000388 <__aeabi_dsub>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	460b      	mov	r3, r1
 8015ed0:	2000      	movs	r0, #0
 8015ed2:	4957      	ldr	r1, [pc, #348]	; (8016030 <__ieee754_exp+0x2d0>)
 8015ed4:	f7ea fa58 	bl	8000388 <__aeabi_dsub>
 8015ed8:	e75b      	b.n	8015d92 <__ieee754_exp+0x32>
 8015eda:	4e56      	ldr	r6, [pc, #344]	; (8016034 <__ieee754_exp+0x2d4>)
 8015edc:	a348      	add	r3, pc, #288	; (adr r3, 8016000 <__ieee754_exp+0x2a0>)
 8015ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee2:	4446      	add	r6, r8
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	4629      	mov	r1, r5
 8015ee8:	f7ea fc06 	bl	80006f8 <__aeabi_dmul>
 8015eec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015ef0:	f7ea fa4c 	bl	800038c <__adddf3>
 8015ef4:	f7ea feb0 	bl	8000c58 <__aeabi_d2iz>
 8015ef8:	4682      	mov	sl, r0
 8015efa:	f7ea fb93 	bl	8000624 <__aeabi_i2d>
 8015efe:	a342      	add	r3, pc, #264	; (adr r3, 8016008 <__ieee754_exp+0x2a8>)
 8015f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f04:	4606      	mov	r6, r0
 8015f06:	460f      	mov	r7, r1
 8015f08:	f7ea fbf6 	bl	80006f8 <__aeabi_dmul>
 8015f0c:	4602      	mov	r2, r0
 8015f0e:	460b      	mov	r3, r1
 8015f10:	4620      	mov	r0, r4
 8015f12:	4629      	mov	r1, r5
 8015f14:	f7ea fa38 	bl	8000388 <__aeabi_dsub>
 8015f18:	a33d      	add	r3, pc, #244	; (adr r3, 8016010 <__ieee754_exp+0x2b0>)
 8015f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1e:	e9cd 0100 	strd	r0, r1, [sp]
 8015f22:	4630      	mov	r0, r6
 8015f24:	4639      	mov	r1, r7
 8015f26:	f7ea fbe7 	bl	80006f8 <__aeabi_dmul>
 8015f2a:	4680      	mov	r8, r0
 8015f2c:	4689      	mov	r9, r1
 8015f2e:	e770      	b.n	8015e12 <__ieee754_exp+0xb2>
 8015f30:	4b41      	ldr	r3, [pc, #260]	; (8016038 <__ieee754_exp+0x2d8>)
 8015f32:	429e      	cmp	r6, r3
 8015f34:	d811      	bhi.n	8015f5a <__ieee754_exp+0x1fa>
 8015f36:	a324      	add	r3, pc, #144	; (adr r3, 8015fc8 <__ieee754_exp+0x268>)
 8015f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3c:	ee10 0a10 	vmov	r0, s0
 8015f40:	4629      	mov	r1, r5
 8015f42:	f7ea fa23 	bl	800038c <__adddf3>
 8015f46:	2200      	movs	r2, #0
 8015f48:	4b39      	ldr	r3, [pc, #228]	; (8016030 <__ieee754_exp+0x2d0>)
 8015f4a:	f7ea fe65 	bl	8000c18 <__aeabi_dcmpgt>
 8015f4e:	b138      	cbz	r0, 8015f60 <__ieee754_exp+0x200>
 8015f50:	2200      	movs	r2, #0
 8015f52:	4b37      	ldr	r3, [pc, #220]	; (8016030 <__ieee754_exp+0x2d0>)
 8015f54:	4620      	mov	r0, r4
 8015f56:	4629      	mov	r1, r5
 8015f58:	e719      	b.n	8015d8e <__ieee754_exp+0x2e>
 8015f5a:	f04f 0a00 	mov.w	sl, #0
 8015f5e:	e760      	b.n	8015e22 <__ieee754_exp+0xc2>
 8015f60:	4682      	mov	sl, r0
 8015f62:	e75e      	b.n	8015e22 <__ieee754_exp+0xc2>
 8015f64:	4632      	mov	r2, r6
 8015f66:	463b      	mov	r3, r7
 8015f68:	2000      	movs	r0, #0
 8015f6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8015f6e:	f7ea fa0b 	bl	8000388 <__aeabi_dsub>
 8015f72:	4602      	mov	r2, r0
 8015f74:	460b      	mov	r3, r1
 8015f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f7a:	f7ea fce7 	bl	800094c <__aeabi_ddiv>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	460b      	mov	r3, r1
 8015f82:	4640      	mov	r0, r8
 8015f84:	4649      	mov	r1, r9
 8015f86:	f7ea f9ff 	bl	8000388 <__aeabi_dsub>
 8015f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f8e:	f7ea f9fb 	bl	8000388 <__aeabi_dsub>
 8015f92:	4602      	mov	r2, r0
 8015f94:	460b      	mov	r3, r1
 8015f96:	2000      	movs	r0, #0
 8015f98:	4925      	ldr	r1, [pc, #148]	; (8016030 <__ieee754_exp+0x2d0>)
 8015f9a:	f7ea f9f5 	bl	8000388 <__aeabi_dsub>
 8015f9e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8015fa2:	4592      	cmp	sl, r2
 8015fa4:	db02      	blt.n	8015fac <__ieee754_exp+0x24c>
 8015fa6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8015faa:	e6f2      	b.n	8015d92 <__ieee754_exp+0x32>
 8015fac:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8015fb0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8015fba:	e701      	b.n	8015dc0 <__ieee754_exp+0x60>
 8015fbc:	f3af 8000 	nop.w
 8015fc0:	fefa39ef 	.word	0xfefa39ef
 8015fc4:	40862e42 	.word	0x40862e42
 8015fc8:	8800759c 	.word	0x8800759c
 8015fcc:	7e37e43c 	.word	0x7e37e43c
 8015fd0:	d52d3051 	.word	0xd52d3051
 8015fd4:	c0874910 	.word	0xc0874910
 8015fd8:	72bea4d0 	.word	0x72bea4d0
 8015fdc:	3e663769 	.word	0x3e663769
 8015fe0:	c5d26bf1 	.word	0xc5d26bf1
 8015fe4:	3ebbbd41 	.word	0x3ebbbd41
 8015fe8:	af25de2c 	.word	0xaf25de2c
 8015fec:	3f11566a 	.word	0x3f11566a
 8015ff0:	16bebd93 	.word	0x16bebd93
 8015ff4:	3f66c16c 	.word	0x3f66c16c
 8015ff8:	5555553e 	.word	0x5555553e
 8015ffc:	3fc55555 	.word	0x3fc55555
 8016000:	652b82fe 	.word	0x652b82fe
 8016004:	3ff71547 	.word	0x3ff71547
 8016008:	fee00000 	.word	0xfee00000
 801600c:	3fe62e42 	.word	0x3fe62e42
 8016010:	35793c76 	.word	0x35793c76
 8016014:	3dea39ef 	.word	0x3dea39ef
 8016018:	40862e41 	.word	0x40862e41
 801601c:	7fefffff 	.word	0x7fefffff
 8016020:	3fd62e42 	.word	0x3fd62e42
 8016024:	3ff0a2b1 	.word	0x3ff0a2b1
 8016028:	08037f18 	.word	0x08037f18
 801602c:	08037f28 	.word	0x08037f28
 8016030:	3ff00000 	.word	0x3ff00000
 8016034:	08037f08 	.word	0x08037f08
 8016038:	3e2fffff 	.word	0x3e2fffff
 801603c:	00000000 	.word	0x00000000

08016040 <__ieee754_log>:
 8016040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016044:	ec51 0b10 	vmov	r0, r1, d0
 8016048:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801604c:	b087      	sub	sp, #28
 801604e:	460d      	mov	r5, r1
 8016050:	da27      	bge.n	80160a2 <__ieee754_log+0x62>
 8016052:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016056:	4303      	orrs	r3, r0
 8016058:	ee10 2a10 	vmov	r2, s0
 801605c:	d10a      	bne.n	8016074 <__ieee754_log+0x34>
 801605e:	49cc      	ldr	r1, [pc, #816]	; (8016390 <__ieee754_log+0x350>)
 8016060:	2200      	movs	r2, #0
 8016062:	2300      	movs	r3, #0
 8016064:	2000      	movs	r0, #0
 8016066:	f7ea fc71 	bl	800094c <__aeabi_ddiv>
 801606a:	ec41 0b10 	vmov	d0, r0, r1
 801606e:	b007      	add	sp, #28
 8016070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016074:	2900      	cmp	r1, #0
 8016076:	da05      	bge.n	8016084 <__ieee754_log+0x44>
 8016078:	460b      	mov	r3, r1
 801607a:	f7ea f985 	bl	8000388 <__aeabi_dsub>
 801607e:	2200      	movs	r2, #0
 8016080:	2300      	movs	r3, #0
 8016082:	e7f0      	b.n	8016066 <__ieee754_log+0x26>
 8016084:	4bc3      	ldr	r3, [pc, #780]	; (8016394 <__ieee754_log+0x354>)
 8016086:	2200      	movs	r2, #0
 8016088:	f7ea fb36 	bl	80006f8 <__aeabi_dmul>
 801608c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8016090:	460d      	mov	r5, r1
 8016092:	4ac1      	ldr	r2, [pc, #772]	; (8016398 <__ieee754_log+0x358>)
 8016094:	4295      	cmp	r5, r2
 8016096:	dd06      	ble.n	80160a6 <__ieee754_log+0x66>
 8016098:	4602      	mov	r2, r0
 801609a:	460b      	mov	r3, r1
 801609c:	f7ea f976 	bl	800038c <__adddf3>
 80160a0:	e7e3      	b.n	801606a <__ieee754_log+0x2a>
 80160a2:	2300      	movs	r3, #0
 80160a4:	e7f5      	b.n	8016092 <__ieee754_log+0x52>
 80160a6:	152c      	asrs	r4, r5, #20
 80160a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80160ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80160b0:	441c      	add	r4, r3
 80160b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80160b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80160ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80160be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80160c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80160c6:	ea42 0105 	orr.w	r1, r2, r5
 80160ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80160ce:	2200      	movs	r2, #0
 80160d0:	4bb2      	ldr	r3, [pc, #712]	; (801639c <__ieee754_log+0x35c>)
 80160d2:	f7ea f959 	bl	8000388 <__aeabi_dsub>
 80160d6:	1cab      	adds	r3, r5, #2
 80160d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80160dc:	2b02      	cmp	r3, #2
 80160de:	4682      	mov	sl, r0
 80160e0:	468b      	mov	fp, r1
 80160e2:	f04f 0200 	mov.w	r2, #0
 80160e6:	dc53      	bgt.n	8016190 <__ieee754_log+0x150>
 80160e8:	2300      	movs	r3, #0
 80160ea:	f7ea fd6d 	bl	8000bc8 <__aeabi_dcmpeq>
 80160ee:	b1d0      	cbz	r0, 8016126 <__ieee754_log+0xe6>
 80160f0:	2c00      	cmp	r4, #0
 80160f2:	f000 8120 	beq.w	8016336 <__ieee754_log+0x2f6>
 80160f6:	4620      	mov	r0, r4
 80160f8:	f7ea fa94 	bl	8000624 <__aeabi_i2d>
 80160fc:	a390      	add	r3, pc, #576	; (adr r3, 8016340 <__ieee754_log+0x300>)
 80160fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016102:	4606      	mov	r6, r0
 8016104:	460f      	mov	r7, r1
 8016106:	f7ea faf7 	bl	80006f8 <__aeabi_dmul>
 801610a:	a38f      	add	r3, pc, #572	; (adr r3, 8016348 <__ieee754_log+0x308>)
 801610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016110:	4604      	mov	r4, r0
 8016112:	460d      	mov	r5, r1
 8016114:	4630      	mov	r0, r6
 8016116:	4639      	mov	r1, r7
 8016118:	f7ea faee 	bl	80006f8 <__aeabi_dmul>
 801611c:	4602      	mov	r2, r0
 801611e:	460b      	mov	r3, r1
 8016120:	4620      	mov	r0, r4
 8016122:	4629      	mov	r1, r5
 8016124:	e7ba      	b.n	801609c <__ieee754_log+0x5c>
 8016126:	a38a      	add	r3, pc, #552	; (adr r3, 8016350 <__ieee754_log+0x310>)
 8016128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612c:	4650      	mov	r0, sl
 801612e:	4659      	mov	r1, fp
 8016130:	f7ea fae2 	bl	80006f8 <__aeabi_dmul>
 8016134:	4602      	mov	r2, r0
 8016136:	460b      	mov	r3, r1
 8016138:	2000      	movs	r0, #0
 801613a:	4999      	ldr	r1, [pc, #612]	; (80163a0 <__ieee754_log+0x360>)
 801613c:	f7ea f924 	bl	8000388 <__aeabi_dsub>
 8016140:	4652      	mov	r2, sl
 8016142:	4606      	mov	r6, r0
 8016144:	460f      	mov	r7, r1
 8016146:	465b      	mov	r3, fp
 8016148:	4650      	mov	r0, sl
 801614a:	4659      	mov	r1, fp
 801614c:	f7ea fad4 	bl	80006f8 <__aeabi_dmul>
 8016150:	4602      	mov	r2, r0
 8016152:	460b      	mov	r3, r1
 8016154:	4630      	mov	r0, r6
 8016156:	4639      	mov	r1, r7
 8016158:	f7ea face 	bl	80006f8 <__aeabi_dmul>
 801615c:	4606      	mov	r6, r0
 801615e:	460f      	mov	r7, r1
 8016160:	b914      	cbnz	r4, 8016168 <__ieee754_log+0x128>
 8016162:	4632      	mov	r2, r6
 8016164:	463b      	mov	r3, r7
 8016166:	e0a0      	b.n	80162aa <__ieee754_log+0x26a>
 8016168:	4620      	mov	r0, r4
 801616a:	f7ea fa5b 	bl	8000624 <__aeabi_i2d>
 801616e:	a374      	add	r3, pc, #464	; (adr r3, 8016340 <__ieee754_log+0x300>)
 8016170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016174:	4680      	mov	r8, r0
 8016176:	4689      	mov	r9, r1
 8016178:	f7ea fabe 	bl	80006f8 <__aeabi_dmul>
 801617c:	a372      	add	r3, pc, #456	; (adr r3, 8016348 <__ieee754_log+0x308>)
 801617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016182:	4604      	mov	r4, r0
 8016184:	460d      	mov	r5, r1
 8016186:	4640      	mov	r0, r8
 8016188:	4649      	mov	r1, r9
 801618a:	f7ea fab5 	bl	80006f8 <__aeabi_dmul>
 801618e:	e0a5      	b.n	80162dc <__ieee754_log+0x29c>
 8016190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016194:	f7ea f8fa 	bl	800038c <__adddf3>
 8016198:	4602      	mov	r2, r0
 801619a:	460b      	mov	r3, r1
 801619c:	4650      	mov	r0, sl
 801619e:	4659      	mov	r1, fp
 80161a0:	f7ea fbd4 	bl	800094c <__aeabi_ddiv>
 80161a4:	e9cd 0100 	strd	r0, r1, [sp]
 80161a8:	4620      	mov	r0, r4
 80161aa:	f7ea fa3b 	bl	8000624 <__aeabi_i2d>
 80161ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80161b6:	4610      	mov	r0, r2
 80161b8:	4619      	mov	r1, r3
 80161ba:	f7ea fa9d 	bl	80006f8 <__aeabi_dmul>
 80161be:	4602      	mov	r2, r0
 80161c0:	460b      	mov	r3, r1
 80161c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80161c6:	f7ea fa97 	bl	80006f8 <__aeabi_dmul>
 80161ca:	a363      	add	r3, pc, #396	; (adr r3, 8016358 <__ieee754_log+0x318>)
 80161cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d0:	4680      	mov	r8, r0
 80161d2:	4689      	mov	r9, r1
 80161d4:	f7ea fa90 	bl	80006f8 <__aeabi_dmul>
 80161d8:	a361      	add	r3, pc, #388	; (adr r3, 8016360 <__ieee754_log+0x320>)
 80161da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161de:	f7ea f8d5 	bl	800038c <__adddf3>
 80161e2:	4642      	mov	r2, r8
 80161e4:	464b      	mov	r3, r9
 80161e6:	f7ea fa87 	bl	80006f8 <__aeabi_dmul>
 80161ea:	a35f      	add	r3, pc, #380	; (adr r3, 8016368 <__ieee754_log+0x328>)
 80161ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f0:	f7ea f8cc 	bl	800038c <__adddf3>
 80161f4:	4642      	mov	r2, r8
 80161f6:	464b      	mov	r3, r9
 80161f8:	f7ea fa7e 	bl	80006f8 <__aeabi_dmul>
 80161fc:	a35c      	add	r3, pc, #368	; (adr r3, 8016370 <__ieee754_log+0x330>)
 80161fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016202:	f7ea f8c3 	bl	800038c <__adddf3>
 8016206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801620a:	f7ea fa75 	bl	80006f8 <__aeabi_dmul>
 801620e:	a35a      	add	r3, pc, #360	; (adr r3, 8016378 <__ieee754_log+0x338>)
 8016210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016218:	4640      	mov	r0, r8
 801621a:	4649      	mov	r1, r9
 801621c:	f7ea fa6c 	bl	80006f8 <__aeabi_dmul>
 8016220:	a357      	add	r3, pc, #348	; (adr r3, 8016380 <__ieee754_log+0x340>)
 8016222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016226:	f7ea f8b1 	bl	800038c <__adddf3>
 801622a:	4642      	mov	r2, r8
 801622c:	464b      	mov	r3, r9
 801622e:	f7ea fa63 	bl	80006f8 <__aeabi_dmul>
 8016232:	a355      	add	r3, pc, #340	; (adr r3, 8016388 <__ieee754_log+0x348>)
 8016234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016238:	f7ea f8a8 	bl	800038c <__adddf3>
 801623c:	4642      	mov	r2, r8
 801623e:	464b      	mov	r3, r9
 8016240:	f7ea fa5a 	bl	80006f8 <__aeabi_dmul>
 8016244:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8016248:	4602      	mov	r2, r0
 801624a:	460b      	mov	r3, r1
 801624c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8016250:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016254:	f7ea f89a 	bl	800038c <__adddf3>
 8016258:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801625c:	3551      	adds	r5, #81	; 0x51
 801625e:	4335      	orrs	r5, r6
 8016260:	2d00      	cmp	r5, #0
 8016262:	4680      	mov	r8, r0
 8016264:	4689      	mov	r9, r1
 8016266:	dd48      	ble.n	80162fa <__ieee754_log+0x2ba>
 8016268:	2200      	movs	r2, #0
 801626a:	4b4d      	ldr	r3, [pc, #308]	; (80163a0 <__ieee754_log+0x360>)
 801626c:	4650      	mov	r0, sl
 801626e:	4659      	mov	r1, fp
 8016270:	f7ea fa42 	bl	80006f8 <__aeabi_dmul>
 8016274:	4652      	mov	r2, sl
 8016276:	465b      	mov	r3, fp
 8016278:	f7ea fa3e 	bl	80006f8 <__aeabi_dmul>
 801627c:	4602      	mov	r2, r0
 801627e:	460b      	mov	r3, r1
 8016280:	4606      	mov	r6, r0
 8016282:	460f      	mov	r7, r1
 8016284:	4640      	mov	r0, r8
 8016286:	4649      	mov	r1, r9
 8016288:	f7ea f880 	bl	800038c <__adddf3>
 801628c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016290:	f7ea fa32 	bl	80006f8 <__aeabi_dmul>
 8016294:	4680      	mov	r8, r0
 8016296:	4689      	mov	r9, r1
 8016298:	b964      	cbnz	r4, 80162b4 <__ieee754_log+0x274>
 801629a:	4602      	mov	r2, r0
 801629c:	460b      	mov	r3, r1
 801629e:	4630      	mov	r0, r6
 80162a0:	4639      	mov	r1, r7
 80162a2:	f7ea f871 	bl	8000388 <__aeabi_dsub>
 80162a6:	4602      	mov	r2, r0
 80162a8:	460b      	mov	r3, r1
 80162aa:	4650      	mov	r0, sl
 80162ac:	4659      	mov	r1, fp
 80162ae:	f7ea f86b 	bl	8000388 <__aeabi_dsub>
 80162b2:	e6da      	b.n	801606a <__ieee754_log+0x2a>
 80162b4:	a322      	add	r3, pc, #136	; (adr r3, 8016340 <__ieee754_log+0x300>)
 80162b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162be:	f7ea fa1b 	bl	80006f8 <__aeabi_dmul>
 80162c2:	a321      	add	r3, pc, #132	; (adr r3, 8016348 <__ieee754_log+0x308>)
 80162c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c8:	4604      	mov	r4, r0
 80162ca:	460d      	mov	r5, r1
 80162cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162d0:	f7ea fa12 	bl	80006f8 <__aeabi_dmul>
 80162d4:	4642      	mov	r2, r8
 80162d6:	464b      	mov	r3, r9
 80162d8:	f7ea f858 	bl	800038c <__adddf3>
 80162dc:	4602      	mov	r2, r0
 80162de:	460b      	mov	r3, r1
 80162e0:	4630      	mov	r0, r6
 80162e2:	4639      	mov	r1, r7
 80162e4:	f7ea f850 	bl	8000388 <__aeabi_dsub>
 80162e8:	4652      	mov	r2, sl
 80162ea:	465b      	mov	r3, fp
 80162ec:	f7ea f84c 	bl	8000388 <__aeabi_dsub>
 80162f0:	4602      	mov	r2, r0
 80162f2:	460b      	mov	r3, r1
 80162f4:	4620      	mov	r0, r4
 80162f6:	4629      	mov	r1, r5
 80162f8:	e7d9      	b.n	80162ae <__ieee754_log+0x26e>
 80162fa:	4602      	mov	r2, r0
 80162fc:	460b      	mov	r3, r1
 80162fe:	4650      	mov	r0, sl
 8016300:	4659      	mov	r1, fp
 8016302:	f7ea f841 	bl	8000388 <__aeabi_dsub>
 8016306:	e9dd 2300 	ldrd	r2, r3, [sp]
 801630a:	f7ea f9f5 	bl	80006f8 <__aeabi_dmul>
 801630e:	4606      	mov	r6, r0
 8016310:	460f      	mov	r7, r1
 8016312:	2c00      	cmp	r4, #0
 8016314:	f43f af25 	beq.w	8016162 <__ieee754_log+0x122>
 8016318:	a309      	add	r3, pc, #36	; (adr r3, 8016340 <__ieee754_log+0x300>)
 801631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016322:	f7ea f9e9 	bl	80006f8 <__aeabi_dmul>
 8016326:	a308      	add	r3, pc, #32	; (adr r3, 8016348 <__ieee754_log+0x308>)
 8016328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632c:	4604      	mov	r4, r0
 801632e:	460d      	mov	r5, r1
 8016330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016334:	e729      	b.n	801618a <__ieee754_log+0x14a>
 8016336:	2000      	movs	r0, #0
 8016338:	2100      	movs	r1, #0
 801633a:	e696      	b.n	801606a <__ieee754_log+0x2a>
 801633c:	f3af 8000 	nop.w
 8016340:	fee00000 	.word	0xfee00000
 8016344:	3fe62e42 	.word	0x3fe62e42
 8016348:	35793c76 	.word	0x35793c76
 801634c:	3dea39ef 	.word	0x3dea39ef
 8016350:	55555555 	.word	0x55555555
 8016354:	3fd55555 	.word	0x3fd55555
 8016358:	df3e5244 	.word	0xdf3e5244
 801635c:	3fc2f112 	.word	0x3fc2f112
 8016360:	96cb03de 	.word	0x96cb03de
 8016364:	3fc74664 	.word	0x3fc74664
 8016368:	94229359 	.word	0x94229359
 801636c:	3fd24924 	.word	0x3fd24924
 8016370:	55555593 	.word	0x55555593
 8016374:	3fe55555 	.word	0x3fe55555
 8016378:	d078c69f 	.word	0xd078c69f
 801637c:	3fc39a09 	.word	0x3fc39a09
 8016380:	1d8e78af 	.word	0x1d8e78af
 8016384:	3fcc71c5 	.word	0x3fcc71c5
 8016388:	9997fa04 	.word	0x9997fa04
 801638c:	3fd99999 	.word	0x3fd99999
 8016390:	c3500000 	.word	0xc3500000
 8016394:	43500000 	.word	0x43500000
 8016398:	7fefffff 	.word	0x7fefffff
 801639c:	3ff00000 	.word	0x3ff00000
 80163a0:	3fe00000 	.word	0x3fe00000
 80163a4:	00000000 	.word	0x00000000

080163a8 <__ieee754_rem_pio2>:
 80163a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ac:	ec57 6b10 	vmov	r6, r7, d0
 80163b0:	4bc3      	ldr	r3, [pc, #780]	; (80166c0 <__ieee754_rem_pio2+0x318>)
 80163b2:	b08d      	sub	sp, #52	; 0x34
 80163b4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80163b8:	4598      	cmp	r8, r3
 80163ba:	4604      	mov	r4, r0
 80163bc:	9704      	str	r7, [sp, #16]
 80163be:	dc07      	bgt.n	80163d0 <__ieee754_rem_pio2+0x28>
 80163c0:	2200      	movs	r2, #0
 80163c2:	2300      	movs	r3, #0
 80163c4:	ed84 0b00 	vstr	d0, [r4]
 80163c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80163cc:	2500      	movs	r5, #0
 80163ce:	e027      	b.n	8016420 <__ieee754_rem_pio2+0x78>
 80163d0:	4bbc      	ldr	r3, [pc, #752]	; (80166c4 <__ieee754_rem_pio2+0x31c>)
 80163d2:	4598      	cmp	r8, r3
 80163d4:	dc75      	bgt.n	80164c2 <__ieee754_rem_pio2+0x11a>
 80163d6:	9b04      	ldr	r3, [sp, #16]
 80163d8:	4dbb      	ldr	r5, [pc, #748]	; (80166c8 <__ieee754_rem_pio2+0x320>)
 80163da:	2b00      	cmp	r3, #0
 80163dc:	ee10 0a10 	vmov	r0, s0
 80163e0:	a3a9      	add	r3, pc, #676	; (adr r3, 8016688 <__ieee754_rem_pio2+0x2e0>)
 80163e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e6:	4639      	mov	r1, r7
 80163e8:	dd36      	ble.n	8016458 <__ieee754_rem_pio2+0xb0>
 80163ea:	f7e9 ffcd 	bl	8000388 <__aeabi_dsub>
 80163ee:	45a8      	cmp	r8, r5
 80163f0:	4606      	mov	r6, r0
 80163f2:	460f      	mov	r7, r1
 80163f4:	d018      	beq.n	8016428 <__ieee754_rem_pio2+0x80>
 80163f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8016690 <__ieee754_rem_pio2+0x2e8>)
 80163f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163fc:	f7e9 ffc4 	bl	8000388 <__aeabi_dsub>
 8016400:	4602      	mov	r2, r0
 8016402:	460b      	mov	r3, r1
 8016404:	e9c4 2300 	strd	r2, r3, [r4]
 8016408:	4630      	mov	r0, r6
 801640a:	4639      	mov	r1, r7
 801640c:	f7e9 ffbc 	bl	8000388 <__aeabi_dsub>
 8016410:	a39f      	add	r3, pc, #636	; (adr r3, 8016690 <__ieee754_rem_pio2+0x2e8>)
 8016412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016416:	f7e9 ffb7 	bl	8000388 <__aeabi_dsub>
 801641a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801641e:	2501      	movs	r5, #1
 8016420:	4628      	mov	r0, r5
 8016422:	b00d      	add	sp, #52	; 0x34
 8016424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016428:	a39b      	add	r3, pc, #620	; (adr r3, 8016698 <__ieee754_rem_pio2+0x2f0>)
 801642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801642e:	f7e9 ffab 	bl	8000388 <__aeabi_dsub>
 8016432:	a39b      	add	r3, pc, #620	; (adr r3, 80166a0 <__ieee754_rem_pio2+0x2f8>)
 8016434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016438:	4606      	mov	r6, r0
 801643a:	460f      	mov	r7, r1
 801643c:	f7e9 ffa4 	bl	8000388 <__aeabi_dsub>
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	e9c4 2300 	strd	r2, r3, [r4]
 8016448:	4630      	mov	r0, r6
 801644a:	4639      	mov	r1, r7
 801644c:	f7e9 ff9c 	bl	8000388 <__aeabi_dsub>
 8016450:	a393      	add	r3, pc, #588	; (adr r3, 80166a0 <__ieee754_rem_pio2+0x2f8>)
 8016452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016456:	e7de      	b.n	8016416 <__ieee754_rem_pio2+0x6e>
 8016458:	f7e9 ff98 	bl	800038c <__adddf3>
 801645c:	45a8      	cmp	r8, r5
 801645e:	4606      	mov	r6, r0
 8016460:	460f      	mov	r7, r1
 8016462:	d016      	beq.n	8016492 <__ieee754_rem_pio2+0xea>
 8016464:	a38a      	add	r3, pc, #552	; (adr r3, 8016690 <__ieee754_rem_pio2+0x2e8>)
 8016466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801646a:	f7e9 ff8f 	bl	800038c <__adddf3>
 801646e:	4602      	mov	r2, r0
 8016470:	460b      	mov	r3, r1
 8016472:	e9c4 2300 	strd	r2, r3, [r4]
 8016476:	4630      	mov	r0, r6
 8016478:	4639      	mov	r1, r7
 801647a:	f7e9 ff85 	bl	8000388 <__aeabi_dsub>
 801647e:	a384      	add	r3, pc, #528	; (adr r3, 8016690 <__ieee754_rem_pio2+0x2e8>)
 8016480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016484:	f7e9 ff82 	bl	800038c <__adddf3>
 8016488:	f04f 35ff 	mov.w	r5, #4294967295
 801648c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016490:	e7c6      	b.n	8016420 <__ieee754_rem_pio2+0x78>
 8016492:	a381      	add	r3, pc, #516	; (adr r3, 8016698 <__ieee754_rem_pio2+0x2f0>)
 8016494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016498:	f7e9 ff78 	bl	800038c <__adddf3>
 801649c:	a380      	add	r3, pc, #512	; (adr r3, 80166a0 <__ieee754_rem_pio2+0x2f8>)
 801649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a2:	4606      	mov	r6, r0
 80164a4:	460f      	mov	r7, r1
 80164a6:	f7e9 ff71 	bl	800038c <__adddf3>
 80164aa:	4602      	mov	r2, r0
 80164ac:	460b      	mov	r3, r1
 80164ae:	e9c4 2300 	strd	r2, r3, [r4]
 80164b2:	4630      	mov	r0, r6
 80164b4:	4639      	mov	r1, r7
 80164b6:	f7e9 ff67 	bl	8000388 <__aeabi_dsub>
 80164ba:	a379      	add	r3, pc, #484	; (adr r3, 80166a0 <__ieee754_rem_pio2+0x2f8>)
 80164bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c0:	e7e0      	b.n	8016484 <__ieee754_rem_pio2+0xdc>
 80164c2:	4b82      	ldr	r3, [pc, #520]	; (80166cc <__ieee754_rem_pio2+0x324>)
 80164c4:	4598      	cmp	r8, r3
 80164c6:	f300 80d0 	bgt.w	801666a <__ieee754_rem_pio2+0x2c2>
 80164ca:	f000 ffc3 	bl	8017454 <fabs>
 80164ce:	ec57 6b10 	vmov	r6, r7, d0
 80164d2:	ee10 0a10 	vmov	r0, s0
 80164d6:	a374      	add	r3, pc, #464	; (adr r3, 80166a8 <__ieee754_rem_pio2+0x300>)
 80164d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164dc:	4639      	mov	r1, r7
 80164de:	f7ea f90b 	bl	80006f8 <__aeabi_dmul>
 80164e2:	2200      	movs	r2, #0
 80164e4:	4b7a      	ldr	r3, [pc, #488]	; (80166d0 <__ieee754_rem_pio2+0x328>)
 80164e6:	f7e9 ff51 	bl	800038c <__adddf3>
 80164ea:	f7ea fbb5 	bl	8000c58 <__aeabi_d2iz>
 80164ee:	4605      	mov	r5, r0
 80164f0:	f7ea f898 	bl	8000624 <__aeabi_i2d>
 80164f4:	a364      	add	r3, pc, #400	; (adr r3, 8016688 <__ieee754_rem_pio2+0x2e0>)
 80164f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80164fe:	f7ea f8fb 	bl	80006f8 <__aeabi_dmul>
 8016502:	4602      	mov	r2, r0
 8016504:	460b      	mov	r3, r1
 8016506:	4630      	mov	r0, r6
 8016508:	4639      	mov	r1, r7
 801650a:	f7e9 ff3d 	bl	8000388 <__aeabi_dsub>
 801650e:	a360      	add	r3, pc, #384	; (adr r3, 8016690 <__ieee754_rem_pio2+0x2e8>)
 8016510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016514:	4682      	mov	sl, r0
 8016516:	468b      	mov	fp, r1
 8016518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801651c:	f7ea f8ec 	bl	80006f8 <__aeabi_dmul>
 8016520:	2d1f      	cmp	r5, #31
 8016522:	4606      	mov	r6, r0
 8016524:	460f      	mov	r7, r1
 8016526:	dc0c      	bgt.n	8016542 <__ieee754_rem_pio2+0x19a>
 8016528:	1e6a      	subs	r2, r5, #1
 801652a:	4b6a      	ldr	r3, [pc, #424]	; (80166d4 <__ieee754_rem_pio2+0x32c>)
 801652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016530:	4543      	cmp	r3, r8
 8016532:	d006      	beq.n	8016542 <__ieee754_rem_pio2+0x19a>
 8016534:	4632      	mov	r2, r6
 8016536:	463b      	mov	r3, r7
 8016538:	4650      	mov	r0, sl
 801653a:	4659      	mov	r1, fp
 801653c:	f7e9 ff24 	bl	8000388 <__aeabi_dsub>
 8016540:	e00e      	b.n	8016560 <__ieee754_rem_pio2+0x1b8>
 8016542:	4632      	mov	r2, r6
 8016544:	463b      	mov	r3, r7
 8016546:	4650      	mov	r0, sl
 8016548:	4659      	mov	r1, fp
 801654a:	f7e9 ff1d 	bl	8000388 <__aeabi_dsub>
 801654e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016552:	9305      	str	r3, [sp, #20]
 8016554:	9a05      	ldr	r2, [sp, #20]
 8016556:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801655a:	1ad3      	subs	r3, r2, r3
 801655c:	2b10      	cmp	r3, #16
 801655e:	dc02      	bgt.n	8016566 <__ieee754_rem_pio2+0x1be>
 8016560:	e9c4 0100 	strd	r0, r1, [r4]
 8016564:	e039      	b.n	80165da <__ieee754_rem_pio2+0x232>
 8016566:	a34c      	add	r3, pc, #304	; (adr r3, 8016698 <__ieee754_rem_pio2+0x2f0>)
 8016568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016570:	f7ea f8c2 	bl	80006f8 <__aeabi_dmul>
 8016574:	4606      	mov	r6, r0
 8016576:	460f      	mov	r7, r1
 8016578:	4602      	mov	r2, r0
 801657a:	460b      	mov	r3, r1
 801657c:	4650      	mov	r0, sl
 801657e:	4659      	mov	r1, fp
 8016580:	f7e9 ff02 	bl	8000388 <__aeabi_dsub>
 8016584:	4602      	mov	r2, r0
 8016586:	460b      	mov	r3, r1
 8016588:	4680      	mov	r8, r0
 801658a:	4689      	mov	r9, r1
 801658c:	4650      	mov	r0, sl
 801658e:	4659      	mov	r1, fp
 8016590:	f7e9 fefa 	bl	8000388 <__aeabi_dsub>
 8016594:	4632      	mov	r2, r6
 8016596:	463b      	mov	r3, r7
 8016598:	f7e9 fef6 	bl	8000388 <__aeabi_dsub>
 801659c:	a340      	add	r3, pc, #256	; (adr r3, 80166a0 <__ieee754_rem_pio2+0x2f8>)
 801659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a2:	4606      	mov	r6, r0
 80165a4:	460f      	mov	r7, r1
 80165a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80165aa:	f7ea f8a5 	bl	80006f8 <__aeabi_dmul>
 80165ae:	4632      	mov	r2, r6
 80165b0:	463b      	mov	r3, r7
 80165b2:	f7e9 fee9 	bl	8000388 <__aeabi_dsub>
 80165b6:	4602      	mov	r2, r0
 80165b8:	460b      	mov	r3, r1
 80165ba:	4606      	mov	r6, r0
 80165bc:	460f      	mov	r7, r1
 80165be:	4640      	mov	r0, r8
 80165c0:	4649      	mov	r1, r9
 80165c2:	f7e9 fee1 	bl	8000388 <__aeabi_dsub>
 80165c6:	9a05      	ldr	r2, [sp, #20]
 80165c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80165cc:	1ad3      	subs	r3, r2, r3
 80165ce:	2b31      	cmp	r3, #49	; 0x31
 80165d0:	dc20      	bgt.n	8016614 <__ieee754_rem_pio2+0x26c>
 80165d2:	e9c4 0100 	strd	r0, r1, [r4]
 80165d6:	46c2      	mov	sl, r8
 80165d8:	46cb      	mov	fp, r9
 80165da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80165de:	4650      	mov	r0, sl
 80165e0:	4642      	mov	r2, r8
 80165e2:	464b      	mov	r3, r9
 80165e4:	4659      	mov	r1, fp
 80165e6:	f7e9 fecf 	bl	8000388 <__aeabi_dsub>
 80165ea:	463b      	mov	r3, r7
 80165ec:	4632      	mov	r2, r6
 80165ee:	f7e9 fecb 	bl	8000388 <__aeabi_dsub>
 80165f2:	9b04      	ldr	r3, [sp, #16]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80165fa:	f6bf af11 	bge.w	8016420 <__ieee754_rem_pio2+0x78>
 80165fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016602:	6063      	str	r3, [r4, #4]
 8016604:	f8c4 8000 	str.w	r8, [r4]
 8016608:	60a0      	str	r0, [r4, #8]
 801660a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801660e:	60e3      	str	r3, [r4, #12]
 8016610:	426d      	negs	r5, r5
 8016612:	e705      	b.n	8016420 <__ieee754_rem_pio2+0x78>
 8016614:	a326      	add	r3, pc, #152	; (adr r3, 80166b0 <__ieee754_rem_pio2+0x308>)
 8016616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801661e:	f7ea f86b 	bl	80006f8 <__aeabi_dmul>
 8016622:	4606      	mov	r6, r0
 8016624:	460f      	mov	r7, r1
 8016626:	4602      	mov	r2, r0
 8016628:	460b      	mov	r3, r1
 801662a:	4640      	mov	r0, r8
 801662c:	4649      	mov	r1, r9
 801662e:	f7e9 feab 	bl	8000388 <__aeabi_dsub>
 8016632:	4602      	mov	r2, r0
 8016634:	460b      	mov	r3, r1
 8016636:	4682      	mov	sl, r0
 8016638:	468b      	mov	fp, r1
 801663a:	4640      	mov	r0, r8
 801663c:	4649      	mov	r1, r9
 801663e:	f7e9 fea3 	bl	8000388 <__aeabi_dsub>
 8016642:	4632      	mov	r2, r6
 8016644:	463b      	mov	r3, r7
 8016646:	f7e9 fe9f 	bl	8000388 <__aeabi_dsub>
 801664a:	a31b      	add	r3, pc, #108	; (adr r3, 80166b8 <__ieee754_rem_pio2+0x310>)
 801664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016650:	4606      	mov	r6, r0
 8016652:	460f      	mov	r7, r1
 8016654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016658:	f7ea f84e 	bl	80006f8 <__aeabi_dmul>
 801665c:	4632      	mov	r2, r6
 801665e:	463b      	mov	r3, r7
 8016660:	f7e9 fe92 	bl	8000388 <__aeabi_dsub>
 8016664:	4606      	mov	r6, r0
 8016666:	460f      	mov	r7, r1
 8016668:	e764      	b.n	8016534 <__ieee754_rem_pio2+0x18c>
 801666a:	4b1b      	ldr	r3, [pc, #108]	; (80166d8 <__ieee754_rem_pio2+0x330>)
 801666c:	4598      	cmp	r8, r3
 801666e:	dd35      	ble.n	80166dc <__ieee754_rem_pio2+0x334>
 8016670:	ee10 2a10 	vmov	r2, s0
 8016674:	463b      	mov	r3, r7
 8016676:	4630      	mov	r0, r6
 8016678:	4639      	mov	r1, r7
 801667a:	f7e9 fe85 	bl	8000388 <__aeabi_dsub>
 801667e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016682:	e9c4 0100 	strd	r0, r1, [r4]
 8016686:	e6a1      	b.n	80163cc <__ieee754_rem_pio2+0x24>
 8016688:	54400000 	.word	0x54400000
 801668c:	3ff921fb 	.word	0x3ff921fb
 8016690:	1a626331 	.word	0x1a626331
 8016694:	3dd0b461 	.word	0x3dd0b461
 8016698:	1a600000 	.word	0x1a600000
 801669c:	3dd0b461 	.word	0x3dd0b461
 80166a0:	2e037073 	.word	0x2e037073
 80166a4:	3ba3198a 	.word	0x3ba3198a
 80166a8:	6dc9c883 	.word	0x6dc9c883
 80166ac:	3fe45f30 	.word	0x3fe45f30
 80166b0:	2e000000 	.word	0x2e000000
 80166b4:	3ba3198a 	.word	0x3ba3198a
 80166b8:	252049c1 	.word	0x252049c1
 80166bc:	397b839a 	.word	0x397b839a
 80166c0:	3fe921fb 	.word	0x3fe921fb
 80166c4:	4002d97b 	.word	0x4002d97b
 80166c8:	3ff921fb 	.word	0x3ff921fb
 80166cc:	413921fb 	.word	0x413921fb
 80166d0:	3fe00000 	.word	0x3fe00000
 80166d4:	08037f38 	.word	0x08037f38
 80166d8:	7fefffff 	.word	0x7fefffff
 80166dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80166e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80166e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80166e8:	4630      	mov	r0, r6
 80166ea:	460f      	mov	r7, r1
 80166ec:	f7ea fab4 	bl	8000c58 <__aeabi_d2iz>
 80166f0:	f7e9 ff98 	bl	8000624 <__aeabi_i2d>
 80166f4:	4602      	mov	r2, r0
 80166f6:	460b      	mov	r3, r1
 80166f8:	4630      	mov	r0, r6
 80166fa:	4639      	mov	r1, r7
 80166fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016700:	f7e9 fe42 	bl	8000388 <__aeabi_dsub>
 8016704:	2200      	movs	r2, #0
 8016706:	4b1f      	ldr	r3, [pc, #124]	; (8016784 <__ieee754_rem_pio2+0x3dc>)
 8016708:	f7e9 fff6 	bl	80006f8 <__aeabi_dmul>
 801670c:	460f      	mov	r7, r1
 801670e:	4606      	mov	r6, r0
 8016710:	f7ea faa2 	bl	8000c58 <__aeabi_d2iz>
 8016714:	f7e9 ff86 	bl	8000624 <__aeabi_i2d>
 8016718:	4602      	mov	r2, r0
 801671a:	460b      	mov	r3, r1
 801671c:	4630      	mov	r0, r6
 801671e:	4639      	mov	r1, r7
 8016720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016724:	f7e9 fe30 	bl	8000388 <__aeabi_dsub>
 8016728:	2200      	movs	r2, #0
 801672a:	4b16      	ldr	r3, [pc, #88]	; (8016784 <__ieee754_rem_pio2+0x3dc>)
 801672c:	f7e9 ffe4 	bl	80006f8 <__aeabi_dmul>
 8016730:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016734:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8016738:	f04f 0803 	mov.w	r8, #3
 801673c:	2600      	movs	r6, #0
 801673e:	2700      	movs	r7, #0
 8016740:	4632      	mov	r2, r6
 8016742:	463b      	mov	r3, r7
 8016744:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8016748:	f108 3aff 	add.w	sl, r8, #4294967295
 801674c:	f7ea fa3c 	bl	8000bc8 <__aeabi_dcmpeq>
 8016750:	b9b0      	cbnz	r0, 8016780 <__ieee754_rem_pio2+0x3d8>
 8016752:	4b0d      	ldr	r3, [pc, #52]	; (8016788 <__ieee754_rem_pio2+0x3e0>)
 8016754:	9301      	str	r3, [sp, #4]
 8016756:	2302      	movs	r3, #2
 8016758:	9300      	str	r3, [sp, #0]
 801675a:	462a      	mov	r2, r5
 801675c:	4643      	mov	r3, r8
 801675e:	4621      	mov	r1, r4
 8016760:	a806      	add	r0, sp, #24
 8016762:	f000 fa7d 	bl	8016c60 <__kernel_rem_pio2>
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	2b00      	cmp	r3, #0
 801676a:	4605      	mov	r5, r0
 801676c:	f6bf ae58 	bge.w	8016420 <__ieee754_rem_pio2+0x78>
 8016770:	6863      	ldr	r3, [r4, #4]
 8016772:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016776:	6063      	str	r3, [r4, #4]
 8016778:	68e3      	ldr	r3, [r4, #12]
 801677a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801677e:	e746      	b.n	801660e <__ieee754_rem_pio2+0x266>
 8016780:	46d0      	mov	r8, sl
 8016782:	e7dd      	b.n	8016740 <__ieee754_rem_pio2+0x398>
 8016784:	41700000 	.word	0x41700000
 8016788:	08037fb8 	.word	0x08037fb8

0801678c <__ieee754_sqrt>:
 801678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016790:	4955      	ldr	r1, [pc, #340]	; (80168e8 <__ieee754_sqrt+0x15c>)
 8016792:	ec55 4b10 	vmov	r4, r5, d0
 8016796:	43a9      	bics	r1, r5
 8016798:	462b      	mov	r3, r5
 801679a:	462a      	mov	r2, r5
 801679c:	d112      	bne.n	80167c4 <__ieee754_sqrt+0x38>
 801679e:	ee10 2a10 	vmov	r2, s0
 80167a2:	ee10 0a10 	vmov	r0, s0
 80167a6:	4629      	mov	r1, r5
 80167a8:	f7e9 ffa6 	bl	80006f8 <__aeabi_dmul>
 80167ac:	4602      	mov	r2, r0
 80167ae:	460b      	mov	r3, r1
 80167b0:	4620      	mov	r0, r4
 80167b2:	4629      	mov	r1, r5
 80167b4:	f7e9 fdea 	bl	800038c <__adddf3>
 80167b8:	4604      	mov	r4, r0
 80167ba:	460d      	mov	r5, r1
 80167bc:	ec45 4b10 	vmov	d0, r4, r5
 80167c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167c4:	2d00      	cmp	r5, #0
 80167c6:	ee10 0a10 	vmov	r0, s0
 80167ca:	4621      	mov	r1, r4
 80167cc:	dc0f      	bgt.n	80167ee <__ieee754_sqrt+0x62>
 80167ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80167d2:	4330      	orrs	r0, r6
 80167d4:	d0f2      	beq.n	80167bc <__ieee754_sqrt+0x30>
 80167d6:	b155      	cbz	r5, 80167ee <__ieee754_sqrt+0x62>
 80167d8:	ee10 2a10 	vmov	r2, s0
 80167dc:	4620      	mov	r0, r4
 80167de:	4629      	mov	r1, r5
 80167e0:	f7e9 fdd2 	bl	8000388 <__aeabi_dsub>
 80167e4:	4602      	mov	r2, r0
 80167e6:	460b      	mov	r3, r1
 80167e8:	f7ea f8b0 	bl	800094c <__aeabi_ddiv>
 80167ec:	e7e4      	b.n	80167b8 <__ieee754_sqrt+0x2c>
 80167ee:	151b      	asrs	r3, r3, #20
 80167f0:	d073      	beq.n	80168da <__ieee754_sqrt+0x14e>
 80167f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80167f6:	07dd      	lsls	r5, r3, #31
 80167f8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80167fc:	bf48      	it	mi
 80167fe:	0fc8      	lsrmi	r0, r1, #31
 8016800:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016804:	bf44      	itt	mi
 8016806:	0049      	lslmi	r1, r1, #1
 8016808:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801680c:	2500      	movs	r5, #0
 801680e:	1058      	asrs	r0, r3, #1
 8016810:	0fcb      	lsrs	r3, r1, #31
 8016812:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8016816:	0049      	lsls	r1, r1, #1
 8016818:	2316      	movs	r3, #22
 801681a:	462c      	mov	r4, r5
 801681c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8016820:	19a7      	adds	r7, r4, r6
 8016822:	4297      	cmp	r7, r2
 8016824:	bfde      	ittt	le
 8016826:	19bc      	addle	r4, r7, r6
 8016828:	1bd2      	suble	r2, r2, r7
 801682a:	19ad      	addle	r5, r5, r6
 801682c:	0fcf      	lsrs	r7, r1, #31
 801682e:	3b01      	subs	r3, #1
 8016830:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8016834:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016838:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801683c:	d1f0      	bne.n	8016820 <__ieee754_sqrt+0x94>
 801683e:	f04f 0c20 	mov.w	ip, #32
 8016842:	469e      	mov	lr, r3
 8016844:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8016848:	42a2      	cmp	r2, r4
 801684a:	eb06 070e 	add.w	r7, r6, lr
 801684e:	dc02      	bgt.n	8016856 <__ieee754_sqrt+0xca>
 8016850:	d112      	bne.n	8016878 <__ieee754_sqrt+0xec>
 8016852:	428f      	cmp	r7, r1
 8016854:	d810      	bhi.n	8016878 <__ieee754_sqrt+0xec>
 8016856:	2f00      	cmp	r7, #0
 8016858:	eb07 0e06 	add.w	lr, r7, r6
 801685c:	da42      	bge.n	80168e4 <__ieee754_sqrt+0x158>
 801685e:	f1be 0f00 	cmp.w	lr, #0
 8016862:	db3f      	blt.n	80168e4 <__ieee754_sqrt+0x158>
 8016864:	f104 0801 	add.w	r8, r4, #1
 8016868:	1b12      	subs	r2, r2, r4
 801686a:	428f      	cmp	r7, r1
 801686c:	bf88      	it	hi
 801686e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016872:	1bc9      	subs	r1, r1, r7
 8016874:	4433      	add	r3, r6
 8016876:	4644      	mov	r4, r8
 8016878:	0052      	lsls	r2, r2, #1
 801687a:	f1bc 0c01 	subs.w	ip, ip, #1
 801687e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8016882:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016886:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801688a:	d1dd      	bne.n	8016848 <__ieee754_sqrt+0xbc>
 801688c:	430a      	orrs	r2, r1
 801688e:	d006      	beq.n	801689e <__ieee754_sqrt+0x112>
 8016890:	1c5c      	adds	r4, r3, #1
 8016892:	bf13      	iteet	ne
 8016894:	3301      	addne	r3, #1
 8016896:	3501      	addeq	r5, #1
 8016898:	4663      	moveq	r3, ip
 801689a:	f023 0301 	bicne.w	r3, r3, #1
 801689e:	106a      	asrs	r2, r5, #1
 80168a0:	085b      	lsrs	r3, r3, #1
 80168a2:	07e9      	lsls	r1, r5, #31
 80168a4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80168a8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80168ac:	bf48      	it	mi
 80168ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80168b2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80168b6:	461c      	mov	r4, r3
 80168b8:	e780      	b.n	80167bc <__ieee754_sqrt+0x30>
 80168ba:	0aca      	lsrs	r2, r1, #11
 80168bc:	3815      	subs	r0, #21
 80168be:	0549      	lsls	r1, r1, #21
 80168c0:	2a00      	cmp	r2, #0
 80168c2:	d0fa      	beq.n	80168ba <__ieee754_sqrt+0x12e>
 80168c4:	02d6      	lsls	r6, r2, #11
 80168c6:	d50a      	bpl.n	80168de <__ieee754_sqrt+0x152>
 80168c8:	f1c3 0420 	rsb	r4, r3, #32
 80168cc:	fa21 f404 	lsr.w	r4, r1, r4
 80168d0:	1e5d      	subs	r5, r3, #1
 80168d2:	4099      	lsls	r1, r3
 80168d4:	4322      	orrs	r2, r4
 80168d6:	1b43      	subs	r3, r0, r5
 80168d8:	e78b      	b.n	80167f2 <__ieee754_sqrt+0x66>
 80168da:	4618      	mov	r0, r3
 80168dc:	e7f0      	b.n	80168c0 <__ieee754_sqrt+0x134>
 80168de:	0052      	lsls	r2, r2, #1
 80168e0:	3301      	adds	r3, #1
 80168e2:	e7ef      	b.n	80168c4 <__ieee754_sqrt+0x138>
 80168e4:	46a0      	mov	r8, r4
 80168e6:	e7bf      	b.n	8016868 <__ieee754_sqrt+0xdc>
 80168e8:	7ff00000 	.word	0x7ff00000

080168ec <__ieee754_logf>:
 80168ec:	ee10 3a10 	vmov	r3, s0
 80168f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80168f4:	d106      	bne.n	8016904 <__ieee754_logf+0x18>
 80168f6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016a8c <__ieee754_logf+0x1a0>
 80168fa:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016a90 <__ieee754_logf+0x1a4>
 80168fe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016902:	4770      	bx	lr
 8016904:	2b00      	cmp	r3, #0
 8016906:	da02      	bge.n	801690e <__ieee754_logf+0x22>
 8016908:	ee30 7a40 	vsub.f32	s14, s0, s0
 801690c:	e7f5      	b.n	80168fa <__ieee754_logf+0xe>
 801690e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016912:	db02      	blt.n	801691a <__ieee754_logf+0x2e>
 8016914:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016918:	4770      	bx	lr
 801691a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801691e:	bfbf      	itttt	lt
 8016920:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016a94 <__ieee754_logf+0x1a8>
 8016924:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016928:	f06f 0118 	mvnlt.w	r1, #24
 801692c:	ee17 3a90 	vmovlt	r3, s15
 8016930:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016934:	bfa8      	it	ge
 8016936:	2100      	movge	r1, #0
 8016938:	3a7f      	subs	r2, #127	; 0x7f
 801693a:	440a      	add	r2, r1
 801693c:	4956      	ldr	r1, [pc, #344]	; (8016a98 <__ieee754_logf+0x1ac>)
 801693e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016942:	4419      	add	r1, r3
 8016944:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8016948:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 801694c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016950:	4319      	orrs	r1, r3
 8016952:	ee07 1a90 	vmov	s15, r1
 8016956:	f103 010f 	add.w	r1, r3, #15
 801695a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 801695e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016962:	290f      	cmp	r1, #15
 8016964:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016968:	dc31      	bgt.n	80169ce <__ieee754_logf+0xe2>
 801696a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801696e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016972:	d10f      	bne.n	8016994 <__ieee754_logf+0xa8>
 8016974:	2a00      	cmp	r2, #0
 8016976:	f000 8085 	beq.w	8016a84 <__ieee754_logf+0x198>
 801697a:	ee07 2a90 	vmov	s15, r2
 801697e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8016a9c <__ieee754_logf+0x1b0>
 8016982:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8016aa0 <__ieee754_logf+0x1b4>
 8016986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801698a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801698e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016992:	4770      	bx	lr
 8016994:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016aa4 <__ieee754_logf+0x1b8>
 8016998:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801699c:	eea0 7a67 	vfms.f32	s14, s0, s15
 80169a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80169a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80169a8:	b912      	cbnz	r2, 80169b0 <__ieee754_logf+0xc4>
 80169aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80169ae:	4770      	bx	lr
 80169b0:	ee07 2a90 	vmov	s15, r2
 80169b4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8016a9c <__ieee754_logf+0x1b0>
 80169b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169bc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80169c0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80169c4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016aa0 <__ieee754_logf+0x1b4>
 80169c8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80169cc:	4770      	bx	lr
 80169ce:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80169d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80169d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016aa8 <__ieee754_logf+0x1bc>
 80169da:	eddf 4a34 	vldr	s9, [pc, #208]	; 8016aac <__ieee754_logf+0x1c0>
 80169de:	4934      	ldr	r1, [pc, #208]	; (8016ab0 <__ieee754_logf+0x1c4>)
 80169e0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80169e4:	4419      	add	r1, r3
 80169e6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80169ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80169ee:	430b      	orrs	r3, r1
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	ee07 2a90 	vmov	s15, r2
 80169f6:	ee26 5a06 	vmul.f32	s10, s12, s12
 80169fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80169fe:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016a02:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016ab4 <__ieee754_logf+0x1c8>
 8016a06:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016a0a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016ab8 <__ieee754_logf+0x1cc>
 8016a0e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016a12:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016abc <__ieee754_logf+0x1d0>
 8016a16:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016a1a:	eddf 4a29 	vldr	s9, [pc, #164]	; 8016ac0 <__ieee754_logf+0x1d4>
 8016a1e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016a22:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016ac4 <__ieee754_logf+0x1d8>
 8016a26:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016a2a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016a2e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016a32:	dd1c      	ble.n	8016a6e <__ieee754_logf+0x182>
 8016a34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016a38:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016a3c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a48:	b922      	cbnz	r2, 8016a54 <__ieee754_logf+0x168>
 8016a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a52:	4770      	bx	lr
 8016a54:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8016a9c <__ieee754_logf+0x1b0>
 8016a58:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016a64:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016aa0 <__ieee754_logf+0x1b4>
 8016a68:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016a6c:	4770      	bx	lr
 8016a6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016a72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a76:	2a00      	cmp	r2, #0
 8016a78:	d0e9      	beq.n	8016a4e <__ieee754_logf+0x162>
 8016a7a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016a9c <__ieee754_logf+0x1b0>
 8016a7e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016a82:	e7ed      	b.n	8016a60 <__ieee754_logf+0x174>
 8016a84:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016a90 <__ieee754_logf+0x1a4>
 8016a88:	4770      	bx	lr
 8016a8a:	bf00      	nop
 8016a8c:	cc000000 	.word	0xcc000000
 8016a90:	00000000 	.word	0x00000000
 8016a94:	4c000000 	.word	0x4c000000
 8016a98:	004afb20 	.word	0x004afb20
 8016a9c:	3717f7d1 	.word	0x3717f7d1
 8016aa0:	3f317180 	.word	0x3f317180
 8016aa4:	3eaaaaab 	.word	0x3eaaaaab
 8016aa8:	3e1cd04f 	.word	0x3e1cd04f
 8016aac:	3e178897 	.word	0x3e178897
 8016ab0:	ffcf5c30 	.word	0xffcf5c30
 8016ab4:	3e638e29 	.word	0x3e638e29
 8016ab8:	3ecccccd 	.word	0x3ecccccd
 8016abc:	3e3a3325 	.word	0x3e3a3325
 8016ac0:	3e924925 	.word	0x3e924925
 8016ac4:	3f2aaaab 	.word	0x3f2aaaab

08016ac8 <__ieee754_sqrtf>:
 8016ac8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016acc:	4770      	bx	lr
	...

08016ad0 <__kernel_cos>:
 8016ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ad4:	ec59 8b10 	vmov	r8, r9, d0
 8016ad8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8016adc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8016ae0:	ed2d 8b02 	vpush	{d8}
 8016ae4:	eeb0 8a41 	vmov.f32	s16, s2
 8016ae8:	eef0 8a61 	vmov.f32	s17, s3
 8016aec:	da07      	bge.n	8016afe <__kernel_cos+0x2e>
 8016aee:	ee10 0a10 	vmov	r0, s0
 8016af2:	4649      	mov	r1, r9
 8016af4:	f7ea f8b0 	bl	8000c58 <__aeabi_d2iz>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	f000 8089 	beq.w	8016c10 <__kernel_cos+0x140>
 8016afe:	4642      	mov	r2, r8
 8016b00:	464b      	mov	r3, r9
 8016b02:	4640      	mov	r0, r8
 8016b04:	4649      	mov	r1, r9
 8016b06:	f7e9 fdf7 	bl	80006f8 <__aeabi_dmul>
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	4b4e      	ldr	r3, [pc, #312]	; (8016c48 <__kernel_cos+0x178>)
 8016b0e:	4604      	mov	r4, r0
 8016b10:	460d      	mov	r5, r1
 8016b12:	f7e9 fdf1 	bl	80006f8 <__aeabi_dmul>
 8016b16:	a340      	add	r3, pc, #256	; (adr r3, 8016c18 <__kernel_cos+0x148>)
 8016b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b1c:	4682      	mov	sl, r0
 8016b1e:	468b      	mov	fp, r1
 8016b20:	4620      	mov	r0, r4
 8016b22:	4629      	mov	r1, r5
 8016b24:	f7e9 fde8 	bl	80006f8 <__aeabi_dmul>
 8016b28:	a33d      	add	r3, pc, #244	; (adr r3, 8016c20 <__kernel_cos+0x150>)
 8016b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2e:	f7e9 fc2d 	bl	800038c <__adddf3>
 8016b32:	4622      	mov	r2, r4
 8016b34:	462b      	mov	r3, r5
 8016b36:	f7e9 fddf 	bl	80006f8 <__aeabi_dmul>
 8016b3a:	a33b      	add	r3, pc, #236	; (adr r3, 8016c28 <__kernel_cos+0x158>)
 8016b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b40:	f7e9 fc22 	bl	8000388 <__aeabi_dsub>
 8016b44:	4622      	mov	r2, r4
 8016b46:	462b      	mov	r3, r5
 8016b48:	f7e9 fdd6 	bl	80006f8 <__aeabi_dmul>
 8016b4c:	a338      	add	r3, pc, #224	; (adr r3, 8016c30 <__kernel_cos+0x160>)
 8016b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b52:	f7e9 fc1b 	bl	800038c <__adddf3>
 8016b56:	4622      	mov	r2, r4
 8016b58:	462b      	mov	r3, r5
 8016b5a:	f7e9 fdcd 	bl	80006f8 <__aeabi_dmul>
 8016b5e:	a336      	add	r3, pc, #216	; (adr r3, 8016c38 <__kernel_cos+0x168>)
 8016b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b64:	f7e9 fc10 	bl	8000388 <__aeabi_dsub>
 8016b68:	4622      	mov	r2, r4
 8016b6a:	462b      	mov	r3, r5
 8016b6c:	f7e9 fdc4 	bl	80006f8 <__aeabi_dmul>
 8016b70:	a333      	add	r3, pc, #204	; (adr r3, 8016c40 <__kernel_cos+0x170>)
 8016b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b76:	f7e9 fc09 	bl	800038c <__adddf3>
 8016b7a:	4622      	mov	r2, r4
 8016b7c:	462b      	mov	r3, r5
 8016b7e:	f7e9 fdbb 	bl	80006f8 <__aeabi_dmul>
 8016b82:	4622      	mov	r2, r4
 8016b84:	462b      	mov	r3, r5
 8016b86:	f7e9 fdb7 	bl	80006f8 <__aeabi_dmul>
 8016b8a:	ec53 2b18 	vmov	r2, r3, d8
 8016b8e:	4604      	mov	r4, r0
 8016b90:	460d      	mov	r5, r1
 8016b92:	4640      	mov	r0, r8
 8016b94:	4649      	mov	r1, r9
 8016b96:	f7e9 fdaf 	bl	80006f8 <__aeabi_dmul>
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	4602      	mov	r2, r0
 8016b9e:	4629      	mov	r1, r5
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f7e9 fbf1 	bl	8000388 <__aeabi_dsub>
 8016ba6:	4b29      	ldr	r3, [pc, #164]	; (8016c4c <__kernel_cos+0x17c>)
 8016ba8:	429e      	cmp	r6, r3
 8016baa:	4680      	mov	r8, r0
 8016bac:	4689      	mov	r9, r1
 8016bae:	dc11      	bgt.n	8016bd4 <__kernel_cos+0x104>
 8016bb0:	4602      	mov	r2, r0
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	4650      	mov	r0, sl
 8016bb6:	4659      	mov	r1, fp
 8016bb8:	f7e9 fbe6 	bl	8000388 <__aeabi_dsub>
 8016bbc:	460b      	mov	r3, r1
 8016bbe:	4924      	ldr	r1, [pc, #144]	; (8016c50 <__kernel_cos+0x180>)
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	f7e9 fbe0 	bl	8000388 <__aeabi_dsub>
 8016bc8:	ecbd 8b02 	vpop	{d8}
 8016bcc:	ec41 0b10 	vmov	d0, r0, r1
 8016bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd4:	4b1f      	ldr	r3, [pc, #124]	; (8016c54 <__kernel_cos+0x184>)
 8016bd6:	491e      	ldr	r1, [pc, #120]	; (8016c50 <__kernel_cos+0x180>)
 8016bd8:	429e      	cmp	r6, r3
 8016bda:	bfcc      	ite	gt
 8016bdc:	4d1e      	ldrgt	r5, [pc, #120]	; (8016c58 <__kernel_cos+0x188>)
 8016bde:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016be2:	2400      	movs	r4, #0
 8016be4:	4622      	mov	r2, r4
 8016be6:	462b      	mov	r3, r5
 8016be8:	2000      	movs	r0, #0
 8016bea:	f7e9 fbcd 	bl	8000388 <__aeabi_dsub>
 8016bee:	4622      	mov	r2, r4
 8016bf0:	4606      	mov	r6, r0
 8016bf2:	460f      	mov	r7, r1
 8016bf4:	462b      	mov	r3, r5
 8016bf6:	4650      	mov	r0, sl
 8016bf8:	4659      	mov	r1, fp
 8016bfa:	f7e9 fbc5 	bl	8000388 <__aeabi_dsub>
 8016bfe:	4642      	mov	r2, r8
 8016c00:	464b      	mov	r3, r9
 8016c02:	f7e9 fbc1 	bl	8000388 <__aeabi_dsub>
 8016c06:	4602      	mov	r2, r0
 8016c08:	460b      	mov	r3, r1
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	4639      	mov	r1, r7
 8016c0e:	e7d9      	b.n	8016bc4 <__kernel_cos+0xf4>
 8016c10:	2000      	movs	r0, #0
 8016c12:	490f      	ldr	r1, [pc, #60]	; (8016c50 <__kernel_cos+0x180>)
 8016c14:	e7d8      	b.n	8016bc8 <__kernel_cos+0xf8>
 8016c16:	bf00      	nop
 8016c18:	be8838d4 	.word	0xbe8838d4
 8016c1c:	bda8fae9 	.word	0xbda8fae9
 8016c20:	bdb4b1c4 	.word	0xbdb4b1c4
 8016c24:	3e21ee9e 	.word	0x3e21ee9e
 8016c28:	809c52ad 	.word	0x809c52ad
 8016c2c:	3e927e4f 	.word	0x3e927e4f
 8016c30:	19cb1590 	.word	0x19cb1590
 8016c34:	3efa01a0 	.word	0x3efa01a0
 8016c38:	16c15177 	.word	0x16c15177
 8016c3c:	3f56c16c 	.word	0x3f56c16c
 8016c40:	5555554c 	.word	0x5555554c
 8016c44:	3fa55555 	.word	0x3fa55555
 8016c48:	3fe00000 	.word	0x3fe00000
 8016c4c:	3fd33332 	.word	0x3fd33332
 8016c50:	3ff00000 	.word	0x3ff00000
 8016c54:	3fe90000 	.word	0x3fe90000
 8016c58:	3fd20000 	.word	0x3fd20000
 8016c5c:	00000000 	.word	0x00000000

08016c60 <__kernel_rem_pio2>:
 8016c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c64:	ed2d 8b02 	vpush	{d8}
 8016c68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8016c6c:	1ed4      	subs	r4, r2, #3
 8016c6e:	9308      	str	r3, [sp, #32]
 8016c70:	9101      	str	r1, [sp, #4]
 8016c72:	4bc5      	ldr	r3, [pc, #788]	; (8016f88 <__kernel_rem_pio2+0x328>)
 8016c74:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8016c76:	9009      	str	r0, [sp, #36]	; 0x24
 8016c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016c7c:	9304      	str	r3, [sp, #16]
 8016c7e:	9b08      	ldr	r3, [sp, #32]
 8016c80:	3b01      	subs	r3, #1
 8016c82:	9307      	str	r3, [sp, #28]
 8016c84:	2318      	movs	r3, #24
 8016c86:	fb94 f4f3 	sdiv	r4, r4, r3
 8016c8a:	f06f 0317 	mvn.w	r3, #23
 8016c8e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8016c92:	fb04 3303 	mla	r3, r4, r3, r3
 8016c96:	eb03 0a02 	add.w	sl, r3, r2
 8016c9a:	9b04      	ldr	r3, [sp, #16]
 8016c9c:	9a07      	ldr	r2, [sp, #28]
 8016c9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8016f78 <__kernel_rem_pio2+0x318>
 8016ca2:	eb03 0802 	add.w	r8, r3, r2
 8016ca6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016ca8:	1aa7      	subs	r7, r4, r2
 8016caa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016cae:	ae22      	add	r6, sp, #136	; 0x88
 8016cb0:	2500      	movs	r5, #0
 8016cb2:	4545      	cmp	r5, r8
 8016cb4:	dd13      	ble.n	8016cde <__kernel_rem_pio2+0x7e>
 8016cb6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8016f78 <__kernel_rem_pio2+0x318>
 8016cba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8016cbe:	2600      	movs	r6, #0
 8016cc0:	9b04      	ldr	r3, [sp, #16]
 8016cc2:	429e      	cmp	r6, r3
 8016cc4:	dc32      	bgt.n	8016d2c <__kernel_rem_pio2+0xcc>
 8016cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cc8:	9302      	str	r3, [sp, #8]
 8016cca:	9b08      	ldr	r3, [sp, #32]
 8016ccc:	199d      	adds	r5, r3, r6
 8016cce:	ab22      	add	r3, sp, #136	; 0x88
 8016cd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016cd4:	9306      	str	r3, [sp, #24]
 8016cd6:	ec59 8b18 	vmov	r8, r9, d8
 8016cda:	2700      	movs	r7, #0
 8016cdc:	e01f      	b.n	8016d1e <__kernel_rem_pio2+0xbe>
 8016cde:	42ef      	cmn	r7, r5
 8016ce0:	d407      	bmi.n	8016cf2 <__kernel_rem_pio2+0x92>
 8016ce2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016ce6:	f7e9 fc9d 	bl	8000624 <__aeabi_i2d>
 8016cea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016cee:	3501      	adds	r5, #1
 8016cf0:	e7df      	b.n	8016cb2 <__kernel_rem_pio2+0x52>
 8016cf2:	ec51 0b18 	vmov	r0, r1, d8
 8016cf6:	e7f8      	b.n	8016cea <__kernel_rem_pio2+0x8a>
 8016cf8:	9906      	ldr	r1, [sp, #24]
 8016cfa:	9d02      	ldr	r5, [sp, #8]
 8016cfc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016d00:	9106      	str	r1, [sp, #24]
 8016d02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8016d06:	9502      	str	r5, [sp, #8]
 8016d08:	f7e9 fcf6 	bl	80006f8 <__aeabi_dmul>
 8016d0c:	4602      	mov	r2, r0
 8016d0e:	460b      	mov	r3, r1
 8016d10:	4640      	mov	r0, r8
 8016d12:	4649      	mov	r1, r9
 8016d14:	f7e9 fb3a 	bl	800038c <__adddf3>
 8016d18:	3701      	adds	r7, #1
 8016d1a:	4680      	mov	r8, r0
 8016d1c:	4689      	mov	r9, r1
 8016d1e:	9b07      	ldr	r3, [sp, #28]
 8016d20:	429f      	cmp	r7, r3
 8016d22:	dde9      	ble.n	8016cf8 <__kernel_rem_pio2+0x98>
 8016d24:	e8eb 8902 	strd	r8, r9, [fp], #8
 8016d28:	3601      	adds	r6, #1
 8016d2a:	e7c9      	b.n	8016cc0 <__kernel_rem_pio2+0x60>
 8016d2c:	9b04      	ldr	r3, [sp, #16]
 8016d2e:	aa0e      	add	r2, sp, #56	; 0x38
 8016d30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016d34:	930c      	str	r3, [sp, #48]	; 0x30
 8016d36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016d38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016d3c:	9c04      	ldr	r4, [sp, #16]
 8016d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d40:	ab9a      	add	r3, sp, #616	; 0x268
 8016d42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8016d46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016d4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8016d52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016d56:	ab9a      	add	r3, sp, #616	; 0x268
 8016d58:	445b      	add	r3, fp
 8016d5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8016d5e:	2500      	movs	r5, #0
 8016d60:	1b63      	subs	r3, r4, r5
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	dc78      	bgt.n	8016e58 <__kernel_rem_pio2+0x1f8>
 8016d66:	4650      	mov	r0, sl
 8016d68:	ec49 8b10 	vmov	d0, r8, r9
 8016d6c:	f000 fc14 	bl	8017598 <scalbn>
 8016d70:	ec57 6b10 	vmov	r6, r7, d0
 8016d74:	2200      	movs	r2, #0
 8016d76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016d7a:	ee10 0a10 	vmov	r0, s0
 8016d7e:	4639      	mov	r1, r7
 8016d80:	f7e9 fcba 	bl	80006f8 <__aeabi_dmul>
 8016d84:	ec41 0b10 	vmov	d0, r0, r1
 8016d88:	f000 fb76 	bl	8017478 <floor>
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	ec51 0b10 	vmov	r0, r1, d0
 8016d92:	4b7e      	ldr	r3, [pc, #504]	; (8016f8c <__kernel_rem_pio2+0x32c>)
 8016d94:	f7e9 fcb0 	bl	80006f8 <__aeabi_dmul>
 8016d98:	4602      	mov	r2, r0
 8016d9a:	460b      	mov	r3, r1
 8016d9c:	4630      	mov	r0, r6
 8016d9e:	4639      	mov	r1, r7
 8016da0:	f7e9 faf2 	bl	8000388 <__aeabi_dsub>
 8016da4:	460f      	mov	r7, r1
 8016da6:	4606      	mov	r6, r0
 8016da8:	f7e9 ff56 	bl	8000c58 <__aeabi_d2iz>
 8016dac:	9006      	str	r0, [sp, #24]
 8016dae:	f7e9 fc39 	bl	8000624 <__aeabi_i2d>
 8016db2:	4602      	mov	r2, r0
 8016db4:	460b      	mov	r3, r1
 8016db6:	4630      	mov	r0, r6
 8016db8:	4639      	mov	r1, r7
 8016dba:	f7e9 fae5 	bl	8000388 <__aeabi_dsub>
 8016dbe:	f1ba 0f00 	cmp.w	sl, #0
 8016dc2:	4606      	mov	r6, r0
 8016dc4:	460f      	mov	r7, r1
 8016dc6:	dd6c      	ble.n	8016ea2 <__kernel_rem_pio2+0x242>
 8016dc8:	1e62      	subs	r2, r4, #1
 8016dca:	ab0e      	add	r3, sp, #56	; 0x38
 8016dcc:	f1ca 0118 	rsb	r1, sl, #24
 8016dd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016dd4:	9d06      	ldr	r5, [sp, #24]
 8016dd6:	fa40 f301 	asr.w	r3, r0, r1
 8016dda:	441d      	add	r5, r3
 8016ddc:	408b      	lsls	r3, r1
 8016dde:	1ac0      	subs	r0, r0, r3
 8016de0:	ab0e      	add	r3, sp, #56	; 0x38
 8016de2:	9506      	str	r5, [sp, #24]
 8016de4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016de8:	f1ca 0317 	rsb	r3, sl, #23
 8016dec:	fa40 f303 	asr.w	r3, r0, r3
 8016df0:	9302      	str	r3, [sp, #8]
 8016df2:	9b02      	ldr	r3, [sp, #8]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	dd62      	ble.n	8016ebe <__kernel_rem_pio2+0x25e>
 8016df8:	9b06      	ldr	r3, [sp, #24]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	9306      	str	r3, [sp, #24]
 8016e00:	4615      	mov	r5, r2
 8016e02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016e06:	4294      	cmp	r4, r2
 8016e08:	f300 8095 	bgt.w	8016f36 <__kernel_rem_pio2+0x2d6>
 8016e0c:	f1ba 0f00 	cmp.w	sl, #0
 8016e10:	dd07      	ble.n	8016e22 <__kernel_rem_pio2+0x1c2>
 8016e12:	f1ba 0f01 	cmp.w	sl, #1
 8016e16:	f000 80a2 	beq.w	8016f5e <__kernel_rem_pio2+0x2fe>
 8016e1a:	f1ba 0f02 	cmp.w	sl, #2
 8016e1e:	f000 80c1 	beq.w	8016fa4 <__kernel_rem_pio2+0x344>
 8016e22:	9b02      	ldr	r3, [sp, #8]
 8016e24:	2b02      	cmp	r3, #2
 8016e26:	d14a      	bne.n	8016ebe <__kernel_rem_pio2+0x25e>
 8016e28:	4632      	mov	r2, r6
 8016e2a:	463b      	mov	r3, r7
 8016e2c:	2000      	movs	r0, #0
 8016e2e:	4958      	ldr	r1, [pc, #352]	; (8016f90 <__kernel_rem_pio2+0x330>)
 8016e30:	f7e9 faaa 	bl	8000388 <__aeabi_dsub>
 8016e34:	4606      	mov	r6, r0
 8016e36:	460f      	mov	r7, r1
 8016e38:	2d00      	cmp	r5, #0
 8016e3a:	d040      	beq.n	8016ebe <__kernel_rem_pio2+0x25e>
 8016e3c:	4650      	mov	r0, sl
 8016e3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8016f80 <__kernel_rem_pio2+0x320>
 8016e42:	f000 fba9 	bl	8017598 <scalbn>
 8016e46:	4630      	mov	r0, r6
 8016e48:	4639      	mov	r1, r7
 8016e4a:	ec53 2b10 	vmov	r2, r3, d0
 8016e4e:	f7e9 fa9b 	bl	8000388 <__aeabi_dsub>
 8016e52:	4606      	mov	r6, r0
 8016e54:	460f      	mov	r7, r1
 8016e56:	e032      	b.n	8016ebe <__kernel_rem_pio2+0x25e>
 8016e58:	2200      	movs	r2, #0
 8016e5a:	4b4e      	ldr	r3, [pc, #312]	; (8016f94 <__kernel_rem_pio2+0x334>)
 8016e5c:	4640      	mov	r0, r8
 8016e5e:	4649      	mov	r1, r9
 8016e60:	f7e9 fc4a 	bl	80006f8 <__aeabi_dmul>
 8016e64:	f7e9 fef8 	bl	8000c58 <__aeabi_d2iz>
 8016e68:	f7e9 fbdc 	bl	8000624 <__aeabi_i2d>
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	4b4a      	ldr	r3, [pc, #296]	; (8016f98 <__kernel_rem_pio2+0x338>)
 8016e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016e74:	f7e9 fc40 	bl	80006f8 <__aeabi_dmul>
 8016e78:	4602      	mov	r2, r0
 8016e7a:	460b      	mov	r3, r1
 8016e7c:	4640      	mov	r0, r8
 8016e7e:	4649      	mov	r1, r9
 8016e80:	f7e9 fa82 	bl	8000388 <__aeabi_dsub>
 8016e84:	f7e9 fee8 	bl	8000c58 <__aeabi_d2iz>
 8016e88:	ab0e      	add	r3, sp, #56	; 0x38
 8016e8a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8016e8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e96:	f7e9 fa79 	bl	800038c <__adddf3>
 8016e9a:	3501      	adds	r5, #1
 8016e9c:	4680      	mov	r8, r0
 8016e9e:	4689      	mov	r9, r1
 8016ea0:	e75e      	b.n	8016d60 <__kernel_rem_pio2+0x100>
 8016ea2:	d105      	bne.n	8016eb0 <__kernel_rem_pio2+0x250>
 8016ea4:	1e63      	subs	r3, r4, #1
 8016ea6:	aa0e      	add	r2, sp, #56	; 0x38
 8016ea8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016eac:	15c3      	asrs	r3, r0, #23
 8016eae:	e79f      	b.n	8016df0 <__kernel_rem_pio2+0x190>
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	4b3a      	ldr	r3, [pc, #232]	; (8016f9c <__kernel_rem_pio2+0x33c>)
 8016eb4:	f7e9 fea6 	bl	8000c04 <__aeabi_dcmpge>
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	d139      	bne.n	8016f30 <__kernel_rem_pio2+0x2d0>
 8016ebc:	9002      	str	r0, [sp, #8]
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	4630      	mov	r0, r6
 8016ec4:	4639      	mov	r1, r7
 8016ec6:	f7e9 fe7f 	bl	8000bc8 <__aeabi_dcmpeq>
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	f000 80c7 	beq.w	801705e <__kernel_rem_pio2+0x3fe>
 8016ed0:	1e65      	subs	r5, r4, #1
 8016ed2:	462b      	mov	r3, r5
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	9904      	ldr	r1, [sp, #16]
 8016ed8:	428b      	cmp	r3, r1
 8016eda:	da6a      	bge.n	8016fb2 <__kernel_rem_pio2+0x352>
 8016edc:	2a00      	cmp	r2, #0
 8016ede:	f000 8088 	beq.w	8016ff2 <__kernel_rem_pio2+0x392>
 8016ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8016ee4:	f1aa 0a18 	sub.w	sl, sl, #24
 8016ee8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	f000 80b4 	beq.w	801705a <__kernel_rem_pio2+0x3fa>
 8016ef2:	4650      	mov	r0, sl
 8016ef4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8016f80 <__kernel_rem_pio2+0x320>
 8016ef8:	f000 fb4e 	bl	8017598 <scalbn>
 8016efc:	00ec      	lsls	r4, r5, #3
 8016efe:	ab72      	add	r3, sp, #456	; 0x1c8
 8016f00:	191e      	adds	r6, r3, r4
 8016f02:	ec59 8b10 	vmov	r8, r9, d0
 8016f06:	f106 0a08 	add.w	sl, r6, #8
 8016f0a:	462f      	mov	r7, r5
 8016f0c:	2f00      	cmp	r7, #0
 8016f0e:	f280 80df 	bge.w	80170d0 <__kernel_rem_pio2+0x470>
 8016f12:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8016f78 <__kernel_rem_pio2+0x318>
 8016f16:	f04f 0a00 	mov.w	sl, #0
 8016f1a:	eba5 030a 	sub.w	r3, r5, sl
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	f2c0 810a 	blt.w	8017138 <__kernel_rem_pio2+0x4d8>
 8016f24:	f8df b078 	ldr.w	fp, [pc, #120]	; 8016fa0 <__kernel_rem_pio2+0x340>
 8016f28:	ec59 8b18 	vmov	r8, r9, d8
 8016f2c:	2700      	movs	r7, #0
 8016f2e:	e0f5      	b.n	801711c <__kernel_rem_pio2+0x4bc>
 8016f30:	2302      	movs	r3, #2
 8016f32:	9302      	str	r3, [sp, #8]
 8016f34:	e760      	b.n	8016df8 <__kernel_rem_pio2+0x198>
 8016f36:	ab0e      	add	r3, sp, #56	; 0x38
 8016f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f3c:	b94d      	cbnz	r5, 8016f52 <__kernel_rem_pio2+0x2f2>
 8016f3e:	b12b      	cbz	r3, 8016f4c <__kernel_rem_pio2+0x2ec>
 8016f40:	a80e      	add	r0, sp, #56	; 0x38
 8016f42:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016f46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	3201      	adds	r2, #1
 8016f4e:	461d      	mov	r5, r3
 8016f50:	e759      	b.n	8016e06 <__kernel_rem_pio2+0x1a6>
 8016f52:	a80e      	add	r0, sp, #56	; 0x38
 8016f54:	1acb      	subs	r3, r1, r3
 8016f56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016f5a:	462b      	mov	r3, r5
 8016f5c:	e7f6      	b.n	8016f4c <__kernel_rem_pio2+0x2ec>
 8016f5e:	1e62      	subs	r2, r4, #1
 8016f60:	ab0e      	add	r3, sp, #56	; 0x38
 8016f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016f6a:	a90e      	add	r1, sp, #56	; 0x38
 8016f6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016f70:	e757      	b.n	8016e22 <__kernel_rem_pio2+0x1c2>
 8016f72:	bf00      	nop
 8016f74:	f3af 8000 	nop.w
	...
 8016f84:	3ff00000 	.word	0x3ff00000
 8016f88:	08038100 	.word	0x08038100
 8016f8c:	40200000 	.word	0x40200000
 8016f90:	3ff00000 	.word	0x3ff00000
 8016f94:	3e700000 	.word	0x3e700000
 8016f98:	41700000 	.word	0x41700000
 8016f9c:	3fe00000 	.word	0x3fe00000
 8016fa0:	080380c0 	.word	0x080380c0
 8016fa4:	1e62      	subs	r2, r4, #1
 8016fa6:	ab0e      	add	r3, sp, #56	; 0x38
 8016fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016fb0:	e7db      	b.n	8016f6a <__kernel_rem_pio2+0x30a>
 8016fb2:	a90e      	add	r1, sp, #56	; 0x38
 8016fb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	430a      	orrs	r2, r1
 8016fbc:	e78b      	b.n	8016ed6 <__kernel_rem_pio2+0x276>
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016fc4:	2900      	cmp	r1, #0
 8016fc6:	d0fa      	beq.n	8016fbe <__kernel_rem_pio2+0x35e>
 8016fc8:	9a08      	ldr	r2, [sp, #32]
 8016fca:	4422      	add	r2, r4
 8016fcc:	00d2      	lsls	r2, r2, #3
 8016fce:	a922      	add	r1, sp, #136	; 0x88
 8016fd0:	18e3      	adds	r3, r4, r3
 8016fd2:	9206      	str	r2, [sp, #24]
 8016fd4:	440a      	add	r2, r1
 8016fd6:	9302      	str	r3, [sp, #8]
 8016fd8:	f10b 0108 	add.w	r1, fp, #8
 8016fdc:	f102 0308 	add.w	r3, r2, #8
 8016fe0:	1c66      	adds	r6, r4, #1
 8016fe2:	910a      	str	r1, [sp, #40]	; 0x28
 8016fe4:	2500      	movs	r5, #0
 8016fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8016fe8:	9b02      	ldr	r3, [sp, #8]
 8016fea:	42b3      	cmp	r3, r6
 8016fec:	da04      	bge.n	8016ff8 <__kernel_rem_pio2+0x398>
 8016fee:	461c      	mov	r4, r3
 8016ff0:	e6a6      	b.n	8016d40 <__kernel_rem_pio2+0xe0>
 8016ff2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	e7e3      	b.n	8016fc0 <__kernel_rem_pio2+0x360>
 8016ff8:	9b06      	ldr	r3, [sp, #24]
 8016ffa:	18ef      	adds	r7, r5, r3
 8016ffc:	ab22      	add	r3, sp, #136	; 0x88
 8016ffe:	441f      	add	r7, r3
 8017000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017002:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017006:	f7e9 fb0d 	bl	8000624 <__aeabi_i2d>
 801700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801700c:	461c      	mov	r4, r3
 801700e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017010:	e9c7 0100 	strd	r0, r1, [r7]
 8017014:	eb03 0b05 	add.w	fp, r3, r5
 8017018:	2700      	movs	r7, #0
 801701a:	f04f 0800 	mov.w	r8, #0
 801701e:	f04f 0900 	mov.w	r9, #0
 8017022:	9b07      	ldr	r3, [sp, #28]
 8017024:	429f      	cmp	r7, r3
 8017026:	dd08      	ble.n	801703a <__kernel_rem_pio2+0x3da>
 8017028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801702a:	aa72      	add	r2, sp, #456	; 0x1c8
 801702c:	18eb      	adds	r3, r5, r3
 801702e:	4413      	add	r3, r2
 8017030:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8017034:	3601      	adds	r6, #1
 8017036:	3508      	adds	r5, #8
 8017038:	e7d6      	b.n	8016fe8 <__kernel_rem_pio2+0x388>
 801703a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801703e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8017042:	f7e9 fb59 	bl	80006f8 <__aeabi_dmul>
 8017046:	4602      	mov	r2, r0
 8017048:	460b      	mov	r3, r1
 801704a:	4640      	mov	r0, r8
 801704c:	4649      	mov	r1, r9
 801704e:	f7e9 f99d 	bl	800038c <__adddf3>
 8017052:	3701      	adds	r7, #1
 8017054:	4680      	mov	r8, r0
 8017056:	4689      	mov	r9, r1
 8017058:	e7e3      	b.n	8017022 <__kernel_rem_pio2+0x3c2>
 801705a:	3d01      	subs	r5, #1
 801705c:	e741      	b.n	8016ee2 <__kernel_rem_pio2+0x282>
 801705e:	f1ca 0000 	rsb	r0, sl, #0
 8017062:	ec47 6b10 	vmov	d0, r6, r7
 8017066:	f000 fa97 	bl	8017598 <scalbn>
 801706a:	ec57 6b10 	vmov	r6, r7, d0
 801706e:	2200      	movs	r2, #0
 8017070:	4b99      	ldr	r3, [pc, #612]	; (80172d8 <__kernel_rem_pio2+0x678>)
 8017072:	ee10 0a10 	vmov	r0, s0
 8017076:	4639      	mov	r1, r7
 8017078:	f7e9 fdc4 	bl	8000c04 <__aeabi_dcmpge>
 801707c:	b1f8      	cbz	r0, 80170be <__kernel_rem_pio2+0x45e>
 801707e:	2200      	movs	r2, #0
 8017080:	4b96      	ldr	r3, [pc, #600]	; (80172dc <__kernel_rem_pio2+0x67c>)
 8017082:	4630      	mov	r0, r6
 8017084:	4639      	mov	r1, r7
 8017086:	f7e9 fb37 	bl	80006f8 <__aeabi_dmul>
 801708a:	f7e9 fde5 	bl	8000c58 <__aeabi_d2iz>
 801708e:	4680      	mov	r8, r0
 8017090:	f7e9 fac8 	bl	8000624 <__aeabi_i2d>
 8017094:	2200      	movs	r2, #0
 8017096:	4b90      	ldr	r3, [pc, #576]	; (80172d8 <__kernel_rem_pio2+0x678>)
 8017098:	f7e9 fb2e 	bl	80006f8 <__aeabi_dmul>
 801709c:	460b      	mov	r3, r1
 801709e:	4602      	mov	r2, r0
 80170a0:	4639      	mov	r1, r7
 80170a2:	4630      	mov	r0, r6
 80170a4:	f7e9 f970 	bl	8000388 <__aeabi_dsub>
 80170a8:	f7e9 fdd6 	bl	8000c58 <__aeabi_d2iz>
 80170ac:	1c65      	adds	r5, r4, #1
 80170ae:	ab0e      	add	r3, sp, #56	; 0x38
 80170b0:	f10a 0a18 	add.w	sl, sl, #24
 80170b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80170b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80170bc:	e719      	b.n	8016ef2 <__kernel_rem_pio2+0x292>
 80170be:	4630      	mov	r0, r6
 80170c0:	4639      	mov	r1, r7
 80170c2:	f7e9 fdc9 	bl	8000c58 <__aeabi_d2iz>
 80170c6:	ab0e      	add	r3, sp, #56	; 0x38
 80170c8:	4625      	mov	r5, r4
 80170ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80170ce:	e710      	b.n	8016ef2 <__kernel_rem_pio2+0x292>
 80170d0:	ab0e      	add	r3, sp, #56	; 0x38
 80170d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80170d6:	f7e9 faa5 	bl	8000624 <__aeabi_i2d>
 80170da:	4642      	mov	r2, r8
 80170dc:	464b      	mov	r3, r9
 80170de:	f7e9 fb0b 	bl	80006f8 <__aeabi_dmul>
 80170e2:	2200      	movs	r2, #0
 80170e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80170e8:	4b7c      	ldr	r3, [pc, #496]	; (80172dc <__kernel_rem_pio2+0x67c>)
 80170ea:	4640      	mov	r0, r8
 80170ec:	4649      	mov	r1, r9
 80170ee:	f7e9 fb03 	bl	80006f8 <__aeabi_dmul>
 80170f2:	3f01      	subs	r7, #1
 80170f4:	4680      	mov	r8, r0
 80170f6:	4689      	mov	r9, r1
 80170f8:	e708      	b.n	8016f0c <__kernel_rem_pio2+0x2ac>
 80170fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80170fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017102:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8017106:	f7e9 faf7 	bl	80006f8 <__aeabi_dmul>
 801710a:	4602      	mov	r2, r0
 801710c:	460b      	mov	r3, r1
 801710e:	4640      	mov	r0, r8
 8017110:	4649      	mov	r1, r9
 8017112:	f7e9 f93b 	bl	800038c <__adddf3>
 8017116:	3701      	adds	r7, #1
 8017118:	4680      	mov	r8, r0
 801711a:	4689      	mov	r9, r1
 801711c:	9b04      	ldr	r3, [sp, #16]
 801711e:	429f      	cmp	r7, r3
 8017120:	dc01      	bgt.n	8017126 <__kernel_rem_pio2+0x4c6>
 8017122:	45ba      	cmp	sl, r7
 8017124:	dae9      	bge.n	80170fa <__kernel_rem_pio2+0x49a>
 8017126:	ab4a      	add	r3, sp, #296	; 0x128
 8017128:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801712c:	e9c3 8900 	strd	r8, r9, [r3]
 8017130:	f10a 0a01 	add.w	sl, sl, #1
 8017134:	3e08      	subs	r6, #8
 8017136:	e6f0      	b.n	8016f1a <__kernel_rem_pio2+0x2ba>
 8017138:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801713a:	2b03      	cmp	r3, #3
 801713c:	d85b      	bhi.n	80171f6 <__kernel_rem_pio2+0x596>
 801713e:	e8df f003 	tbb	[pc, r3]
 8017142:	264a      	.short	0x264a
 8017144:	0226      	.short	0x0226
 8017146:	ab9a      	add	r3, sp, #616	; 0x268
 8017148:	441c      	add	r4, r3
 801714a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801714e:	46a2      	mov	sl, r4
 8017150:	46ab      	mov	fp, r5
 8017152:	f1bb 0f00 	cmp.w	fp, #0
 8017156:	dc6c      	bgt.n	8017232 <__kernel_rem_pio2+0x5d2>
 8017158:	46a2      	mov	sl, r4
 801715a:	46ab      	mov	fp, r5
 801715c:	f1bb 0f01 	cmp.w	fp, #1
 8017160:	f300 8086 	bgt.w	8017270 <__kernel_rem_pio2+0x610>
 8017164:	2000      	movs	r0, #0
 8017166:	2100      	movs	r1, #0
 8017168:	2d01      	cmp	r5, #1
 801716a:	f300 80a0 	bgt.w	80172ae <__kernel_rem_pio2+0x64e>
 801716e:	9b02      	ldr	r3, [sp, #8]
 8017170:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017174:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017178:	2b00      	cmp	r3, #0
 801717a:	f040 809e 	bne.w	80172ba <__kernel_rem_pio2+0x65a>
 801717e:	9b01      	ldr	r3, [sp, #4]
 8017180:	e9c3 7800 	strd	r7, r8, [r3]
 8017184:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017188:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801718c:	e033      	b.n	80171f6 <__kernel_rem_pio2+0x596>
 801718e:	3408      	adds	r4, #8
 8017190:	ab4a      	add	r3, sp, #296	; 0x128
 8017192:	441c      	add	r4, r3
 8017194:	462e      	mov	r6, r5
 8017196:	2000      	movs	r0, #0
 8017198:	2100      	movs	r1, #0
 801719a:	2e00      	cmp	r6, #0
 801719c:	da3a      	bge.n	8017214 <__kernel_rem_pio2+0x5b4>
 801719e:	9b02      	ldr	r3, [sp, #8]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d03d      	beq.n	8017220 <__kernel_rem_pio2+0x5c0>
 80171a4:	4602      	mov	r2, r0
 80171a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171aa:	9c01      	ldr	r4, [sp, #4]
 80171ac:	e9c4 2300 	strd	r2, r3, [r4]
 80171b0:	4602      	mov	r2, r0
 80171b2:	460b      	mov	r3, r1
 80171b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80171b8:	f7e9 f8e6 	bl	8000388 <__aeabi_dsub>
 80171bc:	ae4c      	add	r6, sp, #304	; 0x130
 80171be:	2401      	movs	r4, #1
 80171c0:	42a5      	cmp	r5, r4
 80171c2:	da30      	bge.n	8017226 <__kernel_rem_pio2+0x5c6>
 80171c4:	9b02      	ldr	r3, [sp, #8]
 80171c6:	b113      	cbz	r3, 80171ce <__kernel_rem_pio2+0x56e>
 80171c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171cc:	4619      	mov	r1, r3
 80171ce:	9b01      	ldr	r3, [sp, #4]
 80171d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80171d4:	e00f      	b.n	80171f6 <__kernel_rem_pio2+0x596>
 80171d6:	ab9a      	add	r3, sp, #616	; 0x268
 80171d8:	441c      	add	r4, r3
 80171da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80171de:	2000      	movs	r0, #0
 80171e0:	2100      	movs	r1, #0
 80171e2:	2d00      	cmp	r5, #0
 80171e4:	da10      	bge.n	8017208 <__kernel_rem_pio2+0x5a8>
 80171e6:	9b02      	ldr	r3, [sp, #8]
 80171e8:	b113      	cbz	r3, 80171f0 <__kernel_rem_pio2+0x590>
 80171ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171ee:	4619      	mov	r1, r3
 80171f0:	9b01      	ldr	r3, [sp, #4]
 80171f2:	e9c3 0100 	strd	r0, r1, [r3]
 80171f6:	9b06      	ldr	r3, [sp, #24]
 80171f8:	f003 0007 	and.w	r0, r3, #7
 80171fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8017200:	ecbd 8b02 	vpop	{d8}
 8017204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017208:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801720c:	f7e9 f8be 	bl	800038c <__adddf3>
 8017210:	3d01      	subs	r5, #1
 8017212:	e7e6      	b.n	80171e2 <__kernel_rem_pio2+0x582>
 8017214:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017218:	f7e9 f8b8 	bl	800038c <__adddf3>
 801721c:	3e01      	subs	r6, #1
 801721e:	e7bc      	b.n	801719a <__kernel_rem_pio2+0x53a>
 8017220:	4602      	mov	r2, r0
 8017222:	460b      	mov	r3, r1
 8017224:	e7c1      	b.n	80171aa <__kernel_rem_pio2+0x54a>
 8017226:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801722a:	f7e9 f8af 	bl	800038c <__adddf3>
 801722e:	3401      	adds	r4, #1
 8017230:	e7c6      	b.n	80171c0 <__kernel_rem_pio2+0x560>
 8017232:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8017236:	ed3a 7b02 	vldmdb	sl!, {d7}
 801723a:	4640      	mov	r0, r8
 801723c:	ec53 2b17 	vmov	r2, r3, d7
 8017240:	4649      	mov	r1, r9
 8017242:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017246:	f7e9 f8a1 	bl	800038c <__adddf3>
 801724a:	4602      	mov	r2, r0
 801724c:	460b      	mov	r3, r1
 801724e:	4606      	mov	r6, r0
 8017250:	460f      	mov	r7, r1
 8017252:	4640      	mov	r0, r8
 8017254:	4649      	mov	r1, r9
 8017256:	f7e9 f897 	bl	8000388 <__aeabi_dsub>
 801725a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801725e:	f7e9 f895 	bl	800038c <__adddf3>
 8017262:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017266:	e9ca 0100 	strd	r0, r1, [sl]
 801726a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801726e:	e770      	b.n	8017152 <__kernel_rem_pio2+0x4f2>
 8017270:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8017274:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017278:	4630      	mov	r0, r6
 801727a:	ec53 2b17 	vmov	r2, r3, d7
 801727e:	4639      	mov	r1, r7
 8017280:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017284:	f7e9 f882 	bl	800038c <__adddf3>
 8017288:	4602      	mov	r2, r0
 801728a:	460b      	mov	r3, r1
 801728c:	4680      	mov	r8, r0
 801728e:	4689      	mov	r9, r1
 8017290:	4630      	mov	r0, r6
 8017292:	4639      	mov	r1, r7
 8017294:	f7e9 f878 	bl	8000388 <__aeabi_dsub>
 8017298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801729c:	f7e9 f876 	bl	800038c <__adddf3>
 80172a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80172a4:	e9ca 0100 	strd	r0, r1, [sl]
 80172a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80172ac:	e756      	b.n	801715c <__kernel_rem_pio2+0x4fc>
 80172ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80172b2:	f7e9 f86b 	bl	800038c <__adddf3>
 80172b6:	3d01      	subs	r5, #1
 80172b8:	e756      	b.n	8017168 <__kernel_rem_pio2+0x508>
 80172ba:	9b01      	ldr	r3, [sp, #4]
 80172bc:	9a01      	ldr	r2, [sp, #4]
 80172be:	601f      	str	r7, [r3, #0]
 80172c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80172c4:	605c      	str	r4, [r3, #4]
 80172c6:	609d      	str	r5, [r3, #8]
 80172c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80172cc:	60d3      	str	r3, [r2, #12]
 80172ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80172d2:	6110      	str	r0, [r2, #16]
 80172d4:	6153      	str	r3, [r2, #20]
 80172d6:	e78e      	b.n	80171f6 <__kernel_rem_pio2+0x596>
 80172d8:	41700000 	.word	0x41700000
 80172dc:	3e700000 	.word	0x3e700000

080172e0 <__kernel_sin>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	ec55 4b10 	vmov	r4, r5, d0
 80172e8:	b085      	sub	sp, #20
 80172ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80172ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80172f2:	ed8d 1b00 	vstr	d1, [sp]
 80172f6:	9002      	str	r0, [sp, #8]
 80172f8:	da06      	bge.n	8017308 <__kernel_sin+0x28>
 80172fa:	ee10 0a10 	vmov	r0, s0
 80172fe:	4629      	mov	r1, r5
 8017300:	f7e9 fcaa 	bl	8000c58 <__aeabi_d2iz>
 8017304:	2800      	cmp	r0, #0
 8017306:	d051      	beq.n	80173ac <__kernel_sin+0xcc>
 8017308:	4622      	mov	r2, r4
 801730a:	462b      	mov	r3, r5
 801730c:	4620      	mov	r0, r4
 801730e:	4629      	mov	r1, r5
 8017310:	f7e9 f9f2 	bl	80006f8 <__aeabi_dmul>
 8017314:	4682      	mov	sl, r0
 8017316:	468b      	mov	fp, r1
 8017318:	4602      	mov	r2, r0
 801731a:	460b      	mov	r3, r1
 801731c:	4620      	mov	r0, r4
 801731e:	4629      	mov	r1, r5
 8017320:	f7e9 f9ea 	bl	80006f8 <__aeabi_dmul>
 8017324:	a341      	add	r3, pc, #260	; (adr r3, 801742c <__kernel_sin+0x14c>)
 8017326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732a:	4680      	mov	r8, r0
 801732c:	4689      	mov	r9, r1
 801732e:	4650      	mov	r0, sl
 8017330:	4659      	mov	r1, fp
 8017332:	f7e9 f9e1 	bl	80006f8 <__aeabi_dmul>
 8017336:	a33f      	add	r3, pc, #252	; (adr r3, 8017434 <__kernel_sin+0x154>)
 8017338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733c:	f7e9 f824 	bl	8000388 <__aeabi_dsub>
 8017340:	4652      	mov	r2, sl
 8017342:	465b      	mov	r3, fp
 8017344:	f7e9 f9d8 	bl	80006f8 <__aeabi_dmul>
 8017348:	a33c      	add	r3, pc, #240	; (adr r3, 801743c <__kernel_sin+0x15c>)
 801734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734e:	f7e9 f81d 	bl	800038c <__adddf3>
 8017352:	4652      	mov	r2, sl
 8017354:	465b      	mov	r3, fp
 8017356:	f7e9 f9cf 	bl	80006f8 <__aeabi_dmul>
 801735a:	a33a      	add	r3, pc, #232	; (adr r3, 8017444 <__kernel_sin+0x164>)
 801735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017360:	f7e9 f812 	bl	8000388 <__aeabi_dsub>
 8017364:	4652      	mov	r2, sl
 8017366:	465b      	mov	r3, fp
 8017368:	f7e9 f9c6 	bl	80006f8 <__aeabi_dmul>
 801736c:	a337      	add	r3, pc, #220	; (adr r3, 801744c <__kernel_sin+0x16c>)
 801736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017372:	f7e9 f80b 	bl	800038c <__adddf3>
 8017376:	9b02      	ldr	r3, [sp, #8]
 8017378:	4606      	mov	r6, r0
 801737a:	460f      	mov	r7, r1
 801737c:	b9db      	cbnz	r3, 80173b6 <__kernel_sin+0xd6>
 801737e:	4602      	mov	r2, r0
 8017380:	460b      	mov	r3, r1
 8017382:	4650      	mov	r0, sl
 8017384:	4659      	mov	r1, fp
 8017386:	f7e9 f9b7 	bl	80006f8 <__aeabi_dmul>
 801738a:	a325      	add	r3, pc, #148	; (adr r3, 8017420 <__kernel_sin+0x140>)
 801738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017390:	f7e8 fffa 	bl	8000388 <__aeabi_dsub>
 8017394:	4642      	mov	r2, r8
 8017396:	464b      	mov	r3, r9
 8017398:	f7e9 f9ae 	bl	80006f8 <__aeabi_dmul>
 801739c:	4602      	mov	r2, r0
 801739e:	460b      	mov	r3, r1
 80173a0:	4620      	mov	r0, r4
 80173a2:	4629      	mov	r1, r5
 80173a4:	f7e8 fff2 	bl	800038c <__adddf3>
 80173a8:	4604      	mov	r4, r0
 80173aa:	460d      	mov	r5, r1
 80173ac:	ec45 4b10 	vmov	d0, r4, r5
 80173b0:	b005      	add	sp, #20
 80173b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173b6:	2200      	movs	r2, #0
 80173b8:	4b1b      	ldr	r3, [pc, #108]	; (8017428 <__kernel_sin+0x148>)
 80173ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173be:	f7e9 f99b 	bl	80006f8 <__aeabi_dmul>
 80173c2:	4632      	mov	r2, r6
 80173c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173c8:	463b      	mov	r3, r7
 80173ca:	4640      	mov	r0, r8
 80173cc:	4649      	mov	r1, r9
 80173ce:	f7e9 f993 	bl	80006f8 <__aeabi_dmul>
 80173d2:	4602      	mov	r2, r0
 80173d4:	460b      	mov	r3, r1
 80173d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173da:	f7e8 ffd5 	bl	8000388 <__aeabi_dsub>
 80173de:	4652      	mov	r2, sl
 80173e0:	465b      	mov	r3, fp
 80173e2:	f7e9 f989 	bl	80006f8 <__aeabi_dmul>
 80173e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173ea:	f7e8 ffcd 	bl	8000388 <__aeabi_dsub>
 80173ee:	a30c      	add	r3, pc, #48	; (adr r3, 8017420 <__kernel_sin+0x140>)
 80173f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f4:	4606      	mov	r6, r0
 80173f6:	460f      	mov	r7, r1
 80173f8:	4640      	mov	r0, r8
 80173fa:	4649      	mov	r1, r9
 80173fc:	f7e9 f97c 	bl	80006f8 <__aeabi_dmul>
 8017400:	4602      	mov	r2, r0
 8017402:	460b      	mov	r3, r1
 8017404:	4630      	mov	r0, r6
 8017406:	4639      	mov	r1, r7
 8017408:	f7e8 ffc0 	bl	800038c <__adddf3>
 801740c:	4602      	mov	r2, r0
 801740e:	460b      	mov	r3, r1
 8017410:	4620      	mov	r0, r4
 8017412:	4629      	mov	r1, r5
 8017414:	f7e8 ffb8 	bl	8000388 <__aeabi_dsub>
 8017418:	e7c6      	b.n	80173a8 <__kernel_sin+0xc8>
 801741a:	bf00      	nop
 801741c:	f3af 8000 	nop.w
 8017420:	55555549 	.word	0x55555549
 8017424:	3fc55555 	.word	0x3fc55555
 8017428:	3fe00000 	.word	0x3fe00000
 801742c:	5acfd57c 	.word	0x5acfd57c
 8017430:	3de5d93a 	.word	0x3de5d93a
 8017434:	8a2b9ceb 	.word	0x8a2b9ceb
 8017438:	3e5ae5e6 	.word	0x3e5ae5e6
 801743c:	57b1fe7d 	.word	0x57b1fe7d
 8017440:	3ec71de3 	.word	0x3ec71de3
 8017444:	19c161d5 	.word	0x19c161d5
 8017448:	3f2a01a0 	.word	0x3f2a01a0
 801744c:	1110f8a6 	.word	0x1110f8a6
 8017450:	3f811111 	.word	0x3f811111

08017454 <fabs>:
 8017454:	ec51 0b10 	vmov	r0, r1, d0
 8017458:	ee10 2a10 	vmov	r2, s0
 801745c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017460:	ec43 2b10 	vmov	d0, r2, r3
 8017464:	4770      	bx	lr

08017466 <finite>:
 8017466:	ee10 3a90 	vmov	r3, s1
 801746a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801746e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017472:	0fc0      	lsrs	r0, r0, #31
 8017474:	4770      	bx	lr
	...

08017478 <floor>:
 8017478:	ec51 0b10 	vmov	r0, r1, d0
 801747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017480:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017484:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017488:	2e13      	cmp	r6, #19
 801748a:	460c      	mov	r4, r1
 801748c:	ee10 5a10 	vmov	r5, s0
 8017490:	4680      	mov	r8, r0
 8017492:	dc34      	bgt.n	80174fe <floor+0x86>
 8017494:	2e00      	cmp	r6, #0
 8017496:	da16      	bge.n	80174c6 <floor+0x4e>
 8017498:	a335      	add	r3, pc, #212	; (adr r3, 8017570 <floor+0xf8>)
 801749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801749e:	f7e8 ff75 	bl	800038c <__adddf3>
 80174a2:	2200      	movs	r2, #0
 80174a4:	2300      	movs	r3, #0
 80174a6:	f7e9 fbb7 	bl	8000c18 <__aeabi_dcmpgt>
 80174aa:	b148      	cbz	r0, 80174c0 <floor+0x48>
 80174ac:	2c00      	cmp	r4, #0
 80174ae:	da59      	bge.n	8017564 <floor+0xec>
 80174b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80174b4:	4a30      	ldr	r2, [pc, #192]	; (8017578 <floor+0x100>)
 80174b6:	432b      	orrs	r3, r5
 80174b8:	2500      	movs	r5, #0
 80174ba:	42ab      	cmp	r3, r5
 80174bc:	bf18      	it	ne
 80174be:	4614      	movne	r4, r2
 80174c0:	4621      	mov	r1, r4
 80174c2:	4628      	mov	r0, r5
 80174c4:	e025      	b.n	8017512 <floor+0x9a>
 80174c6:	4f2d      	ldr	r7, [pc, #180]	; (801757c <floor+0x104>)
 80174c8:	4137      	asrs	r7, r6
 80174ca:	ea01 0307 	and.w	r3, r1, r7
 80174ce:	4303      	orrs	r3, r0
 80174d0:	d01f      	beq.n	8017512 <floor+0x9a>
 80174d2:	a327      	add	r3, pc, #156	; (adr r3, 8017570 <floor+0xf8>)
 80174d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174d8:	f7e8 ff58 	bl	800038c <__adddf3>
 80174dc:	2200      	movs	r2, #0
 80174de:	2300      	movs	r3, #0
 80174e0:	f7e9 fb9a 	bl	8000c18 <__aeabi_dcmpgt>
 80174e4:	2800      	cmp	r0, #0
 80174e6:	d0eb      	beq.n	80174c0 <floor+0x48>
 80174e8:	2c00      	cmp	r4, #0
 80174ea:	bfbe      	ittt	lt
 80174ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80174f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80174f4:	19a4      	addlt	r4, r4, r6
 80174f6:	ea24 0407 	bic.w	r4, r4, r7
 80174fa:	2500      	movs	r5, #0
 80174fc:	e7e0      	b.n	80174c0 <floor+0x48>
 80174fe:	2e33      	cmp	r6, #51	; 0x33
 8017500:	dd0b      	ble.n	801751a <floor+0xa2>
 8017502:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017506:	d104      	bne.n	8017512 <floor+0x9a>
 8017508:	ee10 2a10 	vmov	r2, s0
 801750c:	460b      	mov	r3, r1
 801750e:	f7e8 ff3d 	bl	800038c <__adddf3>
 8017512:	ec41 0b10 	vmov	d0, r0, r1
 8017516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801751a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801751e:	f04f 33ff 	mov.w	r3, #4294967295
 8017522:	fa23 f707 	lsr.w	r7, r3, r7
 8017526:	4207      	tst	r7, r0
 8017528:	d0f3      	beq.n	8017512 <floor+0x9a>
 801752a:	a311      	add	r3, pc, #68	; (adr r3, 8017570 <floor+0xf8>)
 801752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017530:	f7e8 ff2c 	bl	800038c <__adddf3>
 8017534:	2200      	movs	r2, #0
 8017536:	2300      	movs	r3, #0
 8017538:	f7e9 fb6e 	bl	8000c18 <__aeabi_dcmpgt>
 801753c:	2800      	cmp	r0, #0
 801753e:	d0bf      	beq.n	80174c0 <floor+0x48>
 8017540:	2c00      	cmp	r4, #0
 8017542:	da02      	bge.n	801754a <floor+0xd2>
 8017544:	2e14      	cmp	r6, #20
 8017546:	d103      	bne.n	8017550 <floor+0xd8>
 8017548:	3401      	adds	r4, #1
 801754a:	ea25 0507 	bic.w	r5, r5, r7
 801754e:	e7b7      	b.n	80174c0 <floor+0x48>
 8017550:	2301      	movs	r3, #1
 8017552:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017556:	fa03 f606 	lsl.w	r6, r3, r6
 801755a:	4435      	add	r5, r6
 801755c:	4545      	cmp	r5, r8
 801755e:	bf38      	it	cc
 8017560:	18e4      	addcc	r4, r4, r3
 8017562:	e7f2      	b.n	801754a <floor+0xd2>
 8017564:	2500      	movs	r5, #0
 8017566:	462c      	mov	r4, r5
 8017568:	e7aa      	b.n	80174c0 <floor+0x48>
 801756a:	bf00      	nop
 801756c:	f3af 8000 	nop.w
 8017570:	8800759c 	.word	0x8800759c
 8017574:	7e37e43c 	.word	0x7e37e43c
 8017578:	bff00000 	.word	0xbff00000
 801757c:	000fffff 	.word	0x000fffff

08017580 <matherr>:
 8017580:	2000      	movs	r0, #0
 8017582:	4770      	bx	lr
 8017584:	0000      	movs	r0, r0
	...

08017588 <nan>:
 8017588:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017590 <nan+0x8>
 801758c:	4770      	bx	lr
 801758e:	bf00      	nop
 8017590:	00000000 	.word	0x00000000
 8017594:	7ff80000 	.word	0x7ff80000

08017598 <scalbn>:
 8017598:	b570      	push	{r4, r5, r6, lr}
 801759a:	ec55 4b10 	vmov	r4, r5, d0
 801759e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80175a2:	4606      	mov	r6, r0
 80175a4:	462b      	mov	r3, r5
 80175a6:	b9aa      	cbnz	r2, 80175d4 <scalbn+0x3c>
 80175a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80175ac:	4323      	orrs	r3, r4
 80175ae:	d03b      	beq.n	8017628 <scalbn+0x90>
 80175b0:	4b31      	ldr	r3, [pc, #196]	; (8017678 <scalbn+0xe0>)
 80175b2:	4629      	mov	r1, r5
 80175b4:	2200      	movs	r2, #0
 80175b6:	ee10 0a10 	vmov	r0, s0
 80175ba:	f7e9 f89d 	bl	80006f8 <__aeabi_dmul>
 80175be:	4b2f      	ldr	r3, [pc, #188]	; (801767c <scalbn+0xe4>)
 80175c0:	429e      	cmp	r6, r3
 80175c2:	4604      	mov	r4, r0
 80175c4:	460d      	mov	r5, r1
 80175c6:	da12      	bge.n	80175ee <scalbn+0x56>
 80175c8:	a327      	add	r3, pc, #156	; (adr r3, 8017668 <scalbn+0xd0>)
 80175ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ce:	f7e9 f893 	bl	80006f8 <__aeabi_dmul>
 80175d2:	e009      	b.n	80175e8 <scalbn+0x50>
 80175d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80175d8:	428a      	cmp	r2, r1
 80175da:	d10c      	bne.n	80175f6 <scalbn+0x5e>
 80175dc:	ee10 2a10 	vmov	r2, s0
 80175e0:	4620      	mov	r0, r4
 80175e2:	4629      	mov	r1, r5
 80175e4:	f7e8 fed2 	bl	800038c <__adddf3>
 80175e8:	4604      	mov	r4, r0
 80175ea:	460d      	mov	r5, r1
 80175ec:	e01c      	b.n	8017628 <scalbn+0x90>
 80175ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80175f2:	460b      	mov	r3, r1
 80175f4:	3a36      	subs	r2, #54	; 0x36
 80175f6:	4432      	add	r2, r6
 80175f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80175fc:	428a      	cmp	r2, r1
 80175fe:	dd0b      	ble.n	8017618 <scalbn+0x80>
 8017600:	ec45 4b11 	vmov	d1, r4, r5
 8017604:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017670 <scalbn+0xd8>
 8017608:	f000 f83c 	bl	8017684 <copysign>
 801760c:	a318      	add	r3, pc, #96	; (adr r3, 8017670 <scalbn+0xd8>)
 801760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017612:	ec51 0b10 	vmov	r0, r1, d0
 8017616:	e7da      	b.n	80175ce <scalbn+0x36>
 8017618:	2a00      	cmp	r2, #0
 801761a:	dd08      	ble.n	801762e <scalbn+0x96>
 801761c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017620:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017628:	ec45 4b10 	vmov	d0, r4, r5
 801762c:	bd70      	pop	{r4, r5, r6, pc}
 801762e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017632:	da0d      	bge.n	8017650 <scalbn+0xb8>
 8017634:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017638:	429e      	cmp	r6, r3
 801763a:	ec45 4b11 	vmov	d1, r4, r5
 801763e:	dce1      	bgt.n	8017604 <scalbn+0x6c>
 8017640:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8017668 <scalbn+0xd0>
 8017644:	f000 f81e 	bl	8017684 <copysign>
 8017648:	a307      	add	r3, pc, #28	; (adr r3, 8017668 <scalbn+0xd0>)
 801764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764e:	e7e0      	b.n	8017612 <scalbn+0x7a>
 8017650:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017654:	3236      	adds	r2, #54	; 0x36
 8017656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801765a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801765e:	4620      	mov	r0, r4
 8017660:	4629      	mov	r1, r5
 8017662:	2200      	movs	r2, #0
 8017664:	4b06      	ldr	r3, [pc, #24]	; (8017680 <scalbn+0xe8>)
 8017666:	e7b2      	b.n	80175ce <scalbn+0x36>
 8017668:	c2f8f359 	.word	0xc2f8f359
 801766c:	01a56e1f 	.word	0x01a56e1f
 8017670:	8800759c 	.word	0x8800759c
 8017674:	7e37e43c 	.word	0x7e37e43c
 8017678:	43500000 	.word	0x43500000
 801767c:	ffff3cb0 	.word	0xffff3cb0
 8017680:	3c900000 	.word	0x3c900000

08017684 <copysign>:
 8017684:	ec51 0b10 	vmov	r0, r1, d0
 8017688:	ee11 0a90 	vmov	r0, s3
 801768c:	ee10 2a10 	vmov	r2, s0
 8017690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017694:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017698:	ea41 0300 	orr.w	r3, r1, r0
 801769c:	ec43 2b10 	vmov	d0, r2, r3
 80176a0:	4770      	bx	lr
	...

080176a4 <calloc>:
 80176a4:	4b02      	ldr	r3, [pc, #8]	; (80176b0 <calloc+0xc>)
 80176a6:	460a      	mov	r2, r1
 80176a8:	4601      	mov	r1, r0
 80176aa:	6818      	ldr	r0, [r3, #0]
 80176ac:	f000 b802 	b.w	80176b4 <_calloc_r>
 80176b0:	20009dd0 	.word	0x20009dd0

080176b4 <_calloc_r>:
 80176b4:	b510      	push	{r4, lr}
 80176b6:	4351      	muls	r1, r2
 80176b8:	f000 f866 	bl	8017788 <_malloc_r>
 80176bc:	4604      	mov	r4, r0
 80176be:	b198      	cbz	r0, 80176e8 <_calloc_r+0x34>
 80176c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80176c4:	f022 0203 	bic.w	r2, r2, #3
 80176c8:	3a04      	subs	r2, #4
 80176ca:	2a24      	cmp	r2, #36	; 0x24
 80176cc:	d81b      	bhi.n	8017706 <_calloc_r+0x52>
 80176ce:	2a13      	cmp	r2, #19
 80176d0:	d917      	bls.n	8017702 <_calloc_r+0x4e>
 80176d2:	2100      	movs	r1, #0
 80176d4:	2a1b      	cmp	r2, #27
 80176d6:	e9c0 1100 	strd	r1, r1, [r0]
 80176da:	d807      	bhi.n	80176ec <_calloc_r+0x38>
 80176dc:	f100 0308 	add.w	r3, r0, #8
 80176e0:	2200      	movs	r2, #0
 80176e2:	e9c3 2200 	strd	r2, r2, [r3]
 80176e6:	609a      	str	r2, [r3, #8]
 80176e8:	4620      	mov	r0, r4
 80176ea:	bd10      	pop	{r4, pc}
 80176ec:	2a24      	cmp	r2, #36	; 0x24
 80176ee:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80176f2:	bf11      	iteee	ne
 80176f4:	f100 0310 	addne.w	r3, r0, #16
 80176f8:	6101      	streq	r1, [r0, #16]
 80176fa:	f100 0318 	addeq.w	r3, r0, #24
 80176fe:	6141      	streq	r1, [r0, #20]
 8017700:	e7ee      	b.n	80176e0 <_calloc_r+0x2c>
 8017702:	4603      	mov	r3, r0
 8017704:	e7ec      	b.n	80176e0 <_calloc_r+0x2c>
 8017706:	2100      	movs	r1, #0
 8017708:	f000 fa98 	bl	8017c3c <memset>
 801770c:	e7ec      	b.n	80176e8 <_calloc_r+0x34>
	...

08017710 <__errno>:
 8017710:	4b01      	ldr	r3, [pc, #4]	; (8017718 <__errno+0x8>)
 8017712:	6818      	ldr	r0, [r3, #0]
 8017714:	4770      	bx	lr
 8017716:	bf00      	nop
 8017718:	20009dd0 	.word	0x20009dd0

0801771c <__libc_init_array>:
 801771c:	b570      	push	{r4, r5, r6, lr}
 801771e:	4e0d      	ldr	r6, [pc, #52]	; (8017754 <__libc_init_array+0x38>)
 8017720:	4c0d      	ldr	r4, [pc, #52]	; (8017758 <__libc_init_array+0x3c>)
 8017722:	1ba4      	subs	r4, r4, r6
 8017724:	10a4      	asrs	r4, r4, #2
 8017726:	2500      	movs	r5, #0
 8017728:	42a5      	cmp	r5, r4
 801772a:	d109      	bne.n	8017740 <__libc_init_array+0x24>
 801772c:	4e0b      	ldr	r6, [pc, #44]	; (801775c <__libc_init_array+0x40>)
 801772e:	4c0c      	ldr	r4, [pc, #48]	; (8017760 <__libc_init_array+0x44>)
 8017730:	f003 fa0c 	bl	801ab4c <_init>
 8017734:	1ba4      	subs	r4, r4, r6
 8017736:	10a4      	asrs	r4, r4, #2
 8017738:	2500      	movs	r5, #0
 801773a:	42a5      	cmp	r5, r4
 801773c:	d105      	bne.n	801774a <__libc_init_array+0x2e>
 801773e:	bd70      	pop	{r4, r5, r6, pc}
 8017740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017744:	4798      	blx	r3
 8017746:	3501      	adds	r5, #1
 8017748:	e7ee      	b.n	8017728 <__libc_init_array+0xc>
 801774a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801774e:	4798      	blx	r3
 8017750:	3501      	adds	r5, #1
 8017752:	e7f2      	b.n	801773a <__libc_init_array+0x1e>
 8017754:	08038388 	.word	0x08038388
 8017758:	08038388 	.word	0x08038388
 801775c:	08038388 	.word	0x08038388
 8017760:	08038398 	.word	0x08038398

08017764 <__retarget_lock_acquire_recursive>:
 8017764:	4770      	bx	lr

08017766 <__retarget_lock_release_recursive>:
 8017766:	4770      	bx	lr

08017768 <malloc>:
 8017768:	4b02      	ldr	r3, [pc, #8]	; (8017774 <malloc+0xc>)
 801776a:	4601      	mov	r1, r0
 801776c:	6818      	ldr	r0, [r3, #0]
 801776e:	f000 b80b 	b.w	8017788 <_malloc_r>
 8017772:	bf00      	nop
 8017774:	20009dd0 	.word	0x20009dd0

08017778 <free>:
 8017778:	4b02      	ldr	r3, [pc, #8]	; (8017784 <free+0xc>)
 801777a:	4601      	mov	r1, r0
 801777c:	6818      	ldr	r0, [r3, #0]
 801777e:	f002 bd23 	b.w	801a1c8 <_free_r>
 8017782:	bf00      	nop
 8017784:	20009dd0 	.word	0x20009dd0

08017788 <_malloc_r>:
 8017788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801778c:	f101 050b 	add.w	r5, r1, #11
 8017790:	2d16      	cmp	r5, #22
 8017792:	4606      	mov	r6, r0
 8017794:	d906      	bls.n	80177a4 <_malloc_r+0x1c>
 8017796:	f035 0507 	bics.w	r5, r5, #7
 801779a:	d504      	bpl.n	80177a6 <_malloc_r+0x1e>
 801779c:	230c      	movs	r3, #12
 801779e:	6033      	str	r3, [r6, #0]
 80177a0:	2400      	movs	r4, #0
 80177a2:	e1a8      	b.n	8017af6 <_malloc_r+0x36e>
 80177a4:	2510      	movs	r5, #16
 80177a6:	428d      	cmp	r5, r1
 80177a8:	d3f8      	bcc.n	801779c <_malloc_r+0x14>
 80177aa:	4630      	mov	r0, r6
 80177ac:	f000 fa4e 	bl	8017c4c <__malloc_lock>
 80177b0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80177b4:	4fc0      	ldr	r7, [pc, #768]	; (8017ab8 <_malloc_r+0x330>)
 80177b6:	d238      	bcs.n	801782a <_malloc_r+0xa2>
 80177b8:	f105 0208 	add.w	r2, r5, #8
 80177bc:	443a      	add	r2, r7
 80177be:	f1a2 0108 	sub.w	r1, r2, #8
 80177c2:	6854      	ldr	r4, [r2, #4]
 80177c4:	428c      	cmp	r4, r1
 80177c6:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80177ca:	d102      	bne.n	80177d2 <_malloc_r+0x4a>
 80177cc:	68d4      	ldr	r4, [r2, #12]
 80177ce:	42a2      	cmp	r2, r4
 80177d0:	d010      	beq.n	80177f4 <_malloc_r+0x6c>
 80177d2:	6863      	ldr	r3, [r4, #4]
 80177d4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80177d8:	f023 0303 	bic.w	r3, r3, #3
 80177dc:	60ca      	str	r2, [r1, #12]
 80177de:	4423      	add	r3, r4
 80177e0:	6091      	str	r1, [r2, #8]
 80177e2:	685a      	ldr	r2, [r3, #4]
 80177e4:	f042 0201 	orr.w	r2, r2, #1
 80177e8:	605a      	str	r2, [r3, #4]
 80177ea:	4630      	mov	r0, r6
 80177ec:	f000 fa34 	bl	8017c58 <__malloc_unlock>
 80177f0:	3408      	adds	r4, #8
 80177f2:	e180      	b.n	8017af6 <_malloc_r+0x36e>
 80177f4:	3302      	adds	r3, #2
 80177f6:	4ab1      	ldr	r2, [pc, #708]	; (8017abc <_malloc_r+0x334>)
 80177f8:	693c      	ldr	r4, [r7, #16]
 80177fa:	4294      	cmp	r4, r2
 80177fc:	4611      	mov	r1, r2
 80177fe:	d075      	beq.n	80178ec <_malloc_r+0x164>
 8017800:	6860      	ldr	r0, [r4, #4]
 8017802:	f020 0c03 	bic.w	ip, r0, #3
 8017806:	ebac 0005 	sub.w	r0, ip, r5
 801780a:	280f      	cmp	r0, #15
 801780c:	dd48      	ble.n	80178a0 <_malloc_r+0x118>
 801780e:	1963      	adds	r3, r4, r5
 8017810:	f045 0501 	orr.w	r5, r5, #1
 8017814:	6065      	str	r5, [r4, #4]
 8017816:	e9c7 3304 	strd	r3, r3, [r7, #16]
 801781a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801781e:	f040 0201 	orr.w	r2, r0, #1
 8017822:	605a      	str	r2, [r3, #4]
 8017824:	f844 000c 	str.w	r0, [r4, ip]
 8017828:	e7df      	b.n	80177ea <_malloc_r+0x62>
 801782a:	0a6b      	lsrs	r3, r5, #9
 801782c:	d02a      	beq.n	8017884 <_malloc_r+0xfc>
 801782e:	2b04      	cmp	r3, #4
 8017830:	d812      	bhi.n	8017858 <_malloc_r+0xd0>
 8017832:	09ab      	lsrs	r3, r5, #6
 8017834:	3338      	adds	r3, #56	; 0x38
 8017836:	1c5a      	adds	r2, r3, #1
 8017838:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 801783c:	f1a2 0c08 	sub.w	ip, r2, #8
 8017840:	6854      	ldr	r4, [r2, #4]
 8017842:	4564      	cmp	r4, ip
 8017844:	d006      	beq.n	8017854 <_malloc_r+0xcc>
 8017846:	6862      	ldr	r2, [r4, #4]
 8017848:	f022 0203 	bic.w	r2, r2, #3
 801784c:	1b50      	subs	r0, r2, r5
 801784e:	280f      	cmp	r0, #15
 8017850:	dd1c      	ble.n	801788c <_malloc_r+0x104>
 8017852:	3b01      	subs	r3, #1
 8017854:	3301      	adds	r3, #1
 8017856:	e7ce      	b.n	80177f6 <_malloc_r+0x6e>
 8017858:	2b14      	cmp	r3, #20
 801785a:	d801      	bhi.n	8017860 <_malloc_r+0xd8>
 801785c:	335b      	adds	r3, #91	; 0x5b
 801785e:	e7ea      	b.n	8017836 <_malloc_r+0xae>
 8017860:	2b54      	cmp	r3, #84	; 0x54
 8017862:	d802      	bhi.n	801786a <_malloc_r+0xe2>
 8017864:	0b2b      	lsrs	r3, r5, #12
 8017866:	336e      	adds	r3, #110	; 0x6e
 8017868:	e7e5      	b.n	8017836 <_malloc_r+0xae>
 801786a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801786e:	d802      	bhi.n	8017876 <_malloc_r+0xee>
 8017870:	0beb      	lsrs	r3, r5, #15
 8017872:	3377      	adds	r3, #119	; 0x77
 8017874:	e7df      	b.n	8017836 <_malloc_r+0xae>
 8017876:	f240 5254 	movw	r2, #1364	; 0x554
 801787a:	4293      	cmp	r3, r2
 801787c:	d804      	bhi.n	8017888 <_malloc_r+0x100>
 801787e:	0cab      	lsrs	r3, r5, #18
 8017880:	337c      	adds	r3, #124	; 0x7c
 8017882:	e7d8      	b.n	8017836 <_malloc_r+0xae>
 8017884:	233f      	movs	r3, #63	; 0x3f
 8017886:	e7d6      	b.n	8017836 <_malloc_r+0xae>
 8017888:	237e      	movs	r3, #126	; 0x7e
 801788a:	e7d4      	b.n	8017836 <_malloc_r+0xae>
 801788c:	2800      	cmp	r0, #0
 801788e:	68e1      	ldr	r1, [r4, #12]
 8017890:	db04      	blt.n	801789c <_malloc_r+0x114>
 8017892:	68a3      	ldr	r3, [r4, #8]
 8017894:	60d9      	str	r1, [r3, #12]
 8017896:	608b      	str	r3, [r1, #8]
 8017898:	18a3      	adds	r3, r4, r2
 801789a:	e7a2      	b.n	80177e2 <_malloc_r+0x5a>
 801789c:	460c      	mov	r4, r1
 801789e:	e7d0      	b.n	8017842 <_malloc_r+0xba>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80178a6:	db07      	blt.n	80178b8 <_malloc_r+0x130>
 80178a8:	44a4      	add	ip, r4
 80178aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80178ae:	f043 0301 	orr.w	r3, r3, #1
 80178b2:	f8cc 3004 	str.w	r3, [ip, #4]
 80178b6:	e798      	b.n	80177ea <_malloc_r+0x62>
 80178b8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f080 8099 	bcs.w	80179f4 <_malloc_r+0x26c>
 80178c2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80178c6:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80178ca:	2201      	movs	r2, #1
 80178cc:	f10c 0c01 	add.w	ip, ip, #1
 80178d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80178d4:	4310      	orrs	r0, r2
 80178d6:	6078      	str	r0, [r7, #4]
 80178d8:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80178dc:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 80178e0:	3a08      	subs	r2, #8
 80178e2:	e9c4 0202 	strd	r0, r2, [r4, #8]
 80178e6:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80178ea:	60c4      	str	r4, [r0, #12]
 80178ec:	2001      	movs	r0, #1
 80178ee:	109a      	asrs	r2, r3, #2
 80178f0:	fa00 f202 	lsl.w	r2, r0, r2
 80178f4:	6878      	ldr	r0, [r7, #4]
 80178f6:	4290      	cmp	r0, r2
 80178f8:	d326      	bcc.n	8017948 <_malloc_r+0x1c0>
 80178fa:	4210      	tst	r0, r2
 80178fc:	d106      	bne.n	801790c <_malloc_r+0x184>
 80178fe:	f023 0303 	bic.w	r3, r3, #3
 8017902:	0052      	lsls	r2, r2, #1
 8017904:	4210      	tst	r0, r2
 8017906:	f103 0304 	add.w	r3, r3, #4
 801790a:	d0fa      	beq.n	8017902 <_malloc_r+0x17a>
 801790c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8017910:	46e1      	mov	r9, ip
 8017912:	4698      	mov	r8, r3
 8017914:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8017918:	454c      	cmp	r4, r9
 801791a:	f040 80af 	bne.w	8017a7c <_malloc_r+0x2f4>
 801791e:	f108 0801 	add.w	r8, r8, #1
 8017922:	f018 0f03 	tst.w	r8, #3
 8017926:	f109 0908 	add.w	r9, r9, #8
 801792a:	d1f3      	bne.n	8017914 <_malloc_r+0x18c>
 801792c:	0798      	lsls	r0, r3, #30
 801792e:	f040 80e8 	bne.w	8017b02 <_malloc_r+0x37a>
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	ea23 0302 	bic.w	r3, r3, r2
 8017938:	607b      	str	r3, [r7, #4]
 801793a:	6878      	ldr	r0, [r7, #4]
 801793c:	0052      	lsls	r2, r2, #1
 801793e:	4290      	cmp	r0, r2
 8017940:	d302      	bcc.n	8017948 <_malloc_r+0x1c0>
 8017942:	2a00      	cmp	r2, #0
 8017944:	f040 80ec 	bne.w	8017b20 <_malloc_r+0x398>
 8017948:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801794c:	f8da 4004 	ldr.w	r4, [sl, #4]
 8017950:	f024 0203 	bic.w	r2, r4, #3
 8017954:	42aa      	cmp	r2, r5
 8017956:	d303      	bcc.n	8017960 <_malloc_r+0x1d8>
 8017958:	1b53      	subs	r3, r2, r5
 801795a:	2b0f      	cmp	r3, #15
 801795c:	f300 8140 	bgt.w	8017be0 <_malloc_r+0x458>
 8017960:	4b57      	ldr	r3, [pc, #348]	; (8017ac0 <_malloc_r+0x338>)
 8017962:	9200      	str	r2, [sp, #0]
 8017964:	2008      	movs	r0, #8
 8017966:	681c      	ldr	r4, [r3, #0]
 8017968:	f001 fd74 	bl	8019454 <sysconf>
 801796c:	4b55      	ldr	r3, [pc, #340]	; (8017ac4 <_malloc_r+0x33c>)
 801796e:	9a00      	ldr	r2, [sp, #0]
 8017970:	6819      	ldr	r1, [r3, #0]
 8017972:	3410      	adds	r4, #16
 8017974:	3101      	adds	r1, #1
 8017976:	442c      	add	r4, r5
 8017978:	bf1f      	itttt	ne
 801797a:	f104 34ff 	addne.w	r4, r4, #4294967295
 801797e:	1824      	addne	r4, r4, r0
 8017980:	4241      	negne	r1, r0
 8017982:	400c      	andne	r4, r1
 8017984:	4680      	mov	r8, r0
 8017986:	4621      	mov	r1, r4
 8017988:	4630      	mov	r0, r6
 801798a:	e9cd 2300 	strd	r2, r3, [sp]
 801798e:	f000 fb11 	bl	8017fb4 <_sbrk_r>
 8017992:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017996:	4683      	mov	fp, r0
 8017998:	f000 80fb 	beq.w	8017b92 <_malloc_r+0x40a>
 801799c:	9a00      	ldr	r2, [sp, #0]
 801799e:	9b01      	ldr	r3, [sp, #4]
 80179a0:	eb0a 0102 	add.w	r1, sl, r2
 80179a4:	4281      	cmp	r1, r0
 80179a6:	d902      	bls.n	80179ae <_malloc_r+0x226>
 80179a8:	45ba      	cmp	sl, r7
 80179aa:	f040 80f2 	bne.w	8017b92 <_malloc_r+0x40a>
 80179ae:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8017ad0 <_malloc_r+0x348>
 80179b2:	f8d9 0000 	ldr.w	r0, [r9]
 80179b6:	4559      	cmp	r1, fp
 80179b8:	eb00 0e04 	add.w	lr, r0, r4
 80179bc:	f8c9 e000 	str.w	lr, [r9]
 80179c0:	f108 3cff 	add.w	ip, r8, #4294967295
 80179c4:	f040 80ae 	bne.w	8017b24 <_malloc_r+0x39c>
 80179c8:	ea11 0f0c 	tst.w	r1, ip
 80179cc:	f040 80aa 	bne.w	8017b24 <_malloc_r+0x39c>
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	4414      	add	r4, r2
 80179d4:	f044 0401 	orr.w	r4, r4, #1
 80179d8:	605c      	str	r4, [r3, #4]
 80179da:	4a3b      	ldr	r2, [pc, #236]	; (8017ac8 <_malloc_r+0x340>)
 80179dc:	f8d9 3000 	ldr.w	r3, [r9]
 80179e0:	6811      	ldr	r1, [r2, #0]
 80179e2:	428b      	cmp	r3, r1
 80179e4:	bf88      	it	hi
 80179e6:	6013      	strhi	r3, [r2, #0]
 80179e8:	4a38      	ldr	r2, [pc, #224]	; (8017acc <_malloc_r+0x344>)
 80179ea:	6811      	ldr	r1, [r2, #0]
 80179ec:	428b      	cmp	r3, r1
 80179ee:	bf88      	it	hi
 80179f0:	6013      	strhi	r3, [r2, #0]
 80179f2:	e0ce      	b.n	8017b92 <_malloc_r+0x40a>
 80179f4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80179f8:	2a04      	cmp	r2, #4
 80179fa:	d818      	bhi.n	8017a2e <_malloc_r+0x2a6>
 80179fc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8017a00:	3238      	adds	r2, #56	; 0x38
 8017a02:	f102 0e01 	add.w	lr, r2, #1
 8017a06:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8017a0a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8017a0e:	45f0      	cmp	r8, lr
 8017a10:	d12b      	bne.n	8017a6a <_malloc_r+0x2e2>
 8017a12:	1092      	asrs	r2, r2, #2
 8017a14:	f04f 0c01 	mov.w	ip, #1
 8017a18:	fa0c f202 	lsl.w	r2, ip, r2
 8017a1c:	4310      	orrs	r0, r2
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8017a24:	f8c8 4008 	str.w	r4, [r8, #8]
 8017a28:	f8ce 400c 	str.w	r4, [lr, #12]
 8017a2c:	e75e      	b.n	80178ec <_malloc_r+0x164>
 8017a2e:	2a14      	cmp	r2, #20
 8017a30:	d801      	bhi.n	8017a36 <_malloc_r+0x2ae>
 8017a32:	325b      	adds	r2, #91	; 0x5b
 8017a34:	e7e5      	b.n	8017a02 <_malloc_r+0x27a>
 8017a36:	2a54      	cmp	r2, #84	; 0x54
 8017a38:	d803      	bhi.n	8017a42 <_malloc_r+0x2ba>
 8017a3a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8017a3e:	326e      	adds	r2, #110	; 0x6e
 8017a40:	e7df      	b.n	8017a02 <_malloc_r+0x27a>
 8017a42:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8017a46:	d803      	bhi.n	8017a50 <_malloc_r+0x2c8>
 8017a48:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8017a4c:	3277      	adds	r2, #119	; 0x77
 8017a4e:	e7d8      	b.n	8017a02 <_malloc_r+0x27a>
 8017a50:	f240 5e54 	movw	lr, #1364	; 0x554
 8017a54:	4572      	cmp	r2, lr
 8017a56:	bf9a      	itte	ls
 8017a58:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8017a5c:	327c      	addls	r2, #124	; 0x7c
 8017a5e:	227e      	movhi	r2, #126	; 0x7e
 8017a60:	e7cf      	b.n	8017a02 <_malloc_r+0x27a>
 8017a62:	f8de e008 	ldr.w	lr, [lr, #8]
 8017a66:	45f0      	cmp	r8, lr
 8017a68:	d005      	beq.n	8017a76 <_malloc_r+0x2ee>
 8017a6a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017a6e:	f022 0203 	bic.w	r2, r2, #3
 8017a72:	4562      	cmp	r2, ip
 8017a74:	d8f5      	bhi.n	8017a62 <_malloc_r+0x2da>
 8017a76:	f8de 800c 	ldr.w	r8, [lr, #12]
 8017a7a:	e7d1      	b.n	8017a20 <_malloc_r+0x298>
 8017a7c:	6860      	ldr	r0, [r4, #4]
 8017a7e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8017a82:	f020 0003 	bic.w	r0, r0, #3
 8017a86:	eba0 0a05 	sub.w	sl, r0, r5
 8017a8a:	f1ba 0f0f 	cmp.w	sl, #15
 8017a8e:	dd21      	ble.n	8017ad4 <_malloc_r+0x34c>
 8017a90:	68a2      	ldr	r2, [r4, #8]
 8017a92:	1963      	adds	r3, r4, r5
 8017a94:	f045 0501 	orr.w	r5, r5, #1
 8017a98:	6065      	str	r5, [r4, #4]
 8017a9a:	f8c2 e00c 	str.w	lr, [r2, #12]
 8017a9e:	f8ce 2008 	str.w	r2, [lr, #8]
 8017aa2:	f04a 0201 	orr.w	r2, sl, #1
 8017aa6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8017aaa:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8017aae:	605a      	str	r2, [r3, #4]
 8017ab0:	f844 a000 	str.w	sl, [r4, r0]
 8017ab4:	e699      	b.n	80177ea <_malloc_r+0x62>
 8017ab6:	bf00      	nop
 8017ab8:	2000a200 	.word	0x2000a200
 8017abc:	2000a208 	.word	0x2000a208
 8017ac0:	20021284 	.word	0x20021284
 8017ac4:	2000a608 	.word	0x2000a608
 8017ac8:	2002127c 	.word	0x2002127c
 8017acc:	20021280 	.word	0x20021280
 8017ad0:	20021254 	.word	0x20021254
 8017ad4:	f1ba 0f00 	cmp.w	sl, #0
 8017ad8:	db11      	blt.n	8017afe <_malloc_r+0x376>
 8017ada:	4420      	add	r0, r4
 8017adc:	6843      	ldr	r3, [r0, #4]
 8017ade:	f043 0301 	orr.w	r3, r3, #1
 8017ae2:	6043      	str	r3, [r0, #4]
 8017ae4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8017ae8:	4630      	mov	r0, r6
 8017aea:	f8c3 e00c 	str.w	lr, [r3, #12]
 8017aee:	f8ce 3008 	str.w	r3, [lr, #8]
 8017af2:	f000 f8b1 	bl	8017c58 <__malloc_unlock>
 8017af6:	4620      	mov	r0, r4
 8017af8:	b003      	add	sp, #12
 8017afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017afe:	4674      	mov	r4, lr
 8017b00:	e70a      	b.n	8017918 <_malloc_r+0x190>
 8017b02:	f1ac 0008 	sub.w	r0, ip, #8
 8017b06:	f8dc c000 	ldr.w	ip, [ip]
 8017b0a:	4584      	cmp	ip, r0
 8017b0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8017b10:	f43f af0c 	beq.w	801792c <_malloc_r+0x1a4>
 8017b14:	e711      	b.n	801793a <_malloc_r+0x1b2>
 8017b16:	3304      	adds	r3, #4
 8017b18:	0052      	lsls	r2, r2, #1
 8017b1a:	4210      	tst	r0, r2
 8017b1c:	d0fb      	beq.n	8017b16 <_malloc_r+0x38e>
 8017b1e:	e6f5      	b.n	801790c <_malloc_r+0x184>
 8017b20:	4643      	mov	r3, r8
 8017b22:	e7fa      	b.n	8017b1a <_malloc_r+0x392>
 8017b24:	6818      	ldr	r0, [r3, #0]
 8017b26:	9200      	str	r2, [sp, #0]
 8017b28:	3001      	adds	r0, #1
 8017b2a:	bf1b      	ittet	ne
 8017b2c:	ebab 0101 	subne.w	r1, fp, r1
 8017b30:	4471      	addne	r1, lr
 8017b32:	f8c3 b000 	streq.w	fp, [r3]
 8017b36:	f8c9 1000 	strne.w	r1, [r9]
 8017b3a:	f01b 0307 	ands.w	r3, fp, #7
 8017b3e:	bf1c      	itt	ne
 8017b40:	f1c3 0308 	rsbne	r3, r3, #8
 8017b44:	449b      	addne	fp, r3
 8017b46:	445c      	add	r4, fp
 8017b48:	4498      	add	r8, r3
 8017b4a:	ea04 030c 	and.w	r3, r4, ip
 8017b4e:	eba8 0803 	sub.w	r8, r8, r3
 8017b52:	4641      	mov	r1, r8
 8017b54:	4630      	mov	r0, r6
 8017b56:	f000 fa2d 	bl	8017fb4 <_sbrk_r>
 8017b5a:	1c43      	adds	r3, r0, #1
 8017b5c:	bf04      	itt	eq
 8017b5e:	4658      	moveq	r0, fp
 8017b60:	f04f 0800 	moveq.w	r8, #0
 8017b64:	f8d9 3000 	ldr.w	r3, [r9]
 8017b68:	f8c7 b008 	str.w	fp, [r7, #8]
 8017b6c:	eba0 000b 	sub.w	r0, r0, fp
 8017b70:	4440      	add	r0, r8
 8017b72:	4443      	add	r3, r8
 8017b74:	f040 0001 	orr.w	r0, r0, #1
 8017b78:	45ba      	cmp	sl, r7
 8017b7a:	9a00      	ldr	r2, [sp, #0]
 8017b7c:	f8c9 3000 	str.w	r3, [r9]
 8017b80:	f8cb 0004 	str.w	r0, [fp, #4]
 8017b84:	f43f af29 	beq.w	80179da <_malloc_r+0x252>
 8017b88:	2a0f      	cmp	r2, #15
 8017b8a:	d810      	bhi.n	8017bae <_malloc_r+0x426>
 8017b8c:	2301      	movs	r3, #1
 8017b8e:	f8cb 3004 	str.w	r3, [fp, #4]
 8017b92:	68bb      	ldr	r3, [r7, #8]
 8017b94:	685a      	ldr	r2, [r3, #4]
 8017b96:	f022 0203 	bic.w	r2, r2, #3
 8017b9a:	42aa      	cmp	r2, r5
 8017b9c:	eba2 0305 	sub.w	r3, r2, r5
 8017ba0:	d301      	bcc.n	8017ba6 <_malloc_r+0x41e>
 8017ba2:	2b0f      	cmp	r3, #15
 8017ba4:	dc1c      	bgt.n	8017be0 <_malloc_r+0x458>
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	f000 f856 	bl	8017c58 <__malloc_unlock>
 8017bac:	e5f8      	b.n	80177a0 <_malloc_r+0x18>
 8017bae:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017bb2:	f1a2 040c 	sub.w	r4, r2, #12
 8017bb6:	f024 0407 	bic.w	r4, r4, #7
 8017bba:	f003 0301 	and.w	r3, r3, #1
 8017bbe:	4323      	orrs	r3, r4
 8017bc0:	f8ca 3004 	str.w	r3, [sl, #4]
 8017bc4:	2205      	movs	r2, #5
 8017bc6:	eb0a 0304 	add.w	r3, sl, r4
 8017bca:	2c0f      	cmp	r4, #15
 8017bcc:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8017bd0:	f67f af03 	bls.w	80179da <_malloc_r+0x252>
 8017bd4:	f10a 0108 	add.w	r1, sl, #8
 8017bd8:	4630      	mov	r0, r6
 8017bda:	f002 faf5 	bl	801a1c8 <_free_r>
 8017bde:	e6fc      	b.n	80179da <_malloc_r+0x252>
 8017be0:	68bc      	ldr	r4, [r7, #8]
 8017be2:	f045 0201 	orr.w	r2, r5, #1
 8017be6:	4425      	add	r5, r4
 8017be8:	f043 0301 	orr.w	r3, r3, #1
 8017bec:	6062      	str	r2, [r4, #4]
 8017bee:	60bd      	str	r5, [r7, #8]
 8017bf0:	606b      	str	r3, [r5, #4]
 8017bf2:	e5fa      	b.n	80177ea <_malloc_r+0x62>

08017bf4 <memcpy>:
 8017bf4:	b510      	push	{r4, lr}
 8017bf6:	1e43      	subs	r3, r0, #1
 8017bf8:	440a      	add	r2, r1
 8017bfa:	4291      	cmp	r1, r2
 8017bfc:	d100      	bne.n	8017c00 <memcpy+0xc>
 8017bfe:	bd10      	pop	{r4, pc}
 8017c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c08:	e7f7      	b.n	8017bfa <memcpy+0x6>

08017c0a <memmove>:
 8017c0a:	4288      	cmp	r0, r1
 8017c0c:	b510      	push	{r4, lr}
 8017c0e:	eb01 0302 	add.w	r3, r1, r2
 8017c12:	d807      	bhi.n	8017c24 <memmove+0x1a>
 8017c14:	1e42      	subs	r2, r0, #1
 8017c16:	4299      	cmp	r1, r3
 8017c18:	d00a      	beq.n	8017c30 <memmove+0x26>
 8017c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017c22:	e7f8      	b.n	8017c16 <memmove+0xc>
 8017c24:	4283      	cmp	r3, r0
 8017c26:	d9f5      	bls.n	8017c14 <memmove+0xa>
 8017c28:	1881      	adds	r1, r0, r2
 8017c2a:	1ad2      	subs	r2, r2, r3
 8017c2c:	42d3      	cmn	r3, r2
 8017c2e:	d100      	bne.n	8017c32 <memmove+0x28>
 8017c30:	bd10      	pop	{r4, pc}
 8017c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017c3a:	e7f7      	b.n	8017c2c <memmove+0x22>

08017c3c <memset>:
 8017c3c:	4402      	add	r2, r0
 8017c3e:	4603      	mov	r3, r0
 8017c40:	4293      	cmp	r3, r2
 8017c42:	d100      	bne.n	8017c46 <memset+0xa>
 8017c44:	4770      	bx	lr
 8017c46:	f803 1b01 	strb.w	r1, [r3], #1
 8017c4a:	e7f9      	b.n	8017c40 <memset+0x4>

08017c4c <__malloc_lock>:
 8017c4c:	4801      	ldr	r0, [pc, #4]	; (8017c54 <__malloc_lock+0x8>)
 8017c4e:	f7ff bd89 	b.w	8017764 <__retarget_lock_acquire_recursive>
 8017c52:	bf00      	nop
 8017c54:	20021334 	.word	0x20021334

08017c58 <__malloc_unlock>:
 8017c58:	4801      	ldr	r0, [pc, #4]	; (8017c60 <__malloc_unlock+0x8>)
 8017c5a:	f7ff bd84 	b.w	8017766 <__retarget_lock_release_recursive>
 8017c5e:	bf00      	nop
 8017c60:	20021334 	.word	0x20021334

08017c64 <_realloc_r>:
 8017c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c68:	4682      	mov	sl, r0
 8017c6a:	460c      	mov	r4, r1
 8017c6c:	b929      	cbnz	r1, 8017c7a <_realloc_r+0x16>
 8017c6e:	4611      	mov	r1, r2
 8017c70:	b003      	add	sp, #12
 8017c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c76:	f7ff bd87 	b.w	8017788 <_malloc_r>
 8017c7a:	9201      	str	r2, [sp, #4]
 8017c7c:	f7ff ffe6 	bl	8017c4c <__malloc_lock>
 8017c80:	9a01      	ldr	r2, [sp, #4]
 8017c82:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8017c86:	f102 080b 	add.w	r8, r2, #11
 8017c8a:	f1b8 0f16 	cmp.w	r8, #22
 8017c8e:	f1a4 0908 	sub.w	r9, r4, #8
 8017c92:	f025 0603 	bic.w	r6, r5, #3
 8017c96:	d90b      	bls.n	8017cb0 <_realloc_r+0x4c>
 8017c98:	f038 0807 	bics.w	r8, r8, #7
 8017c9c:	d50a      	bpl.n	8017cb4 <_realloc_r+0x50>
 8017c9e:	230c      	movs	r3, #12
 8017ca0:	f8ca 3000 	str.w	r3, [sl]
 8017ca4:	f04f 0b00 	mov.w	fp, #0
 8017ca8:	4658      	mov	r0, fp
 8017caa:	b003      	add	sp, #12
 8017cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cb0:	f04f 0810 	mov.w	r8, #16
 8017cb4:	4590      	cmp	r8, r2
 8017cb6:	d3f2      	bcc.n	8017c9e <_realloc_r+0x3a>
 8017cb8:	45b0      	cmp	r8, r6
 8017cba:	f340 8170 	ble.w	8017f9e <_realloc_r+0x33a>
 8017cbe:	49a9      	ldr	r1, [pc, #676]	; (8017f64 <_realloc_r+0x300>)
 8017cc0:	9101      	str	r1, [sp, #4]
 8017cc2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8017cc6:	eb09 0306 	add.w	r3, r9, r6
 8017cca:	459c      	cmp	ip, r3
 8017ccc:	6858      	ldr	r0, [r3, #4]
 8017cce:	d005      	beq.n	8017cdc <_realloc_r+0x78>
 8017cd0:	f020 0101 	bic.w	r1, r0, #1
 8017cd4:	4419      	add	r1, r3
 8017cd6:	6849      	ldr	r1, [r1, #4]
 8017cd8:	07cf      	lsls	r7, r1, #31
 8017cda:	d447      	bmi.n	8017d6c <_realloc_r+0x108>
 8017cdc:	f020 0003 	bic.w	r0, r0, #3
 8017ce0:	459c      	cmp	ip, r3
 8017ce2:	eb06 0700 	add.w	r7, r6, r0
 8017ce6:	d119      	bne.n	8017d1c <_realloc_r+0xb8>
 8017ce8:	f108 0110 	add.w	r1, r8, #16
 8017cec:	42b9      	cmp	r1, r7
 8017cee:	dc3f      	bgt.n	8017d70 <_realloc_r+0x10c>
 8017cf0:	eb09 0308 	add.w	r3, r9, r8
 8017cf4:	9a01      	ldr	r2, [sp, #4]
 8017cf6:	eba7 0708 	sub.w	r7, r7, r8
 8017cfa:	f047 0701 	orr.w	r7, r7, #1
 8017cfe:	6093      	str	r3, [r2, #8]
 8017d00:	605f      	str	r7, [r3, #4]
 8017d02:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017d06:	f003 0301 	and.w	r3, r3, #1
 8017d0a:	ea43 0308 	orr.w	r3, r3, r8
 8017d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d12:	4650      	mov	r0, sl
 8017d14:	f7ff ffa0 	bl	8017c58 <__malloc_unlock>
 8017d18:	46a3      	mov	fp, r4
 8017d1a:	e7c5      	b.n	8017ca8 <_realloc_r+0x44>
 8017d1c:	45b8      	cmp	r8, r7
 8017d1e:	dc27      	bgt.n	8017d70 <_realloc_r+0x10c>
 8017d20:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017d24:	60da      	str	r2, [r3, #12]
 8017d26:	6093      	str	r3, [r2, #8]
 8017d28:	eba7 0008 	sub.w	r0, r7, r8
 8017d2c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8017d30:	280f      	cmp	r0, #15
 8017d32:	f002 0201 	and.w	r2, r2, #1
 8017d36:	eb09 0307 	add.w	r3, r9, r7
 8017d3a:	f240 8132 	bls.w	8017fa2 <_realloc_r+0x33e>
 8017d3e:	eb09 0108 	add.w	r1, r9, r8
 8017d42:	ea48 0202 	orr.w	r2, r8, r2
 8017d46:	f040 0001 	orr.w	r0, r0, #1
 8017d4a:	f8c9 2004 	str.w	r2, [r9, #4]
 8017d4e:	6048      	str	r0, [r1, #4]
 8017d50:	685a      	ldr	r2, [r3, #4]
 8017d52:	f042 0201 	orr.w	r2, r2, #1
 8017d56:	605a      	str	r2, [r3, #4]
 8017d58:	3108      	adds	r1, #8
 8017d5a:	4650      	mov	r0, sl
 8017d5c:	f002 fa34 	bl	801a1c8 <_free_r>
 8017d60:	4650      	mov	r0, sl
 8017d62:	f7ff ff79 	bl	8017c58 <__malloc_unlock>
 8017d66:	f109 0b08 	add.w	fp, r9, #8
 8017d6a:	e79d      	b.n	8017ca8 <_realloc_r+0x44>
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	4603      	mov	r3, r0
 8017d70:	07e9      	lsls	r1, r5, #31
 8017d72:	f100 80c6 	bmi.w	8017f02 <_realloc_r+0x29e>
 8017d76:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8017d7a:	eba9 0505 	sub.w	r5, r9, r5
 8017d7e:	6869      	ldr	r1, [r5, #4]
 8017d80:	f021 0103 	bic.w	r1, r1, #3
 8017d84:	eb01 0b06 	add.w	fp, r1, r6
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f000 8086 	beq.w	8017e9a <_realloc_r+0x236>
 8017d8e:	459c      	cmp	ip, r3
 8017d90:	eb00 070b 	add.w	r7, r0, fp
 8017d94:	d149      	bne.n	8017e2a <_realloc_r+0x1c6>
 8017d96:	f108 0310 	add.w	r3, r8, #16
 8017d9a:	42bb      	cmp	r3, r7
 8017d9c:	dc7d      	bgt.n	8017e9a <_realloc_r+0x236>
 8017d9e:	46ab      	mov	fp, r5
 8017da0:	68eb      	ldr	r3, [r5, #12]
 8017da2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8017da6:	60d3      	str	r3, [r2, #12]
 8017da8:	609a      	str	r2, [r3, #8]
 8017daa:	1f32      	subs	r2, r6, #4
 8017dac:	2a24      	cmp	r2, #36	; 0x24
 8017dae:	d837      	bhi.n	8017e20 <_realloc_r+0x1bc>
 8017db0:	2a13      	cmp	r2, #19
 8017db2:	d933      	bls.n	8017e1c <_realloc_r+0x1b8>
 8017db4:	6823      	ldr	r3, [r4, #0]
 8017db6:	60ab      	str	r3, [r5, #8]
 8017db8:	6863      	ldr	r3, [r4, #4]
 8017dba:	60eb      	str	r3, [r5, #12]
 8017dbc:	2a1b      	cmp	r2, #27
 8017dbe:	d81b      	bhi.n	8017df8 <_realloc_r+0x194>
 8017dc0:	3408      	adds	r4, #8
 8017dc2:	f105 0310 	add.w	r3, r5, #16
 8017dc6:	6822      	ldr	r2, [r4, #0]
 8017dc8:	601a      	str	r2, [r3, #0]
 8017dca:	6862      	ldr	r2, [r4, #4]
 8017dcc:	605a      	str	r2, [r3, #4]
 8017dce:	68a2      	ldr	r2, [r4, #8]
 8017dd0:	609a      	str	r2, [r3, #8]
 8017dd2:	eb05 0308 	add.w	r3, r5, r8
 8017dd6:	9a01      	ldr	r2, [sp, #4]
 8017dd8:	eba7 0708 	sub.w	r7, r7, r8
 8017ddc:	f047 0701 	orr.w	r7, r7, #1
 8017de0:	6093      	str	r3, [r2, #8]
 8017de2:	605f      	str	r7, [r3, #4]
 8017de4:	686b      	ldr	r3, [r5, #4]
 8017de6:	f003 0301 	and.w	r3, r3, #1
 8017dea:	ea43 0308 	orr.w	r3, r3, r8
 8017dee:	606b      	str	r3, [r5, #4]
 8017df0:	4650      	mov	r0, sl
 8017df2:	f7ff ff31 	bl	8017c58 <__malloc_unlock>
 8017df6:	e757      	b.n	8017ca8 <_realloc_r+0x44>
 8017df8:	68a3      	ldr	r3, [r4, #8]
 8017dfa:	612b      	str	r3, [r5, #16]
 8017dfc:	68e3      	ldr	r3, [r4, #12]
 8017dfe:	616b      	str	r3, [r5, #20]
 8017e00:	2a24      	cmp	r2, #36	; 0x24
 8017e02:	bf01      	itttt	eq
 8017e04:	6923      	ldreq	r3, [r4, #16]
 8017e06:	61ab      	streq	r3, [r5, #24]
 8017e08:	6962      	ldreq	r2, [r4, #20]
 8017e0a:	61ea      	streq	r2, [r5, #28]
 8017e0c:	bf19      	ittee	ne
 8017e0e:	3410      	addne	r4, #16
 8017e10:	f105 0318 	addne.w	r3, r5, #24
 8017e14:	f105 0320 	addeq.w	r3, r5, #32
 8017e18:	3418      	addeq	r4, #24
 8017e1a:	e7d4      	b.n	8017dc6 <_realloc_r+0x162>
 8017e1c:	465b      	mov	r3, fp
 8017e1e:	e7d2      	b.n	8017dc6 <_realloc_r+0x162>
 8017e20:	4621      	mov	r1, r4
 8017e22:	4658      	mov	r0, fp
 8017e24:	f7ff fef1 	bl	8017c0a <memmove>
 8017e28:	e7d3      	b.n	8017dd2 <_realloc_r+0x16e>
 8017e2a:	45b8      	cmp	r8, r7
 8017e2c:	dc35      	bgt.n	8017e9a <_realloc_r+0x236>
 8017e2e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017e32:	4628      	mov	r0, r5
 8017e34:	60da      	str	r2, [r3, #12]
 8017e36:	6093      	str	r3, [r2, #8]
 8017e38:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8017e3c:	68eb      	ldr	r3, [r5, #12]
 8017e3e:	60d3      	str	r3, [r2, #12]
 8017e40:	609a      	str	r2, [r3, #8]
 8017e42:	1f32      	subs	r2, r6, #4
 8017e44:	2a24      	cmp	r2, #36	; 0x24
 8017e46:	d824      	bhi.n	8017e92 <_realloc_r+0x22e>
 8017e48:	2a13      	cmp	r2, #19
 8017e4a:	d908      	bls.n	8017e5e <_realloc_r+0x1fa>
 8017e4c:	6823      	ldr	r3, [r4, #0]
 8017e4e:	60ab      	str	r3, [r5, #8]
 8017e50:	6863      	ldr	r3, [r4, #4]
 8017e52:	60eb      	str	r3, [r5, #12]
 8017e54:	2a1b      	cmp	r2, #27
 8017e56:	d80a      	bhi.n	8017e6e <_realloc_r+0x20a>
 8017e58:	3408      	adds	r4, #8
 8017e5a:	f105 0010 	add.w	r0, r5, #16
 8017e5e:	6823      	ldr	r3, [r4, #0]
 8017e60:	6003      	str	r3, [r0, #0]
 8017e62:	6863      	ldr	r3, [r4, #4]
 8017e64:	6043      	str	r3, [r0, #4]
 8017e66:	68a3      	ldr	r3, [r4, #8]
 8017e68:	6083      	str	r3, [r0, #8]
 8017e6a:	46a9      	mov	r9, r5
 8017e6c:	e75c      	b.n	8017d28 <_realloc_r+0xc4>
 8017e6e:	68a3      	ldr	r3, [r4, #8]
 8017e70:	612b      	str	r3, [r5, #16]
 8017e72:	68e3      	ldr	r3, [r4, #12]
 8017e74:	616b      	str	r3, [r5, #20]
 8017e76:	2a24      	cmp	r2, #36	; 0x24
 8017e78:	bf01      	itttt	eq
 8017e7a:	6923      	ldreq	r3, [r4, #16]
 8017e7c:	61ab      	streq	r3, [r5, #24]
 8017e7e:	6963      	ldreq	r3, [r4, #20]
 8017e80:	61eb      	streq	r3, [r5, #28]
 8017e82:	bf19      	ittee	ne
 8017e84:	3410      	addne	r4, #16
 8017e86:	f105 0018 	addne.w	r0, r5, #24
 8017e8a:	f105 0020 	addeq.w	r0, r5, #32
 8017e8e:	3418      	addeq	r4, #24
 8017e90:	e7e5      	b.n	8017e5e <_realloc_r+0x1fa>
 8017e92:	4621      	mov	r1, r4
 8017e94:	f7ff feb9 	bl	8017c0a <memmove>
 8017e98:	e7e7      	b.n	8017e6a <_realloc_r+0x206>
 8017e9a:	45d8      	cmp	r8, fp
 8017e9c:	dc31      	bgt.n	8017f02 <_realloc_r+0x29e>
 8017e9e:	4628      	mov	r0, r5
 8017ea0:	68eb      	ldr	r3, [r5, #12]
 8017ea2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8017ea6:	60d3      	str	r3, [r2, #12]
 8017ea8:	609a      	str	r2, [r3, #8]
 8017eaa:	1f32      	subs	r2, r6, #4
 8017eac:	2a24      	cmp	r2, #36	; 0x24
 8017eae:	d824      	bhi.n	8017efa <_realloc_r+0x296>
 8017eb0:	2a13      	cmp	r2, #19
 8017eb2:	d908      	bls.n	8017ec6 <_realloc_r+0x262>
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	60ab      	str	r3, [r5, #8]
 8017eb8:	6863      	ldr	r3, [r4, #4]
 8017eba:	60eb      	str	r3, [r5, #12]
 8017ebc:	2a1b      	cmp	r2, #27
 8017ebe:	d80a      	bhi.n	8017ed6 <_realloc_r+0x272>
 8017ec0:	3408      	adds	r4, #8
 8017ec2:	f105 0010 	add.w	r0, r5, #16
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	6003      	str	r3, [r0, #0]
 8017eca:	6863      	ldr	r3, [r4, #4]
 8017ecc:	6043      	str	r3, [r0, #4]
 8017ece:	68a3      	ldr	r3, [r4, #8]
 8017ed0:	6083      	str	r3, [r0, #8]
 8017ed2:	465f      	mov	r7, fp
 8017ed4:	e7c9      	b.n	8017e6a <_realloc_r+0x206>
 8017ed6:	68a3      	ldr	r3, [r4, #8]
 8017ed8:	612b      	str	r3, [r5, #16]
 8017eda:	68e3      	ldr	r3, [r4, #12]
 8017edc:	616b      	str	r3, [r5, #20]
 8017ede:	2a24      	cmp	r2, #36	; 0x24
 8017ee0:	bf01      	itttt	eq
 8017ee2:	6923      	ldreq	r3, [r4, #16]
 8017ee4:	61ab      	streq	r3, [r5, #24]
 8017ee6:	6963      	ldreq	r3, [r4, #20]
 8017ee8:	61eb      	streq	r3, [r5, #28]
 8017eea:	bf19      	ittee	ne
 8017eec:	3410      	addne	r4, #16
 8017eee:	f105 0018 	addne.w	r0, r5, #24
 8017ef2:	f105 0020 	addeq.w	r0, r5, #32
 8017ef6:	3418      	addeq	r4, #24
 8017ef8:	e7e5      	b.n	8017ec6 <_realloc_r+0x262>
 8017efa:	4621      	mov	r1, r4
 8017efc:	f7ff fe85 	bl	8017c0a <memmove>
 8017f00:	e7e7      	b.n	8017ed2 <_realloc_r+0x26e>
 8017f02:	4611      	mov	r1, r2
 8017f04:	4650      	mov	r0, sl
 8017f06:	f7ff fc3f 	bl	8017788 <_malloc_r>
 8017f0a:	4683      	mov	fp, r0
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	f43f af6f 	beq.w	8017df0 <_realloc_r+0x18c>
 8017f12:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017f16:	f023 0301 	bic.w	r3, r3, #1
 8017f1a:	444b      	add	r3, r9
 8017f1c:	f1a0 0208 	sub.w	r2, r0, #8
 8017f20:	4293      	cmp	r3, r2
 8017f22:	d105      	bne.n	8017f30 <_realloc_r+0x2cc>
 8017f24:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8017f28:	f027 0703 	bic.w	r7, r7, #3
 8017f2c:	4437      	add	r7, r6
 8017f2e:	e6fb      	b.n	8017d28 <_realloc_r+0xc4>
 8017f30:	1f32      	subs	r2, r6, #4
 8017f32:	2a24      	cmp	r2, #36	; 0x24
 8017f34:	d82f      	bhi.n	8017f96 <_realloc_r+0x332>
 8017f36:	2a13      	cmp	r2, #19
 8017f38:	d92a      	bls.n	8017f90 <_realloc_r+0x32c>
 8017f3a:	6823      	ldr	r3, [r4, #0]
 8017f3c:	6003      	str	r3, [r0, #0]
 8017f3e:	6863      	ldr	r3, [r4, #4]
 8017f40:	6043      	str	r3, [r0, #4]
 8017f42:	2a1b      	cmp	r2, #27
 8017f44:	d810      	bhi.n	8017f68 <_realloc_r+0x304>
 8017f46:	f104 0208 	add.w	r2, r4, #8
 8017f4a:	f100 0308 	add.w	r3, r0, #8
 8017f4e:	6811      	ldr	r1, [r2, #0]
 8017f50:	6019      	str	r1, [r3, #0]
 8017f52:	6851      	ldr	r1, [r2, #4]
 8017f54:	6059      	str	r1, [r3, #4]
 8017f56:	6892      	ldr	r2, [r2, #8]
 8017f58:	609a      	str	r2, [r3, #8]
 8017f5a:	4621      	mov	r1, r4
 8017f5c:	4650      	mov	r0, sl
 8017f5e:	f002 f933 	bl	801a1c8 <_free_r>
 8017f62:	e745      	b.n	8017df0 <_realloc_r+0x18c>
 8017f64:	2000a200 	.word	0x2000a200
 8017f68:	68a3      	ldr	r3, [r4, #8]
 8017f6a:	6083      	str	r3, [r0, #8]
 8017f6c:	68e3      	ldr	r3, [r4, #12]
 8017f6e:	60c3      	str	r3, [r0, #12]
 8017f70:	2a24      	cmp	r2, #36	; 0x24
 8017f72:	bf01      	itttt	eq
 8017f74:	6923      	ldreq	r3, [r4, #16]
 8017f76:	6103      	streq	r3, [r0, #16]
 8017f78:	6961      	ldreq	r1, [r4, #20]
 8017f7a:	6141      	streq	r1, [r0, #20]
 8017f7c:	bf19      	ittee	ne
 8017f7e:	f104 0210 	addne.w	r2, r4, #16
 8017f82:	f100 0310 	addne.w	r3, r0, #16
 8017f86:	f104 0218 	addeq.w	r2, r4, #24
 8017f8a:	f100 0318 	addeq.w	r3, r0, #24
 8017f8e:	e7de      	b.n	8017f4e <_realloc_r+0x2ea>
 8017f90:	4603      	mov	r3, r0
 8017f92:	4622      	mov	r2, r4
 8017f94:	e7db      	b.n	8017f4e <_realloc_r+0x2ea>
 8017f96:	4621      	mov	r1, r4
 8017f98:	f7ff fe37 	bl	8017c0a <memmove>
 8017f9c:	e7dd      	b.n	8017f5a <_realloc_r+0x2f6>
 8017f9e:	4637      	mov	r7, r6
 8017fa0:	e6c2      	b.n	8017d28 <_realloc_r+0xc4>
 8017fa2:	4317      	orrs	r7, r2
 8017fa4:	f8c9 7004 	str.w	r7, [r9, #4]
 8017fa8:	685a      	ldr	r2, [r3, #4]
 8017faa:	f042 0201 	orr.w	r2, r2, #1
 8017fae:	605a      	str	r2, [r3, #4]
 8017fb0:	e6d6      	b.n	8017d60 <_realloc_r+0xfc>
 8017fb2:	bf00      	nop

08017fb4 <_sbrk_r>:
 8017fb4:	b538      	push	{r3, r4, r5, lr}
 8017fb6:	4c06      	ldr	r4, [pc, #24]	; (8017fd0 <_sbrk_r+0x1c>)
 8017fb8:	2300      	movs	r3, #0
 8017fba:	4605      	mov	r5, r0
 8017fbc:	4608      	mov	r0, r1
 8017fbe:	6023      	str	r3, [r4, #0]
 8017fc0:	f002 fdb6 	bl	801ab30 <_sbrk>
 8017fc4:	1c43      	adds	r3, r0, #1
 8017fc6:	d102      	bne.n	8017fce <_sbrk_r+0x1a>
 8017fc8:	6823      	ldr	r3, [r4, #0]
 8017fca:	b103      	cbz	r3, 8017fce <_sbrk_r+0x1a>
 8017fcc:	602b      	str	r3, [r5, #0]
 8017fce:	bd38      	pop	{r3, r4, r5, pc}
 8017fd0:	2002133c 	.word	0x2002133c

08017fd4 <sprintf>:
 8017fd4:	b40e      	push	{r1, r2, r3}
 8017fd6:	b500      	push	{lr}
 8017fd8:	b09c      	sub	sp, #112	; 0x70
 8017fda:	ab1d      	add	r3, sp, #116	; 0x74
 8017fdc:	9002      	str	r0, [sp, #8]
 8017fde:	9006      	str	r0, [sp, #24]
 8017fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fe4:	4809      	ldr	r0, [pc, #36]	; (801800c <sprintf+0x38>)
 8017fe6:	9107      	str	r1, [sp, #28]
 8017fe8:	9104      	str	r1, [sp, #16]
 8017fea:	4909      	ldr	r1, [pc, #36]	; (8018010 <sprintf+0x3c>)
 8017fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ff0:	9105      	str	r1, [sp, #20]
 8017ff2:	6800      	ldr	r0, [r0, #0]
 8017ff4:	9301      	str	r3, [sp, #4]
 8017ff6:	a902      	add	r1, sp, #8
 8017ff8:	f000 f80e 	bl	8018018 <_svfprintf_r>
 8017ffc:	9b02      	ldr	r3, [sp, #8]
 8017ffe:	2200      	movs	r2, #0
 8018000:	701a      	strb	r2, [r3, #0]
 8018002:	b01c      	add	sp, #112	; 0x70
 8018004:	f85d eb04 	ldr.w	lr, [sp], #4
 8018008:	b003      	add	sp, #12
 801800a:	4770      	bx	lr
 801800c:	20009dd0 	.word	0x20009dd0
 8018010:	ffff0208 	.word	0xffff0208
 8018014:	00000000 	.word	0x00000000

08018018 <_svfprintf_r>:
 8018018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801801c:	b0d3      	sub	sp, #332	; 0x14c
 801801e:	4688      	mov	r8, r1
 8018020:	4693      	mov	fp, r2
 8018022:	461e      	mov	r6, r3
 8018024:	9003      	str	r0, [sp, #12]
 8018026:	f002 f98b 	bl	801a340 <_localeconv_r>
 801802a:	6803      	ldr	r3, [r0, #0]
 801802c:	9316      	str	r3, [sp, #88]	; 0x58
 801802e:	4618      	mov	r0, r3
 8018030:	f7e8 f99e 	bl	8000370 <strlen>
 8018034:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8018038:	900d      	str	r0, [sp, #52]	; 0x34
 801803a:	0618      	lsls	r0, r3, #24
 801803c:	d518      	bpl.n	8018070 <_svfprintf_r+0x58>
 801803e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018042:	b9ab      	cbnz	r3, 8018070 <_svfprintf_r+0x58>
 8018044:	2140      	movs	r1, #64	; 0x40
 8018046:	9803      	ldr	r0, [sp, #12]
 8018048:	f7ff fb9e 	bl	8017788 <_malloc_r>
 801804c:	f8c8 0000 	str.w	r0, [r8]
 8018050:	f8c8 0010 	str.w	r0, [r8, #16]
 8018054:	b948      	cbnz	r0, 801806a <_svfprintf_r+0x52>
 8018056:	9a03      	ldr	r2, [sp, #12]
 8018058:	230c      	movs	r3, #12
 801805a:	6013      	str	r3, [r2, #0]
 801805c:	f04f 33ff 	mov.w	r3, #4294967295
 8018060:	930e      	str	r3, [sp, #56]	; 0x38
 8018062:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018064:	b053      	add	sp, #332	; 0x14c
 8018066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801806a:	2340      	movs	r3, #64	; 0x40
 801806c:	f8c8 3014 	str.w	r3, [r8, #20]
 8018070:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8018398 <_svfprintf_r+0x380>
 8018074:	2300      	movs	r3, #0
 8018076:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801807a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801807e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8018082:	ac29      	add	r4, sp, #164	; 0xa4
 8018084:	9426      	str	r4, [sp, #152]	; 0x98
 8018086:	9304      	str	r3, [sp, #16]
 8018088:	9309      	str	r3, [sp, #36]	; 0x24
 801808a:	9312      	str	r3, [sp, #72]	; 0x48
 801808c:	9319      	str	r3, [sp, #100]	; 0x64
 801808e:	930e      	str	r3, [sp, #56]	; 0x38
 8018090:	465d      	mov	r5, fp
 8018092:	462b      	mov	r3, r5
 8018094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018098:	b112      	cbz	r2, 80180a0 <_svfprintf_r+0x88>
 801809a:	2a25      	cmp	r2, #37	; 0x25
 801809c:	f040 80e4 	bne.w	8018268 <_svfprintf_r+0x250>
 80180a0:	ebb5 070b 	subs.w	r7, r5, fp
 80180a4:	d00e      	beq.n	80180c4 <_svfprintf_r+0xac>
 80180a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80180a8:	443b      	add	r3, r7
 80180aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80180ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80180ae:	3301      	adds	r3, #1
 80180b0:	2b07      	cmp	r3, #7
 80180b2:	e9c4 b700 	strd	fp, r7, [r4]
 80180b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80180b8:	f300 80d8 	bgt.w	801826c <_svfprintf_r+0x254>
 80180bc:	3408      	adds	r4, #8
 80180be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180c0:	443b      	add	r3, r7
 80180c2:	930e      	str	r3, [sp, #56]	; 0x38
 80180c4:	782b      	ldrb	r3, [r5, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	f001 81b4 	beq.w	8019434 <_svfprintf_r+0x141c>
 80180cc:	1c6b      	adds	r3, r5, #1
 80180ce:	930c      	str	r3, [sp, #48]	; 0x30
 80180d0:	2300      	movs	r3, #0
 80180d2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80180d6:	f04f 35ff 	mov.w	r5, #4294967295
 80180da:	930f      	str	r3, [sp, #60]	; 0x3c
 80180dc:	469a      	mov	sl, r3
 80180de:	270a      	movs	r7, #10
 80180e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180e2:	781b      	ldrb	r3, [r3, #0]
 80180e4:	9306      	str	r3, [sp, #24]
 80180e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180e8:	3301      	adds	r3, #1
 80180ea:	930c      	str	r3, [sp, #48]	; 0x30
 80180ec:	9b06      	ldr	r3, [sp, #24]
 80180ee:	3b20      	subs	r3, #32
 80180f0:	2b5a      	cmp	r3, #90	; 0x5a
 80180f2:	f200 8624 	bhi.w	8018d3e <_svfprintf_r+0xd26>
 80180f6:	a201      	add	r2, pc, #4	; (adr r2, 80180fc <_svfprintf_r+0xe4>)
 80180f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180fc:	080182ff 	.word	0x080182ff
 8018100:	08018d3f 	.word	0x08018d3f
 8018104:	08018d3f 	.word	0x08018d3f
 8018108:	08018311 	.word	0x08018311
 801810c:	08018d3f 	.word	0x08018d3f
 8018110:	08018d3f 	.word	0x08018d3f
 8018114:	08018d3f 	.word	0x08018d3f
 8018118:	080182c5 	.word	0x080182c5
 801811c:	08018d3f 	.word	0x08018d3f
 8018120:	08018d3f 	.word	0x08018d3f
 8018124:	08018317 	.word	0x08018317
 8018128:	0801832f 	.word	0x0801832f
 801812c:	08018d3f 	.word	0x08018d3f
 8018130:	08018329 	.word	0x08018329
 8018134:	08018333 	.word	0x08018333
 8018138:	08018d3f 	.word	0x08018d3f
 801813c:	08018367 	.word	0x08018367
 8018140:	0801836d 	.word	0x0801836d
 8018144:	0801836d 	.word	0x0801836d
 8018148:	0801836d 	.word	0x0801836d
 801814c:	0801836d 	.word	0x0801836d
 8018150:	0801836d 	.word	0x0801836d
 8018154:	0801836d 	.word	0x0801836d
 8018158:	0801836d 	.word	0x0801836d
 801815c:	0801836d 	.word	0x0801836d
 8018160:	0801836d 	.word	0x0801836d
 8018164:	08018d3f 	.word	0x08018d3f
 8018168:	08018d3f 	.word	0x08018d3f
 801816c:	08018d3f 	.word	0x08018d3f
 8018170:	08018d3f 	.word	0x08018d3f
 8018174:	08018d3f 	.word	0x08018d3f
 8018178:	08018d3f 	.word	0x08018d3f
 801817c:	08018d3f 	.word	0x08018d3f
 8018180:	0801846f 	.word	0x0801846f
 8018184:	08018d3f 	.word	0x08018d3f
 8018188:	080183d9 	.word	0x080183d9
 801818c:	080183fb 	.word	0x080183fb
 8018190:	0801846f 	.word	0x0801846f
 8018194:	0801846f 	.word	0x0801846f
 8018198:	0801846f 	.word	0x0801846f
 801819c:	08018d3f 	.word	0x08018d3f
 80181a0:	08018d3f 	.word	0x08018d3f
 80181a4:	08018d3f 	.word	0x08018d3f
 80181a8:	08018d3f 	.word	0x08018d3f
 80181ac:	0801838d 	.word	0x0801838d
 80181b0:	08018d3f 	.word	0x08018d3f
 80181b4:	08018d3f 	.word	0x08018d3f
 80181b8:	08018941 	.word	0x08018941
 80181bc:	08018d3f 	.word	0x08018d3f
 80181c0:	08018d3f 	.word	0x08018d3f
 80181c4:	08018d3f 	.word	0x08018d3f
 80181c8:	080189cd 	.word	0x080189cd
 80181cc:	08018d3f 	.word	0x08018d3f
 80181d0:	08018baf 	.word	0x08018baf
 80181d4:	08018d3f 	.word	0x08018d3f
 80181d8:	08018d3f 	.word	0x08018d3f
 80181dc:	08018285 	.word	0x08018285
 80181e0:	08018d3f 	.word	0x08018d3f
 80181e4:	08018d3f 	.word	0x08018d3f
 80181e8:	08018d3f 	.word	0x08018d3f
 80181ec:	08018d3f 	.word	0x08018d3f
 80181f0:	08018d3f 	.word	0x08018d3f
 80181f4:	08018d3f 	.word	0x08018d3f
 80181f8:	08018d3f 	.word	0x08018d3f
 80181fc:	08018d3f 	.word	0x08018d3f
 8018200:	0801846f 	.word	0x0801846f
 8018204:	08018d3f 	.word	0x08018d3f
 8018208:	080183d9 	.word	0x080183d9
 801820c:	080183ff 	.word	0x080183ff
 8018210:	0801846f 	.word	0x0801846f
 8018214:	0801846f 	.word	0x0801846f
 8018218:	0801846f 	.word	0x0801846f
 801821c:	080183a5 	.word	0x080183a5
 8018220:	080183ff 	.word	0x080183ff
 8018224:	080183cd 	.word	0x080183cd
 8018228:	08018d3f 	.word	0x08018d3f
 801822c:	080183bf 	.word	0x080183bf
 8018230:	08018d3f 	.word	0x08018d3f
 8018234:	080188fb 	.word	0x080188fb
 8018238:	08018945 	.word	0x08018945
 801823c:	080189ad 	.word	0x080189ad
 8018240:	080183cd 	.word	0x080183cd
 8018244:	08018d3f 	.word	0x08018d3f
 8018248:	080189cd 	.word	0x080189cd
 801824c:	080180e1 	.word	0x080180e1
 8018250:	08018bb3 	.word	0x08018bb3
 8018254:	08018d3f 	.word	0x08018d3f
 8018258:	08018d3f 	.word	0x08018d3f
 801825c:	08018bf1 	.word	0x08018bf1
 8018260:	08018d3f 	.word	0x08018d3f
 8018264:	080180e1 	.word	0x080180e1
 8018268:	461d      	mov	r5, r3
 801826a:	e712      	b.n	8018092 <_svfprintf_r+0x7a>
 801826c:	aa26      	add	r2, sp, #152	; 0x98
 801826e:	4641      	mov	r1, r8
 8018270:	9803      	ldr	r0, [sp, #12]
 8018272:	f002 fb6e 	bl	801a952 <__ssprint_r>
 8018276:	2800      	cmp	r0, #0
 8018278:	f040 8166 	bne.w	8018548 <_svfprintf_r+0x530>
 801827c:	ac29      	add	r4, sp, #164	; 0xa4
 801827e:	e71e      	b.n	80180be <_svfprintf_r+0xa6>
 8018280:	461e      	mov	r6, r3
 8018282:	e72d      	b.n	80180e0 <_svfprintf_r+0xc8>
 8018284:	4b46      	ldr	r3, [pc, #280]	; (80183a0 <_svfprintf_r+0x388>)
 8018286:	9318      	str	r3, [sp, #96]	; 0x60
 8018288:	f01a 0f20 	tst.w	sl, #32
 801828c:	f000 84b3 	beq.w	8018bf6 <_svfprintf_r+0xbde>
 8018290:	3607      	adds	r6, #7
 8018292:	f026 0607 	bic.w	r6, r6, #7
 8018296:	f106 0308 	add.w	r3, r6, #8
 801829a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801829e:	9308      	str	r3, [sp, #32]
 80182a0:	f01a 0f01 	tst.w	sl, #1
 80182a4:	d00a      	beq.n	80182bc <_svfprintf_r+0x2a4>
 80182a6:	ea56 0307 	orrs.w	r3, r6, r7
 80182aa:	d007      	beq.n	80182bc <_svfprintf_r+0x2a4>
 80182ac:	2330      	movs	r3, #48	; 0x30
 80182ae:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80182b2:	9b06      	ldr	r3, [sp, #24]
 80182b4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80182b8:	f04a 0a02 	orr.w	sl, sl, #2
 80182bc:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80182c0:	2302      	movs	r3, #2
 80182c2:	e34d      	b.n	8018960 <_svfprintf_r+0x948>
 80182c4:	9803      	ldr	r0, [sp, #12]
 80182c6:	f002 f83b 	bl	801a340 <_localeconv_r>
 80182ca:	6843      	ldr	r3, [r0, #4]
 80182cc:	9319      	str	r3, [sp, #100]	; 0x64
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7e8 f84e 	bl	8000370 <strlen>
 80182d4:	9012      	str	r0, [sp, #72]	; 0x48
 80182d6:	9803      	ldr	r0, [sp, #12]
 80182d8:	f002 f832 	bl	801a340 <_localeconv_r>
 80182dc:	6883      	ldr	r3, [r0, #8]
 80182de:	9309      	str	r3, [sp, #36]	; 0x24
 80182e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	f43f aefc 	beq.w	80180e0 <_svfprintf_r+0xc8>
 80182e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	f43f aef8 	beq.w	80180e0 <_svfprintf_r+0xc8>
 80182f0:	781b      	ldrb	r3, [r3, #0]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	f43f aef4 	beq.w	80180e0 <_svfprintf_r+0xc8>
 80182f8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80182fc:	e6f0      	b.n	80180e0 <_svfprintf_r+0xc8>
 80182fe:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8018302:	2b00      	cmp	r3, #0
 8018304:	f47f aeec 	bne.w	80180e0 <_svfprintf_r+0xc8>
 8018308:	2320      	movs	r3, #32
 801830a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801830e:	e6e7      	b.n	80180e0 <_svfprintf_r+0xc8>
 8018310:	f04a 0a01 	orr.w	sl, sl, #1
 8018314:	e6e4      	b.n	80180e0 <_svfprintf_r+0xc8>
 8018316:	6832      	ldr	r2, [r6, #0]
 8018318:	920f      	str	r2, [sp, #60]	; 0x3c
 801831a:	2a00      	cmp	r2, #0
 801831c:	f106 0304 	add.w	r3, r6, #4
 8018320:	daae      	bge.n	8018280 <_svfprintf_r+0x268>
 8018322:	4252      	negs	r2, r2
 8018324:	920f      	str	r2, [sp, #60]	; 0x3c
 8018326:	461e      	mov	r6, r3
 8018328:	f04a 0a04 	orr.w	sl, sl, #4
 801832c:	e6d8      	b.n	80180e0 <_svfprintf_r+0xc8>
 801832e:	232b      	movs	r3, #43	; 0x2b
 8018330:	e7eb      	b.n	801830a <_svfprintf_r+0x2f2>
 8018332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018336:	7812      	ldrb	r2, [r2, #0]
 8018338:	9206      	str	r2, [sp, #24]
 801833a:	2a2a      	cmp	r2, #42	; 0x2a
 801833c:	f103 0301 	add.w	r3, r3, #1
 8018340:	d10f      	bne.n	8018362 <_svfprintf_r+0x34a>
 8018342:	6835      	ldr	r5, [r6, #0]
 8018344:	930c      	str	r3, [sp, #48]	; 0x30
 8018346:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 801834a:	3604      	adds	r6, #4
 801834c:	e6c8      	b.n	80180e0 <_svfprintf_r+0xc8>
 801834e:	fb07 2505 	mla	r5, r7, r5, r2
 8018352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018356:	9206      	str	r2, [sp, #24]
 8018358:	9a06      	ldr	r2, [sp, #24]
 801835a:	3a30      	subs	r2, #48	; 0x30
 801835c:	2a09      	cmp	r2, #9
 801835e:	d9f6      	bls.n	801834e <_svfprintf_r+0x336>
 8018360:	e6c3      	b.n	80180ea <_svfprintf_r+0xd2>
 8018362:	2500      	movs	r5, #0
 8018364:	e7f8      	b.n	8018358 <_svfprintf_r+0x340>
 8018366:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801836a:	e6b9      	b.n	80180e0 <_svfprintf_r+0xc8>
 801836c:	2200      	movs	r2, #0
 801836e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018370:	920f      	str	r2, [sp, #60]	; 0x3c
 8018372:	9a06      	ldr	r2, [sp, #24]
 8018374:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018376:	3a30      	subs	r2, #48	; 0x30
 8018378:	fb07 2201 	mla	r2, r7, r1, r2
 801837c:	920f      	str	r2, [sp, #60]	; 0x3c
 801837e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018382:	9206      	str	r2, [sp, #24]
 8018384:	3a30      	subs	r2, #48	; 0x30
 8018386:	2a09      	cmp	r2, #9
 8018388:	d9f3      	bls.n	8018372 <_svfprintf_r+0x35a>
 801838a:	e6ae      	b.n	80180ea <_svfprintf_r+0xd2>
 801838c:	f04a 0a08 	orr.w	sl, sl, #8
 8018390:	e6a6      	b.n	80180e0 <_svfprintf_r+0xc8>
 8018392:	bf00      	nop
 8018394:	f3af 8000 	nop.w
	...
 80183a0:	08038135 	.word	0x08038135
 80183a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183a6:	781b      	ldrb	r3, [r3, #0]
 80183a8:	2b68      	cmp	r3, #104	; 0x68
 80183aa:	bf01      	itttt	eq
 80183ac:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 80183ae:	3301      	addeq	r3, #1
 80183b0:	930c      	streq	r3, [sp, #48]	; 0x30
 80183b2:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80183b6:	bf18      	it	ne
 80183b8:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80183bc:	e690      	b.n	80180e0 <_svfprintf_r+0xc8>
 80183be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	2b6c      	cmp	r3, #108	; 0x6c
 80183c4:	d105      	bne.n	80183d2 <_svfprintf_r+0x3ba>
 80183c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183c8:	3301      	adds	r3, #1
 80183ca:	930c      	str	r3, [sp, #48]	; 0x30
 80183cc:	f04a 0a20 	orr.w	sl, sl, #32
 80183d0:	e686      	b.n	80180e0 <_svfprintf_r+0xc8>
 80183d2:	f04a 0a10 	orr.w	sl, sl, #16
 80183d6:	e683      	b.n	80180e0 <_svfprintf_r+0xc8>
 80183d8:	1d33      	adds	r3, r6, #4
 80183da:	9308      	str	r3, [sp, #32]
 80183dc:	2000      	movs	r0, #0
 80183de:	6833      	ldr	r3, [r6, #0]
 80183e0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80183e4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80183e8:	4681      	mov	r9, r0
 80183ea:	2501      	movs	r5, #1
 80183ec:	9010      	str	r0, [sp, #64]	; 0x40
 80183ee:	4607      	mov	r7, r0
 80183f0:	9007      	str	r0, [sp, #28]
 80183f2:	4606      	mov	r6, r0
 80183f4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80183f8:	e301      	b.n	80189fe <_svfprintf_r+0x9e6>
 80183fa:	f04a 0a10 	orr.w	sl, sl, #16
 80183fe:	f01a 0f20 	tst.w	sl, #32
 8018402:	d021      	beq.n	8018448 <_svfprintf_r+0x430>
 8018404:	3607      	adds	r6, #7
 8018406:	f026 0607 	bic.w	r6, r6, #7
 801840a:	f106 0308 	add.w	r3, r6, #8
 801840e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8018412:	9308      	str	r3, [sp, #32]
 8018414:	2e00      	cmp	r6, #0
 8018416:	f177 0300 	sbcs.w	r3, r7, #0
 801841a:	da06      	bge.n	801842a <_svfprintf_r+0x412>
 801841c:	4276      	negs	r6, r6
 801841e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8018422:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8018426:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801842a:	1c6b      	adds	r3, r5, #1
 801842c:	f040 83f6 	bne.w	8018c1c <_svfprintf_r+0xc04>
 8018430:	2f00      	cmp	r7, #0
 8018432:	bf08      	it	eq
 8018434:	2e0a      	cmpeq	r6, #10
 8018436:	f080 8427 	bcs.w	8018c88 <_svfprintf_r+0xc70>
 801843a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801843e:	3630      	adds	r6, #48	; 0x30
 8018440:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8018444:	f000 bc0d 	b.w	8018c62 <_svfprintf_r+0xc4a>
 8018448:	1d33      	adds	r3, r6, #4
 801844a:	f01a 0f10 	tst.w	sl, #16
 801844e:	9308      	str	r3, [sp, #32]
 8018450:	d002      	beq.n	8018458 <_svfprintf_r+0x440>
 8018452:	6836      	ldr	r6, [r6, #0]
 8018454:	17f7      	asrs	r7, r6, #31
 8018456:	e7dd      	b.n	8018414 <_svfprintf_r+0x3fc>
 8018458:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801845c:	6836      	ldr	r6, [r6, #0]
 801845e:	d001      	beq.n	8018464 <_svfprintf_r+0x44c>
 8018460:	b236      	sxth	r6, r6
 8018462:	e7f7      	b.n	8018454 <_svfprintf_r+0x43c>
 8018464:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018468:	bf18      	it	ne
 801846a:	b276      	sxtbne	r6, r6
 801846c:	e7f2      	b.n	8018454 <_svfprintf_r+0x43c>
 801846e:	3607      	adds	r6, #7
 8018470:	f026 0607 	bic.w	r6, r6, #7
 8018474:	ed96 7b00 	vldr	d7, [r6]
 8018478:	f106 0308 	add.w	r3, r6, #8
 801847c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018480:	9308      	str	r3, [sp, #32]
 8018482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018484:	931a      	str	r3, [sp, #104]	; 0x68
 8018486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801848c:	931b      	str	r3, [sp, #108]	; 0x6c
 801848e:	f04f 32ff 	mov.w	r2, #4294967295
 8018492:	4bb2      	ldr	r3, [pc, #712]	; (801875c <_svfprintf_r+0x744>)
 8018494:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8018498:	f7e8 fbc8 	bl	8000c2c <__aeabi_dcmpun>
 801849c:	bb00      	cbnz	r0, 80184e0 <_svfprintf_r+0x4c8>
 801849e:	f04f 32ff 	mov.w	r2, #4294967295
 80184a2:	4bae      	ldr	r3, [pc, #696]	; (801875c <_svfprintf_r+0x744>)
 80184a4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80184a8:	f7e8 fba2 	bl	8000bf0 <__aeabi_dcmple>
 80184ac:	b9c0      	cbnz	r0, 80184e0 <_svfprintf_r+0x4c8>
 80184ae:	2200      	movs	r2, #0
 80184b0:	2300      	movs	r3, #0
 80184b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80184b6:	f7e8 fb91 	bl	8000bdc <__aeabi_dcmplt>
 80184ba:	b110      	cbz	r0, 80184c2 <_svfprintf_r+0x4aa>
 80184bc:	232d      	movs	r3, #45	; 0x2d
 80184be:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80184c2:	4aa7      	ldr	r2, [pc, #668]	; (8018760 <_svfprintf_r+0x748>)
 80184c4:	4ba7      	ldr	r3, [pc, #668]	; (8018764 <_svfprintf_r+0x74c>)
 80184c6:	9906      	ldr	r1, [sp, #24]
 80184c8:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80184cc:	2947      	cmp	r1, #71	; 0x47
 80184ce:	bfcc      	ite	gt
 80184d0:	4693      	movgt	fp, r2
 80184d2:	469b      	movle	fp, r3
 80184d4:	f04f 0900 	mov.w	r9, #0
 80184d8:	2503      	movs	r5, #3
 80184da:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80184de:	e3c6      	b.n	8018c6e <_svfprintf_r+0xc56>
 80184e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80184e4:	4610      	mov	r0, r2
 80184e6:	4619      	mov	r1, r3
 80184e8:	f7e8 fba0 	bl	8000c2c <__aeabi_dcmpun>
 80184ec:	4681      	mov	r9, r0
 80184ee:	b140      	cbz	r0, 8018502 <_svfprintf_r+0x4ea>
 80184f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184f2:	4a9d      	ldr	r2, [pc, #628]	; (8018768 <_svfprintf_r+0x750>)
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	bfbc      	itt	lt
 80184f8:	232d      	movlt	r3, #45	; 0x2d
 80184fa:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80184fe:	4b9b      	ldr	r3, [pc, #620]	; (801876c <_svfprintf_r+0x754>)
 8018500:	e7e1      	b.n	80184c6 <_svfprintf_r+0x4ae>
 8018502:	9b06      	ldr	r3, [sp, #24]
 8018504:	f023 0320 	bic.w	r3, r3, #32
 8018508:	2b41      	cmp	r3, #65	; 0x41
 801850a:	9307      	str	r3, [sp, #28]
 801850c:	d125      	bne.n	801855a <_svfprintf_r+0x542>
 801850e:	2330      	movs	r3, #48	; 0x30
 8018510:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8018514:	9b06      	ldr	r3, [sp, #24]
 8018516:	2b61      	cmp	r3, #97	; 0x61
 8018518:	bf14      	ite	ne
 801851a:	2358      	movne	r3, #88	; 0x58
 801851c:	2378      	moveq	r3, #120	; 0x78
 801851e:	2d63      	cmp	r5, #99	; 0x63
 8018520:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8018524:	f04a 0a02 	orr.w	sl, sl, #2
 8018528:	f340 8108 	ble.w	801873c <_svfprintf_r+0x724>
 801852c:	1c69      	adds	r1, r5, #1
 801852e:	9803      	ldr	r0, [sp, #12]
 8018530:	f7ff f92a 	bl	8017788 <_malloc_r>
 8018534:	4683      	mov	fp, r0
 8018536:	2800      	cmp	r0, #0
 8018538:	f040 8103 	bne.w	8018742 <_svfprintf_r+0x72a>
 801853c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8018540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018544:	f8a8 300c 	strh.w	r3, [r8, #12]
 8018548:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801854c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018552:	bf18      	it	ne
 8018554:	f04f 33ff 	movne.w	r3, #4294967295
 8018558:	e582      	b.n	8018060 <_svfprintf_r+0x48>
 801855a:	1c69      	adds	r1, r5, #1
 801855c:	f000 80f3 	beq.w	8018746 <_svfprintf_r+0x72e>
 8018560:	9b07      	ldr	r3, [sp, #28]
 8018562:	2b47      	cmp	r3, #71	; 0x47
 8018564:	d102      	bne.n	801856c <_svfprintf_r+0x554>
 8018566:	2d00      	cmp	r5, #0
 8018568:	f000 80ef 	beq.w	801874a <_svfprintf_r+0x732>
 801856c:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8018570:	9310      	str	r3, [sp, #64]	; 0x40
 8018572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018574:	2b00      	cmp	r3, #0
 8018576:	f280 80eb 	bge.w	8018750 <_svfprintf_r+0x738>
 801857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801857c:	9314      	str	r3, [sp, #80]	; 0x50
 801857e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018584:	9315      	str	r3, [sp, #84]	; 0x54
 8018586:	232d      	movs	r3, #45	; 0x2d
 8018588:	9313      	str	r3, [sp, #76]	; 0x4c
 801858a:	9b07      	ldr	r3, [sp, #28]
 801858c:	2b41      	cmp	r3, #65	; 0x41
 801858e:	f040 8105 	bne.w	801879c <_svfprintf_r+0x784>
 8018592:	a820      	add	r0, sp, #128	; 0x80
 8018594:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8018598:	f002 f990 	bl	801a8bc <frexp>
 801859c:	2200      	movs	r2, #0
 801859e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80185a2:	ec51 0b10 	vmov	r0, r1, d0
 80185a6:	f7e8 f8a7 	bl	80006f8 <__aeabi_dmul>
 80185aa:	2200      	movs	r2, #0
 80185ac:	2300      	movs	r3, #0
 80185ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80185b2:	f7e8 fb09 	bl	8000bc8 <__aeabi_dcmpeq>
 80185b6:	b108      	cbz	r0, 80185bc <_svfprintf_r+0x5a4>
 80185b8:	2301      	movs	r3, #1
 80185ba:	9320      	str	r3, [sp, #128]	; 0x80
 80185bc:	4f6c      	ldr	r7, [pc, #432]	; (8018770 <_svfprintf_r+0x758>)
 80185be:	4b6d      	ldr	r3, [pc, #436]	; (8018774 <_svfprintf_r+0x75c>)
 80185c0:	9a06      	ldr	r2, [sp, #24]
 80185c2:	2a61      	cmp	r2, #97	; 0x61
 80185c4:	bf08      	it	eq
 80185c6:	461f      	moveq	r7, r3
 80185c8:	9711      	str	r7, [sp, #68]	; 0x44
 80185ca:	465e      	mov	r6, fp
 80185cc:	1e6f      	subs	r7, r5, #1
 80185ce:	2200      	movs	r2, #0
 80185d0:	4b69      	ldr	r3, [pc, #420]	; (8018778 <_svfprintf_r+0x760>)
 80185d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80185d6:	f7e8 f88f 	bl	80006f8 <__aeabi_dmul>
 80185da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80185de:	f7e8 fb3b 	bl	8000c58 <__aeabi_d2iz>
 80185e2:	901c      	str	r0, [sp, #112]	; 0x70
 80185e4:	f7e8 f81e 	bl	8000624 <__aeabi_i2d>
 80185e8:	4602      	mov	r2, r0
 80185ea:	460b      	mov	r3, r1
 80185ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80185f0:	f7e7 feca 	bl	8000388 <__aeabi_dsub>
 80185f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80185f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185f8:	971d      	str	r7, [sp, #116]	; 0x74
 80185fa:	5c9b      	ldrb	r3, [r3, r2]
 80185fc:	f806 3b01 	strb.w	r3, [r6], #1
 8018600:	1c7a      	adds	r2, r7, #1
 8018602:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018606:	d006      	beq.n	8018616 <_svfprintf_r+0x5fe>
 8018608:	2200      	movs	r2, #0
 801860a:	2300      	movs	r3, #0
 801860c:	3f01      	subs	r7, #1
 801860e:	f7e8 fadb 	bl	8000bc8 <__aeabi_dcmpeq>
 8018612:	2800      	cmp	r0, #0
 8018614:	d0db      	beq.n	80185ce <_svfprintf_r+0x5b6>
 8018616:	2200      	movs	r2, #0
 8018618:	4b58      	ldr	r3, [pc, #352]	; (801877c <_svfprintf_r+0x764>)
 801861a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801861e:	f7e8 fafb 	bl	8000c18 <__aeabi_dcmpgt>
 8018622:	b960      	cbnz	r0, 801863e <_svfprintf_r+0x626>
 8018624:	2200      	movs	r2, #0
 8018626:	4b55      	ldr	r3, [pc, #340]	; (801877c <_svfprintf_r+0x764>)
 8018628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801862c:	f7e8 facc 	bl	8000bc8 <__aeabi_dcmpeq>
 8018630:	2800      	cmp	r0, #0
 8018632:	f000 80ae 	beq.w	8018792 <_svfprintf_r+0x77a>
 8018636:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018638:	07db      	lsls	r3, r3, #31
 801863a:	f140 80aa 	bpl.w	8018792 <_svfprintf_r+0x77a>
 801863e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018640:	9624      	str	r6, [sp, #144]	; 0x90
 8018642:	7bd9      	ldrb	r1, [r3, #15]
 8018644:	2030      	movs	r0, #48	; 0x30
 8018646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018648:	1e53      	subs	r3, r2, #1
 801864a:	9324      	str	r3, [sp, #144]	; 0x90
 801864c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8018650:	428b      	cmp	r3, r1
 8018652:	f000 8095 	beq.w	8018780 <_svfprintf_r+0x768>
 8018656:	2b39      	cmp	r3, #57	; 0x39
 8018658:	bf0b      	itete	eq
 801865a:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 801865c:	3301      	addne	r3, #1
 801865e:	7a9b      	ldrbeq	r3, [r3, #10]
 8018660:	b2db      	uxtbne	r3, r3
 8018662:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018666:	4633      	mov	r3, r6
 8018668:	eba3 030b 	sub.w	r3, r3, fp
 801866c:	9304      	str	r3, [sp, #16]
 801866e:	9b07      	ldr	r3, [sp, #28]
 8018670:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8018672:	2b47      	cmp	r3, #71	; 0x47
 8018674:	f040 80d7 	bne.w	8018826 <_svfprintf_r+0x80e>
 8018678:	1cf7      	adds	r7, r6, #3
 801867a:	db02      	blt.n	8018682 <_svfprintf_r+0x66a>
 801867c:	42b5      	cmp	r5, r6
 801867e:	f280 80fd 	bge.w	801887c <_svfprintf_r+0x864>
 8018682:	9b06      	ldr	r3, [sp, #24]
 8018684:	3b02      	subs	r3, #2
 8018686:	9306      	str	r3, [sp, #24]
 8018688:	9906      	ldr	r1, [sp, #24]
 801868a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801868e:	f021 0120 	bic.w	r1, r1, #32
 8018692:	2941      	cmp	r1, #65	; 0x41
 8018694:	bf08      	it	eq
 8018696:	320f      	addeq	r2, #15
 8018698:	f106 33ff 	add.w	r3, r6, #4294967295
 801869c:	bf06      	itte	eq
 801869e:	b2d2      	uxtbeq	r2, r2
 80186a0:	2101      	moveq	r1, #1
 80186a2:	2100      	movne	r1, #0
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	9320      	str	r3, [sp, #128]	; 0x80
 80186a8:	bfb8      	it	lt
 80186aa:	f1c6 0301 	rsblt	r3, r6, #1
 80186ae:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80186b2:	bfb4      	ite	lt
 80186b4:	222d      	movlt	r2, #45	; 0x2d
 80186b6:	222b      	movge	r2, #43	; 0x2b
 80186b8:	2b09      	cmp	r3, #9
 80186ba:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 80186be:	f340 80c9 	ble.w	8018854 <_svfprintf_r+0x83c>
 80186c2:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 80186c6:	250a      	movs	r5, #10
 80186c8:	fb93 f0f5 	sdiv	r0, r3, r5
 80186cc:	fb05 3310 	mls	r3, r5, r0, r3
 80186d0:	3330      	adds	r3, #48	; 0x30
 80186d2:	2809      	cmp	r0, #9
 80186d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80186d8:	f102 31ff 	add.w	r1, r2, #4294967295
 80186dc:	4603      	mov	r3, r0
 80186de:	f300 80b2 	bgt.w	8018846 <_svfprintf_r+0x82e>
 80186e2:	3330      	adds	r3, #48	; 0x30
 80186e4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80186e8:	3a02      	subs	r2, #2
 80186ea:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 80186ee:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 80186f2:	4282      	cmp	r2, r0
 80186f4:	4619      	mov	r1, r3
 80186f6:	f0c0 80a8 	bcc.w	801884a <_svfprintf_r+0x832>
 80186fa:	9a04      	ldr	r2, [sp, #16]
 80186fc:	ab22      	add	r3, sp, #136	; 0x88
 80186fe:	1acb      	subs	r3, r1, r3
 8018700:	2a01      	cmp	r2, #1
 8018702:	9317      	str	r3, [sp, #92]	; 0x5c
 8018704:	eb03 0502 	add.w	r5, r3, r2
 8018708:	dc02      	bgt.n	8018710 <_svfprintf_r+0x6f8>
 801870a:	f01a 0f01 	tst.w	sl, #1
 801870e:	d001      	beq.n	8018714 <_svfprintf_r+0x6fc>
 8018710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018712:	441d      	add	r5, r3
 8018714:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8018718:	2700      	movs	r7, #0
 801871a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801871e:	9310      	str	r3, [sp, #64]	; 0x40
 8018720:	9707      	str	r7, [sp, #28]
 8018722:	463e      	mov	r6, r7
 8018724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018726:	2b00      	cmp	r3, #0
 8018728:	f000 8315 	beq.w	8018d56 <_svfprintf_r+0xd3e>
 801872c:	232d      	movs	r3, #45	; 0x2d
 801872e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8018732:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8018736:	2300      	movs	r3, #0
 8018738:	9310      	str	r3, [sp, #64]	; 0x40
 801873a:	e160      	b.n	80189fe <_svfprintf_r+0x9e6>
 801873c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8018740:	e714      	b.n	801856c <_svfprintf_r+0x554>
 8018742:	4681      	mov	r9, r0
 8018744:	e712      	b.n	801856c <_svfprintf_r+0x554>
 8018746:	2506      	movs	r5, #6
 8018748:	e710      	b.n	801856c <_svfprintf_r+0x554>
 801874a:	46a9      	mov	r9, r5
 801874c:	2501      	movs	r5, #1
 801874e:	e70d      	b.n	801856c <_svfprintf_r+0x554>
 8018750:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8018754:	2300      	movs	r3, #0
 8018756:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801875a:	e715      	b.n	8018588 <_svfprintf_r+0x570>
 801875c:	7fefffff 	.word	0x7fefffff
 8018760:	08038118 	.word	0x08038118
 8018764:	08038114 	.word	0x08038114
 8018768:	08038120 	.word	0x08038120
 801876c:	0803811c 	.word	0x0803811c
 8018770:	08038135 	.word	0x08038135
 8018774:	08038124 	.word	0x08038124
 8018778:	40300000 	.word	0x40300000
 801877c:	3fe00000 	.word	0x3fe00000
 8018780:	f802 0c01 	strb.w	r0, [r2, #-1]
 8018784:	e75f      	b.n	8018646 <_svfprintf_r+0x62e>
 8018786:	f803 1b01 	strb.w	r1, [r3], #1
 801878a:	1af2      	subs	r2, r6, r3
 801878c:	2a00      	cmp	r2, #0
 801878e:	dafa      	bge.n	8018786 <_svfprintf_r+0x76e>
 8018790:	e76a      	b.n	8018668 <_svfprintf_r+0x650>
 8018792:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018794:	4633      	mov	r3, r6
 8018796:	2130      	movs	r1, #48	; 0x30
 8018798:	4416      	add	r6, r2
 801879a:	e7f6      	b.n	801878a <_svfprintf_r+0x772>
 801879c:	9b07      	ldr	r3, [sp, #28]
 801879e:	2b46      	cmp	r3, #70	; 0x46
 80187a0:	d004      	beq.n	80187ac <_svfprintf_r+0x794>
 80187a2:	2b45      	cmp	r3, #69	; 0x45
 80187a4:	d13a      	bne.n	801881c <_svfprintf_r+0x804>
 80187a6:	1c6e      	adds	r6, r5, #1
 80187a8:	2102      	movs	r1, #2
 80187aa:	e001      	b.n	80187b0 <_svfprintf_r+0x798>
 80187ac:	462e      	mov	r6, r5
 80187ae:	2103      	movs	r1, #3
 80187b0:	ab24      	add	r3, sp, #144	; 0x90
 80187b2:	9301      	str	r3, [sp, #4]
 80187b4:	ab21      	add	r3, sp, #132	; 0x84
 80187b6:	9300      	str	r3, [sp, #0]
 80187b8:	4632      	mov	r2, r6
 80187ba:	ab20      	add	r3, sp, #128	; 0x80
 80187bc:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80187c0:	9803      	ldr	r0, [sp, #12]
 80187c2:	f000 fef1 	bl	80195a8 <_dtoa_r>
 80187c6:	9b07      	ldr	r3, [sp, #28]
 80187c8:	2b47      	cmp	r3, #71	; 0x47
 80187ca:	4683      	mov	fp, r0
 80187cc:	d102      	bne.n	80187d4 <_svfprintf_r+0x7bc>
 80187ce:	f01a 0f01 	tst.w	sl, #1
 80187d2:	d026      	beq.n	8018822 <_svfprintf_r+0x80a>
 80187d4:	9b07      	ldr	r3, [sp, #28]
 80187d6:	2b46      	cmp	r3, #70	; 0x46
 80187d8:	eb0b 0706 	add.w	r7, fp, r6
 80187dc:	d10f      	bne.n	80187fe <_svfprintf_r+0x7e6>
 80187de:	f89b 3000 	ldrb.w	r3, [fp]
 80187e2:	2b30      	cmp	r3, #48	; 0x30
 80187e4:	d109      	bne.n	80187fa <_svfprintf_r+0x7e2>
 80187e6:	2200      	movs	r2, #0
 80187e8:	2300      	movs	r3, #0
 80187ea:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80187ee:	f7e8 f9eb 	bl	8000bc8 <__aeabi_dcmpeq>
 80187f2:	b910      	cbnz	r0, 80187fa <_svfprintf_r+0x7e2>
 80187f4:	f1c6 0601 	rsb	r6, r6, #1
 80187f8:	9620      	str	r6, [sp, #128]	; 0x80
 80187fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80187fc:	441f      	add	r7, r3
 80187fe:	2200      	movs	r2, #0
 8018800:	2300      	movs	r3, #0
 8018802:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8018806:	f7e8 f9df 	bl	8000bc8 <__aeabi_dcmpeq>
 801880a:	b948      	cbnz	r0, 8018820 <_svfprintf_r+0x808>
 801880c:	2230      	movs	r2, #48	; 0x30
 801880e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018810:	429f      	cmp	r7, r3
 8018812:	d906      	bls.n	8018822 <_svfprintf_r+0x80a>
 8018814:	1c59      	adds	r1, r3, #1
 8018816:	9124      	str	r1, [sp, #144]	; 0x90
 8018818:	701a      	strb	r2, [r3, #0]
 801881a:	e7f8      	b.n	801880e <_svfprintf_r+0x7f6>
 801881c:	462e      	mov	r6, r5
 801881e:	e7c3      	b.n	80187a8 <_svfprintf_r+0x790>
 8018820:	9724      	str	r7, [sp, #144]	; 0x90
 8018822:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018824:	e720      	b.n	8018668 <_svfprintf_r+0x650>
 8018826:	9b07      	ldr	r3, [sp, #28]
 8018828:	2b46      	cmp	r3, #70	; 0x46
 801882a:	f47f af2d 	bne.w	8018688 <_svfprintf_r+0x670>
 801882e:	2e00      	cmp	r6, #0
 8018830:	dd1d      	ble.n	801886e <_svfprintf_r+0x856>
 8018832:	b915      	cbnz	r5, 801883a <_svfprintf_r+0x822>
 8018834:	f01a 0f01 	tst.w	sl, #1
 8018838:	d034      	beq.n	80188a4 <_svfprintf_r+0x88c>
 801883a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801883c:	18f3      	adds	r3, r6, r3
 801883e:	441d      	add	r5, r3
 8018840:	2366      	movs	r3, #102	; 0x66
 8018842:	9306      	str	r3, [sp, #24]
 8018844:	e033      	b.n	80188ae <_svfprintf_r+0x896>
 8018846:	460a      	mov	r2, r1
 8018848:	e73e      	b.n	80186c8 <_svfprintf_r+0x6b0>
 801884a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801884e:	f803 1b01 	strb.w	r1, [r3], #1
 8018852:	e74e      	b.n	80186f2 <_svfprintf_r+0x6da>
 8018854:	b941      	cbnz	r1, 8018868 <_svfprintf_r+0x850>
 8018856:	2230      	movs	r2, #48	; 0x30
 8018858:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801885c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8018860:	3330      	adds	r3, #48	; 0x30
 8018862:	1c51      	adds	r1, r2, #1
 8018864:	7013      	strb	r3, [r2, #0]
 8018866:	e748      	b.n	80186fa <_svfprintf_r+0x6e2>
 8018868:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801886c:	e7f8      	b.n	8018860 <_svfprintf_r+0x848>
 801886e:	b915      	cbnz	r5, 8018876 <_svfprintf_r+0x85e>
 8018870:	f01a 0f01 	tst.w	sl, #1
 8018874:	d018      	beq.n	80188a8 <_svfprintf_r+0x890>
 8018876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018878:	3301      	adds	r3, #1
 801887a:	e7e0      	b.n	801883e <_svfprintf_r+0x826>
 801887c:	9b04      	ldr	r3, [sp, #16]
 801887e:	42b3      	cmp	r3, r6
 8018880:	dc06      	bgt.n	8018890 <_svfprintf_r+0x878>
 8018882:	f01a 0f01 	tst.w	sl, #1
 8018886:	d025      	beq.n	80188d4 <_svfprintf_r+0x8bc>
 8018888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801888a:	18f5      	adds	r5, r6, r3
 801888c:	2367      	movs	r3, #103	; 0x67
 801888e:	e7d8      	b.n	8018842 <_svfprintf_r+0x82a>
 8018890:	9b04      	ldr	r3, [sp, #16]
 8018892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018894:	2e00      	cmp	r6, #0
 8018896:	eb03 0502 	add.w	r5, r3, r2
 801889a:	dcf7      	bgt.n	801888c <_svfprintf_r+0x874>
 801889c:	f1c6 0301 	rsb	r3, r6, #1
 80188a0:	441d      	add	r5, r3
 80188a2:	e7f3      	b.n	801888c <_svfprintf_r+0x874>
 80188a4:	4635      	mov	r5, r6
 80188a6:	e7cb      	b.n	8018840 <_svfprintf_r+0x828>
 80188a8:	2366      	movs	r3, #102	; 0x66
 80188aa:	9306      	str	r3, [sp, #24]
 80188ac:	2501      	movs	r5, #1
 80188ae:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80188b2:	9307      	str	r3, [sp, #28]
 80188b4:	d01f      	beq.n	80188f6 <_svfprintf_r+0x8de>
 80188b6:	2700      	movs	r7, #0
 80188b8:	2e00      	cmp	r6, #0
 80188ba:	9707      	str	r7, [sp, #28]
 80188bc:	f77f af32 	ble.w	8018724 <_svfprintf_r+0x70c>
 80188c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	2bff      	cmp	r3, #255	; 0xff
 80188c6:	d107      	bne.n	80188d8 <_svfprintf_r+0x8c0>
 80188c8:	9b07      	ldr	r3, [sp, #28]
 80188ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188cc:	443b      	add	r3, r7
 80188ce:	fb02 5503 	mla	r5, r2, r3, r5
 80188d2:	e727      	b.n	8018724 <_svfprintf_r+0x70c>
 80188d4:	4635      	mov	r5, r6
 80188d6:	e7d9      	b.n	801888c <_svfprintf_r+0x874>
 80188d8:	42b3      	cmp	r3, r6
 80188da:	daf5      	bge.n	80188c8 <_svfprintf_r+0x8b0>
 80188dc:	1af6      	subs	r6, r6, r3
 80188de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188e0:	785b      	ldrb	r3, [r3, #1]
 80188e2:	b133      	cbz	r3, 80188f2 <_svfprintf_r+0x8da>
 80188e4:	9b07      	ldr	r3, [sp, #28]
 80188e6:	3301      	adds	r3, #1
 80188e8:	9307      	str	r3, [sp, #28]
 80188ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ec:	3301      	adds	r3, #1
 80188ee:	9309      	str	r3, [sp, #36]	; 0x24
 80188f0:	e7e6      	b.n	80188c0 <_svfprintf_r+0x8a8>
 80188f2:	3701      	adds	r7, #1
 80188f4:	e7e4      	b.n	80188c0 <_svfprintf_r+0x8a8>
 80188f6:	9f07      	ldr	r7, [sp, #28]
 80188f8:	e714      	b.n	8018724 <_svfprintf_r+0x70c>
 80188fa:	4632      	mov	r2, r6
 80188fc:	f01a 0f20 	tst.w	sl, #32
 8018900:	f852 3b04 	ldr.w	r3, [r2], #4
 8018904:	9208      	str	r2, [sp, #32]
 8018906:	d009      	beq.n	801891c <_svfprintf_r+0x904>
 8018908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801890a:	4610      	mov	r0, r2
 801890c:	17d1      	asrs	r1, r2, #31
 801890e:	e9c3 0100 	strd	r0, r1, [r3]
 8018912:	9e08      	ldr	r6, [sp, #32]
 8018914:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8018918:	f7ff bbba 	b.w	8018090 <_svfprintf_r+0x78>
 801891c:	f01a 0f10 	tst.w	sl, #16
 8018920:	d002      	beq.n	8018928 <_svfprintf_r+0x910>
 8018922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018924:	601a      	str	r2, [r3, #0]
 8018926:	e7f4      	b.n	8018912 <_svfprintf_r+0x8fa>
 8018928:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801892c:	d002      	beq.n	8018934 <_svfprintf_r+0x91c>
 801892e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018930:	801a      	strh	r2, [r3, #0]
 8018932:	e7ee      	b.n	8018912 <_svfprintf_r+0x8fa>
 8018934:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018938:	d0f3      	beq.n	8018922 <_svfprintf_r+0x90a>
 801893a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801893c:	701a      	strb	r2, [r3, #0]
 801893e:	e7e8      	b.n	8018912 <_svfprintf_r+0x8fa>
 8018940:	f04a 0a10 	orr.w	sl, sl, #16
 8018944:	f01a 0f20 	tst.w	sl, #32
 8018948:	d01e      	beq.n	8018988 <_svfprintf_r+0x970>
 801894a:	3607      	adds	r6, #7
 801894c:	f026 0607 	bic.w	r6, r6, #7
 8018950:	f106 0308 	add.w	r3, r6, #8
 8018954:	e9d6 6700 	ldrd	r6, r7, [r6]
 8018958:	9308      	str	r3, [sp, #32]
 801895a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801895e:	2300      	movs	r3, #0
 8018960:	2200      	movs	r2, #0
 8018962:	1c69      	adds	r1, r5, #1
 8018964:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8018968:	f000 815b 	beq.w	8018c22 <_svfprintf_r+0xc0a>
 801896c:	4652      	mov	r2, sl
 801896e:	ea56 0107 	orrs.w	r1, r6, r7
 8018972:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8018976:	f040 8154 	bne.w	8018c22 <_svfprintf_r+0xc0a>
 801897a:	2d00      	cmp	r5, #0
 801897c:	f000 81d5 	beq.w	8018d2a <_svfprintf_r+0xd12>
 8018980:	2b01      	cmp	r3, #1
 8018982:	f040 8151 	bne.w	8018c28 <_svfprintf_r+0xc10>
 8018986:	e558      	b.n	801843a <_svfprintf_r+0x422>
 8018988:	1d33      	adds	r3, r6, #4
 801898a:	f01a 0f10 	tst.w	sl, #16
 801898e:	9308      	str	r3, [sp, #32]
 8018990:	d001      	beq.n	8018996 <_svfprintf_r+0x97e>
 8018992:	6836      	ldr	r6, [r6, #0]
 8018994:	e003      	b.n	801899e <_svfprintf_r+0x986>
 8018996:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801899a:	d002      	beq.n	80189a2 <_svfprintf_r+0x98a>
 801899c:	8836      	ldrh	r6, [r6, #0]
 801899e:	2700      	movs	r7, #0
 80189a0:	e7db      	b.n	801895a <_svfprintf_r+0x942>
 80189a2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80189a6:	d0f4      	beq.n	8018992 <_svfprintf_r+0x97a>
 80189a8:	7836      	ldrb	r6, [r6, #0]
 80189aa:	e7f8      	b.n	801899e <_svfprintf_r+0x986>
 80189ac:	1d33      	adds	r3, r6, #4
 80189ae:	9308      	str	r3, [sp, #32]
 80189b0:	f647 0330 	movw	r3, #30768	; 0x7830
 80189b4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 80189b8:	2278      	movs	r2, #120	; 0x78
 80189ba:	4bb0      	ldr	r3, [pc, #704]	; (8018c7c <_svfprintf_r+0xc64>)
 80189bc:	9318      	str	r3, [sp, #96]	; 0x60
 80189be:	6836      	ldr	r6, [r6, #0]
 80189c0:	9206      	str	r2, [sp, #24]
 80189c2:	2700      	movs	r7, #0
 80189c4:	f04a 0a02 	orr.w	sl, sl, #2
 80189c8:	2302      	movs	r3, #2
 80189ca:	e7c9      	b.n	8018960 <_svfprintf_r+0x948>
 80189cc:	1d33      	adds	r3, r6, #4
 80189ce:	f8d6 b000 	ldr.w	fp, [r6]
 80189d2:	9308      	str	r3, [sp, #32]
 80189d4:	2600      	movs	r6, #0
 80189d6:	1c68      	adds	r0, r5, #1
 80189d8:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 80189dc:	f000 80e1 	beq.w	8018ba2 <_svfprintf_r+0xb8a>
 80189e0:	462a      	mov	r2, r5
 80189e2:	4631      	mov	r1, r6
 80189e4:	4658      	mov	r0, fp
 80189e6:	f7e7 fc73 	bl	80002d0 <memchr>
 80189ea:	4681      	mov	r9, r0
 80189ec:	2800      	cmp	r0, #0
 80189ee:	f43f ad74 	beq.w	80184da <_svfprintf_r+0x4c2>
 80189f2:	eba0 050b 	sub.w	r5, r0, fp
 80189f6:	46b1      	mov	r9, r6
 80189f8:	9610      	str	r6, [sp, #64]	; 0x40
 80189fa:	4637      	mov	r7, r6
 80189fc:	9607      	str	r6, [sp, #28]
 80189fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a00:	42ab      	cmp	r3, r5
 8018a02:	bfb8      	it	lt
 8018a04:	462b      	movlt	r3, r5
 8018a06:	9311      	str	r3, [sp, #68]	; 0x44
 8018a08:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8018a0c:	b113      	cbz	r3, 8018a14 <_svfprintf_r+0x9fc>
 8018a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018a10:	3301      	adds	r3, #1
 8018a12:	9311      	str	r3, [sp, #68]	; 0x44
 8018a14:	f01a 0302 	ands.w	r3, sl, #2
 8018a18:	931c      	str	r3, [sp, #112]	; 0x70
 8018a1a:	bf1e      	ittt	ne
 8018a1c:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8018a1e:	3302      	addne	r3, #2
 8018a20:	9311      	strne	r3, [sp, #68]	; 0x44
 8018a22:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8018a26:	931d      	str	r3, [sp, #116]	; 0x74
 8018a28:	d122      	bne.n	8018a70 <_svfprintf_r+0xa58>
 8018a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018a2e:	1a9b      	subs	r3, r3, r2
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	9313      	str	r3, [sp, #76]	; 0x4c
 8018a34:	dd1c      	ble.n	8018a70 <_svfprintf_r+0xa58>
 8018a36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018a38:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8018a3c:	2810      	cmp	r0, #16
 8018a3e:	4890      	ldr	r0, [pc, #576]	; (8018c80 <_svfprintf_r+0xc68>)
 8018a40:	6020      	str	r0, [r4, #0]
 8018a42:	f102 0201 	add.w	r2, r2, #1
 8018a46:	f104 0108 	add.w	r1, r4, #8
 8018a4a:	f300 8188 	bgt.w	8018d5e <_svfprintf_r+0xd46>
 8018a4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018a50:	6060      	str	r0, [r4, #4]
 8018a52:	4403      	add	r3, r0
 8018a54:	2a07      	cmp	r2, #7
 8018a56:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8018a5a:	f340 8195 	ble.w	8018d88 <_svfprintf_r+0xd70>
 8018a5e:	aa26      	add	r2, sp, #152	; 0x98
 8018a60:	4641      	mov	r1, r8
 8018a62:	9803      	ldr	r0, [sp, #12]
 8018a64:	f001 ff75 	bl	801a952 <__ssprint_r>
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	f040 84c1 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018a6e:	ac29      	add	r4, sp, #164	; 0xa4
 8018a70:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8018a74:	b173      	cbz	r3, 8018a94 <_svfprintf_r+0xa7c>
 8018a76:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8018a7a:	6023      	str	r3, [r4, #0]
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	6063      	str	r3, [r4, #4]
 8018a80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018a82:	3301      	adds	r3, #1
 8018a84:	9328      	str	r3, [sp, #160]	; 0xa0
 8018a86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018a88:	3301      	adds	r3, #1
 8018a8a:	2b07      	cmp	r3, #7
 8018a8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8018a8e:	f300 817d 	bgt.w	8018d8c <_svfprintf_r+0xd74>
 8018a92:	3408      	adds	r4, #8
 8018a94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018a96:	b16b      	cbz	r3, 8018ab4 <_svfprintf_r+0xa9c>
 8018a98:	ab1f      	add	r3, sp, #124	; 0x7c
 8018a9a:	6023      	str	r3, [r4, #0]
 8018a9c:	2302      	movs	r3, #2
 8018a9e:	6063      	str	r3, [r4, #4]
 8018aa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018aa2:	3302      	adds	r3, #2
 8018aa4:	9328      	str	r3, [sp, #160]	; 0xa0
 8018aa6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	2b07      	cmp	r3, #7
 8018aac:	9327      	str	r3, [sp, #156]	; 0x9c
 8018aae:	f300 8177 	bgt.w	8018da0 <_svfprintf_r+0xd88>
 8018ab2:	3408      	adds	r4, #8
 8018ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ab6:	2b80      	cmp	r3, #128	; 0x80
 8018ab8:	d122      	bne.n	8018b00 <_svfprintf_r+0xae8>
 8018aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018abc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018abe:	1a9b      	subs	r3, r3, r2
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	9313      	str	r3, [sp, #76]	; 0x4c
 8018ac4:	dd1c      	ble.n	8018b00 <_svfprintf_r+0xae8>
 8018ac6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ac8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8018acc:	2810      	cmp	r0, #16
 8018ace:	486d      	ldr	r0, [pc, #436]	; (8018c84 <_svfprintf_r+0xc6c>)
 8018ad0:	6020      	str	r0, [r4, #0]
 8018ad2:	f102 0201 	add.w	r2, r2, #1
 8018ad6:	f104 0108 	add.w	r1, r4, #8
 8018ada:	f300 816b 	bgt.w	8018db4 <_svfprintf_r+0xd9c>
 8018ade:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018ae0:	6060      	str	r0, [r4, #4]
 8018ae2:	4403      	add	r3, r0
 8018ae4:	2a07      	cmp	r2, #7
 8018ae6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8018aea:	f340 8178 	ble.w	8018dde <_svfprintf_r+0xdc6>
 8018aee:	aa26      	add	r2, sp, #152	; 0x98
 8018af0:	4641      	mov	r1, r8
 8018af2:	9803      	ldr	r0, [sp, #12]
 8018af4:	f001 ff2d 	bl	801a952 <__ssprint_r>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	f040 8479 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018afe:	ac29      	add	r4, sp, #164	; 0xa4
 8018b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b02:	1b5b      	subs	r3, r3, r5
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	9310      	str	r3, [sp, #64]	; 0x40
 8018b08:	dd1c      	ble.n	8018b44 <_svfprintf_r+0xb2c>
 8018b0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018b0c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8018b10:	2810      	cmp	r0, #16
 8018b12:	485c      	ldr	r0, [pc, #368]	; (8018c84 <_svfprintf_r+0xc6c>)
 8018b14:	6020      	str	r0, [r4, #0]
 8018b16:	f102 0201 	add.w	r2, r2, #1
 8018b1a:	f104 0108 	add.w	r1, r4, #8
 8018b1e:	f300 8160 	bgt.w	8018de2 <_svfprintf_r+0xdca>
 8018b22:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018b24:	6060      	str	r0, [r4, #4]
 8018b26:	4403      	add	r3, r0
 8018b28:	2a07      	cmp	r2, #7
 8018b2a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8018b2e:	f340 816d 	ble.w	8018e0c <_svfprintf_r+0xdf4>
 8018b32:	aa26      	add	r2, sp, #152	; 0x98
 8018b34:	4641      	mov	r1, r8
 8018b36:	9803      	ldr	r0, [sp, #12]
 8018b38:	f001 ff0b 	bl	801a952 <__ssprint_r>
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	f040 8457 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018b42:	ac29      	add	r4, sp, #164	; 0xa4
 8018b44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018b46:	9310      	str	r3, [sp, #64]	; 0x40
 8018b48:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018b4c:	f040 8160 	bne.w	8018e10 <_svfprintf_r+0xdf8>
 8018b50:	e9c4 b500 	strd	fp, r5, [r4]
 8018b54:	441d      	add	r5, r3
 8018b56:	9528      	str	r5, [sp, #160]	; 0xa0
 8018b58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018b5a:	3301      	adds	r3, #1
 8018b5c:	2b07      	cmp	r3, #7
 8018b5e:	9327      	str	r3, [sp, #156]	; 0x9c
 8018b60:	f300 819c 	bgt.w	8018e9c <_svfprintf_r+0xe84>
 8018b64:	3408      	adds	r4, #8
 8018b66:	f01a 0f04 	tst.w	sl, #4
 8018b6a:	f040 8423 	bne.w	80193b4 <_svfprintf_r+0x139c>
 8018b6e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8018b72:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018b74:	428a      	cmp	r2, r1
 8018b76:	bfac      	ite	ge
 8018b78:	189b      	addge	r3, r3, r2
 8018b7a:	185b      	addlt	r3, r3, r1
 8018b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8018b7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018b80:	b13b      	cbz	r3, 8018b92 <_svfprintf_r+0xb7a>
 8018b82:	aa26      	add	r2, sp, #152	; 0x98
 8018b84:	4641      	mov	r1, r8
 8018b86:	9803      	ldr	r0, [sp, #12]
 8018b88:	f001 fee3 	bl	801a952 <__ssprint_r>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	f040 842f 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018b92:	2300      	movs	r3, #0
 8018b94:	9327      	str	r3, [sp, #156]	; 0x9c
 8018b96:	f1b9 0f00 	cmp.w	r9, #0
 8018b9a:	f040 8445 	bne.w	8019428 <_svfprintf_r+0x1410>
 8018b9e:	ac29      	add	r4, sp, #164	; 0xa4
 8018ba0:	e6b7      	b.n	8018912 <_svfprintf_r+0x8fa>
 8018ba2:	4658      	mov	r0, fp
 8018ba4:	f7e7 fbe4 	bl	8000370 <strlen>
 8018ba8:	46b1      	mov	r9, r6
 8018baa:	4605      	mov	r5, r0
 8018bac:	e495      	b.n	80184da <_svfprintf_r+0x4c2>
 8018bae:	f04a 0a10 	orr.w	sl, sl, #16
 8018bb2:	f01a 0f20 	tst.w	sl, #32
 8018bb6:	d009      	beq.n	8018bcc <_svfprintf_r+0xbb4>
 8018bb8:	3607      	adds	r6, #7
 8018bba:	f026 0607 	bic.w	r6, r6, #7
 8018bbe:	f106 0308 	add.w	r3, r6, #8
 8018bc2:	e9d6 6700 	ldrd	r6, r7, [r6]
 8018bc6:	9308      	str	r3, [sp, #32]
 8018bc8:	2301      	movs	r3, #1
 8018bca:	e6c9      	b.n	8018960 <_svfprintf_r+0x948>
 8018bcc:	1d33      	adds	r3, r6, #4
 8018bce:	f01a 0f10 	tst.w	sl, #16
 8018bd2:	9308      	str	r3, [sp, #32]
 8018bd4:	d001      	beq.n	8018bda <_svfprintf_r+0xbc2>
 8018bd6:	6836      	ldr	r6, [r6, #0]
 8018bd8:	e003      	b.n	8018be2 <_svfprintf_r+0xbca>
 8018bda:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018bde:	d002      	beq.n	8018be6 <_svfprintf_r+0xbce>
 8018be0:	8836      	ldrh	r6, [r6, #0]
 8018be2:	2700      	movs	r7, #0
 8018be4:	e7f0      	b.n	8018bc8 <_svfprintf_r+0xbb0>
 8018be6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018bea:	d0f4      	beq.n	8018bd6 <_svfprintf_r+0xbbe>
 8018bec:	7836      	ldrb	r6, [r6, #0]
 8018bee:	e7f8      	b.n	8018be2 <_svfprintf_r+0xbca>
 8018bf0:	4b22      	ldr	r3, [pc, #136]	; (8018c7c <_svfprintf_r+0xc64>)
 8018bf2:	f7ff bb48 	b.w	8018286 <_svfprintf_r+0x26e>
 8018bf6:	1d33      	adds	r3, r6, #4
 8018bf8:	f01a 0f10 	tst.w	sl, #16
 8018bfc:	9308      	str	r3, [sp, #32]
 8018bfe:	d001      	beq.n	8018c04 <_svfprintf_r+0xbec>
 8018c00:	6836      	ldr	r6, [r6, #0]
 8018c02:	e003      	b.n	8018c0c <_svfprintf_r+0xbf4>
 8018c04:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8018c08:	d003      	beq.n	8018c12 <_svfprintf_r+0xbfa>
 8018c0a:	8836      	ldrh	r6, [r6, #0]
 8018c0c:	2700      	movs	r7, #0
 8018c0e:	f7ff bb47 	b.w	80182a0 <_svfprintf_r+0x288>
 8018c12:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8018c16:	d0f3      	beq.n	8018c00 <_svfprintf_r+0xbe8>
 8018c18:	7836      	ldrb	r6, [r6, #0]
 8018c1a:	e7f7      	b.n	8018c0c <_svfprintf_r+0xbf4>
 8018c1c:	4652      	mov	r2, sl
 8018c1e:	2301      	movs	r3, #1
 8018c20:	e6a5      	b.n	801896e <_svfprintf_r+0x956>
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	f43f ac04 	beq.w	8018430 <_svfprintf_r+0x418>
 8018c28:	2b02      	cmp	r3, #2
 8018c2a:	d06c      	beq.n	8018d06 <_svfprintf_r+0xcee>
 8018c2c:	ab52      	add	r3, sp, #328	; 0x148
 8018c2e:	08f1      	lsrs	r1, r6, #3
 8018c30:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8018c34:	08f8      	lsrs	r0, r7, #3
 8018c36:	f006 0207 	and.w	r2, r6, #7
 8018c3a:	4607      	mov	r7, r0
 8018c3c:	460e      	mov	r6, r1
 8018c3e:	3230      	adds	r2, #48	; 0x30
 8018c40:	ea56 0107 	orrs.w	r1, r6, r7
 8018c44:	f103 3bff 	add.w	fp, r3, #4294967295
 8018c48:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018c4c:	d114      	bne.n	8018c78 <_svfprintf_r+0xc60>
 8018c4e:	f01a 0f01 	tst.w	sl, #1
 8018c52:	d006      	beq.n	8018c62 <_svfprintf_r+0xc4a>
 8018c54:	2a30      	cmp	r2, #48	; 0x30
 8018c56:	d004      	beq.n	8018c62 <_svfprintf_r+0xc4a>
 8018c58:	2230      	movs	r2, #48	; 0x30
 8018c5a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8018c5e:	f1a3 0b02 	sub.w	fp, r3, #2
 8018c62:	ab52      	add	r3, sp, #328	; 0x148
 8018c64:	9510      	str	r5, [sp, #64]	; 0x40
 8018c66:	f04f 0900 	mov.w	r9, #0
 8018c6a:	eba3 050b 	sub.w	r5, r3, fp
 8018c6e:	464f      	mov	r7, r9
 8018c70:	f8cd 901c 	str.w	r9, [sp, #28]
 8018c74:	464e      	mov	r6, r9
 8018c76:	e6c2      	b.n	80189fe <_svfprintf_r+0x9e6>
 8018c78:	465b      	mov	r3, fp
 8018c7a:	e7d8      	b.n	8018c2e <_svfprintf_r+0xc16>
 8018c7c:	08038124 	.word	0x08038124
 8018c80:	08038148 	.word	0x08038148
 8018c84:	08038158 	.word	0x08038158
 8018c88:	2300      	movs	r3, #0
 8018c8a:	9304      	str	r3, [sp, #16]
 8018c8c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8018c90:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8018c94:	9307      	str	r3, [sp, #28]
 8018c96:	220a      	movs	r2, #10
 8018c98:	2300      	movs	r3, #0
 8018c9a:	4630      	mov	r0, r6
 8018c9c:	4639      	mov	r1, r7
 8018c9e:	f7e8 f853 	bl	8000d48 <__aeabi_uldivmod>
 8018ca2:	9b04      	ldr	r3, [sp, #16]
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	9304      	str	r3, [sp, #16]
 8018ca8:	9b07      	ldr	r3, [sp, #28]
 8018caa:	3230      	adds	r2, #48	; 0x30
 8018cac:	f109 3bff 	add.w	fp, r9, #4294967295
 8018cb0:	f809 2c01 	strb.w	r2, [r9, #-1]
 8018cb4:	b1d3      	cbz	r3, 8018cec <_svfprintf_r+0xcd4>
 8018cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cb8:	9a04      	ldr	r2, [sp, #16]
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d115      	bne.n	8018cec <_svfprintf_r+0xcd4>
 8018cc0:	2aff      	cmp	r2, #255	; 0xff
 8018cc2:	d013      	beq.n	8018cec <_svfprintf_r+0xcd4>
 8018cc4:	2f00      	cmp	r7, #0
 8018cc6:	bf08      	it	eq
 8018cc8:	2e0a      	cmpeq	r6, #10
 8018cca:	d30f      	bcc.n	8018cec <_svfprintf_r+0xcd4>
 8018ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018cce:	9919      	ldr	r1, [sp, #100]	; 0x64
 8018cd0:	ebab 0b03 	sub.w	fp, fp, r3
 8018cd4:	461a      	mov	r2, r3
 8018cd6:	4658      	mov	r0, fp
 8018cd8:	f001 fe26 	bl	801a928 <strncpy>
 8018cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cde:	785b      	ldrb	r3, [r3, #1]
 8018ce0:	b11b      	cbz	r3, 8018cea <_svfprintf_r+0xcd2>
 8018ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ce4:	3301      	adds	r3, #1
 8018ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ce8:	2300      	movs	r3, #0
 8018cea:	9304      	str	r3, [sp, #16]
 8018cec:	2300      	movs	r3, #0
 8018cee:	4630      	mov	r0, r6
 8018cf0:	4639      	mov	r1, r7
 8018cf2:	220a      	movs	r2, #10
 8018cf4:	f7e8 f828 	bl	8000d48 <__aeabi_uldivmod>
 8018cf8:	4606      	mov	r6, r0
 8018cfa:	460f      	mov	r7, r1
 8018cfc:	ea56 0307 	orrs.w	r3, r6, r7
 8018d00:	d0af      	beq.n	8018c62 <_svfprintf_r+0xc4a>
 8018d02:	46d9      	mov	r9, fp
 8018d04:	e7c7      	b.n	8018c96 <_svfprintf_r+0xc7e>
 8018d06:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8018d0a:	f006 030f 	and.w	r3, r6, #15
 8018d0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018d10:	5cd3      	ldrb	r3, [r2, r3]
 8018d12:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8018d16:	0933      	lsrs	r3, r6, #4
 8018d18:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8018d1c:	093a      	lsrs	r2, r7, #4
 8018d1e:	461e      	mov	r6, r3
 8018d20:	4617      	mov	r7, r2
 8018d22:	ea56 0307 	orrs.w	r3, r6, r7
 8018d26:	d1f0      	bne.n	8018d0a <_svfprintf_r+0xcf2>
 8018d28:	e79b      	b.n	8018c62 <_svfprintf_r+0xc4a>
 8018d2a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d197      	bne.n	8018c62 <_svfprintf_r+0xc4a>
 8018d32:	07d2      	lsls	r2, r2, #31
 8018d34:	bf44      	itt	mi
 8018d36:	2330      	movmi	r3, #48	; 0x30
 8018d38:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8018d3c:	e791      	b.n	8018c62 <_svfprintf_r+0xc4a>
 8018d3e:	9b06      	ldr	r3, [sp, #24]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f000 8377 	beq.w	8019434 <_svfprintf_r+0x141c>
 8018d46:	2000      	movs	r0, #0
 8018d48:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8018d4c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8018d50:	9608      	str	r6, [sp, #32]
 8018d52:	f7ff bb49 	b.w	80183e8 <_svfprintf_r+0x3d0>
 8018d56:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8018d5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d5c:	e4ec      	b.n	8018738 <_svfprintf_r+0x720>
 8018d5e:	2010      	movs	r0, #16
 8018d60:	4403      	add	r3, r0
 8018d62:	2a07      	cmp	r2, #7
 8018d64:	6060      	str	r0, [r4, #4]
 8018d66:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8018d6a:	dd08      	ble.n	8018d7e <_svfprintf_r+0xd66>
 8018d6c:	aa26      	add	r2, sp, #152	; 0x98
 8018d6e:	4641      	mov	r1, r8
 8018d70:	9803      	ldr	r0, [sp, #12]
 8018d72:	f001 fdee 	bl	801a952 <__ssprint_r>
 8018d76:	2800      	cmp	r0, #0
 8018d78:	f040 833a 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018d7c:	a929      	add	r1, sp, #164	; 0xa4
 8018d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d80:	3b10      	subs	r3, #16
 8018d82:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d84:	460c      	mov	r4, r1
 8018d86:	e656      	b.n	8018a36 <_svfprintf_r+0xa1e>
 8018d88:	460c      	mov	r4, r1
 8018d8a:	e671      	b.n	8018a70 <_svfprintf_r+0xa58>
 8018d8c:	aa26      	add	r2, sp, #152	; 0x98
 8018d8e:	4641      	mov	r1, r8
 8018d90:	9803      	ldr	r0, [sp, #12]
 8018d92:	f001 fdde 	bl	801a952 <__ssprint_r>
 8018d96:	2800      	cmp	r0, #0
 8018d98:	f040 832a 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018d9c:	ac29      	add	r4, sp, #164	; 0xa4
 8018d9e:	e679      	b.n	8018a94 <_svfprintf_r+0xa7c>
 8018da0:	aa26      	add	r2, sp, #152	; 0x98
 8018da2:	4641      	mov	r1, r8
 8018da4:	9803      	ldr	r0, [sp, #12]
 8018da6:	f001 fdd4 	bl	801a952 <__ssprint_r>
 8018daa:	2800      	cmp	r0, #0
 8018dac:	f040 8320 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018db0:	ac29      	add	r4, sp, #164	; 0xa4
 8018db2:	e67f      	b.n	8018ab4 <_svfprintf_r+0xa9c>
 8018db4:	2010      	movs	r0, #16
 8018db6:	4403      	add	r3, r0
 8018db8:	2a07      	cmp	r2, #7
 8018dba:	6060      	str	r0, [r4, #4]
 8018dbc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8018dc0:	dd08      	ble.n	8018dd4 <_svfprintf_r+0xdbc>
 8018dc2:	aa26      	add	r2, sp, #152	; 0x98
 8018dc4:	4641      	mov	r1, r8
 8018dc6:	9803      	ldr	r0, [sp, #12]
 8018dc8:	f001 fdc3 	bl	801a952 <__ssprint_r>
 8018dcc:	2800      	cmp	r0, #0
 8018dce:	f040 830f 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018dd2:	a929      	add	r1, sp, #164	; 0xa4
 8018dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018dd6:	3b10      	subs	r3, #16
 8018dd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8018dda:	460c      	mov	r4, r1
 8018ddc:	e673      	b.n	8018ac6 <_svfprintf_r+0xaae>
 8018dde:	460c      	mov	r4, r1
 8018de0:	e68e      	b.n	8018b00 <_svfprintf_r+0xae8>
 8018de2:	2010      	movs	r0, #16
 8018de4:	4403      	add	r3, r0
 8018de6:	2a07      	cmp	r2, #7
 8018de8:	6060      	str	r0, [r4, #4]
 8018dea:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8018dee:	dd08      	ble.n	8018e02 <_svfprintf_r+0xdea>
 8018df0:	aa26      	add	r2, sp, #152	; 0x98
 8018df2:	4641      	mov	r1, r8
 8018df4:	9803      	ldr	r0, [sp, #12]
 8018df6:	f001 fdac 	bl	801a952 <__ssprint_r>
 8018dfa:	2800      	cmp	r0, #0
 8018dfc:	f040 82f8 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018e00:	a929      	add	r1, sp, #164	; 0xa4
 8018e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018e04:	3b10      	subs	r3, #16
 8018e06:	9310      	str	r3, [sp, #64]	; 0x40
 8018e08:	460c      	mov	r4, r1
 8018e0a:	e67e      	b.n	8018b0a <_svfprintf_r+0xaf2>
 8018e0c:	460c      	mov	r4, r1
 8018e0e:	e699      	b.n	8018b44 <_svfprintf_r+0xb2c>
 8018e10:	9b06      	ldr	r3, [sp, #24]
 8018e12:	2b65      	cmp	r3, #101	; 0x65
 8018e14:	f340 8234 	ble.w	8019280 <_svfprintf_r+0x1268>
 8018e18:	2200      	movs	r2, #0
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018e20:	f7e7 fed2 	bl	8000bc8 <__aeabi_dcmpeq>
 8018e24:	2800      	cmp	r0, #0
 8018e26:	d069      	beq.n	8018efc <_svfprintf_r+0xee4>
 8018e28:	4b6e      	ldr	r3, [pc, #440]	; (8018fe4 <_svfprintf_r+0xfcc>)
 8018e2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018e2c:	6023      	str	r3, [r4, #0]
 8018e2e:	2301      	movs	r3, #1
 8018e30:	441d      	add	r5, r3
 8018e32:	6063      	str	r3, [r4, #4]
 8018e34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018e36:	9528      	str	r5, [sp, #160]	; 0xa0
 8018e38:	3301      	adds	r3, #1
 8018e3a:	2b07      	cmp	r3, #7
 8018e3c:	9327      	str	r3, [sp, #156]	; 0x9c
 8018e3e:	dc37      	bgt.n	8018eb0 <_svfprintf_r+0xe98>
 8018e40:	3408      	adds	r4, #8
 8018e42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018e44:	9a04      	ldr	r2, [sp, #16]
 8018e46:	4293      	cmp	r3, r2
 8018e48:	db03      	blt.n	8018e52 <_svfprintf_r+0xe3a>
 8018e4a:	f01a 0f01 	tst.w	sl, #1
 8018e4e:	f43f ae8a 	beq.w	8018b66 <_svfprintf_r+0xb4e>
 8018e52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e54:	6023      	str	r3, [r4, #0]
 8018e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e58:	6063      	str	r3, [r4, #4]
 8018e5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018e5e:	4413      	add	r3, r2
 8018e60:	9328      	str	r3, [sp, #160]	; 0xa0
 8018e62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018e64:	3301      	adds	r3, #1
 8018e66:	2b07      	cmp	r3, #7
 8018e68:	9327      	str	r3, [sp, #156]	; 0x9c
 8018e6a:	dc2b      	bgt.n	8018ec4 <_svfprintf_r+0xeac>
 8018e6c:	3408      	adds	r4, #8
 8018e6e:	9b04      	ldr	r3, [sp, #16]
 8018e70:	1e5d      	subs	r5, r3, #1
 8018e72:	2d00      	cmp	r5, #0
 8018e74:	f77f ae77 	ble.w	8018b66 <_svfprintf_r+0xb4e>
 8018e78:	4e5b      	ldr	r6, [pc, #364]	; (8018fe8 <_svfprintf_r+0xfd0>)
 8018e7a:	2710      	movs	r7, #16
 8018e7c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8018e80:	2d10      	cmp	r5, #16
 8018e82:	f103 0301 	add.w	r3, r3, #1
 8018e86:	f104 0108 	add.w	r1, r4, #8
 8018e8a:	6026      	str	r6, [r4, #0]
 8018e8c:	dc24      	bgt.n	8018ed8 <_svfprintf_r+0xec0>
 8018e8e:	6065      	str	r5, [r4, #4]
 8018e90:	2b07      	cmp	r3, #7
 8018e92:	4415      	add	r5, r2
 8018e94:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8018e98:	f340 8289 	ble.w	80193ae <_svfprintf_r+0x1396>
 8018e9c:	aa26      	add	r2, sp, #152	; 0x98
 8018e9e:	4641      	mov	r1, r8
 8018ea0:	9803      	ldr	r0, [sp, #12]
 8018ea2:	f001 fd56 	bl	801a952 <__ssprint_r>
 8018ea6:	2800      	cmp	r0, #0
 8018ea8:	f040 82a2 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018eac:	ac29      	add	r4, sp, #164	; 0xa4
 8018eae:	e65a      	b.n	8018b66 <_svfprintf_r+0xb4e>
 8018eb0:	aa26      	add	r2, sp, #152	; 0x98
 8018eb2:	4641      	mov	r1, r8
 8018eb4:	9803      	ldr	r0, [sp, #12]
 8018eb6:	f001 fd4c 	bl	801a952 <__ssprint_r>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	f040 8298 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018ec0:	ac29      	add	r4, sp, #164	; 0xa4
 8018ec2:	e7be      	b.n	8018e42 <_svfprintf_r+0xe2a>
 8018ec4:	aa26      	add	r2, sp, #152	; 0x98
 8018ec6:	4641      	mov	r1, r8
 8018ec8:	9803      	ldr	r0, [sp, #12]
 8018eca:	f001 fd42 	bl	801a952 <__ssprint_r>
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	f040 828e 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018ed4:	ac29      	add	r4, sp, #164	; 0xa4
 8018ed6:	e7ca      	b.n	8018e6e <_svfprintf_r+0xe56>
 8018ed8:	3210      	adds	r2, #16
 8018eda:	2b07      	cmp	r3, #7
 8018edc:	6067      	str	r7, [r4, #4]
 8018ede:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8018ee2:	dd08      	ble.n	8018ef6 <_svfprintf_r+0xede>
 8018ee4:	aa26      	add	r2, sp, #152	; 0x98
 8018ee6:	4641      	mov	r1, r8
 8018ee8:	9803      	ldr	r0, [sp, #12]
 8018eea:	f001 fd32 	bl	801a952 <__ssprint_r>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	f040 827e 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018ef4:	a929      	add	r1, sp, #164	; 0xa4
 8018ef6:	3d10      	subs	r5, #16
 8018ef8:	460c      	mov	r4, r1
 8018efa:	e7bf      	b.n	8018e7c <_svfprintf_r+0xe64>
 8018efc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	dc74      	bgt.n	8018fec <_svfprintf_r+0xfd4>
 8018f02:	4b38      	ldr	r3, [pc, #224]	; (8018fe4 <_svfprintf_r+0xfcc>)
 8018f04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8018f06:	6023      	str	r3, [r4, #0]
 8018f08:	2301      	movs	r3, #1
 8018f0a:	441d      	add	r5, r3
 8018f0c:	6063      	str	r3, [r4, #4]
 8018f0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018f10:	9528      	str	r5, [sp, #160]	; 0xa0
 8018f12:	3301      	adds	r3, #1
 8018f14:	2b07      	cmp	r3, #7
 8018f16:	9327      	str	r3, [sp, #156]	; 0x9c
 8018f18:	dc3e      	bgt.n	8018f98 <_svfprintf_r+0xf80>
 8018f1a:	3408      	adds	r4, #8
 8018f1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018f1e:	b92b      	cbnz	r3, 8018f2c <_svfprintf_r+0xf14>
 8018f20:	9b04      	ldr	r3, [sp, #16]
 8018f22:	b91b      	cbnz	r3, 8018f2c <_svfprintf_r+0xf14>
 8018f24:	f01a 0f01 	tst.w	sl, #1
 8018f28:	f43f ae1d 	beq.w	8018b66 <_svfprintf_r+0xb4e>
 8018f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018f2e:	6023      	str	r3, [r4, #0]
 8018f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f32:	6063      	str	r3, [r4, #4]
 8018f34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018f38:	4413      	add	r3, r2
 8018f3a:	9328      	str	r3, [sp, #160]	; 0xa0
 8018f3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018f3e:	3301      	adds	r3, #1
 8018f40:	2b07      	cmp	r3, #7
 8018f42:	9327      	str	r3, [sp, #156]	; 0x9c
 8018f44:	dc32      	bgt.n	8018fac <_svfprintf_r+0xf94>
 8018f46:	3408      	adds	r4, #8
 8018f48:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8018f4a:	2d00      	cmp	r5, #0
 8018f4c:	da1b      	bge.n	8018f86 <_svfprintf_r+0xf6e>
 8018f4e:	4e26      	ldr	r6, [pc, #152]	; (8018fe8 <_svfprintf_r+0xfd0>)
 8018f50:	426d      	negs	r5, r5
 8018f52:	4623      	mov	r3, r4
 8018f54:	2710      	movs	r7, #16
 8018f56:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8018f5a:	2d10      	cmp	r5, #16
 8018f5c:	f102 0201 	add.w	r2, r2, #1
 8018f60:	f104 0408 	add.w	r4, r4, #8
 8018f64:	601e      	str	r6, [r3, #0]
 8018f66:	dc2b      	bgt.n	8018fc0 <_svfprintf_r+0xfa8>
 8018f68:	605d      	str	r5, [r3, #4]
 8018f6a:	2a07      	cmp	r2, #7
 8018f6c:	440d      	add	r5, r1
 8018f6e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8018f72:	dd08      	ble.n	8018f86 <_svfprintf_r+0xf6e>
 8018f74:	aa26      	add	r2, sp, #152	; 0x98
 8018f76:	4641      	mov	r1, r8
 8018f78:	9803      	ldr	r0, [sp, #12]
 8018f7a:	f001 fcea 	bl	801a952 <__ssprint_r>
 8018f7e:	2800      	cmp	r0, #0
 8018f80:	f040 8236 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018f84:	ac29      	add	r4, sp, #164	; 0xa4
 8018f86:	9b04      	ldr	r3, [sp, #16]
 8018f88:	6063      	str	r3, [r4, #4]
 8018f8a:	9a04      	ldr	r2, [sp, #16]
 8018f8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018f8e:	f8c4 b000 	str.w	fp, [r4]
 8018f92:	4413      	add	r3, r2
 8018f94:	9328      	str	r3, [sp, #160]	; 0xa0
 8018f96:	e5df      	b.n	8018b58 <_svfprintf_r+0xb40>
 8018f98:	aa26      	add	r2, sp, #152	; 0x98
 8018f9a:	4641      	mov	r1, r8
 8018f9c:	9803      	ldr	r0, [sp, #12]
 8018f9e:	f001 fcd8 	bl	801a952 <__ssprint_r>
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	f040 8224 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018fa8:	ac29      	add	r4, sp, #164	; 0xa4
 8018faa:	e7b7      	b.n	8018f1c <_svfprintf_r+0xf04>
 8018fac:	aa26      	add	r2, sp, #152	; 0x98
 8018fae:	4641      	mov	r1, r8
 8018fb0:	9803      	ldr	r0, [sp, #12]
 8018fb2:	f001 fcce 	bl	801a952 <__ssprint_r>
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	f040 821a 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018fbc:	ac29      	add	r4, sp, #164	; 0xa4
 8018fbe:	e7c3      	b.n	8018f48 <_svfprintf_r+0xf30>
 8018fc0:	3110      	adds	r1, #16
 8018fc2:	2a07      	cmp	r2, #7
 8018fc4:	605f      	str	r7, [r3, #4]
 8018fc6:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8018fca:	dd08      	ble.n	8018fde <_svfprintf_r+0xfc6>
 8018fcc:	aa26      	add	r2, sp, #152	; 0x98
 8018fce:	4641      	mov	r1, r8
 8018fd0:	9803      	ldr	r0, [sp, #12]
 8018fd2:	f001 fcbe 	bl	801a952 <__ssprint_r>
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	f040 820a 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8018fdc:	ac29      	add	r4, sp, #164	; 0xa4
 8018fde:	3d10      	subs	r5, #16
 8018fe0:	4623      	mov	r3, r4
 8018fe2:	e7b8      	b.n	8018f56 <_svfprintf_r+0xf3e>
 8018fe4:	08038146 	.word	0x08038146
 8018fe8:	08038158 	.word	0x08038158
 8018fec:	9b04      	ldr	r3, [sp, #16]
 8018fee:	42b3      	cmp	r3, r6
 8018ff0:	bfa8      	it	ge
 8018ff2:	4633      	movge	r3, r6
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	461d      	mov	r5, r3
 8018ff8:	dd0b      	ble.n	8019012 <_svfprintf_r+0xffa>
 8018ffa:	e9c4 b300 	strd	fp, r3, [r4]
 8018ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019000:	442b      	add	r3, r5
 8019002:	9328      	str	r3, [sp, #160]	; 0xa0
 8019004:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019006:	3301      	adds	r3, #1
 8019008:	2b07      	cmp	r3, #7
 801900a:	9327      	str	r3, [sp, #156]	; 0x9c
 801900c:	f300 8086 	bgt.w	801911c <_svfprintf_r+0x1104>
 8019010:	3408      	adds	r4, #8
 8019012:	2d00      	cmp	r5, #0
 8019014:	bfac      	ite	ge
 8019016:	1b75      	subge	r5, r6, r5
 8019018:	4635      	movlt	r5, r6
 801901a:	2d00      	cmp	r5, #0
 801901c:	dd19      	ble.n	8019052 <_svfprintf_r+0x103a>
 801901e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019022:	4896      	ldr	r0, [pc, #600]	; (801927c <_svfprintf_r+0x1264>)
 8019024:	6020      	str	r0, [r4, #0]
 8019026:	2d10      	cmp	r5, #16
 8019028:	f103 0301 	add.w	r3, r3, #1
 801902c:	f104 0108 	add.w	r1, r4, #8
 8019030:	dc7e      	bgt.n	8019130 <_svfprintf_r+0x1118>
 8019032:	6065      	str	r5, [r4, #4]
 8019034:	2b07      	cmp	r3, #7
 8019036:	4415      	add	r5, r2
 8019038:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801903c:	f340 808b 	ble.w	8019156 <_svfprintf_r+0x113e>
 8019040:	aa26      	add	r2, sp, #152	; 0x98
 8019042:	4641      	mov	r1, r8
 8019044:	9803      	ldr	r0, [sp, #12]
 8019046:	f001 fc84 	bl	801a952 <__ssprint_r>
 801904a:	2800      	cmp	r0, #0
 801904c:	f040 81d0 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019050:	ac29      	add	r4, sp, #164	; 0xa4
 8019052:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8019056:	445e      	add	r6, fp
 8019058:	d009      	beq.n	801906e <_svfprintf_r+0x1056>
 801905a:	9b07      	ldr	r3, [sp, #28]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d17c      	bne.n	801915a <_svfprintf_r+0x1142>
 8019060:	2f00      	cmp	r7, #0
 8019062:	d17c      	bne.n	801915e <_svfprintf_r+0x1146>
 8019064:	9b04      	ldr	r3, [sp, #16]
 8019066:	445b      	add	r3, fp
 8019068:	429e      	cmp	r6, r3
 801906a:	bf28      	it	cs
 801906c:	461e      	movcs	r6, r3
 801906e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019070:	9a04      	ldr	r2, [sp, #16]
 8019072:	4293      	cmp	r3, r2
 8019074:	db02      	blt.n	801907c <_svfprintf_r+0x1064>
 8019076:	f01a 0f01 	tst.w	sl, #1
 801907a:	d00e      	beq.n	801909a <_svfprintf_r+0x1082>
 801907c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801907e:	6023      	str	r3, [r4, #0]
 8019080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019082:	6063      	str	r3, [r4, #4]
 8019084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019088:	4413      	add	r3, r2
 801908a:	9328      	str	r3, [sp, #160]	; 0xa0
 801908c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801908e:	3301      	adds	r3, #1
 8019090:	2b07      	cmp	r3, #7
 8019092:	9327      	str	r3, [sp, #156]	; 0x9c
 8019094:	f300 80dd 	bgt.w	8019252 <_svfprintf_r+0x123a>
 8019098:	3408      	adds	r4, #8
 801909a:	9b04      	ldr	r3, [sp, #16]
 801909c:	9a04      	ldr	r2, [sp, #16]
 801909e:	eb0b 0503 	add.w	r5, fp, r3
 80190a2:	1bab      	subs	r3, r5, r6
 80190a4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80190a6:	1b55      	subs	r5, r2, r5
 80190a8:	429d      	cmp	r5, r3
 80190aa:	bfa8      	it	ge
 80190ac:	461d      	movge	r5, r3
 80190ae:	2d00      	cmp	r5, #0
 80190b0:	dd0b      	ble.n	80190ca <_svfprintf_r+0x10b2>
 80190b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80190b4:	442b      	add	r3, r5
 80190b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80190b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80190ba:	3301      	adds	r3, #1
 80190bc:	2b07      	cmp	r3, #7
 80190be:	e9c4 6500 	strd	r6, r5, [r4]
 80190c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80190c4:	f300 80cf 	bgt.w	8019266 <_svfprintf_r+0x124e>
 80190c8:	3408      	adds	r4, #8
 80190ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80190cc:	9a04      	ldr	r2, [sp, #16]
 80190ce:	2d00      	cmp	r5, #0
 80190d0:	eba2 0303 	sub.w	r3, r2, r3
 80190d4:	bfac      	ite	ge
 80190d6:	1b5d      	subge	r5, r3, r5
 80190d8:	461d      	movlt	r5, r3
 80190da:	2d00      	cmp	r5, #0
 80190dc:	f77f ad43 	ble.w	8018b66 <_svfprintf_r+0xb4e>
 80190e0:	4e66      	ldr	r6, [pc, #408]	; (801927c <_svfprintf_r+0x1264>)
 80190e2:	2710      	movs	r7, #16
 80190e4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80190e8:	2d10      	cmp	r5, #16
 80190ea:	f103 0301 	add.w	r3, r3, #1
 80190ee:	f104 0108 	add.w	r1, r4, #8
 80190f2:	6026      	str	r6, [r4, #0]
 80190f4:	f77f aecb 	ble.w	8018e8e <_svfprintf_r+0xe76>
 80190f8:	3210      	adds	r2, #16
 80190fa:	2b07      	cmp	r3, #7
 80190fc:	6067      	str	r7, [r4, #4]
 80190fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019102:	dd08      	ble.n	8019116 <_svfprintf_r+0x10fe>
 8019104:	aa26      	add	r2, sp, #152	; 0x98
 8019106:	4641      	mov	r1, r8
 8019108:	9803      	ldr	r0, [sp, #12]
 801910a:	f001 fc22 	bl	801a952 <__ssprint_r>
 801910e:	2800      	cmp	r0, #0
 8019110:	f040 816e 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019114:	a929      	add	r1, sp, #164	; 0xa4
 8019116:	3d10      	subs	r5, #16
 8019118:	460c      	mov	r4, r1
 801911a:	e7e3      	b.n	80190e4 <_svfprintf_r+0x10cc>
 801911c:	aa26      	add	r2, sp, #152	; 0x98
 801911e:	4641      	mov	r1, r8
 8019120:	9803      	ldr	r0, [sp, #12]
 8019122:	f001 fc16 	bl	801a952 <__ssprint_r>
 8019126:	2800      	cmp	r0, #0
 8019128:	f040 8162 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 801912c:	ac29      	add	r4, sp, #164	; 0xa4
 801912e:	e770      	b.n	8019012 <_svfprintf_r+0xffa>
 8019130:	2010      	movs	r0, #16
 8019132:	4402      	add	r2, r0
 8019134:	2b07      	cmp	r3, #7
 8019136:	6060      	str	r0, [r4, #4]
 8019138:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801913c:	dd08      	ble.n	8019150 <_svfprintf_r+0x1138>
 801913e:	aa26      	add	r2, sp, #152	; 0x98
 8019140:	4641      	mov	r1, r8
 8019142:	9803      	ldr	r0, [sp, #12]
 8019144:	f001 fc05 	bl	801a952 <__ssprint_r>
 8019148:	2800      	cmp	r0, #0
 801914a:	f040 8151 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 801914e:	a929      	add	r1, sp, #164	; 0xa4
 8019150:	3d10      	subs	r5, #16
 8019152:	460c      	mov	r4, r1
 8019154:	e763      	b.n	801901e <_svfprintf_r+0x1006>
 8019156:	460c      	mov	r4, r1
 8019158:	e77b      	b.n	8019052 <_svfprintf_r+0x103a>
 801915a:	2f00      	cmp	r7, #0
 801915c:	d049      	beq.n	80191f2 <_svfprintf_r+0x11da>
 801915e:	3f01      	subs	r7, #1
 8019160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019162:	6023      	str	r3, [r4, #0]
 8019164:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019166:	6063      	str	r3, [r4, #4]
 8019168:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801916a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801916c:	4413      	add	r3, r2
 801916e:	9328      	str	r3, [sp, #160]	; 0xa0
 8019170:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019172:	3301      	adds	r3, #1
 8019174:	2b07      	cmp	r3, #7
 8019176:	9327      	str	r3, [sp, #156]	; 0x9c
 8019178:	dc42      	bgt.n	8019200 <_svfprintf_r+0x11e8>
 801917a:	3408      	adds	r4, #8
 801917c:	9b04      	ldr	r3, [sp, #16]
 801917e:	445b      	add	r3, fp
 8019180:	1b9a      	subs	r2, r3, r6
 8019182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	4293      	cmp	r3, r2
 8019188:	bfa8      	it	ge
 801918a:	4613      	movge	r3, r2
 801918c:	2b00      	cmp	r3, #0
 801918e:	461d      	mov	r5, r3
 8019190:	dd0a      	ble.n	80191a8 <_svfprintf_r+0x1190>
 8019192:	e9c4 6300 	strd	r6, r3, [r4]
 8019196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019198:	442b      	add	r3, r5
 801919a:	9328      	str	r3, [sp, #160]	; 0xa0
 801919c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801919e:	3301      	adds	r3, #1
 80191a0:	2b07      	cmp	r3, #7
 80191a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80191a4:	dc36      	bgt.n	8019214 <_svfprintf_r+0x11fc>
 80191a6:	3408      	adds	r4, #8
 80191a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191aa:	781b      	ldrb	r3, [r3, #0]
 80191ac:	2d00      	cmp	r5, #0
 80191ae:	bfac      	ite	ge
 80191b0:	1b5d      	subge	r5, r3, r5
 80191b2:	461d      	movlt	r5, r3
 80191b4:	2d00      	cmp	r5, #0
 80191b6:	dd18      	ble.n	80191ea <_svfprintf_r+0x11d2>
 80191b8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80191bc:	482f      	ldr	r0, [pc, #188]	; (801927c <_svfprintf_r+0x1264>)
 80191be:	6020      	str	r0, [r4, #0]
 80191c0:	2d10      	cmp	r5, #16
 80191c2:	f102 0201 	add.w	r2, r2, #1
 80191c6:	f104 0108 	add.w	r1, r4, #8
 80191ca:	dc2d      	bgt.n	8019228 <_svfprintf_r+0x1210>
 80191cc:	442b      	add	r3, r5
 80191ce:	2a07      	cmp	r2, #7
 80191d0:	6065      	str	r5, [r4, #4]
 80191d2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80191d6:	dd3a      	ble.n	801924e <_svfprintf_r+0x1236>
 80191d8:	aa26      	add	r2, sp, #152	; 0x98
 80191da:	4641      	mov	r1, r8
 80191dc:	9803      	ldr	r0, [sp, #12]
 80191de:	f001 fbb8 	bl	801a952 <__ssprint_r>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	f040 8104 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 80191e8:	ac29      	add	r4, sp, #164	; 0xa4
 80191ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	441e      	add	r6, r3
 80191f0:	e733      	b.n	801905a <_svfprintf_r+0x1042>
 80191f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191f4:	3b01      	subs	r3, #1
 80191f6:	9309      	str	r3, [sp, #36]	; 0x24
 80191f8:	9b07      	ldr	r3, [sp, #28]
 80191fa:	3b01      	subs	r3, #1
 80191fc:	9307      	str	r3, [sp, #28]
 80191fe:	e7af      	b.n	8019160 <_svfprintf_r+0x1148>
 8019200:	aa26      	add	r2, sp, #152	; 0x98
 8019202:	4641      	mov	r1, r8
 8019204:	9803      	ldr	r0, [sp, #12]
 8019206:	f001 fba4 	bl	801a952 <__ssprint_r>
 801920a:	2800      	cmp	r0, #0
 801920c:	f040 80f0 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019210:	ac29      	add	r4, sp, #164	; 0xa4
 8019212:	e7b3      	b.n	801917c <_svfprintf_r+0x1164>
 8019214:	aa26      	add	r2, sp, #152	; 0x98
 8019216:	4641      	mov	r1, r8
 8019218:	9803      	ldr	r0, [sp, #12]
 801921a:	f001 fb9a 	bl	801a952 <__ssprint_r>
 801921e:	2800      	cmp	r0, #0
 8019220:	f040 80e6 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019224:	ac29      	add	r4, sp, #164	; 0xa4
 8019226:	e7bf      	b.n	80191a8 <_svfprintf_r+0x1190>
 8019228:	2010      	movs	r0, #16
 801922a:	4403      	add	r3, r0
 801922c:	2a07      	cmp	r2, #7
 801922e:	6060      	str	r0, [r4, #4]
 8019230:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019234:	dd08      	ble.n	8019248 <_svfprintf_r+0x1230>
 8019236:	aa26      	add	r2, sp, #152	; 0x98
 8019238:	4641      	mov	r1, r8
 801923a:	9803      	ldr	r0, [sp, #12]
 801923c:	f001 fb89 	bl	801a952 <__ssprint_r>
 8019240:	2800      	cmp	r0, #0
 8019242:	f040 80d5 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019246:	a929      	add	r1, sp, #164	; 0xa4
 8019248:	3d10      	subs	r5, #16
 801924a:	460c      	mov	r4, r1
 801924c:	e7b4      	b.n	80191b8 <_svfprintf_r+0x11a0>
 801924e:	460c      	mov	r4, r1
 8019250:	e7cb      	b.n	80191ea <_svfprintf_r+0x11d2>
 8019252:	aa26      	add	r2, sp, #152	; 0x98
 8019254:	4641      	mov	r1, r8
 8019256:	9803      	ldr	r0, [sp, #12]
 8019258:	f001 fb7b 	bl	801a952 <__ssprint_r>
 801925c:	2800      	cmp	r0, #0
 801925e:	f040 80c7 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019262:	ac29      	add	r4, sp, #164	; 0xa4
 8019264:	e719      	b.n	801909a <_svfprintf_r+0x1082>
 8019266:	aa26      	add	r2, sp, #152	; 0x98
 8019268:	4641      	mov	r1, r8
 801926a:	9803      	ldr	r0, [sp, #12]
 801926c:	f001 fb71 	bl	801a952 <__ssprint_r>
 8019270:	2800      	cmp	r0, #0
 8019272:	f040 80bd 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 8019276:	ac29      	add	r4, sp, #164	; 0xa4
 8019278:	e727      	b.n	80190ca <_svfprintf_r+0x10b2>
 801927a:	bf00      	nop
 801927c:	08038158 	.word	0x08038158
 8019280:	9a04      	ldr	r2, [sp, #16]
 8019282:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019284:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019286:	2a01      	cmp	r2, #1
 8019288:	f105 0501 	add.w	r5, r5, #1
 801928c:	f103 0301 	add.w	r3, r3, #1
 8019290:	f104 0608 	add.w	r6, r4, #8
 8019294:	dc02      	bgt.n	801929c <_svfprintf_r+0x1284>
 8019296:	f01a 0f01 	tst.w	sl, #1
 801929a:	d07d      	beq.n	8019398 <_svfprintf_r+0x1380>
 801929c:	2201      	movs	r2, #1
 801929e:	2b07      	cmp	r3, #7
 80192a0:	f8c4 b000 	str.w	fp, [r4]
 80192a4:	6062      	str	r2, [r4, #4]
 80192a6:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80192aa:	dd08      	ble.n	80192be <_svfprintf_r+0x12a6>
 80192ac:	aa26      	add	r2, sp, #152	; 0x98
 80192ae:	4641      	mov	r1, r8
 80192b0:	9803      	ldr	r0, [sp, #12]
 80192b2:	f001 fb4e 	bl	801a952 <__ssprint_r>
 80192b6:	2800      	cmp	r0, #0
 80192b8:	f040 809a 	bne.w	80193f0 <_svfprintf_r+0x13d8>
 80192bc:	ae29      	add	r6, sp, #164	; 0xa4
 80192be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80192c0:	6033      	str	r3, [r6, #0]
 80192c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192c4:	6073      	str	r3, [r6, #4]
 80192c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80192ca:	4413      	add	r3, r2
 80192cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80192ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80192d0:	3301      	adds	r3, #1
 80192d2:	2b07      	cmp	r3, #7
 80192d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80192d6:	dc31      	bgt.n	801933c <_svfprintf_r+0x1324>
 80192d8:	3608      	adds	r6, #8
 80192da:	9b04      	ldr	r3, [sp, #16]
 80192dc:	2200      	movs	r2, #0
 80192de:	1e5c      	subs	r4, r3, #1
 80192e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80192e4:	2300      	movs	r3, #0
 80192e6:	f7e7 fc6f 	bl	8000bc8 <__aeabi_dcmpeq>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d12f      	bne.n	801934e <_svfprintf_r+0x1336>
 80192ee:	f10b 0301 	add.w	r3, fp, #1
 80192f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80192f4:	9904      	ldr	r1, [sp, #16]
 80192f6:	e9c6 3400 	strd	r3, r4, [r6]
 80192fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80192fc:	3201      	adds	r2, #1
 80192fe:	3b01      	subs	r3, #1
 8019300:	440b      	add	r3, r1
 8019302:	2a07      	cmp	r2, #7
 8019304:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019308:	dd4f      	ble.n	80193aa <_svfprintf_r+0x1392>
 801930a:	aa26      	add	r2, sp, #152	; 0x98
 801930c:	4641      	mov	r1, r8
 801930e:	9803      	ldr	r0, [sp, #12]
 8019310:	f001 fb1f 	bl	801a952 <__ssprint_r>
 8019314:	2800      	cmp	r0, #0
 8019316:	d16b      	bne.n	80193f0 <_svfprintf_r+0x13d8>
 8019318:	ae29      	add	r6, sp, #164	; 0xa4
 801931a:	ab22      	add	r3, sp, #136	; 0x88
 801931c:	6033      	str	r3, [r6, #0]
 801931e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019320:	6073      	str	r3, [r6, #4]
 8019322:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019324:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019326:	4413      	add	r3, r2
 8019328:	9328      	str	r3, [sp, #160]	; 0xa0
 801932a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801932c:	3301      	adds	r3, #1
 801932e:	2b07      	cmp	r3, #7
 8019330:	9327      	str	r3, [sp, #156]	; 0x9c
 8019332:	f73f adb3 	bgt.w	8018e9c <_svfprintf_r+0xe84>
 8019336:	f106 0408 	add.w	r4, r6, #8
 801933a:	e414      	b.n	8018b66 <_svfprintf_r+0xb4e>
 801933c:	aa26      	add	r2, sp, #152	; 0x98
 801933e:	4641      	mov	r1, r8
 8019340:	9803      	ldr	r0, [sp, #12]
 8019342:	f001 fb06 	bl	801a952 <__ssprint_r>
 8019346:	2800      	cmp	r0, #0
 8019348:	d152      	bne.n	80193f0 <_svfprintf_r+0x13d8>
 801934a:	ae29      	add	r6, sp, #164	; 0xa4
 801934c:	e7c5      	b.n	80192da <_svfprintf_r+0x12c2>
 801934e:	2c00      	cmp	r4, #0
 8019350:	dde3      	ble.n	801931a <_svfprintf_r+0x1302>
 8019352:	4d3e      	ldr	r5, [pc, #248]	; (801944c <_svfprintf_r+0x1434>)
 8019354:	2710      	movs	r7, #16
 8019356:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801935a:	2c10      	cmp	r4, #16
 801935c:	f103 0301 	add.w	r3, r3, #1
 8019360:	f106 0108 	add.w	r1, r6, #8
 8019364:	6035      	str	r5, [r6, #0]
 8019366:	dc07      	bgt.n	8019378 <_svfprintf_r+0x1360>
 8019368:	6074      	str	r4, [r6, #4]
 801936a:	2b07      	cmp	r3, #7
 801936c:	4414      	add	r4, r2
 801936e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8019372:	dcca      	bgt.n	801930a <_svfprintf_r+0x12f2>
 8019374:	460e      	mov	r6, r1
 8019376:	e7d0      	b.n	801931a <_svfprintf_r+0x1302>
 8019378:	3210      	adds	r2, #16
 801937a:	2b07      	cmp	r3, #7
 801937c:	6077      	str	r7, [r6, #4]
 801937e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019382:	dd06      	ble.n	8019392 <_svfprintf_r+0x137a>
 8019384:	aa26      	add	r2, sp, #152	; 0x98
 8019386:	4641      	mov	r1, r8
 8019388:	9803      	ldr	r0, [sp, #12]
 801938a:	f001 fae2 	bl	801a952 <__ssprint_r>
 801938e:	bb78      	cbnz	r0, 80193f0 <_svfprintf_r+0x13d8>
 8019390:	a929      	add	r1, sp, #164	; 0xa4
 8019392:	3c10      	subs	r4, #16
 8019394:	460e      	mov	r6, r1
 8019396:	e7de      	b.n	8019356 <_svfprintf_r+0x133e>
 8019398:	2201      	movs	r2, #1
 801939a:	2b07      	cmp	r3, #7
 801939c:	f8c4 b000 	str.w	fp, [r4]
 80193a0:	6062      	str	r2, [r4, #4]
 80193a2:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80193a6:	ddb8      	ble.n	801931a <_svfprintf_r+0x1302>
 80193a8:	e7af      	b.n	801930a <_svfprintf_r+0x12f2>
 80193aa:	3608      	adds	r6, #8
 80193ac:	e7b5      	b.n	801931a <_svfprintf_r+0x1302>
 80193ae:	460c      	mov	r4, r1
 80193b0:	f7ff bbd9 	b.w	8018b66 <_svfprintf_r+0xb4e>
 80193b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80193b8:	1a9d      	subs	r5, r3, r2
 80193ba:	2d00      	cmp	r5, #0
 80193bc:	f77f abd7 	ble.w	8018b6e <_svfprintf_r+0xb56>
 80193c0:	4e23      	ldr	r6, [pc, #140]	; (8019450 <_svfprintf_r+0x1438>)
 80193c2:	2710      	movs	r7, #16
 80193c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80193c8:	2d10      	cmp	r5, #16
 80193ca:	f103 0301 	add.w	r3, r3, #1
 80193ce:	6026      	str	r6, [r4, #0]
 80193d0:	dc18      	bgt.n	8019404 <_svfprintf_r+0x13ec>
 80193d2:	6065      	str	r5, [r4, #4]
 80193d4:	2b07      	cmp	r3, #7
 80193d6:	4415      	add	r5, r2
 80193d8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80193dc:	f77f abc7 	ble.w	8018b6e <_svfprintf_r+0xb56>
 80193e0:	aa26      	add	r2, sp, #152	; 0x98
 80193e2:	4641      	mov	r1, r8
 80193e4:	9803      	ldr	r0, [sp, #12]
 80193e6:	f001 fab4 	bl	801a952 <__ssprint_r>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	f43f abbf 	beq.w	8018b6e <_svfprintf_r+0xb56>
 80193f0:	f1b9 0f00 	cmp.w	r9, #0
 80193f4:	f43f a8a8 	beq.w	8018548 <_svfprintf_r+0x530>
 80193f8:	4649      	mov	r1, r9
 80193fa:	9803      	ldr	r0, [sp, #12]
 80193fc:	f000 fee4 	bl	801a1c8 <_free_r>
 8019400:	f7ff b8a2 	b.w	8018548 <_svfprintf_r+0x530>
 8019404:	3210      	adds	r2, #16
 8019406:	2b07      	cmp	r3, #7
 8019408:	6067      	str	r7, [r4, #4]
 801940a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801940e:	dc02      	bgt.n	8019416 <_svfprintf_r+0x13fe>
 8019410:	3408      	adds	r4, #8
 8019412:	3d10      	subs	r5, #16
 8019414:	e7d6      	b.n	80193c4 <_svfprintf_r+0x13ac>
 8019416:	aa26      	add	r2, sp, #152	; 0x98
 8019418:	4641      	mov	r1, r8
 801941a:	9803      	ldr	r0, [sp, #12]
 801941c:	f001 fa99 	bl	801a952 <__ssprint_r>
 8019420:	2800      	cmp	r0, #0
 8019422:	d1e5      	bne.n	80193f0 <_svfprintf_r+0x13d8>
 8019424:	ac29      	add	r4, sp, #164	; 0xa4
 8019426:	e7f4      	b.n	8019412 <_svfprintf_r+0x13fa>
 8019428:	4649      	mov	r1, r9
 801942a:	9803      	ldr	r0, [sp, #12]
 801942c:	f000 fecc 	bl	801a1c8 <_free_r>
 8019430:	f7ff bbb5 	b.w	8018b9e <_svfprintf_r+0xb86>
 8019434:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019436:	2b00      	cmp	r3, #0
 8019438:	f43f a886 	beq.w	8018548 <_svfprintf_r+0x530>
 801943c:	aa26      	add	r2, sp, #152	; 0x98
 801943e:	4641      	mov	r1, r8
 8019440:	9803      	ldr	r0, [sp, #12]
 8019442:	f001 fa86 	bl	801a952 <__ssprint_r>
 8019446:	f7ff b87f 	b.w	8018548 <_svfprintf_r+0x530>
 801944a:	bf00      	nop
 801944c:	08038158 	.word	0x08038158
 8019450:	08038148 	.word	0x08038148

08019454 <sysconf>:
 8019454:	2808      	cmp	r0, #8
 8019456:	b508      	push	{r3, lr}
 8019458:	d006      	beq.n	8019468 <sysconf+0x14>
 801945a:	f7fe f959 	bl	8017710 <__errno>
 801945e:	2316      	movs	r3, #22
 8019460:	6003      	str	r3, [r0, #0]
 8019462:	f04f 30ff 	mov.w	r0, #4294967295
 8019466:	bd08      	pop	{r3, pc}
 8019468:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801946c:	e7fb      	b.n	8019466 <sysconf+0x12>
	...

08019470 <register_fini>:
 8019470:	4b02      	ldr	r3, [pc, #8]	; (801947c <register_fini+0xc>)
 8019472:	b113      	cbz	r3, 801947a <register_fini+0xa>
 8019474:	4802      	ldr	r0, [pc, #8]	; (8019480 <register_fini+0x10>)
 8019476:	f000 b805 	b.w	8019484 <atexit>
 801947a:	4770      	bx	lr
 801947c:	00000000 	.word	0x00000000
 8019480:	0801a0f9 	.word	0x0801a0f9

08019484 <atexit>:
 8019484:	2300      	movs	r3, #0
 8019486:	4601      	mov	r1, r0
 8019488:	461a      	mov	r2, r3
 801948a:	4618      	mov	r0, r3
 801948c:	f001 bada 	b.w	801aa44 <__register_exitproc>

08019490 <quorem>:
 8019490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019494:	6903      	ldr	r3, [r0, #16]
 8019496:	690c      	ldr	r4, [r1, #16]
 8019498:	42a3      	cmp	r3, r4
 801949a:	4680      	mov	r8, r0
 801949c:	f2c0 8082 	blt.w	80195a4 <quorem+0x114>
 80194a0:	3c01      	subs	r4, #1
 80194a2:	f101 0714 	add.w	r7, r1, #20
 80194a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80194aa:	f100 0614 	add.w	r6, r0, #20
 80194ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80194b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80194b6:	eb06 030c 	add.w	r3, r6, ip
 80194ba:	3501      	adds	r5, #1
 80194bc:	eb07 090c 	add.w	r9, r7, ip
 80194c0:	9301      	str	r3, [sp, #4]
 80194c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80194c6:	b395      	cbz	r5, 801952e <quorem+0x9e>
 80194c8:	f04f 0a00 	mov.w	sl, #0
 80194cc:	4638      	mov	r0, r7
 80194ce:	46b6      	mov	lr, r6
 80194d0:	46d3      	mov	fp, sl
 80194d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80194d6:	b293      	uxth	r3, r2
 80194d8:	fb05 a303 	mla	r3, r5, r3, sl
 80194dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80194e0:	b29b      	uxth	r3, r3
 80194e2:	ebab 0303 	sub.w	r3, fp, r3
 80194e6:	0c12      	lsrs	r2, r2, #16
 80194e8:	f8de b000 	ldr.w	fp, [lr]
 80194ec:	fb05 a202 	mla	r2, r5, r2, sl
 80194f0:	fa13 f38b 	uxtah	r3, r3, fp
 80194f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80194f8:	fa1f fb82 	uxth.w	fp, r2
 80194fc:	f8de 2000 	ldr.w	r2, [lr]
 8019500:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8019504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019508:	b29b      	uxth	r3, r3
 801950a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801950e:	4581      	cmp	r9, r0
 8019510:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8019514:	f84e 3b04 	str.w	r3, [lr], #4
 8019518:	d2db      	bcs.n	80194d2 <quorem+0x42>
 801951a:	f856 300c 	ldr.w	r3, [r6, ip]
 801951e:	b933      	cbnz	r3, 801952e <quorem+0x9e>
 8019520:	9b01      	ldr	r3, [sp, #4]
 8019522:	3b04      	subs	r3, #4
 8019524:	429e      	cmp	r6, r3
 8019526:	461a      	mov	r2, r3
 8019528:	d330      	bcc.n	801958c <quorem+0xfc>
 801952a:	f8c8 4010 	str.w	r4, [r8, #16]
 801952e:	4640      	mov	r0, r8
 8019530:	f001 f8fe 	bl	801a730 <__mcmp>
 8019534:	2800      	cmp	r0, #0
 8019536:	db25      	blt.n	8019584 <quorem+0xf4>
 8019538:	3501      	adds	r5, #1
 801953a:	4630      	mov	r0, r6
 801953c:	f04f 0c00 	mov.w	ip, #0
 8019540:	f857 2b04 	ldr.w	r2, [r7], #4
 8019544:	f8d0 e000 	ldr.w	lr, [r0]
 8019548:	b293      	uxth	r3, r2
 801954a:	ebac 0303 	sub.w	r3, ip, r3
 801954e:	0c12      	lsrs	r2, r2, #16
 8019550:	fa13 f38e 	uxtah	r3, r3, lr
 8019554:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019558:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801955c:	b29b      	uxth	r3, r3
 801955e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019562:	45b9      	cmp	r9, r7
 8019564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019568:	f840 3b04 	str.w	r3, [r0], #4
 801956c:	d2e8      	bcs.n	8019540 <quorem+0xb0>
 801956e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8019572:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8019576:	b92a      	cbnz	r2, 8019584 <quorem+0xf4>
 8019578:	3b04      	subs	r3, #4
 801957a:	429e      	cmp	r6, r3
 801957c:	461a      	mov	r2, r3
 801957e:	d30b      	bcc.n	8019598 <quorem+0x108>
 8019580:	f8c8 4010 	str.w	r4, [r8, #16]
 8019584:	4628      	mov	r0, r5
 8019586:	b003      	add	sp, #12
 8019588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801958c:	6812      	ldr	r2, [r2, #0]
 801958e:	3b04      	subs	r3, #4
 8019590:	2a00      	cmp	r2, #0
 8019592:	d1ca      	bne.n	801952a <quorem+0x9a>
 8019594:	3c01      	subs	r4, #1
 8019596:	e7c5      	b.n	8019524 <quorem+0x94>
 8019598:	6812      	ldr	r2, [r2, #0]
 801959a:	3b04      	subs	r3, #4
 801959c:	2a00      	cmp	r2, #0
 801959e:	d1ef      	bne.n	8019580 <quorem+0xf0>
 80195a0:	3c01      	subs	r4, #1
 80195a2:	e7ea      	b.n	801957a <quorem+0xea>
 80195a4:	2000      	movs	r0, #0
 80195a6:	e7ee      	b.n	8019586 <quorem+0xf6>

080195a8 <_dtoa_r>:
 80195a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ac:	b097      	sub	sp, #92	; 0x5c
 80195ae:	ec57 6b10 	vmov	r6, r7, d0
 80195b2:	9106      	str	r1, [sp, #24]
 80195b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80195b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80195b8:	4604      	mov	r4, r0
 80195ba:	9312      	str	r3, [sp, #72]	; 0x48
 80195bc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80195be:	e9cd 6700 	strd	r6, r7, [sp]
 80195c2:	b141      	cbz	r1, 80195d6 <_dtoa_r+0x2e>
 80195c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80195c6:	604a      	str	r2, [r1, #4]
 80195c8:	2301      	movs	r3, #1
 80195ca:	4093      	lsls	r3, r2
 80195cc:	608b      	str	r3, [r1, #8]
 80195ce:	f000 feea 	bl	801a3a6 <_Bfree>
 80195d2:	2300      	movs	r3, #0
 80195d4:	6423      	str	r3, [r4, #64]	; 0x40
 80195d6:	1e3b      	subs	r3, r7, #0
 80195d8:	bfb9      	ittee	lt
 80195da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80195de:	9301      	strlt	r3, [sp, #4]
 80195e0:	2300      	movge	r3, #0
 80195e2:	602b      	strge	r3, [r5, #0]
 80195e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80195e8:	4baf      	ldr	r3, [pc, #700]	; (80198a8 <_dtoa_r+0x300>)
 80195ea:	bfbc      	itt	lt
 80195ec:	2201      	movlt	r2, #1
 80195ee:	602a      	strlt	r2, [r5, #0]
 80195f0:	ea33 0308 	bics.w	r3, r3, r8
 80195f4:	d116      	bne.n	8019624 <_dtoa_r+0x7c>
 80195f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80195fc:	6013      	str	r3, [r2, #0]
 80195fe:	9b00      	ldr	r3, [sp, #0]
 8019600:	b923      	cbnz	r3, 801960c <_dtoa_r+0x64>
 8019602:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8019606:	2800      	cmp	r0, #0
 8019608:	f000 8543 	beq.w	801a092 <_dtoa_r+0xaea>
 801960c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801960e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80198bc <_dtoa_r+0x314>
 8019612:	b11b      	cbz	r3, 801961c <_dtoa_r+0x74>
 8019614:	f10b 0303 	add.w	r3, fp, #3
 8019618:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801961a:	6013      	str	r3, [r2, #0]
 801961c:	4658      	mov	r0, fp
 801961e:	b017      	add	sp, #92	; 0x5c
 8019620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019624:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019628:	2200      	movs	r2, #0
 801962a:	2300      	movs	r3, #0
 801962c:	4630      	mov	r0, r6
 801962e:	4639      	mov	r1, r7
 8019630:	f7e7 faca 	bl	8000bc8 <__aeabi_dcmpeq>
 8019634:	4681      	mov	r9, r0
 8019636:	b160      	cbz	r0, 8019652 <_dtoa_r+0xaa>
 8019638:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801963a:	2301      	movs	r3, #1
 801963c:	6013      	str	r3, [r2, #0]
 801963e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019640:	2b00      	cmp	r3, #0
 8019642:	f000 8522 	beq.w	801a08a <_dtoa_r+0xae2>
 8019646:	4b99      	ldr	r3, [pc, #612]	; (80198ac <_dtoa_r+0x304>)
 8019648:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801964a:	f103 3bff 	add.w	fp, r3, #4294967295
 801964e:	6013      	str	r3, [r2, #0]
 8019650:	e7e4      	b.n	801961c <_dtoa_r+0x74>
 8019652:	aa14      	add	r2, sp, #80	; 0x50
 8019654:	a915      	add	r1, sp, #84	; 0x54
 8019656:	ec47 6b10 	vmov	d0, r6, r7
 801965a:	4620      	mov	r0, r4
 801965c:	f001 f8df 	bl	801a81e <__d2b>
 8019660:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8019664:	9004      	str	r0, [sp, #16]
 8019666:	2d00      	cmp	r5, #0
 8019668:	d07c      	beq.n	8019764 <_dtoa_r+0x1bc>
 801966a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801966e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8019672:	46b2      	mov	sl, r6
 8019674:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8019678:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801967c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8019680:	2200      	movs	r2, #0
 8019682:	4b8b      	ldr	r3, [pc, #556]	; (80198b0 <_dtoa_r+0x308>)
 8019684:	4650      	mov	r0, sl
 8019686:	4659      	mov	r1, fp
 8019688:	f7e6 fe7e 	bl	8000388 <__aeabi_dsub>
 801968c:	a380      	add	r3, pc, #512	; (adr r3, 8019890 <_dtoa_r+0x2e8>)
 801968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019692:	f7e7 f831 	bl	80006f8 <__aeabi_dmul>
 8019696:	a380      	add	r3, pc, #512	; (adr r3, 8019898 <_dtoa_r+0x2f0>)
 8019698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801969c:	f7e6 fe76 	bl	800038c <__adddf3>
 80196a0:	4606      	mov	r6, r0
 80196a2:	4628      	mov	r0, r5
 80196a4:	460f      	mov	r7, r1
 80196a6:	f7e6 ffbd 	bl	8000624 <__aeabi_i2d>
 80196aa:	a37d      	add	r3, pc, #500	; (adr r3, 80198a0 <_dtoa_r+0x2f8>)
 80196ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b0:	f7e7 f822 	bl	80006f8 <__aeabi_dmul>
 80196b4:	4602      	mov	r2, r0
 80196b6:	460b      	mov	r3, r1
 80196b8:	4630      	mov	r0, r6
 80196ba:	4639      	mov	r1, r7
 80196bc:	f7e6 fe66 	bl	800038c <__adddf3>
 80196c0:	4606      	mov	r6, r0
 80196c2:	460f      	mov	r7, r1
 80196c4:	f7e7 fac8 	bl	8000c58 <__aeabi_d2iz>
 80196c8:	2200      	movs	r2, #0
 80196ca:	4682      	mov	sl, r0
 80196cc:	2300      	movs	r3, #0
 80196ce:	4630      	mov	r0, r6
 80196d0:	4639      	mov	r1, r7
 80196d2:	f7e7 fa83 	bl	8000bdc <__aeabi_dcmplt>
 80196d6:	b148      	cbz	r0, 80196ec <_dtoa_r+0x144>
 80196d8:	4650      	mov	r0, sl
 80196da:	f7e6 ffa3 	bl	8000624 <__aeabi_i2d>
 80196de:	4632      	mov	r2, r6
 80196e0:	463b      	mov	r3, r7
 80196e2:	f7e7 fa71 	bl	8000bc8 <__aeabi_dcmpeq>
 80196e6:	b908      	cbnz	r0, 80196ec <_dtoa_r+0x144>
 80196e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80196ec:	f1ba 0f16 	cmp.w	sl, #22
 80196f0:	d859      	bhi.n	80197a6 <_dtoa_r+0x1fe>
 80196f2:	4970      	ldr	r1, [pc, #448]	; (80198b4 <_dtoa_r+0x30c>)
 80196f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80196f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80196fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019700:	f7e7 fa8a 	bl	8000c18 <__aeabi_dcmpgt>
 8019704:	2800      	cmp	r0, #0
 8019706:	d050      	beq.n	80197aa <_dtoa_r+0x202>
 8019708:	f10a 3aff 	add.w	sl, sl, #4294967295
 801970c:	2300      	movs	r3, #0
 801970e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019710:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019712:	1b5d      	subs	r5, r3, r5
 8019714:	f1b5 0801 	subs.w	r8, r5, #1
 8019718:	bf49      	itett	mi
 801971a:	f1c5 0301 	rsbmi	r3, r5, #1
 801971e:	2300      	movpl	r3, #0
 8019720:	9305      	strmi	r3, [sp, #20]
 8019722:	f04f 0800 	movmi.w	r8, #0
 8019726:	bf58      	it	pl
 8019728:	9305      	strpl	r3, [sp, #20]
 801972a:	f1ba 0f00 	cmp.w	sl, #0
 801972e:	db3e      	blt.n	80197ae <_dtoa_r+0x206>
 8019730:	2300      	movs	r3, #0
 8019732:	44d0      	add	r8, sl
 8019734:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8019738:	9307      	str	r3, [sp, #28]
 801973a:	9b06      	ldr	r3, [sp, #24]
 801973c:	2b09      	cmp	r3, #9
 801973e:	f200 808d 	bhi.w	801985c <_dtoa_r+0x2b4>
 8019742:	2b05      	cmp	r3, #5
 8019744:	bfc4      	itt	gt
 8019746:	3b04      	subgt	r3, #4
 8019748:	9306      	strgt	r3, [sp, #24]
 801974a:	9b06      	ldr	r3, [sp, #24]
 801974c:	f1a3 0302 	sub.w	r3, r3, #2
 8019750:	bfcc      	ite	gt
 8019752:	2500      	movgt	r5, #0
 8019754:	2501      	movle	r5, #1
 8019756:	2b03      	cmp	r3, #3
 8019758:	f200 808c 	bhi.w	8019874 <_dtoa_r+0x2cc>
 801975c:	e8df f003 	tbb	[pc, r3]
 8019760:	6e317c7a 	.word	0x6e317c7a
 8019764:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8019768:	441d      	add	r5, r3
 801976a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801976e:	2820      	cmp	r0, #32
 8019770:	dd13      	ble.n	801979a <_dtoa_r+0x1f2>
 8019772:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8019776:	9b00      	ldr	r3, [sp, #0]
 8019778:	fa08 f800 	lsl.w	r8, r8, r0
 801977c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8019780:	fa23 f000 	lsr.w	r0, r3, r0
 8019784:	ea48 0000 	orr.w	r0, r8, r0
 8019788:	f7e6 ff3c 	bl	8000604 <__aeabi_ui2d>
 801978c:	2301      	movs	r3, #1
 801978e:	4682      	mov	sl, r0
 8019790:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8019794:	3d01      	subs	r5, #1
 8019796:	9313      	str	r3, [sp, #76]	; 0x4c
 8019798:	e772      	b.n	8019680 <_dtoa_r+0xd8>
 801979a:	9b00      	ldr	r3, [sp, #0]
 801979c:	f1c0 0020 	rsb	r0, r0, #32
 80197a0:	fa03 f000 	lsl.w	r0, r3, r0
 80197a4:	e7f0      	b.n	8019788 <_dtoa_r+0x1e0>
 80197a6:	2301      	movs	r3, #1
 80197a8:	e7b1      	b.n	801970e <_dtoa_r+0x166>
 80197aa:	900f      	str	r0, [sp, #60]	; 0x3c
 80197ac:	e7b0      	b.n	8019710 <_dtoa_r+0x168>
 80197ae:	9b05      	ldr	r3, [sp, #20]
 80197b0:	eba3 030a 	sub.w	r3, r3, sl
 80197b4:	9305      	str	r3, [sp, #20]
 80197b6:	f1ca 0300 	rsb	r3, sl, #0
 80197ba:	9307      	str	r3, [sp, #28]
 80197bc:	2300      	movs	r3, #0
 80197be:	930e      	str	r3, [sp, #56]	; 0x38
 80197c0:	e7bb      	b.n	801973a <_dtoa_r+0x192>
 80197c2:	2301      	movs	r3, #1
 80197c4:	930a      	str	r3, [sp, #40]	; 0x28
 80197c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	dd56      	ble.n	801987a <_dtoa_r+0x2d2>
 80197cc:	9302      	str	r3, [sp, #8]
 80197ce:	4699      	mov	r9, r3
 80197d0:	2200      	movs	r2, #0
 80197d2:	6462      	str	r2, [r4, #68]	; 0x44
 80197d4:	2204      	movs	r2, #4
 80197d6:	f102 0014 	add.w	r0, r2, #20
 80197da:	4298      	cmp	r0, r3
 80197dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80197de:	d951      	bls.n	8019884 <_dtoa_r+0x2dc>
 80197e0:	4620      	mov	r0, r4
 80197e2:	f000 fdbb 	bl	801a35c <_Balloc>
 80197e6:	f1b9 0f0e 	cmp.w	r9, #14
 80197ea:	4683      	mov	fp, r0
 80197ec:	6420      	str	r0, [r4, #64]	; 0x40
 80197ee:	f200 80e8 	bhi.w	80199c2 <_dtoa_r+0x41a>
 80197f2:	2d00      	cmp	r5, #0
 80197f4:	f000 80e5 	beq.w	80199c2 <_dtoa_r+0x41a>
 80197f8:	ed9d 7b00 	vldr	d7, [sp]
 80197fc:	f1ba 0f00 	cmp.w	sl, #0
 8019800:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8019804:	dd76      	ble.n	80198f4 <_dtoa_r+0x34c>
 8019806:	4a2b      	ldr	r2, [pc, #172]	; (80198b4 <_dtoa_r+0x30c>)
 8019808:	f00a 030f 	and.w	r3, sl, #15
 801980c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019810:	ed93 7b00 	vldr	d7, [r3]
 8019814:	ea4f 162a 	mov.w	r6, sl, asr #4
 8019818:	06f0      	lsls	r0, r6, #27
 801981a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801981e:	d567      	bpl.n	80198f0 <_dtoa_r+0x348>
 8019820:	4b25      	ldr	r3, [pc, #148]	; (80198b8 <_dtoa_r+0x310>)
 8019822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019826:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801982a:	f7e7 f88f 	bl	800094c <__aeabi_ddiv>
 801982e:	e9cd 0100 	strd	r0, r1, [sp]
 8019832:	f006 060f 	and.w	r6, r6, #15
 8019836:	2503      	movs	r5, #3
 8019838:	4f1f      	ldr	r7, [pc, #124]	; (80198b8 <_dtoa_r+0x310>)
 801983a:	e04e      	b.n	80198da <_dtoa_r+0x332>
 801983c:	2301      	movs	r3, #1
 801983e:	930a      	str	r3, [sp, #40]	; 0x28
 8019840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019842:	4453      	add	r3, sl
 8019844:	f103 0901 	add.w	r9, r3, #1
 8019848:	9302      	str	r3, [sp, #8]
 801984a:	464b      	mov	r3, r9
 801984c:	2b01      	cmp	r3, #1
 801984e:	bfb8      	it	lt
 8019850:	2301      	movlt	r3, #1
 8019852:	e7bd      	b.n	80197d0 <_dtoa_r+0x228>
 8019854:	2300      	movs	r3, #0
 8019856:	e7b5      	b.n	80197c4 <_dtoa_r+0x21c>
 8019858:	2300      	movs	r3, #0
 801985a:	e7f0      	b.n	801983e <_dtoa_r+0x296>
 801985c:	2501      	movs	r5, #1
 801985e:	2300      	movs	r3, #0
 8019860:	9306      	str	r3, [sp, #24]
 8019862:	950a      	str	r5, [sp, #40]	; 0x28
 8019864:	f04f 33ff 	mov.w	r3, #4294967295
 8019868:	9302      	str	r3, [sp, #8]
 801986a:	4699      	mov	r9, r3
 801986c:	2200      	movs	r2, #0
 801986e:	2312      	movs	r3, #18
 8019870:	920b      	str	r2, [sp, #44]	; 0x2c
 8019872:	e7ad      	b.n	80197d0 <_dtoa_r+0x228>
 8019874:	2301      	movs	r3, #1
 8019876:	930a      	str	r3, [sp, #40]	; 0x28
 8019878:	e7f4      	b.n	8019864 <_dtoa_r+0x2bc>
 801987a:	2301      	movs	r3, #1
 801987c:	9302      	str	r3, [sp, #8]
 801987e:	4699      	mov	r9, r3
 8019880:	461a      	mov	r2, r3
 8019882:	e7f5      	b.n	8019870 <_dtoa_r+0x2c8>
 8019884:	3101      	adds	r1, #1
 8019886:	6461      	str	r1, [r4, #68]	; 0x44
 8019888:	0052      	lsls	r2, r2, #1
 801988a:	e7a4      	b.n	80197d6 <_dtoa_r+0x22e>
 801988c:	f3af 8000 	nop.w
 8019890:	636f4361 	.word	0x636f4361
 8019894:	3fd287a7 	.word	0x3fd287a7
 8019898:	8b60c8b3 	.word	0x8b60c8b3
 801989c:	3fc68a28 	.word	0x3fc68a28
 80198a0:	509f79fb 	.word	0x509f79fb
 80198a4:	3fd34413 	.word	0x3fd34413
 80198a8:	7ff00000 	.word	0x7ff00000
 80198ac:	08038147 	.word	0x08038147
 80198b0:	3ff80000 	.word	0x3ff80000
 80198b4:	080381a0 	.word	0x080381a0
 80198b8:	08038178 	.word	0x08038178
 80198bc:	08038171 	.word	0x08038171
 80198c0:	07f1      	lsls	r1, r6, #31
 80198c2:	d508      	bpl.n	80198d6 <_dtoa_r+0x32e>
 80198c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80198c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80198cc:	f7e6 ff14 	bl	80006f8 <__aeabi_dmul>
 80198d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80198d4:	3501      	adds	r5, #1
 80198d6:	1076      	asrs	r6, r6, #1
 80198d8:	3708      	adds	r7, #8
 80198da:	2e00      	cmp	r6, #0
 80198dc:	d1f0      	bne.n	80198c0 <_dtoa_r+0x318>
 80198de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80198e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80198e6:	f7e7 f831 	bl	800094c <__aeabi_ddiv>
 80198ea:	e9cd 0100 	strd	r0, r1, [sp]
 80198ee:	e01a      	b.n	8019926 <_dtoa_r+0x37e>
 80198f0:	2502      	movs	r5, #2
 80198f2:	e7a1      	b.n	8019838 <_dtoa_r+0x290>
 80198f4:	f000 80a0 	beq.w	8019a38 <_dtoa_r+0x490>
 80198f8:	f1ca 0600 	rsb	r6, sl, #0
 80198fc:	4b9f      	ldr	r3, [pc, #636]	; (8019b7c <_dtoa_r+0x5d4>)
 80198fe:	4fa0      	ldr	r7, [pc, #640]	; (8019b80 <_dtoa_r+0x5d8>)
 8019900:	f006 020f 	and.w	r2, r6, #15
 8019904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801990c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019910:	f7e6 fef2 	bl	80006f8 <__aeabi_dmul>
 8019914:	e9cd 0100 	strd	r0, r1, [sp]
 8019918:	1136      	asrs	r6, r6, #4
 801991a:	2300      	movs	r3, #0
 801991c:	2502      	movs	r5, #2
 801991e:	2e00      	cmp	r6, #0
 8019920:	d17f      	bne.n	8019a22 <_dtoa_r+0x47a>
 8019922:	2b00      	cmp	r3, #0
 8019924:	d1e1      	bne.n	80198ea <_dtoa_r+0x342>
 8019926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019928:	2b00      	cmp	r3, #0
 801992a:	f000 8087 	beq.w	8019a3c <_dtoa_r+0x494>
 801992e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019932:	2200      	movs	r2, #0
 8019934:	4b93      	ldr	r3, [pc, #588]	; (8019b84 <_dtoa_r+0x5dc>)
 8019936:	4630      	mov	r0, r6
 8019938:	4639      	mov	r1, r7
 801993a:	f7e7 f94f 	bl	8000bdc <__aeabi_dcmplt>
 801993e:	2800      	cmp	r0, #0
 8019940:	d07c      	beq.n	8019a3c <_dtoa_r+0x494>
 8019942:	f1b9 0f00 	cmp.w	r9, #0
 8019946:	d079      	beq.n	8019a3c <_dtoa_r+0x494>
 8019948:	9b02      	ldr	r3, [sp, #8]
 801994a:	2b00      	cmp	r3, #0
 801994c:	dd35      	ble.n	80199ba <_dtoa_r+0x412>
 801994e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019952:	9308      	str	r3, [sp, #32]
 8019954:	4639      	mov	r1, r7
 8019956:	2200      	movs	r2, #0
 8019958:	4b8b      	ldr	r3, [pc, #556]	; (8019b88 <_dtoa_r+0x5e0>)
 801995a:	4630      	mov	r0, r6
 801995c:	f7e6 fecc 	bl	80006f8 <__aeabi_dmul>
 8019960:	e9cd 0100 	strd	r0, r1, [sp]
 8019964:	9f02      	ldr	r7, [sp, #8]
 8019966:	3501      	adds	r5, #1
 8019968:	4628      	mov	r0, r5
 801996a:	f7e6 fe5b 	bl	8000624 <__aeabi_i2d>
 801996e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019972:	f7e6 fec1 	bl	80006f8 <__aeabi_dmul>
 8019976:	2200      	movs	r2, #0
 8019978:	4b84      	ldr	r3, [pc, #528]	; (8019b8c <_dtoa_r+0x5e4>)
 801997a:	f7e6 fd07 	bl	800038c <__adddf3>
 801997e:	4605      	mov	r5, r0
 8019980:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8019984:	2f00      	cmp	r7, #0
 8019986:	d15d      	bne.n	8019a44 <_dtoa_r+0x49c>
 8019988:	2200      	movs	r2, #0
 801998a:	4b81      	ldr	r3, [pc, #516]	; (8019b90 <_dtoa_r+0x5e8>)
 801998c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019990:	f7e6 fcfa 	bl	8000388 <__aeabi_dsub>
 8019994:	462a      	mov	r2, r5
 8019996:	4633      	mov	r3, r6
 8019998:	e9cd 0100 	strd	r0, r1, [sp]
 801999c:	f7e7 f93c 	bl	8000c18 <__aeabi_dcmpgt>
 80199a0:	2800      	cmp	r0, #0
 80199a2:	f040 8288 	bne.w	8019eb6 <_dtoa_r+0x90e>
 80199a6:	462a      	mov	r2, r5
 80199a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80199ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80199b0:	f7e7 f914 	bl	8000bdc <__aeabi_dcmplt>
 80199b4:	2800      	cmp	r0, #0
 80199b6:	f040 827c 	bne.w	8019eb2 <_dtoa_r+0x90a>
 80199ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80199be:	e9cd 2300 	strd	r2, r3, [sp]
 80199c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	f2c0 8150 	blt.w	8019c6a <_dtoa_r+0x6c2>
 80199ca:	f1ba 0f0e 	cmp.w	sl, #14
 80199ce:	f300 814c 	bgt.w	8019c6a <_dtoa_r+0x6c2>
 80199d2:	4b6a      	ldr	r3, [pc, #424]	; (8019b7c <_dtoa_r+0x5d4>)
 80199d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80199d8:	ed93 7b00 	vldr	d7, [r3]
 80199dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199de:	2b00      	cmp	r3, #0
 80199e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80199e4:	f280 80d8 	bge.w	8019b98 <_dtoa_r+0x5f0>
 80199e8:	f1b9 0f00 	cmp.w	r9, #0
 80199ec:	f300 80d4 	bgt.w	8019b98 <_dtoa_r+0x5f0>
 80199f0:	f040 825e 	bne.w	8019eb0 <_dtoa_r+0x908>
 80199f4:	2200      	movs	r2, #0
 80199f6:	4b66      	ldr	r3, [pc, #408]	; (8019b90 <_dtoa_r+0x5e8>)
 80199f8:	ec51 0b17 	vmov	r0, r1, d7
 80199fc:	f7e6 fe7c 	bl	80006f8 <__aeabi_dmul>
 8019a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019a04:	f7e7 f8fe 	bl	8000c04 <__aeabi_dcmpge>
 8019a08:	464f      	mov	r7, r9
 8019a0a:	464e      	mov	r6, r9
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	f040 8234 	bne.w	8019e7a <_dtoa_r+0x8d2>
 8019a12:	2331      	movs	r3, #49	; 0x31
 8019a14:	f10b 0501 	add.w	r5, fp, #1
 8019a18:	f88b 3000 	strb.w	r3, [fp]
 8019a1c:	f10a 0a01 	add.w	sl, sl, #1
 8019a20:	e22f      	b.n	8019e82 <_dtoa_r+0x8da>
 8019a22:	07f2      	lsls	r2, r6, #31
 8019a24:	d505      	bpl.n	8019a32 <_dtoa_r+0x48a>
 8019a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019a2a:	f7e6 fe65 	bl	80006f8 <__aeabi_dmul>
 8019a2e:	3501      	adds	r5, #1
 8019a30:	2301      	movs	r3, #1
 8019a32:	1076      	asrs	r6, r6, #1
 8019a34:	3708      	adds	r7, #8
 8019a36:	e772      	b.n	801991e <_dtoa_r+0x376>
 8019a38:	2502      	movs	r5, #2
 8019a3a:	e774      	b.n	8019926 <_dtoa_r+0x37e>
 8019a3c:	f8cd a020 	str.w	sl, [sp, #32]
 8019a40:	464f      	mov	r7, r9
 8019a42:	e791      	b.n	8019968 <_dtoa_r+0x3c0>
 8019a44:	4b4d      	ldr	r3, [pc, #308]	; (8019b7c <_dtoa_r+0x5d4>)
 8019a46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019a4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8019a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d047      	beq.n	8019ae4 <_dtoa_r+0x53c>
 8019a54:	4602      	mov	r2, r0
 8019a56:	460b      	mov	r3, r1
 8019a58:	2000      	movs	r0, #0
 8019a5a:	494e      	ldr	r1, [pc, #312]	; (8019b94 <_dtoa_r+0x5ec>)
 8019a5c:	f7e6 ff76 	bl	800094c <__aeabi_ddiv>
 8019a60:	462a      	mov	r2, r5
 8019a62:	4633      	mov	r3, r6
 8019a64:	f7e6 fc90 	bl	8000388 <__aeabi_dsub>
 8019a68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019a6c:	465d      	mov	r5, fp
 8019a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a72:	f7e7 f8f1 	bl	8000c58 <__aeabi_d2iz>
 8019a76:	4606      	mov	r6, r0
 8019a78:	f7e6 fdd4 	bl	8000624 <__aeabi_i2d>
 8019a7c:	4602      	mov	r2, r0
 8019a7e:	460b      	mov	r3, r1
 8019a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a84:	f7e6 fc80 	bl	8000388 <__aeabi_dsub>
 8019a88:	3630      	adds	r6, #48	; 0x30
 8019a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8019a8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019a92:	e9cd 0100 	strd	r0, r1, [sp]
 8019a96:	f7e7 f8a1 	bl	8000bdc <__aeabi_dcmplt>
 8019a9a:	2800      	cmp	r0, #0
 8019a9c:	d163      	bne.n	8019b66 <_dtoa_r+0x5be>
 8019a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019aa2:	2000      	movs	r0, #0
 8019aa4:	4937      	ldr	r1, [pc, #220]	; (8019b84 <_dtoa_r+0x5dc>)
 8019aa6:	f7e6 fc6f 	bl	8000388 <__aeabi_dsub>
 8019aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019aae:	f7e7 f895 	bl	8000bdc <__aeabi_dcmplt>
 8019ab2:	2800      	cmp	r0, #0
 8019ab4:	f040 80b7 	bne.w	8019c26 <_dtoa_r+0x67e>
 8019ab8:	eba5 030b 	sub.w	r3, r5, fp
 8019abc:	429f      	cmp	r7, r3
 8019abe:	f77f af7c 	ble.w	80199ba <_dtoa_r+0x412>
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	4b30      	ldr	r3, [pc, #192]	; (8019b88 <_dtoa_r+0x5e0>)
 8019ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019aca:	f7e6 fe15 	bl	80006f8 <__aeabi_dmul>
 8019ace:	2200      	movs	r2, #0
 8019ad0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019ad4:	4b2c      	ldr	r3, [pc, #176]	; (8019b88 <_dtoa_r+0x5e0>)
 8019ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ada:	f7e6 fe0d 	bl	80006f8 <__aeabi_dmul>
 8019ade:	e9cd 0100 	strd	r0, r1, [sp]
 8019ae2:	e7c4      	b.n	8019a6e <_dtoa_r+0x4c6>
 8019ae4:	462a      	mov	r2, r5
 8019ae6:	4633      	mov	r3, r6
 8019ae8:	f7e6 fe06 	bl	80006f8 <__aeabi_dmul>
 8019aec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019af0:	eb0b 0507 	add.w	r5, fp, r7
 8019af4:	465e      	mov	r6, fp
 8019af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019afa:	f7e7 f8ad 	bl	8000c58 <__aeabi_d2iz>
 8019afe:	4607      	mov	r7, r0
 8019b00:	f7e6 fd90 	bl	8000624 <__aeabi_i2d>
 8019b04:	3730      	adds	r7, #48	; 0x30
 8019b06:	4602      	mov	r2, r0
 8019b08:	460b      	mov	r3, r1
 8019b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b0e:	f7e6 fc3b 	bl	8000388 <__aeabi_dsub>
 8019b12:	f806 7b01 	strb.w	r7, [r6], #1
 8019b16:	42ae      	cmp	r6, r5
 8019b18:	e9cd 0100 	strd	r0, r1, [sp]
 8019b1c:	f04f 0200 	mov.w	r2, #0
 8019b20:	d126      	bne.n	8019b70 <_dtoa_r+0x5c8>
 8019b22:	4b1c      	ldr	r3, [pc, #112]	; (8019b94 <_dtoa_r+0x5ec>)
 8019b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019b28:	f7e6 fc30 	bl	800038c <__adddf3>
 8019b2c:	4602      	mov	r2, r0
 8019b2e:	460b      	mov	r3, r1
 8019b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b34:	f7e7 f870 	bl	8000c18 <__aeabi_dcmpgt>
 8019b38:	2800      	cmp	r0, #0
 8019b3a:	d174      	bne.n	8019c26 <_dtoa_r+0x67e>
 8019b3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019b40:	2000      	movs	r0, #0
 8019b42:	4914      	ldr	r1, [pc, #80]	; (8019b94 <_dtoa_r+0x5ec>)
 8019b44:	f7e6 fc20 	bl	8000388 <__aeabi_dsub>
 8019b48:	4602      	mov	r2, r0
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b50:	f7e7 f844 	bl	8000bdc <__aeabi_dcmplt>
 8019b54:	2800      	cmp	r0, #0
 8019b56:	f43f af30 	beq.w	80199ba <_dtoa_r+0x412>
 8019b5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019b5e:	2b30      	cmp	r3, #48	; 0x30
 8019b60:	f105 32ff 	add.w	r2, r5, #4294967295
 8019b64:	d002      	beq.n	8019b6c <_dtoa_r+0x5c4>
 8019b66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019b6a:	e04a      	b.n	8019c02 <_dtoa_r+0x65a>
 8019b6c:	4615      	mov	r5, r2
 8019b6e:	e7f4      	b.n	8019b5a <_dtoa_r+0x5b2>
 8019b70:	4b05      	ldr	r3, [pc, #20]	; (8019b88 <_dtoa_r+0x5e0>)
 8019b72:	f7e6 fdc1 	bl	80006f8 <__aeabi_dmul>
 8019b76:	e9cd 0100 	strd	r0, r1, [sp]
 8019b7a:	e7bc      	b.n	8019af6 <_dtoa_r+0x54e>
 8019b7c:	080381a0 	.word	0x080381a0
 8019b80:	08038178 	.word	0x08038178
 8019b84:	3ff00000 	.word	0x3ff00000
 8019b88:	40240000 	.word	0x40240000
 8019b8c:	401c0000 	.word	0x401c0000
 8019b90:	40140000 	.word	0x40140000
 8019b94:	3fe00000 	.word	0x3fe00000
 8019b98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019b9c:	465d      	mov	r5, fp
 8019b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019ba2:	4630      	mov	r0, r6
 8019ba4:	4639      	mov	r1, r7
 8019ba6:	f7e6 fed1 	bl	800094c <__aeabi_ddiv>
 8019baa:	f7e7 f855 	bl	8000c58 <__aeabi_d2iz>
 8019bae:	4680      	mov	r8, r0
 8019bb0:	f7e6 fd38 	bl	8000624 <__aeabi_i2d>
 8019bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019bb8:	f7e6 fd9e 	bl	80006f8 <__aeabi_dmul>
 8019bbc:	4602      	mov	r2, r0
 8019bbe:	460b      	mov	r3, r1
 8019bc0:	4630      	mov	r0, r6
 8019bc2:	4639      	mov	r1, r7
 8019bc4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8019bc8:	f7e6 fbde 	bl	8000388 <__aeabi_dsub>
 8019bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8019bd0:	eba5 060b 	sub.w	r6, r5, fp
 8019bd4:	45b1      	cmp	r9, r6
 8019bd6:	4602      	mov	r2, r0
 8019bd8:	460b      	mov	r3, r1
 8019bda:	d139      	bne.n	8019c50 <_dtoa_r+0x6a8>
 8019bdc:	f7e6 fbd6 	bl	800038c <__adddf3>
 8019be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019be4:	4606      	mov	r6, r0
 8019be6:	460f      	mov	r7, r1
 8019be8:	f7e7 f816 	bl	8000c18 <__aeabi_dcmpgt>
 8019bec:	b9c8      	cbnz	r0, 8019c22 <_dtoa_r+0x67a>
 8019bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019bf2:	4630      	mov	r0, r6
 8019bf4:	4639      	mov	r1, r7
 8019bf6:	f7e6 ffe7 	bl	8000bc8 <__aeabi_dcmpeq>
 8019bfa:	b110      	cbz	r0, 8019c02 <_dtoa_r+0x65a>
 8019bfc:	f018 0f01 	tst.w	r8, #1
 8019c00:	d10f      	bne.n	8019c22 <_dtoa_r+0x67a>
 8019c02:	9904      	ldr	r1, [sp, #16]
 8019c04:	4620      	mov	r0, r4
 8019c06:	f000 fbce 	bl	801a3a6 <_Bfree>
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c0e:	702b      	strb	r3, [r5, #0]
 8019c10:	f10a 0301 	add.w	r3, sl, #1
 8019c14:	6013      	str	r3, [r2, #0]
 8019c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	f43f acff 	beq.w	801961c <_dtoa_r+0x74>
 8019c1e:	601d      	str	r5, [r3, #0]
 8019c20:	e4fc      	b.n	801961c <_dtoa_r+0x74>
 8019c22:	f8cd a020 	str.w	sl, [sp, #32]
 8019c26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019c2a:	2a39      	cmp	r2, #57	; 0x39
 8019c2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8019c30:	d108      	bne.n	8019c44 <_dtoa_r+0x69c>
 8019c32:	459b      	cmp	fp, r3
 8019c34:	d10a      	bne.n	8019c4c <_dtoa_r+0x6a4>
 8019c36:	9b08      	ldr	r3, [sp, #32]
 8019c38:	3301      	adds	r3, #1
 8019c3a:	9308      	str	r3, [sp, #32]
 8019c3c:	2330      	movs	r3, #48	; 0x30
 8019c3e:	f88b 3000 	strb.w	r3, [fp]
 8019c42:	465b      	mov	r3, fp
 8019c44:	781a      	ldrb	r2, [r3, #0]
 8019c46:	3201      	adds	r2, #1
 8019c48:	701a      	strb	r2, [r3, #0]
 8019c4a:	e78c      	b.n	8019b66 <_dtoa_r+0x5be>
 8019c4c:	461d      	mov	r5, r3
 8019c4e:	e7ea      	b.n	8019c26 <_dtoa_r+0x67e>
 8019c50:	2200      	movs	r2, #0
 8019c52:	4b9b      	ldr	r3, [pc, #620]	; (8019ec0 <_dtoa_r+0x918>)
 8019c54:	f7e6 fd50 	bl	80006f8 <__aeabi_dmul>
 8019c58:	2200      	movs	r2, #0
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	4606      	mov	r6, r0
 8019c5e:	460f      	mov	r7, r1
 8019c60:	f7e6 ffb2 	bl	8000bc8 <__aeabi_dcmpeq>
 8019c64:	2800      	cmp	r0, #0
 8019c66:	d09a      	beq.n	8019b9e <_dtoa_r+0x5f6>
 8019c68:	e7cb      	b.n	8019c02 <_dtoa_r+0x65a>
 8019c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c6c:	2a00      	cmp	r2, #0
 8019c6e:	f000 808b 	beq.w	8019d88 <_dtoa_r+0x7e0>
 8019c72:	9a06      	ldr	r2, [sp, #24]
 8019c74:	2a01      	cmp	r2, #1
 8019c76:	dc6e      	bgt.n	8019d56 <_dtoa_r+0x7ae>
 8019c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c7a:	2a00      	cmp	r2, #0
 8019c7c:	d067      	beq.n	8019d4e <_dtoa_r+0x7a6>
 8019c7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019c82:	9f07      	ldr	r7, [sp, #28]
 8019c84:	9d05      	ldr	r5, [sp, #20]
 8019c86:	9a05      	ldr	r2, [sp, #20]
 8019c88:	2101      	movs	r1, #1
 8019c8a:	441a      	add	r2, r3
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	9205      	str	r2, [sp, #20]
 8019c90:	4498      	add	r8, r3
 8019c92:	f000 fc1a 	bl	801a4ca <__i2b>
 8019c96:	4606      	mov	r6, r0
 8019c98:	2d00      	cmp	r5, #0
 8019c9a:	dd0c      	ble.n	8019cb6 <_dtoa_r+0x70e>
 8019c9c:	f1b8 0f00 	cmp.w	r8, #0
 8019ca0:	dd09      	ble.n	8019cb6 <_dtoa_r+0x70e>
 8019ca2:	4545      	cmp	r5, r8
 8019ca4:	9a05      	ldr	r2, [sp, #20]
 8019ca6:	462b      	mov	r3, r5
 8019ca8:	bfa8      	it	ge
 8019caa:	4643      	movge	r3, r8
 8019cac:	1ad2      	subs	r2, r2, r3
 8019cae:	9205      	str	r2, [sp, #20]
 8019cb0:	1aed      	subs	r5, r5, r3
 8019cb2:	eba8 0803 	sub.w	r8, r8, r3
 8019cb6:	9b07      	ldr	r3, [sp, #28]
 8019cb8:	b1eb      	cbz	r3, 8019cf6 <_dtoa_r+0x74e>
 8019cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d067      	beq.n	8019d90 <_dtoa_r+0x7e8>
 8019cc0:	b18f      	cbz	r7, 8019ce6 <_dtoa_r+0x73e>
 8019cc2:	4631      	mov	r1, r6
 8019cc4:	463a      	mov	r2, r7
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f000 fc9e 	bl	801a608 <__pow5mult>
 8019ccc:	9a04      	ldr	r2, [sp, #16]
 8019cce:	4601      	mov	r1, r0
 8019cd0:	4606      	mov	r6, r0
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	f000 fc02 	bl	801a4dc <__multiply>
 8019cd8:	9904      	ldr	r1, [sp, #16]
 8019cda:	9008      	str	r0, [sp, #32]
 8019cdc:	4620      	mov	r0, r4
 8019cde:	f000 fb62 	bl	801a3a6 <_Bfree>
 8019ce2:	9b08      	ldr	r3, [sp, #32]
 8019ce4:	9304      	str	r3, [sp, #16]
 8019ce6:	9b07      	ldr	r3, [sp, #28]
 8019ce8:	1bda      	subs	r2, r3, r7
 8019cea:	d004      	beq.n	8019cf6 <_dtoa_r+0x74e>
 8019cec:	9904      	ldr	r1, [sp, #16]
 8019cee:	4620      	mov	r0, r4
 8019cf0:	f000 fc8a 	bl	801a608 <__pow5mult>
 8019cf4:	9004      	str	r0, [sp, #16]
 8019cf6:	2101      	movs	r1, #1
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	f000 fbe6 	bl	801a4ca <__i2b>
 8019cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d00:	4607      	mov	r7, r0
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	f000 81cf 	beq.w	801a0a6 <_dtoa_r+0xafe>
 8019d08:	461a      	mov	r2, r3
 8019d0a:	4601      	mov	r1, r0
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	f000 fc7b 	bl	801a608 <__pow5mult>
 8019d12:	9b06      	ldr	r3, [sp, #24]
 8019d14:	2b01      	cmp	r3, #1
 8019d16:	4607      	mov	r7, r0
 8019d18:	dc40      	bgt.n	8019d9c <_dtoa_r+0x7f4>
 8019d1a:	9b00      	ldr	r3, [sp, #0]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d139      	bne.n	8019d94 <_dtoa_r+0x7ec>
 8019d20:	9b01      	ldr	r3, [sp, #4]
 8019d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d136      	bne.n	8019d98 <_dtoa_r+0x7f0>
 8019d2a:	9b01      	ldr	r3, [sp, #4]
 8019d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d30:	0d1b      	lsrs	r3, r3, #20
 8019d32:	051b      	lsls	r3, r3, #20
 8019d34:	b12b      	cbz	r3, 8019d42 <_dtoa_r+0x79a>
 8019d36:	9b05      	ldr	r3, [sp, #20]
 8019d38:	3301      	adds	r3, #1
 8019d3a:	9305      	str	r3, [sp, #20]
 8019d3c:	f108 0801 	add.w	r8, r8, #1
 8019d40:	2301      	movs	r3, #1
 8019d42:	9307      	str	r3, [sp, #28]
 8019d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d12a      	bne.n	8019da0 <_dtoa_r+0x7f8>
 8019d4a:	2001      	movs	r0, #1
 8019d4c:	e030      	b.n	8019db0 <_dtoa_r+0x808>
 8019d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019d50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019d54:	e795      	b.n	8019c82 <_dtoa_r+0x6da>
 8019d56:	9b07      	ldr	r3, [sp, #28]
 8019d58:	f109 37ff 	add.w	r7, r9, #4294967295
 8019d5c:	42bb      	cmp	r3, r7
 8019d5e:	bfbf      	itttt	lt
 8019d60:	9b07      	ldrlt	r3, [sp, #28]
 8019d62:	9707      	strlt	r7, [sp, #28]
 8019d64:	1afa      	sublt	r2, r7, r3
 8019d66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8019d68:	bfbb      	ittet	lt
 8019d6a:	189b      	addlt	r3, r3, r2
 8019d6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019d6e:	1bdf      	subge	r7, r3, r7
 8019d70:	2700      	movlt	r7, #0
 8019d72:	f1b9 0f00 	cmp.w	r9, #0
 8019d76:	bfb5      	itete	lt
 8019d78:	9b05      	ldrlt	r3, [sp, #20]
 8019d7a:	9d05      	ldrge	r5, [sp, #20]
 8019d7c:	eba3 0509 	sublt.w	r5, r3, r9
 8019d80:	464b      	movge	r3, r9
 8019d82:	bfb8      	it	lt
 8019d84:	2300      	movlt	r3, #0
 8019d86:	e77e      	b.n	8019c86 <_dtoa_r+0x6de>
 8019d88:	9f07      	ldr	r7, [sp, #28]
 8019d8a:	9d05      	ldr	r5, [sp, #20]
 8019d8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019d8e:	e783      	b.n	8019c98 <_dtoa_r+0x6f0>
 8019d90:	9a07      	ldr	r2, [sp, #28]
 8019d92:	e7ab      	b.n	8019cec <_dtoa_r+0x744>
 8019d94:	2300      	movs	r3, #0
 8019d96:	e7d4      	b.n	8019d42 <_dtoa_r+0x79a>
 8019d98:	9b00      	ldr	r3, [sp, #0]
 8019d9a:	e7d2      	b.n	8019d42 <_dtoa_r+0x79a>
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	9307      	str	r3, [sp, #28]
 8019da0:	693b      	ldr	r3, [r7, #16]
 8019da2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8019da6:	6918      	ldr	r0, [r3, #16]
 8019da8:	f000 fb41 	bl	801a42e <__hi0bits>
 8019dac:	f1c0 0020 	rsb	r0, r0, #32
 8019db0:	4440      	add	r0, r8
 8019db2:	f010 001f 	ands.w	r0, r0, #31
 8019db6:	d047      	beq.n	8019e48 <_dtoa_r+0x8a0>
 8019db8:	f1c0 0320 	rsb	r3, r0, #32
 8019dbc:	2b04      	cmp	r3, #4
 8019dbe:	dd3b      	ble.n	8019e38 <_dtoa_r+0x890>
 8019dc0:	9b05      	ldr	r3, [sp, #20]
 8019dc2:	f1c0 001c 	rsb	r0, r0, #28
 8019dc6:	4403      	add	r3, r0
 8019dc8:	9305      	str	r3, [sp, #20]
 8019dca:	4405      	add	r5, r0
 8019dcc:	4480      	add	r8, r0
 8019dce:	9b05      	ldr	r3, [sp, #20]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	dd05      	ble.n	8019de0 <_dtoa_r+0x838>
 8019dd4:	461a      	mov	r2, r3
 8019dd6:	9904      	ldr	r1, [sp, #16]
 8019dd8:	4620      	mov	r0, r4
 8019dda:	f000 fc55 	bl	801a688 <__lshift>
 8019dde:	9004      	str	r0, [sp, #16]
 8019de0:	f1b8 0f00 	cmp.w	r8, #0
 8019de4:	dd05      	ble.n	8019df2 <_dtoa_r+0x84a>
 8019de6:	4639      	mov	r1, r7
 8019de8:	4642      	mov	r2, r8
 8019dea:	4620      	mov	r0, r4
 8019dec:	f000 fc4c 	bl	801a688 <__lshift>
 8019df0:	4607      	mov	r7, r0
 8019df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019df4:	b353      	cbz	r3, 8019e4c <_dtoa_r+0x8a4>
 8019df6:	4639      	mov	r1, r7
 8019df8:	9804      	ldr	r0, [sp, #16]
 8019dfa:	f000 fc99 	bl	801a730 <__mcmp>
 8019dfe:	2800      	cmp	r0, #0
 8019e00:	da24      	bge.n	8019e4c <_dtoa_r+0x8a4>
 8019e02:	2300      	movs	r3, #0
 8019e04:	220a      	movs	r2, #10
 8019e06:	9904      	ldr	r1, [sp, #16]
 8019e08:	4620      	mov	r0, r4
 8019e0a:	f000 fad5 	bl	801a3b8 <__multadd>
 8019e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e10:	9004      	str	r0, [sp, #16]
 8019e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f000 814c 	beq.w	801a0b4 <_dtoa_r+0xb0c>
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	4631      	mov	r1, r6
 8019e20:	220a      	movs	r2, #10
 8019e22:	4620      	mov	r0, r4
 8019e24:	f000 fac8 	bl	801a3b8 <__multadd>
 8019e28:	9b02      	ldr	r3, [sp, #8]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	4606      	mov	r6, r0
 8019e2e:	dc4f      	bgt.n	8019ed0 <_dtoa_r+0x928>
 8019e30:	9b06      	ldr	r3, [sp, #24]
 8019e32:	2b02      	cmp	r3, #2
 8019e34:	dd4c      	ble.n	8019ed0 <_dtoa_r+0x928>
 8019e36:	e011      	b.n	8019e5c <_dtoa_r+0x8b4>
 8019e38:	d0c9      	beq.n	8019dce <_dtoa_r+0x826>
 8019e3a:	9a05      	ldr	r2, [sp, #20]
 8019e3c:	331c      	adds	r3, #28
 8019e3e:	441a      	add	r2, r3
 8019e40:	9205      	str	r2, [sp, #20]
 8019e42:	441d      	add	r5, r3
 8019e44:	4498      	add	r8, r3
 8019e46:	e7c2      	b.n	8019dce <_dtoa_r+0x826>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	e7f6      	b.n	8019e3a <_dtoa_r+0x892>
 8019e4c:	f1b9 0f00 	cmp.w	r9, #0
 8019e50:	dc38      	bgt.n	8019ec4 <_dtoa_r+0x91c>
 8019e52:	9b06      	ldr	r3, [sp, #24]
 8019e54:	2b02      	cmp	r3, #2
 8019e56:	dd35      	ble.n	8019ec4 <_dtoa_r+0x91c>
 8019e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8019e5c:	9b02      	ldr	r3, [sp, #8]
 8019e5e:	b963      	cbnz	r3, 8019e7a <_dtoa_r+0x8d2>
 8019e60:	4639      	mov	r1, r7
 8019e62:	2205      	movs	r2, #5
 8019e64:	4620      	mov	r0, r4
 8019e66:	f000 faa7 	bl	801a3b8 <__multadd>
 8019e6a:	4601      	mov	r1, r0
 8019e6c:	4607      	mov	r7, r0
 8019e6e:	9804      	ldr	r0, [sp, #16]
 8019e70:	f000 fc5e 	bl	801a730 <__mcmp>
 8019e74:	2800      	cmp	r0, #0
 8019e76:	f73f adcc 	bgt.w	8019a12 <_dtoa_r+0x46a>
 8019e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e7c:	465d      	mov	r5, fp
 8019e7e:	ea6f 0a03 	mvn.w	sl, r3
 8019e82:	f04f 0900 	mov.w	r9, #0
 8019e86:	4639      	mov	r1, r7
 8019e88:	4620      	mov	r0, r4
 8019e8a:	f000 fa8c 	bl	801a3a6 <_Bfree>
 8019e8e:	2e00      	cmp	r6, #0
 8019e90:	f43f aeb7 	beq.w	8019c02 <_dtoa_r+0x65a>
 8019e94:	f1b9 0f00 	cmp.w	r9, #0
 8019e98:	d005      	beq.n	8019ea6 <_dtoa_r+0x8fe>
 8019e9a:	45b1      	cmp	r9, r6
 8019e9c:	d003      	beq.n	8019ea6 <_dtoa_r+0x8fe>
 8019e9e:	4649      	mov	r1, r9
 8019ea0:	4620      	mov	r0, r4
 8019ea2:	f000 fa80 	bl	801a3a6 <_Bfree>
 8019ea6:	4631      	mov	r1, r6
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f000 fa7c 	bl	801a3a6 <_Bfree>
 8019eae:	e6a8      	b.n	8019c02 <_dtoa_r+0x65a>
 8019eb0:	2700      	movs	r7, #0
 8019eb2:	463e      	mov	r6, r7
 8019eb4:	e7e1      	b.n	8019e7a <_dtoa_r+0x8d2>
 8019eb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019eba:	463e      	mov	r6, r7
 8019ebc:	e5a9      	b.n	8019a12 <_dtoa_r+0x46a>
 8019ebe:	bf00      	nop
 8019ec0:	40240000 	.word	0x40240000
 8019ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ec6:	f8cd 9008 	str.w	r9, [sp, #8]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f000 80f9 	beq.w	801a0c2 <_dtoa_r+0xb1a>
 8019ed0:	2d00      	cmp	r5, #0
 8019ed2:	dd05      	ble.n	8019ee0 <_dtoa_r+0x938>
 8019ed4:	4631      	mov	r1, r6
 8019ed6:	462a      	mov	r2, r5
 8019ed8:	4620      	mov	r0, r4
 8019eda:	f000 fbd5 	bl	801a688 <__lshift>
 8019ede:	4606      	mov	r6, r0
 8019ee0:	9b07      	ldr	r3, [sp, #28]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d04c      	beq.n	8019f80 <_dtoa_r+0x9d8>
 8019ee6:	6871      	ldr	r1, [r6, #4]
 8019ee8:	4620      	mov	r0, r4
 8019eea:	f000 fa37 	bl	801a35c <_Balloc>
 8019eee:	6932      	ldr	r2, [r6, #16]
 8019ef0:	3202      	adds	r2, #2
 8019ef2:	4605      	mov	r5, r0
 8019ef4:	0092      	lsls	r2, r2, #2
 8019ef6:	f106 010c 	add.w	r1, r6, #12
 8019efa:	300c      	adds	r0, #12
 8019efc:	f7fd fe7a 	bl	8017bf4 <memcpy>
 8019f00:	2201      	movs	r2, #1
 8019f02:	4629      	mov	r1, r5
 8019f04:	4620      	mov	r0, r4
 8019f06:	f000 fbbf 	bl	801a688 <__lshift>
 8019f0a:	9b00      	ldr	r3, [sp, #0]
 8019f0c:	f8cd b014 	str.w	fp, [sp, #20]
 8019f10:	f003 0301 	and.w	r3, r3, #1
 8019f14:	46b1      	mov	r9, r6
 8019f16:	9307      	str	r3, [sp, #28]
 8019f18:	4606      	mov	r6, r0
 8019f1a:	4639      	mov	r1, r7
 8019f1c:	9804      	ldr	r0, [sp, #16]
 8019f1e:	f7ff fab7 	bl	8019490 <quorem>
 8019f22:	4649      	mov	r1, r9
 8019f24:	4605      	mov	r5, r0
 8019f26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019f2a:	9804      	ldr	r0, [sp, #16]
 8019f2c:	f000 fc00 	bl	801a730 <__mcmp>
 8019f30:	4632      	mov	r2, r6
 8019f32:	9000      	str	r0, [sp, #0]
 8019f34:	4639      	mov	r1, r7
 8019f36:	4620      	mov	r0, r4
 8019f38:	f000 fc14 	bl	801a764 <__mdiff>
 8019f3c:	68c3      	ldr	r3, [r0, #12]
 8019f3e:	4602      	mov	r2, r0
 8019f40:	bb03      	cbnz	r3, 8019f84 <_dtoa_r+0x9dc>
 8019f42:	4601      	mov	r1, r0
 8019f44:	9008      	str	r0, [sp, #32]
 8019f46:	9804      	ldr	r0, [sp, #16]
 8019f48:	f000 fbf2 	bl	801a730 <__mcmp>
 8019f4c:	9a08      	ldr	r2, [sp, #32]
 8019f4e:	4603      	mov	r3, r0
 8019f50:	4611      	mov	r1, r2
 8019f52:	4620      	mov	r0, r4
 8019f54:	9308      	str	r3, [sp, #32]
 8019f56:	f000 fa26 	bl	801a3a6 <_Bfree>
 8019f5a:	9b08      	ldr	r3, [sp, #32]
 8019f5c:	b9a3      	cbnz	r3, 8019f88 <_dtoa_r+0x9e0>
 8019f5e:	9a06      	ldr	r2, [sp, #24]
 8019f60:	b992      	cbnz	r2, 8019f88 <_dtoa_r+0x9e0>
 8019f62:	9a07      	ldr	r2, [sp, #28]
 8019f64:	b982      	cbnz	r2, 8019f88 <_dtoa_r+0x9e0>
 8019f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019f6a:	d029      	beq.n	8019fc0 <_dtoa_r+0xa18>
 8019f6c:	9b00      	ldr	r3, [sp, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	dd01      	ble.n	8019f76 <_dtoa_r+0x9ce>
 8019f72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8019f76:	9b05      	ldr	r3, [sp, #20]
 8019f78:	1c5d      	adds	r5, r3, #1
 8019f7a:	f883 8000 	strb.w	r8, [r3]
 8019f7e:	e782      	b.n	8019e86 <_dtoa_r+0x8de>
 8019f80:	4630      	mov	r0, r6
 8019f82:	e7c2      	b.n	8019f0a <_dtoa_r+0x962>
 8019f84:	2301      	movs	r3, #1
 8019f86:	e7e3      	b.n	8019f50 <_dtoa_r+0x9a8>
 8019f88:	9a00      	ldr	r2, [sp, #0]
 8019f8a:	2a00      	cmp	r2, #0
 8019f8c:	db04      	blt.n	8019f98 <_dtoa_r+0x9f0>
 8019f8e:	d125      	bne.n	8019fdc <_dtoa_r+0xa34>
 8019f90:	9a06      	ldr	r2, [sp, #24]
 8019f92:	bb1a      	cbnz	r2, 8019fdc <_dtoa_r+0xa34>
 8019f94:	9a07      	ldr	r2, [sp, #28]
 8019f96:	bb0a      	cbnz	r2, 8019fdc <_dtoa_r+0xa34>
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	ddec      	ble.n	8019f76 <_dtoa_r+0x9ce>
 8019f9c:	2201      	movs	r2, #1
 8019f9e:	9904      	ldr	r1, [sp, #16]
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	f000 fb71 	bl	801a688 <__lshift>
 8019fa6:	4639      	mov	r1, r7
 8019fa8:	9004      	str	r0, [sp, #16]
 8019faa:	f000 fbc1 	bl	801a730 <__mcmp>
 8019fae:	2800      	cmp	r0, #0
 8019fb0:	dc03      	bgt.n	8019fba <_dtoa_r+0xa12>
 8019fb2:	d1e0      	bne.n	8019f76 <_dtoa_r+0x9ce>
 8019fb4:	f018 0f01 	tst.w	r8, #1
 8019fb8:	d0dd      	beq.n	8019f76 <_dtoa_r+0x9ce>
 8019fba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019fbe:	d1d8      	bne.n	8019f72 <_dtoa_r+0x9ca>
 8019fc0:	9b05      	ldr	r3, [sp, #20]
 8019fc2:	9a05      	ldr	r2, [sp, #20]
 8019fc4:	1c5d      	adds	r5, r3, #1
 8019fc6:	2339      	movs	r3, #57	; 0x39
 8019fc8:	7013      	strb	r3, [r2, #0]
 8019fca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019fce:	2b39      	cmp	r3, #57	; 0x39
 8019fd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8019fd4:	d04f      	beq.n	801a076 <_dtoa_r+0xace>
 8019fd6:	3301      	adds	r3, #1
 8019fd8:	7013      	strb	r3, [r2, #0]
 8019fda:	e754      	b.n	8019e86 <_dtoa_r+0x8de>
 8019fdc:	9a05      	ldr	r2, [sp, #20]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	f102 0501 	add.w	r5, r2, #1
 8019fe4:	dd06      	ble.n	8019ff4 <_dtoa_r+0xa4c>
 8019fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019fea:	d0e9      	beq.n	8019fc0 <_dtoa_r+0xa18>
 8019fec:	f108 0801 	add.w	r8, r8, #1
 8019ff0:	9b05      	ldr	r3, [sp, #20]
 8019ff2:	e7c2      	b.n	8019f7a <_dtoa_r+0x9d2>
 8019ff4:	9a02      	ldr	r2, [sp, #8]
 8019ff6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019ffa:	eba5 030b 	sub.w	r3, r5, fp
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d021      	beq.n	801a046 <_dtoa_r+0xa9e>
 801a002:	2300      	movs	r3, #0
 801a004:	220a      	movs	r2, #10
 801a006:	9904      	ldr	r1, [sp, #16]
 801a008:	4620      	mov	r0, r4
 801a00a:	f000 f9d5 	bl	801a3b8 <__multadd>
 801a00e:	45b1      	cmp	r9, r6
 801a010:	9004      	str	r0, [sp, #16]
 801a012:	f04f 0300 	mov.w	r3, #0
 801a016:	f04f 020a 	mov.w	r2, #10
 801a01a:	4649      	mov	r1, r9
 801a01c:	4620      	mov	r0, r4
 801a01e:	d105      	bne.n	801a02c <_dtoa_r+0xa84>
 801a020:	f000 f9ca 	bl	801a3b8 <__multadd>
 801a024:	4681      	mov	r9, r0
 801a026:	4606      	mov	r6, r0
 801a028:	9505      	str	r5, [sp, #20]
 801a02a:	e776      	b.n	8019f1a <_dtoa_r+0x972>
 801a02c:	f000 f9c4 	bl	801a3b8 <__multadd>
 801a030:	4631      	mov	r1, r6
 801a032:	4681      	mov	r9, r0
 801a034:	2300      	movs	r3, #0
 801a036:	220a      	movs	r2, #10
 801a038:	4620      	mov	r0, r4
 801a03a:	f000 f9bd 	bl	801a3b8 <__multadd>
 801a03e:	4606      	mov	r6, r0
 801a040:	e7f2      	b.n	801a028 <_dtoa_r+0xa80>
 801a042:	f04f 0900 	mov.w	r9, #0
 801a046:	2201      	movs	r2, #1
 801a048:	9904      	ldr	r1, [sp, #16]
 801a04a:	4620      	mov	r0, r4
 801a04c:	f000 fb1c 	bl	801a688 <__lshift>
 801a050:	4639      	mov	r1, r7
 801a052:	9004      	str	r0, [sp, #16]
 801a054:	f000 fb6c 	bl	801a730 <__mcmp>
 801a058:	2800      	cmp	r0, #0
 801a05a:	dcb6      	bgt.n	8019fca <_dtoa_r+0xa22>
 801a05c:	d102      	bne.n	801a064 <_dtoa_r+0xabc>
 801a05e:	f018 0f01 	tst.w	r8, #1
 801a062:	d1b2      	bne.n	8019fca <_dtoa_r+0xa22>
 801a064:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a068:	2b30      	cmp	r3, #48	; 0x30
 801a06a:	f105 32ff 	add.w	r2, r5, #4294967295
 801a06e:	f47f af0a 	bne.w	8019e86 <_dtoa_r+0x8de>
 801a072:	4615      	mov	r5, r2
 801a074:	e7f6      	b.n	801a064 <_dtoa_r+0xabc>
 801a076:	4593      	cmp	fp, r2
 801a078:	d105      	bne.n	801a086 <_dtoa_r+0xade>
 801a07a:	2331      	movs	r3, #49	; 0x31
 801a07c:	f10a 0a01 	add.w	sl, sl, #1
 801a080:	f88b 3000 	strb.w	r3, [fp]
 801a084:	e6ff      	b.n	8019e86 <_dtoa_r+0x8de>
 801a086:	4615      	mov	r5, r2
 801a088:	e79f      	b.n	8019fca <_dtoa_r+0xa22>
 801a08a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801a0f0 <_dtoa_r+0xb48>
 801a08e:	f7ff bac5 	b.w	801961c <_dtoa_r+0x74>
 801a092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a094:	f8df b05c 	ldr.w	fp, [pc, #92]	; 801a0f4 <_dtoa_r+0xb4c>
 801a098:	2b00      	cmp	r3, #0
 801a09a:	f43f aabf 	beq.w	801961c <_dtoa_r+0x74>
 801a09e:	f10b 0308 	add.w	r3, fp, #8
 801a0a2:	f7ff bab9 	b.w	8019618 <_dtoa_r+0x70>
 801a0a6:	9b06      	ldr	r3, [sp, #24]
 801a0a8:	2b01      	cmp	r3, #1
 801a0aa:	f77f ae36 	ble.w	8019d1a <_dtoa_r+0x772>
 801a0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0b0:	9307      	str	r3, [sp, #28]
 801a0b2:	e64a      	b.n	8019d4a <_dtoa_r+0x7a2>
 801a0b4:	9b02      	ldr	r3, [sp, #8]
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	dc03      	bgt.n	801a0c2 <_dtoa_r+0xb1a>
 801a0ba:	9b06      	ldr	r3, [sp, #24]
 801a0bc:	2b02      	cmp	r3, #2
 801a0be:	f73f aecd 	bgt.w	8019e5c <_dtoa_r+0x8b4>
 801a0c2:	465d      	mov	r5, fp
 801a0c4:	4639      	mov	r1, r7
 801a0c6:	9804      	ldr	r0, [sp, #16]
 801a0c8:	f7ff f9e2 	bl	8019490 <quorem>
 801a0cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a0d0:	f805 8b01 	strb.w	r8, [r5], #1
 801a0d4:	9a02      	ldr	r2, [sp, #8]
 801a0d6:	eba5 030b 	sub.w	r3, r5, fp
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	ddb1      	ble.n	801a042 <_dtoa_r+0xa9a>
 801a0de:	2300      	movs	r3, #0
 801a0e0:	220a      	movs	r2, #10
 801a0e2:	9904      	ldr	r1, [sp, #16]
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	f000 f967 	bl	801a3b8 <__multadd>
 801a0ea:	9004      	str	r0, [sp, #16]
 801a0ec:	e7ea      	b.n	801a0c4 <_dtoa_r+0xb1c>
 801a0ee:	bf00      	nop
 801a0f0:	08038146 	.word	0x08038146
 801a0f4:	08038168 	.word	0x08038168

0801a0f8 <__libc_fini_array>:
 801a0f8:	b538      	push	{r3, r4, r5, lr}
 801a0fa:	4d07      	ldr	r5, [pc, #28]	; (801a118 <__libc_fini_array+0x20>)
 801a0fc:	4c07      	ldr	r4, [pc, #28]	; (801a11c <__libc_fini_array+0x24>)
 801a0fe:	1b64      	subs	r4, r4, r5
 801a100:	10a4      	asrs	r4, r4, #2
 801a102:	b91c      	cbnz	r4, 801a10c <__libc_fini_array+0x14>
 801a104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a108:	f000 bd26 	b.w	801ab58 <_fini>
 801a10c:	3c01      	subs	r4, #1
 801a10e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a112:	4798      	blx	r3
 801a114:	e7f5      	b.n	801a102 <__libc_fini_array+0xa>
 801a116:	bf00      	nop
 801a118:	08038398 	.word	0x08038398
 801a11c:	080383a0 	.word	0x080383a0

0801a120 <_malloc_trim_r>:
 801a120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a124:	4605      	mov	r5, r0
 801a126:	2008      	movs	r0, #8
 801a128:	460c      	mov	r4, r1
 801a12a:	f7ff f993 	bl	8019454 <sysconf>
 801a12e:	4f23      	ldr	r7, [pc, #140]	; (801a1bc <_malloc_trim_r+0x9c>)
 801a130:	4680      	mov	r8, r0
 801a132:	4628      	mov	r0, r5
 801a134:	f7fd fd8a 	bl	8017c4c <__malloc_lock>
 801a138:	68bb      	ldr	r3, [r7, #8]
 801a13a:	685e      	ldr	r6, [r3, #4]
 801a13c:	f026 0603 	bic.w	r6, r6, #3
 801a140:	1b34      	subs	r4, r6, r4
 801a142:	3c11      	subs	r4, #17
 801a144:	4444      	add	r4, r8
 801a146:	fbb4 f4f8 	udiv	r4, r4, r8
 801a14a:	3c01      	subs	r4, #1
 801a14c:	fb08 f404 	mul.w	r4, r8, r4
 801a150:	45a0      	cmp	r8, r4
 801a152:	dd05      	ble.n	801a160 <_malloc_trim_r+0x40>
 801a154:	4628      	mov	r0, r5
 801a156:	f7fd fd7f 	bl	8017c58 <__malloc_unlock>
 801a15a:	2000      	movs	r0, #0
 801a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a160:	2100      	movs	r1, #0
 801a162:	4628      	mov	r0, r5
 801a164:	f7fd ff26 	bl	8017fb4 <_sbrk_r>
 801a168:	68bb      	ldr	r3, [r7, #8]
 801a16a:	4433      	add	r3, r6
 801a16c:	4298      	cmp	r0, r3
 801a16e:	d1f1      	bne.n	801a154 <_malloc_trim_r+0x34>
 801a170:	4261      	negs	r1, r4
 801a172:	4628      	mov	r0, r5
 801a174:	f7fd ff1e 	bl	8017fb4 <_sbrk_r>
 801a178:	3001      	adds	r0, #1
 801a17a:	d110      	bne.n	801a19e <_malloc_trim_r+0x7e>
 801a17c:	2100      	movs	r1, #0
 801a17e:	4628      	mov	r0, r5
 801a180:	f7fd ff18 	bl	8017fb4 <_sbrk_r>
 801a184:	68ba      	ldr	r2, [r7, #8]
 801a186:	1a83      	subs	r3, r0, r2
 801a188:	2b0f      	cmp	r3, #15
 801a18a:	dde3      	ble.n	801a154 <_malloc_trim_r+0x34>
 801a18c:	490c      	ldr	r1, [pc, #48]	; (801a1c0 <_malloc_trim_r+0xa0>)
 801a18e:	6809      	ldr	r1, [r1, #0]
 801a190:	1a40      	subs	r0, r0, r1
 801a192:	490c      	ldr	r1, [pc, #48]	; (801a1c4 <_malloc_trim_r+0xa4>)
 801a194:	f043 0301 	orr.w	r3, r3, #1
 801a198:	6008      	str	r0, [r1, #0]
 801a19a:	6053      	str	r3, [r2, #4]
 801a19c:	e7da      	b.n	801a154 <_malloc_trim_r+0x34>
 801a19e:	68bb      	ldr	r3, [r7, #8]
 801a1a0:	4a08      	ldr	r2, [pc, #32]	; (801a1c4 <_malloc_trim_r+0xa4>)
 801a1a2:	1b36      	subs	r6, r6, r4
 801a1a4:	f046 0601 	orr.w	r6, r6, #1
 801a1a8:	605e      	str	r6, [r3, #4]
 801a1aa:	6813      	ldr	r3, [r2, #0]
 801a1ac:	4628      	mov	r0, r5
 801a1ae:	1b1c      	subs	r4, r3, r4
 801a1b0:	6014      	str	r4, [r2, #0]
 801a1b2:	f7fd fd51 	bl	8017c58 <__malloc_unlock>
 801a1b6:	2001      	movs	r0, #1
 801a1b8:	e7d0      	b.n	801a15c <_malloc_trim_r+0x3c>
 801a1ba:	bf00      	nop
 801a1bc:	2000a200 	.word	0x2000a200
 801a1c0:	2000a608 	.word	0x2000a608
 801a1c4:	20021254 	.word	0x20021254

0801a1c8 <_free_r>:
 801a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	4688      	mov	r8, r1
 801a1d0:	2900      	cmp	r1, #0
 801a1d2:	f000 80ab 	beq.w	801a32c <_free_r+0x164>
 801a1d6:	f7fd fd39 	bl	8017c4c <__malloc_lock>
 801a1da:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801a1de:	4d54      	ldr	r5, [pc, #336]	; (801a330 <_free_r+0x168>)
 801a1e0:	f022 0001 	bic.w	r0, r2, #1
 801a1e4:	f1a8 0308 	sub.w	r3, r8, #8
 801a1e8:	181f      	adds	r7, r3, r0
 801a1ea:	68a9      	ldr	r1, [r5, #8]
 801a1ec:	687e      	ldr	r6, [r7, #4]
 801a1ee:	42b9      	cmp	r1, r7
 801a1f0:	f026 0603 	bic.w	r6, r6, #3
 801a1f4:	f002 0201 	and.w	r2, r2, #1
 801a1f8:	d11b      	bne.n	801a232 <_free_r+0x6a>
 801a1fa:	4430      	add	r0, r6
 801a1fc:	b93a      	cbnz	r2, 801a20e <_free_r+0x46>
 801a1fe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801a202:	1a9b      	subs	r3, r3, r2
 801a204:	4410      	add	r0, r2
 801a206:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801a20a:	60ca      	str	r2, [r1, #12]
 801a20c:	6091      	str	r1, [r2, #8]
 801a20e:	f040 0201 	orr.w	r2, r0, #1
 801a212:	605a      	str	r2, [r3, #4]
 801a214:	60ab      	str	r3, [r5, #8]
 801a216:	4b47      	ldr	r3, [pc, #284]	; (801a334 <_free_r+0x16c>)
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	4283      	cmp	r3, r0
 801a21c:	d804      	bhi.n	801a228 <_free_r+0x60>
 801a21e:	4b46      	ldr	r3, [pc, #280]	; (801a338 <_free_r+0x170>)
 801a220:	4620      	mov	r0, r4
 801a222:	6819      	ldr	r1, [r3, #0]
 801a224:	f7ff ff7c 	bl	801a120 <_malloc_trim_r>
 801a228:	4620      	mov	r0, r4
 801a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a22e:	f7fd bd13 	b.w	8017c58 <__malloc_unlock>
 801a232:	607e      	str	r6, [r7, #4]
 801a234:	2a00      	cmp	r2, #0
 801a236:	d139      	bne.n	801a2ac <_free_r+0xe4>
 801a238:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801a23c:	1a5b      	subs	r3, r3, r1
 801a23e:	4408      	add	r0, r1
 801a240:	6899      	ldr	r1, [r3, #8]
 801a242:	f105 0c08 	add.w	ip, r5, #8
 801a246:	4561      	cmp	r1, ip
 801a248:	d032      	beq.n	801a2b0 <_free_r+0xe8>
 801a24a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801a24e:	f8c1 c00c 	str.w	ip, [r1, #12]
 801a252:	f8cc 1008 	str.w	r1, [ip, #8]
 801a256:	19b9      	adds	r1, r7, r6
 801a258:	6849      	ldr	r1, [r1, #4]
 801a25a:	07c9      	lsls	r1, r1, #31
 801a25c:	d40a      	bmi.n	801a274 <_free_r+0xac>
 801a25e:	4430      	add	r0, r6
 801a260:	68b9      	ldr	r1, [r7, #8]
 801a262:	bb3a      	cbnz	r2, 801a2b4 <_free_r+0xec>
 801a264:	4e35      	ldr	r6, [pc, #212]	; (801a33c <_free_r+0x174>)
 801a266:	42b1      	cmp	r1, r6
 801a268:	d124      	bne.n	801a2b4 <_free_r+0xec>
 801a26a:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801a26e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801a272:	2201      	movs	r2, #1
 801a274:	f040 0101 	orr.w	r1, r0, #1
 801a278:	6059      	str	r1, [r3, #4]
 801a27a:	5018      	str	r0, [r3, r0]
 801a27c:	2a00      	cmp	r2, #0
 801a27e:	d1d3      	bne.n	801a228 <_free_r+0x60>
 801a280:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 801a284:	d21a      	bcs.n	801a2bc <_free_r+0xf4>
 801a286:	08c0      	lsrs	r0, r0, #3
 801a288:	1081      	asrs	r1, r0, #2
 801a28a:	2201      	movs	r2, #1
 801a28c:	408a      	lsls	r2, r1
 801a28e:	6869      	ldr	r1, [r5, #4]
 801a290:	3001      	adds	r0, #1
 801a292:	430a      	orrs	r2, r1
 801a294:	606a      	str	r2, [r5, #4]
 801a296:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 801a29a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801a29e:	3a08      	subs	r2, #8
 801a2a0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 801a2a4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801a2a8:	60cb      	str	r3, [r1, #12]
 801a2aa:	e7bd      	b.n	801a228 <_free_r+0x60>
 801a2ac:	2200      	movs	r2, #0
 801a2ae:	e7d2      	b.n	801a256 <_free_r+0x8e>
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	e7d0      	b.n	801a256 <_free_r+0x8e>
 801a2b4:	68fe      	ldr	r6, [r7, #12]
 801a2b6:	60ce      	str	r6, [r1, #12]
 801a2b8:	60b1      	str	r1, [r6, #8]
 801a2ba:	e7db      	b.n	801a274 <_free_r+0xac>
 801a2bc:	0a42      	lsrs	r2, r0, #9
 801a2be:	2a04      	cmp	r2, #4
 801a2c0:	d813      	bhi.n	801a2ea <_free_r+0x122>
 801a2c2:	0982      	lsrs	r2, r0, #6
 801a2c4:	3238      	adds	r2, #56	; 0x38
 801a2c6:	1c51      	adds	r1, r2, #1
 801a2c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801a2cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801a2d0:	428e      	cmp	r6, r1
 801a2d2:	d124      	bne.n	801a31e <_free_r+0x156>
 801a2d4:	2001      	movs	r0, #1
 801a2d6:	1092      	asrs	r2, r2, #2
 801a2d8:	fa00 f202 	lsl.w	r2, r0, r2
 801a2dc:	6868      	ldr	r0, [r5, #4]
 801a2de:	4302      	orrs	r2, r0
 801a2e0:	606a      	str	r2, [r5, #4]
 801a2e2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801a2e6:	60b3      	str	r3, [r6, #8]
 801a2e8:	e7de      	b.n	801a2a8 <_free_r+0xe0>
 801a2ea:	2a14      	cmp	r2, #20
 801a2ec:	d801      	bhi.n	801a2f2 <_free_r+0x12a>
 801a2ee:	325b      	adds	r2, #91	; 0x5b
 801a2f0:	e7e9      	b.n	801a2c6 <_free_r+0xfe>
 801a2f2:	2a54      	cmp	r2, #84	; 0x54
 801a2f4:	d802      	bhi.n	801a2fc <_free_r+0x134>
 801a2f6:	0b02      	lsrs	r2, r0, #12
 801a2f8:	326e      	adds	r2, #110	; 0x6e
 801a2fa:	e7e4      	b.n	801a2c6 <_free_r+0xfe>
 801a2fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801a300:	d802      	bhi.n	801a308 <_free_r+0x140>
 801a302:	0bc2      	lsrs	r2, r0, #15
 801a304:	3277      	adds	r2, #119	; 0x77
 801a306:	e7de      	b.n	801a2c6 <_free_r+0xfe>
 801a308:	f240 5154 	movw	r1, #1364	; 0x554
 801a30c:	428a      	cmp	r2, r1
 801a30e:	bf9a      	itte	ls
 801a310:	0c82      	lsrls	r2, r0, #18
 801a312:	327c      	addls	r2, #124	; 0x7c
 801a314:	227e      	movhi	r2, #126	; 0x7e
 801a316:	e7d6      	b.n	801a2c6 <_free_r+0xfe>
 801a318:	6889      	ldr	r1, [r1, #8]
 801a31a:	428e      	cmp	r6, r1
 801a31c:	d004      	beq.n	801a328 <_free_r+0x160>
 801a31e:	684a      	ldr	r2, [r1, #4]
 801a320:	f022 0203 	bic.w	r2, r2, #3
 801a324:	4282      	cmp	r2, r0
 801a326:	d8f7      	bhi.n	801a318 <_free_r+0x150>
 801a328:	68ce      	ldr	r6, [r1, #12]
 801a32a:	e7da      	b.n	801a2e2 <_free_r+0x11a>
 801a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a330:	2000a200 	.word	0x2000a200
 801a334:	2000a60c 	.word	0x2000a60c
 801a338:	20021284 	.word	0x20021284
 801a33c:	2000a208 	.word	0x2000a208

0801a340 <_localeconv_r>:
 801a340:	4b04      	ldr	r3, [pc, #16]	; (801a354 <_localeconv_r+0x14>)
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801a346:	4b04      	ldr	r3, [pc, #16]	; (801a358 <_localeconv_r+0x18>)
 801a348:	2800      	cmp	r0, #0
 801a34a:	bf08      	it	eq
 801a34c:	4618      	moveq	r0, r3
 801a34e:	30f0      	adds	r0, #240	; 0xf0
 801a350:	4770      	bx	lr
 801a352:	bf00      	nop
 801a354:	20009dd0 	.word	0x20009dd0
 801a358:	2000a614 	.word	0x2000a614

0801a35c <_Balloc>:
 801a35c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a35e:	b570      	push	{r4, r5, r6, lr}
 801a360:	4605      	mov	r5, r0
 801a362:	460c      	mov	r4, r1
 801a364:	b17b      	cbz	r3, 801a386 <_Balloc+0x2a>
 801a366:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801a368:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a36c:	b9a0      	cbnz	r0, 801a398 <_Balloc+0x3c>
 801a36e:	2101      	movs	r1, #1
 801a370:	fa01 f604 	lsl.w	r6, r1, r4
 801a374:	1d72      	adds	r2, r6, #5
 801a376:	0092      	lsls	r2, r2, #2
 801a378:	4628      	mov	r0, r5
 801a37a:	f7fd f99b 	bl	80176b4 <_calloc_r>
 801a37e:	b148      	cbz	r0, 801a394 <_Balloc+0x38>
 801a380:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801a384:	e00b      	b.n	801a39e <_Balloc+0x42>
 801a386:	2221      	movs	r2, #33	; 0x21
 801a388:	2104      	movs	r1, #4
 801a38a:	f7fd f993 	bl	80176b4 <_calloc_r>
 801a38e:	64e8      	str	r0, [r5, #76]	; 0x4c
 801a390:	2800      	cmp	r0, #0
 801a392:	d1e8      	bne.n	801a366 <_Balloc+0xa>
 801a394:	2000      	movs	r0, #0
 801a396:	bd70      	pop	{r4, r5, r6, pc}
 801a398:	6802      	ldr	r2, [r0, #0]
 801a39a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801a39e:	2300      	movs	r3, #0
 801a3a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a3a4:	e7f7      	b.n	801a396 <_Balloc+0x3a>

0801a3a6 <_Bfree>:
 801a3a6:	b131      	cbz	r1, 801a3b6 <_Bfree+0x10>
 801a3a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a3aa:	684a      	ldr	r2, [r1, #4]
 801a3ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a3b0:	6008      	str	r0, [r1, #0]
 801a3b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801a3b6:	4770      	bx	lr

0801a3b8 <__multadd>:
 801a3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3bc:	690d      	ldr	r5, [r1, #16]
 801a3be:	461f      	mov	r7, r3
 801a3c0:	4606      	mov	r6, r0
 801a3c2:	460c      	mov	r4, r1
 801a3c4:	f101 0c14 	add.w	ip, r1, #20
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	f8dc 0000 	ldr.w	r0, [ip]
 801a3ce:	b281      	uxth	r1, r0
 801a3d0:	fb02 7101 	mla	r1, r2, r1, r7
 801a3d4:	0c0f      	lsrs	r7, r1, #16
 801a3d6:	0c00      	lsrs	r0, r0, #16
 801a3d8:	fb02 7000 	mla	r0, r2, r0, r7
 801a3dc:	b289      	uxth	r1, r1
 801a3de:	3301      	adds	r3, #1
 801a3e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801a3e4:	429d      	cmp	r5, r3
 801a3e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801a3ea:	f84c 1b04 	str.w	r1, [ip], #4
 801a3ee:	dcec      	bgt.n	801a3ca <__multadd+0x12>
 801a3f0:	b1d7      	cbz	r7, 801a428 <__multadd+0x70>
 801a3f2:	68a3      	ldr	r3, [r4, #8]
 801a3f4:	42ab      	cmp	r3, r5
 801a3f6:	dc12      	bgt.n	801a41e <__multadd+0x66>
 801a3f8:	6861      	ldr	r1, [r4, #4]
 801a3fa:	4630      	mov	r0, r6
 801a3fc:	3101      	adds	r1, #1
 801a3fe:	f7ff ffad 	bl	801a35c <_Balloc>
 801a402:	6922      	ldr	r2, [r4, #16]
 801a404:	3202      	adds	r2, #2
 801a406:	f104 010c 	add.w	r1, r4, #12
 801a40a:	4680      	mov	r8, r0
 801a40c:	0092      	lsls	r2, r2, #2
 801a40e:	300c      	adds	r0, #12
 801a410:	f7fd fbf0 	bl	8017bf4 <memcpy>
 801a414:	4621      	mov	r1, r4
 801a416:	4630      	mov	r0, r6
 801a418:	f7ff ffc5 	bl	801a3a6 <_Bfree>
 801a41c:	4644      	mov	r4, r8
 801a41e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a422:	3501      	adds	r5, #1
 801a424:	615f      	str	r7, [r3, #20]
 801a426:	6125      	str	r5, [r4, #16]
 801a428:	4620      	mov	r0, r4
 801a42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a42e <__hi0bits>:
 801a42e:	0c02      	lsrs	r2, r0, #16
 801a430:	0412      	lsls	r2, r2, #16
 801a432:	4603      	mov	r3, r0
 801a434:	b9b2      	cbnz	r2, 801a464 <__hi0bits+0x36>
 801a436:	0403      	lsls	r3, r0, #16
 801a438:	2010      	movs	r0, #16
 801a43a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a43e:	bf04      	itt	eq
 801a440:	021b      	lsleq	r3, r3, #8
 801a442:	3008      	addeq	r0, #8
 801a444:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a448:	bf04      	itt	eq
 801a44a:	011b      	lsleq	r3, r3, #4
 801a44c:	3004      	addeq	r0, #4
 801a44e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a452:	bf04      	itt	eq
 801a454:	009b      	lsleq	r3, r3, #2
 801a456:	3002      	addeq	r0, #2
 801a458:	2b00      	cmp	r3, #0
 801a45a:	db06      	blt.n	801a46a <__hi0bits+0x3c>
 801a45c:	005b      	lsls	r3, r3, #1
 801a45e:	d503      	bpl.n	801a468 <__hi0bits+0x3a>
 801a460:	3001      	adds	r0, #1
 801a462:	4770      	bx	lr
 801a464:	2000      	movs	r0, #0
 801a466:	e7e8      	b.n	801a43a <__hi0bits+0xc>
 801a468:	2020      	movs	r0, #32
 801a46a:	4770      	bx	lr

0801a46c <__lo0bits>:
 801a46c:	6803      	ldr	r3, [r0, #0]
 801a46e:	f013 0207 	ands.w	r2, r3, #7
 801a472:	4601      	mov	r1, r0
 801a474:	d00b      	beq.n	801a48e <__lo0bits+0x22>
 801a476:	07da      	lsls	r2, r3, #31
 801a478:	d423      	bmi.n	801a4c2 <__lo0bits+0x56>
 801a47a:	0798      	lsls	r0, r3, #30
 801a47c:	bf49      	itett	mi
 801a47e:	085b      	lsrmi	r3, r3, #1
 801a480:	089b      	lsrpl	r3, r3, #2
 801a482:	2001      	movmi	r0, #1
 801a484:	600b      	strmi	r3, [r1, #0]
 801a486:	bf5c      	itt	pl
 801a488:	600b      	strpl	r3, [r1, #0]
 801a48a:	2002      	movpl	r0, #2
 801a48c:	4770      	bx	lr
 801a48e:	b298      	uxth	r0, r3
 801a490:	b9a8      	cbnz	r0, 801a4be <__lo0bits+0x52>
 801a492:	0c1b      	lsrs	r3, r3, #16
 801a494:	2010      	movs	r0, #16
 801a496:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a49a:	bf04      	itt	eq
 801a49c:	0a1b      	lsreq	r3, r3, #8
 801a49e:	3008      	addeq	r0, #8
 801a4a0:	071a      	lsls	r2, r3, #28
 801a4a2:	bf04      	itt	eq
 801a4a4:	091b      	lsreq	r3, r3, #4
 801a4a6:	3004      	addeq	r0, #4
 801a4a8:	079a      	lsls	r2, r3, #30
 801a4aa:	bf04      	itt	eq
 801a4ac:	089b      	lsreq	r3, r3, #2
 801a4ae:	3002      	addeq	r0, #2
 801a4b0:	07da      	lsls	r2, r3, #31
 801a4b2:	d402      	bmi.n	801a4ba <__lo0bits+0x4e>
 801a4b4:	085b      	lsrs	r3, r3, #1
 801a4b6:	d006      	beq.n	801a4c6 <__lo0bits+0x5a>
 801a4b8:	3001      	adds	r0, #1
 801a4ba:	600b      	str	r3, [r1, #0]
 801a4bc:	4770      	bx	lr
 801a4be:	4610      	mov	r0, r2
 801a4c0:	e7e9      	b.n	801a496 <__lo0bits+0x2a>
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	4770      	bx	lr
 801a4c6:	2020      	movs	r0, #32
 801a4c8:	4770      	bx	lr

0801a4ca <__i2b>:
 801a4ca:	b510      	push	{r4, lr}
 801a4cc:	460c      	mov	r4, r1
 801a4ce:	2101      	movs	r1, #1
 801a4d0:	f7ff ff44 	bl	801a35c <_Balloc>
 801a4d4:	2201      	movs	r2, #1
 801a4d6:	6144      	str	r4, [r0, #20]
 801a4d8:	6102      	str	r2, [r0, #16]
 801a4da:	bd10      	pop	{r4, pc}

0801a4dc <__multiply>:
 801a4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e0:	4614      	mov	r4, r2
 801a4e2:	690a      	ldr	r2, [r1, #16]
 801a4e4:	6923      	ldr	r3, [r4, #16]
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	bfb8      	it	lt
 801a4ea:	460b      	movlt	r3, r1
 801a4ec:	4688      	mov	r8, r1
 801a4ee:	bfbc      	itt	lt
 801a4f0:	46a0      	movlt	r8, r4
 801a4f2:	461c      	movlt	r4, r3
 801a4f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a4f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a4fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a504:	eb07 0609 	add.w	r6, r7, r9
 801a508:	42b3      	cmp	r3, r6
 801a50a:	bfb8      	it	lt
 801a50c:	3101      	addlt	r1, #1
 801a50e:	f7ff ff25 	bl	801a35c <_Balloc>
 801a512:	f100 0514 	add.w	r5, r0, #20
 801a516:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801a51a:	462b      	mov	r3, r5
 801a51c:	2200      	movs	r2, #0
 801a51e:	4573      	cmp	r3, lr
 801a520:	d316      	bcc.n	801a550 <__multiply+0x74>
 801a522:	f104 0214 	add.w	r2, r4, #20
 801a526:	f108 0114 	add.w	r1, r8, #20
 801a52a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a52e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a532:	9300      	str	r3, [sp, #0]
 801a534:	9b00      	ldr	r3, [sp, #0]
 801a536:	9201      	str	r2, [sp, #4]
 801a538:	4293      	cmp	r3, r2
 801a53a:	d80c      	bhi.n	801a556 <__multiply+0x7a>
 801a53c:	2e00      	cmp	r6, #0
 801a53e:	dd03      	ble.n	801a548 <__multiply+0x6c>
 801a540:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a544:	2b00      	cmp	r3, #0
 801a546:	d05d      	beq.n	801a604 <__multiply+0x128>
 801a548:	6106      	str	r6, [r0, #16]
 801a54a:	b003      	add	sp, #12
 801a54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a550:	f843 2b04 	str.w	r2, [r3], #4
 801a554:	e7e3      	b.n	801a51e <__multiply+0x42>
 801a556:	f8b2 b000 	ldrh.w	fp, [r2]
 801a55a:	f1bb 0f00 	cmp.w	fp, #0
 801a55e:	d023      	beq.n	801a5a8 <__multiply+0xcc>
 801a560:	4689      	mov	r9, r1
 801a562:	46ac      	mov	ip, r5
 801a564:	f04f 0800 	mov.w	r8, #0
 801a568:	f859 4b04 	ldr.w	r4, [r9], #4
 801a56c:	f8dc a000 	ldr.w	sl, [ip]
 801a570:	b2a3      	uxth	r3, r4
 801a572:	fa1f fa8a 	uxth.w	sl, sl
 801a576:	fb0b a303 	mla	r3, fp, r3, sl
 801a57a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a57e:	f8dc 4000 	ldr.w	r4, [ip]
 801a582:	4443      	add	r3, r8
 801a584:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a588:	fb0b 840a 	mla	r4, fp, sl, r8
 801a58c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a590:	46e2      	mov	sl, ip
 801a592:	b29b      	uxth	r3, r3
 801a594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a598:	454f      	cmp	r7, r9
 801a59a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a59e:	f84a 3b04 	str.w	r3, [sl], #4
 801a5a2:	d82b      	bhi.n	801a5fc <__multiply+0x120>
 801a5a4:	f8cc 8004 	str.w	r8, [ip, #4]
 801a5a8:	9b01      	ldr	r3, [sp, #4]
 801a5aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a5ae:	3204      	adds	r2, #4
 801a5b0:	f1ba 0f00 	cmp.w	sl, #0
 801a5b4:	d020      	beq.n	801a5f8 <__multiply+0x11c>
 801a5b6:	682b      	ldr	r3, [r5, #0]
 801a5b8:	4689      	mov	r9, r1
 801a5ba:	46a8      	mov	r8, r5
 801a5bc:	f04f 0b00 	mov.w	fp, #0
 801a5c0:	f8b9 c000 	ldrh.w	ip, [r9]
 801a5c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801a5c8:	fb0a 440c 	mla	r4, sl, ip, r4
 801a5cc:	445c      	add	r4, fp
 801a5ce:	46c4      	mov	ip, r8
 801a5d0:	b29b      	uxth	r3, r3
 801a5d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a5d6:	f84c 3b04 	str.w	r3, [ip], #4
 801a5da:	f859 3b04 	ldr.w	r3, [r9], #4
 801a5de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801a5e2:	0c1b      	lsrs	r3, r3, #16
 801a5e4:	fb0a b303 	mla	r3, sl, r3, fp
 801a5e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a5ec:	454f      	cmp	r7, r9
 801a5ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801a5f2:	d805      	bhi.n	801a600 <__multiply+0x124>
 801a5f4:	f8c8 3004 	str.w	r3, [r8, #4]
 801a5f8:	3504      	adds	r5, #4
 801a5fa:	e79b      	b.n	801a534 <__multiply+0x58>
 801a5fc:	46d4      	mov	ip, sl
 801a5fe:	e7b3      	b.n	801a568 <__multiply+0x8c>
 801a600:	46e0      	mov	r8, ip
 801a602:	e7dd      	b.n	801a5c0 <__multiply+0xe4>
 801a604:	3e01      	subs	r6, #1
 801a606:	e799      	b.n	801a53c <__multiply+0x60>

0801a608 <__pow5mult>:
 801a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a60c:	4615      	mov	r5, r2
 801a60e:	f012 0203 	ands.w	r2, r2, #3
 801a612:	4606      	mov	r6, r0
 801a614:	460f      	mov	r7, r1
 801a616:	d007      	beq.n	801a628 <__pow5mult+0x20>
 801a618:	3a01      	subs	r2, #1
 801a61a:	4c1a      	ldr	r4, [pc, #104]	; (801a684 <__pow5mult+0x7c>)
 801a61c:	2300      	movs	r3, #0
 801a61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a622:	f7ff fec9 	bl	801a3b8 <__multadd>
 801a626:	4607      	mov	r7, r0
 801a628:	10ad      	asrs	r5, r5, #2
 801a62a:	d027      	beq.n	801a67c <__pow5mult+0x74>
 801a62c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801a62e:	b944      	cbnz	r4, 801a642 <__pow5mult+0x3a>
 801a630:	f240 2171 	movw	r1, #625	; 0x271
 801a634:	4630      	mov	r0, r6
 801a636:	f7ff ff48 	bl	801a4ca <__i2b>
 801a63a:	2300      	movs	r3, #0
 801a63c:	64b0      	str	r0, [r6, #72]	; 0x48
 801a63e:	4604      	mov	r4, r0
 801a640:	6003      	str	r3, [r0, #0]
 801a642:	f04f 0800 	mov.w	r8, #0
 801a646:	07eb      	lsls	r3, r5, #31
 801a648:	d50a      	bpl.n	801a660 <__pow5mult+0x58>
 801a64a:	4639      	mov	r1, r7
 801a64c:	4622      	mov	r2, r4
 801a64e:	4630      	mov	r0, r6
 801a650:	f7ff ff44 	bl	801a4dc <__multiply>
 801a654:	4639      	mov	r1, r7
 801a656:	4681      	mov	r9, r0
 801a658:	4630      	mov	r0, r6
 801a65a:	f7ff fea4 	bl	801a3a6 <_Bfree>
 801a65e:	464f      	mov	r7, r9
 801a660:	106d      	asrs	r5, r5, #1
 801a662:	d00b      	beq.n	801a67c <__pow5mult+0x74>
 801a664:	6820      	ldr	r0, [r4, #0]
 801a666:	b938      	cbnz	r0, 801a678 <__pow5mult+0x70>
 801a668:	4622      	mov	r2, r4
 801a66a:	4621      	mov	r1, r4
 801a66c:	4630      	mov	r0, r6
 801a66e:	f7ff ff35 	bl	801a4dc <__multiply>
 801a672:	6020      	str	r0, [r4, #0]
 801a674:	f8c0 8000 	str.w	r8, [r0]
 801a678:	4604      	mov	r4, r0
 801a67a:	e7e4      	b.n	801a646 <__pow5mult+0x3e>
 801a67c:	4638      	mov	r0, r7
 801a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a682:	bf00      	nop
 801a684:	08038268 	.word	0x08038268

0801a688 <__lshift>:
 801a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a68c:	460c      	mov	r4, r1
 801a68e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a692:	6923      	ldr	r3, [r4, #16]
 801a694:	6849      	ldr	r1, [r1, #4]
 801a696:	eb0a 0903 	add.w	r9, sl, r3
 801a69a:	68a3      	ldr	r3, [r4, #8]
 801a69c:	4607      	mov	r7, r0
 801a69e:	4616      	mov	r6, r2
 801a6a0:	f109 0501 	add.w	r5, r9, #1
 801a6a4:	42ab      	cmp	r3, r5
 801a6a6:	db32      	blt.n	801a70e <__lshift+0x86>
 801a6a8:	4638      	mov	r0, r7
 801a6aa:	f7ff fe57 	bl	801a35c <_Balloc>
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	4680      	mov	r8, r0
 801a6b2:	f100 0114 	add.w	r1, r0, #20
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	4553      	cmp	r3, sl
 801a6ba:	db2b      	blt.n	801a714 <__lshift+0x8c>
 801a6bc:	6920      	ldr	r0, [r4, #16]
 801a6be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a6c2:	f104 0314 	add.w	r3, r4, #20
 801a6c6:	f016 021f 	ands.w	r2, r6, #31
 801a6ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a6ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a6d2:	d025      	beq.n	801a720 <__lshift+0x98>
 801a6d4:	f1c2 0e20 	rsb	lr, r2, #32
 801a6d8:	2000      	movs	r0, #0
 801a6da:	681e      	ldr	r6, [r3, #0]
 801a6dc:	468a      	mov	sl, r1
 801a6de:	4096      	lsls	r6, r2
 801a6e0:	4330      	orrs	r0, r6
 801a6e2:	f84a 0b04 	str.w	r0, [sl], #4
 801a6e6:	f853 0b04 	ldr.w	r0, [r3], #4
 801a6ea:	459c      	cmp	ip, r3
 801a6ec:	fa20 f00e 	lsr.w	r0, r0, lr
 801a6f0:	d814      	bhi.n	801a71c <__lshift+0x94>
 801a6f2:	6048      	str	r0, [r1, #4]
 801a6f4:	b108      	cbz	r0, 801a6fa <__lshift+0x72>
 801a6f6:	f109 0502 	add.w	r5, r9, #2
 801a6fa:	3d01      	subs	r5, #1
 801a6fc:	4638      	mov	r0, r7
 801a6fe:	f8c8 5010 	str.w	r5, [r8, #16]
 801a702:	4621      	mov	r1, r4
 801a704:	f7ff fe4f 	bl	801a3a6 <_Bfree>
 801a708:	4640      	mov	r0, r8
 801a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a70e:	3101      	adds	r1, #1
 801a710:	005b      	lsls	r3, r3, #1
 801a712:	e7c7      	b.n	801a6a4 <__lshift+0x1c>
 801a714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a718:	3301      	adds	r3, #1
 801a71a:	e7cd      	b.n	801a6b8 <__lshift+0x30>
 801a71c:	4651      	mov	r1, sl
 801a71e:	e7dc      	b.n	801a6da <__lshift+0x52>
 801a720:	3904      	subs	r1, #4
 801a722:	f853 2b04 	ldr.w	r2, [r3], #4
 801a726:	f841 2f04 	str.w	r2, [r1, #4]!
 801a72a:	459c      	cmp	ip, r3
 801a72c:	d8f9      	bhi.n	801a722 <__lshift+0x9a>
 801a72e:	e7e4      	b.n	801a6fa <__lshift+0x72>

0801a730 <__mcmp>:
 801a730:	6903      	ldr	r3, [r0, #16]
 801a732:	690a      	ldr	r2, [r1, #16]
 801a734:	1a9b      	subs	r3, r3, r2
 801a736:	b530      	push	{r4, r5, lr}
 801a738:	d10c      	bne.n	801a754 <__mcmp+0x24>
 801a73a:	0092      	lsls	r2, r2, #2
 801a73c:	3014      	adds	r0, #20
 801a73e:	3114      	adds	r1, #20
 801a740:	1884      	adds	r4, r0, r2
 801a742:	4411      	add	r1, r2
 801a744:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a748:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a74c:	4295      	cmp	r5, r2
 801a74e:	d003      	beq.n	801a758 <__mcmp+0x28>
 801a750:	d305      	bcc.n	801a75e <__mcmp+0x2e>
 801a752:	2301      	movs	r3, #1
 801a754:	4618      	mov	r0, r3
 801a756:	bd30      	pop	{r4, r5, pc}
 801a758:	42a0      	cmp	r0, r4
 801a75a:	d3f3      	bcc.n	801a744 <__mcmp+0x14>
 801a75c:	e7fa      	b.n	801a754 <__mcmp+0x24>
 801a75e:	f04f 33ff 	mov.w	r3, #4294967295
 801a762:	e7f7      	b.n	801a754 <__mcmp+0x24>

0801a764 <__mdiff>:
 801a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a768:	460d      	mov	r5, r1
 801a76a:	4607      	mov	r7, r0
 801a76c:	4611      	mov	r1, r2
 801a76e:	4628      	mov	r0, r5
 801a770:	4614      	mov	r4, r2
 801a772:	f7ff ffdd 	bl	801a730 <__mcmp>
 801a776:	1e06      	subs	r6, r0, #0
 801a778:	d108      	bne.n	801a78c <__mdiff+0x28>
 801a77a:	4631      	mov	r1, r6
 801a77c:	4638      	mov	r0, r7
 801a77e:	f7ff fded 	bl	801a35c <_Balloc>
 801a782:	2301      	movs	r3, #1
 801a784:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a78c:	bfa4      	itt	ge
 801a78e:	4623      	movge	r3, r4
 801a790:	462c      	movge	r4, r5
 801a792:	4638      	mov	r0, r7
 801a794:	6861      	ldr	r1, [r4, #4]
 801a796:	bfa6      	itte	ge
 801a798:	461d      	movge	r5, r3
 801a79a:	2600      	movge	r6, #0
 801a79c:	2601      	movlt	r6, #1
 801a79e:	f7ff fddd 	bl	801a35c <_Balloc>
 801a7a2:	692b      	ldr	r3, [r5, #16]
 801a7a4:	60c6      	str	r6, [r0, #12]
 801a7a6:	6926      	ldr	r6, [r4, #16]
 801a7a8:	f105 0914 	add.w	r9, r5, #20
 801a7ac:	f104 0214 	add.w	r2, r4, #20
 801a7b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a7b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a7b8:	f100 0514 	add.w	r5, r0, #20
 801a7bc:	f04f 0e00 	mov.w	lr, #0
 801a7c0:	f852 ab04 	ldr.w	sl, [r2], #4
 801a7c4:	f859 4b04 	ldr.w	r4, [r9], #4
 801a7c8:	fa1e f18a 	uxtah	r1, lr, sl
 801a7cc:	b2a3      	uxth	r3, r4
 801a7ce:	1ac9      	subs	r1, r1, r3
 801a7d0:	0c23      	lsrs	r3, r4, #16
 801a7d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a7d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a7da:	b289      	uxth	r1, r1
 801a7dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a7e0:	45c8      	cmp	r8, r9
 801a7e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a7e6:	4694      	mov	ip, r2
 801a7e8:	f845 3b04 	str.w	r3, [r5], #4
 801a7ec:	d8e8      	bhi.n	801a7c0 <__mdiff+0x5c>
 801a7ee:	45bc      	cmp	ip, r7
 801a7f0:	d304      	bcc.n	801a7fc <__mdiff+0x98>
 801a7f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a7f6:	b183      	cbz	r3, 801a81a <__mdiff+0xb6>
 801a7f8:	6106      	str	r6, [r0, #16]
 801a7fa:	e7c5      	b.n	801a788 <__mdiff+0x24>
 801a7fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a800:	fa1e f381 	uxtah	r3, lr, r1
 801a804:	141a      	asrs	r2, r3, #16
 801a806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a80a:	b29b      	uxth	r3, r3
 801a80c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a810:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a814:	f845 3b04 	str.w	r3, [r5], #4
 801a818:	e7e9      	b.n	801a7ee <__mdiff+0x8a>
 801a81a:	3e01      	subs	r6, #1
 801a81c:	e7e9      	b.n	801a7f2 <__mdiff+0x8e>

0801a81e <__d2b>:
 801a81e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a822:	460e      	mov	r6, r1
 801a824:	2101      	movs	r1, #1
 801a826:	ec59 8b10 	vmov	r8, r9, d0
 801a82a:	4615      	mov	r5, r2
 801a82c:	f7ff fd96 	bl	801a35c <_Balloc>
 801a830:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a834:	4607      	mov	r7, r0
 801a836:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a83a:	bb34      	cbnz	r4, 801a88a <__d2b+0x6c>
 801a83c:	9301      	str	r3, [sp, #4]
 801a83e:	f1b8 0300 	subs.w	r3, r8, #0
 801a842:	d027      	beq.n	801a894 <__d2b+0x76>
 801a844:	a802      	add	r0, sp, #8
 801a846:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a84a:	f7ff fe0f 	bl	801a46c <__lo0bits>
 801a84e:	9900      	ldr	r1, [sp, #0]
 801a850:	b1f0      	cbz	r0, 801a890 <__d2b+0x72>
 801a852:	9a01      	ldr	r2, [sp, #4]
 801a854:	f1c0 0320 	rsb	r3, r0, #32
 801a858:	fa02 f303 	lsl.w	r3, r2, r3
 801a85c:	430b      	orrs	r3, r1
 801a85e:	40c2      	lsrs	r2, r0
 801a860:	617b      	str	r3, [r7, #20]
 801a862:	9201      	str	r2, [sp, #4]
 801a864:	9b01      	ldr	r3, [sp, #4]
 801a866:	61bb      	str	r3, [r7, #24]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	bf14      	ite	ne
 801a86c:	2102      	movne	r1, #2
 801a86e:	2101      	moveq	r1, #1
 801a870:	6139      	str	r1, [r7, #16]
 801a872:	b1c4      	cbz	r4, 801a8a6 <__d2b+0x88>
 801a874:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a878:	4404      	add	r4, r0
 801a87a:	6034      	str	r4, [r6, #0]
 801a87c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a880:	6028      	str	r0, [r5, #0]
 801a882:	4638      	mov	r0, r7
 801a884:	b003      	add	sp, #12
 801a886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a88a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a88e:	e7d5      	b.n	801a83c <__d2b+0x1e>
 801a890:	6179      	str	r1, [r7, #20]
 801a892:	e7e7      	b.n	801a864 <__d2b+0x46>
 801a894:	a801      	add	r0, sp, #4
 801a896:	f7ff fde9 	bl	801a46c <__lo0bits>
 801a89a:	9b01      	ldr	r3, [sp, #4]
 801a89c:	617b      	str	r3, [r7, #20]
 801a89e:	2101      	movs	r1, #1
 801a8a0:	6139      	str	r1, [r7, #16]
 801a8a2:	3020      	adds	r0, #32
 801a8a4:	e7e5      	b.n	801a872 <__d2b+0x54>
 801a8a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a8aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a8ae:	6030      	str	r0, [r6, #0]
 801a8b0:	6918      	ldr	r0, [r3, #16]
 801a8b2:	f7ff fdbc 	bl	801a42e <__hi0bits>
 801a8b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a8ba:	e7e1      	b.n	801a880 <__d2b+0x62>

0801a8bc <frexp>:
 801a8bc:	b570      	push	{r4, r5, r6, lr}
 801a8be:	2100      	movs	r1, #0
 801a8c0:	ec55 4b10 	vmov	r4, r5, d0
 801a8c4:	6001      	str	r1, [r0, #0]
 801a8c6:	4916      	ldr	r1, [pc, #88]	; (801a920 <frexp+0x64>)
 801a8c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a8cc:	428b      	cmp	r3, r1
 801a8ce:	4606      	mov	r6, r0
 801a8d0:	462a      	mov	r2, r5
 801a8d2:	dc22      	bgt.n	801a91a <frexp+0x5e>
 801a8d4:	ee10 1a10 	vmov	r1, s0
 801a8d8:	4319      	orrs	r1, r3
 801a8da:	d01e      	beq.n	801a91a <frexp+0x5e>
 801a8dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a8e0:	da0d      	bge.n	801a8fe <frexp+0x42>
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	4b0f      	ldr	r3, [pc, #60]	; (801a924 <frexp+0x68>)
 801a8e6:	ee10 0a10 	vmov	r0, s0
 801a8ea:	4629      	mov	r1, r5
 801a8ec:	f7e5 ff04 	bl	80006f8 <__aeabi_dmul>
 801a8f0:	460a      	mov	r2, r1
 801a8f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a8f6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	6031      	str	r1, [r6, #0]
 801a8fe:	6831      	ldr	r1, [r6, #0]
 801a900:	151b      	asrs	r3, r3, #20
 801a902:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a906:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a90a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801a90e:	440b      	add	r3, r1
 801a910:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801a914:	6033      	str	r3, [r6, #0]
 801a916:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801a91a:	ec45 4b10 	vmov	d0, r4, r5
 801a91e:	bd70      	pop	{r4, r5, r6, pc}
 801a920:	7fefffff 	.word	0x7fefffff
 801a924:	43500000 	.word	0x43500000

0801a928 <strncpy>:
 801a928:	b570      	push	{r4, r5, r6, lr}
 801a92a:	3901      	subs	r1, #1
 801a92c:	4604      	mov	r4, r0
 801a92e:	b902      	cbnz	r2, 801a932 <strncpy+0xa>
 801a930:	bd70      	pop	{r4, r5, r6, pc}
 801a932:	4623      	mov	r3, r4
 801a934:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801a938:	f803 5b01 	strb.w	r5, [r3], #1
 801a93c:	1e56      	subs	r6, r2, #1
 801a93e:	b92d      	cbnz	r5, 801a94c <strncpy+0x24>
 801a940:	4414      	add	r4, r2
 801a942:	42a3      	cmp	r3, r4
 801a944:	d0f4      	beq.n	801a930 <strncpy+0x8>
 801a946:	f803 5b01 	strb.w	r5, [r3], #1
 801a94a:	e7fa      	b.n	801a942 <strncpy+0x1a>
 801a94c:	461c      	mov	r4, r3
 801a94e:	4632      	mov	r2, r6
 801a950:	e7ed      	b.n	801a92e <strncpy+0x6>

0801a952 <__ssprint_r>:
 801a952:	6893      	ldr	r3, [r2, #8]
 801a954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a958:	4681      	mov	r9, r0
 801a95a:	460c      	mov	r4, r1
 801a95c:	4616      	mov	r6, r2
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d05e      	beq.n	801aa20 <__ssprint_r+0xce>
 801a962:	f04f 0b00 	mov.w	fp, #0
 801a966:	f8d2 a000 	ldr.w	sl, [r2]
 801a96a:	465f      	mov	r7, fp
 801a96c:	b357      	cbz	r7, 801a9c4 <__ssprint_r+0x72>
 801a96e:	68a3      	ldr	r3, [r4, #8]
 801a970:	429f      	cmp	r7, r3
 801a972:	d340      	bcc.n	801a9f6 <__ssprint_r+0xa4>
 801a974:	89a2      	ldrh	r2, [r4, #12]
 801a976:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a97a:	d03c      	beq.n	801a9f6 <__ssprint_r+0xa4>
 801a97c:	6825      	ldr	r5, [r4, #0]
 801a97e:	6921      	ldr	r1, [r4, #16]
 801a980:	eba5 0801 	sub.w	r8, r5, r1
 801a984:	6965      	ldr	r5, [r4, #20]
 801a986:	2302      	movs	r3, #2
 801a988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a98c:	fb95 f5f3 	sdiv	r5, r5, r3
 801a990:	f108 0301 	add.w	r3, r8, #1
 801a994:	443b      	add	r3, r7
 801a996:	429d      	cmp	r5, r3
 801a998:	bf38      	it	cc
 801a99a:	461d      	movcc	r5, r3
 801a99c:	0553      	lsls	r3, r2, #21
 801a99e:	d544      	bpl.n	801aa2a <__ssprint_r+0xd8>
 801a9a0:	4629      	mov	r1, r5
 801a9a2:	4648      	mov	r0, r9
 801a9a4:	f7fc fef0 	bl	8017788 <_malloc_r>
 801a9a8:	b988      	cbnz	r0, 801a9ce <__ssprint_r+0x7c>
 801a9aa:	230c      	movs	r3, #12
 801a9ac:	f8c9 3000 	str.w	r3, [r9]
 801a9b0:	89a3      	ldrh	r3, [r4, #12]
 801a9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9b6:	81a3      	strh	r3, [r4, #12]
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801a9be:	f04f 30ff 	mov.w	r0, #4294967295
 801a9c2:	e02f      	b.n	801aa24 <__ssprint_r+0xd2>
 801a9c4:	e9da b700 	ldrd	fp, r7, [sl]
 801a9c8:	f10a 0a08 	add.w	sl, sl, #8
 801a9cc:	e7ce      	b.n	801a96c <__ssprint_r+0x1a>
 801a9ce:	4642      	mov	r2, r8
 801a9d0:	6921      	ldr	r1, [r4, #16]
 801a9d2:	9001      	str	r0, [sp, #4]
 801a9d4:	f7fd f90e 	bl	8017bf4 <memcpy>
 801a9d8:	89a2      	ldrh	r2, [r4, #12]
 801a9da:	9b01      	ldr	r3, [sp, #4]
 801a9dc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801a9e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a9e4:	81a2      	strh	r2, [r4, #12]
 801a9e6:	6123      	str	r3, [r4, #16]
 801a9e8:	6165      	str	r5, [r4, #20]
 801a9ea:	4443      	add	r3, r8
 801a9ec:	eba5 0508 	sub.w	r5, r5, r8
 801a9f0:	6023      	str	r3, [r4, #0]
 801a9f2:	60a5      	str	r5, [r4, #8]
 801a9f4:	463b      	mov	r3, r7
 801a9f6:	42bb      	cmp	r3, r7
 801a9f8:	bf28      	it	cs
 801a9fa:	463b      	movcs	r3, r7
 801a9fc:	461a      	mov	r2, r3
 801a9fe:	4659      	mov	r1, fp
 801aa00:	6820      	ldr	r0, [r4, #0]
 801aa02:	9301      	str	r3, [sp, #4]
 801aa04:	f7fd f901 	bl	8017c0a <memmove>
 801aa08:	68a2      	ldr	r2, [r4, #8]
 801aa0a:	9b01      	ldr	r3, [sp, #4]
 801aa0c:	1ad2      	subs	r2, r2, r3
 801aa0e:	60a2      	str	r2, [r4, #8]
 801aa10:	6822      	ldr	r2, [r4, #0]
 801aa12:	4413      	add	r3, r2
 801aa14:	6023      	str	r3, [r4, #0]
 801aa16:	68b3      	ldr	r3, [r6, #8]
 801aa18:	1bdf      	subs	r7, r3, r7
 801aa1a:	60b7      	str	r7, [r6, #8]
 801aa1c:	2f00      	cmp	r7, #0
 801aa1e:	d1d1      	bne.n	801a9c4 <__ssprint_r+0x72>
 801aa20:	2000      	movs	r0, #0
 801aa22:	6070      	str	r0, [r6, #4]
 801aa24:	b003      	add	sp, #12
 801aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa2a:	462a      	mov	r2, r5
 801aa2c:	4648      	mov	r0, r9
 801aa2e:	f7fd f919 	bl	8017c64 <_realloc_r>
 801aa32:	4603      	mov	r3, r0
 801aa34:	2800      	cmp	r0, #0
 801aa36:	d1d6      	bne.n	801a9e6 <__ssprint_r+0x94>
 801aa38:	6921      	ldr	r1, [r4, #16]
 801aa3a:	4648      	mov	r0, r9
 801aa3c:	f7ff fbc4 	bl	801a1c8 <_free_r>
 801aa40:	e7b3      	b.n	801a9aa <__ssprint_r+0x58>
	...

0801aa44 <__register_exitproc>:
 801aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa48:	4c26      	ldr	r4, [pc, #152]	; (801aae4 <__register_exitproc+0xa0>)
 801aa4a:	4606      	mov	r6, r0
 801aa4c:	6820      	ldr	r0, [r4, #0]
 801aa4e:	4698      	mov	r8, r3
 801aa50:	460f      	mov	r7, r1
 801aa52:	4691      	mov	r9, r2
 801aa54:	f7fc fe86 	bl	8017764 <__retarget_lock_acquire_recursive>
 801aa58:	4b23      	ldr	r3, [pc, #140]	; (801aae8 <__register_exitproc+0xa4>)
 801aa5a:	681d      	ldr	r5, [r3, #0]
 801aa5c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 801aa60:	b918      	cbnz	r0, 801aa6a <__register_exitproc+0x26>
 801aa62:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 801aa66:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801aa6a:	6843      	ldr	r3, [r0, #4]
 801aa6c:	2b1f      	cmp	r3, #31
 801aa6e:	dd19      	ble.n	801aaa4 <__register_exitproc+0x60>
 801aa70:	4b1e      	ldr	r3, [pc, #120]	; (801aaec <__register_exitproc+0xa8>)
 801aa72:	b933      	cbnz	r3, 801aa82 <__register_exitproc+0x3e>
 801aa74:	6820      	ldr	r0, [r4, #0]
 801aa76:	f7fc fe76 	bl	8017766 <__retarget_lock_release_recursive>
 801aa7a:	f04f 30ff 	mov.w	r0, #4294967295
 801aa7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801aa86:	f7fc fe6f 	bl	8017768 <malloc>
 801aa8a:	2800      	cmp	r0, #0
 801aa8c:	d0f2      	beq.n	801aa74 <__register_exitproc+0x30>
 801aa8e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 801aa92:	6003      	str	r3, [r0, #0]
 801aa94:	2200      	movs	r2, #0
 801aa96:	6042      	str	r2, [r0, #4]
 801aa98:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801aa9c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 801aaa0:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 801aaa4:	6843      	ldr	r3, [r0, #4]
 801aaa6:	b19e      	cbz	r6, 801aad0 <__register_exitproc+0x8c>
 801aaa8:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 801aaac:	2201      	movs	r2, #1
 801aaae:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 801aab2:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 801aab6:	409a      	lsls	r2, r3
 801aab8:	4311      	orrs	r1, r2
 801aaba:	2e02      	cmp	r6, #2
 801aabc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 801aac0:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 801aac4:	bf02      	ittt	eq
 801aac6:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 801aaca:	430a      	orreq	r2, r1
 801aacc:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 801aad0:	1c5a      	adds	r2, r3, #1
 801aad2:	3302      	adds	r3, #2
 801aad4:	6042      	str	r2, [r0, #4]
 801aad6:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 801aada:	6820      	ldr	r0, [r4, #0]
 801aadc:	f7fc fe43 	bl	8017766 <__retarget_lock_release_recursive>
 801aae0:	2000      	movs	r0, #0
 801aae2:	e7cc      	b.n	801aa7e <__register_exitproc+0x3a>
 801aae4:	2000a610 	.word	0x2000a610
 801aae8:	08038110 	.word	0x08038110
 801aaec:	08017769 	.word	0x08017769

0801aaf0 <__ascii_mbtowc>:
 801aaf0:	b082      	sub	sp, #8
 801aaf2:	b901      	cbnz	r1, 801aaf6 <__ascii_mbtowc+0x6>
 801aaf4:	a901      	add	r1, sp, #4
 801aaf6:	b142      	cbz	r2, 801ab0a <__ascii_mbtowc+0x1a>
 801aaf8:	b14b      	cbz	r3, 801ab0e <__ascii_mbtowc+0x1e>
 801aafa:	7813      	ldrb	r3, [r2, #0]
 801aafc:	600b      	str	r3, [r1, #0]
 801aafe:	7812      	ldrb	r2, [r2, #0]
 801ab00:	1c10      	adds	r0, r2, #0
 801ab02:	bf18      	it	ne
 801ab04:	2001      	movne	r0, #1
 801ab06:	b002      	add	sp, #8
 801ab08:	4770      	bx	lr
 801ab0a:	4610      	mov	r0, r2
 801ab0c:	e7fb      	b.n	801ab06 <__ascii_mbtowc+0x16>
 801ab0e:	f06f 0001 	mvn.w	r0, #1
 801ab12:	e7f8      	b.n	801ab06 <__ascii_mbtowc+0x16>

0801ab14 <__ascii_wctomb>:
 801ab14:	b149      	cbz	r1, 801ab2a <__ascii_wctomb+0x16>
 801ab16:	2aff      	cmp	r2, #255	; 0xff
 801ab18:	bf85      	ittet	hi
 801ab1a:	238a      	movhi	r3, #138	; 0x8a
 801ab1c:	6003      	strhi	r3, [r0, #0]
 801ab1e:	700a      	strbls	r2, [r1, #0]
 801ab20:	f04f 30ff 	movhi.w	r0, #4294967295
 801ab24:	bf98      	it	ls
 801ab26:	2001      	movls	r0, #1
 801ab28:	4770      	bx	lr
 801ab2a:	4608      	mov	r0, r1
 801ab2c:	4770      	bx	lr
	...

0801ab30 <_sbrk>:
 801ab30:	4b04      	ldr	r3, [pc, #16]	; (801ab44 <_sbrk+0x14>)
 801ab32:	6819      	ldr	r1, [r3, #0]
 801ab34:	4602      	mov	r2, r0
 801ab36:	b909      	cbnz	r1, 801ab3c <_sbrk+0xc>
 801ab38:	4903      	ldr	r1, [pc, #12]	; (801ab48 <_sbrk+0x18>)
 801ab3a:	6019      	str	r1, [r3, #0]
 801ab3c:	6818      	ldr	r0, [r3, #0]
 801ab3e:	4402      	add	r2, r0
 801ab40:	601a      	str	r2, [r3, #0]
 801ab42:	4770      	bx	lr
 801ab44:	20021288 	.word	0x20021288
 801ab48:	20021340 	.word	0x20021340

0801ab4c <_init>:
 801ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab4e:	bf00      	nop
 801ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab52:	bc08      	pop	{r3}
 801ab54:	469e      	mov	lr, r3
 801ab56:	4770      	bx	lr

0801ab58 <_fini>:
 801ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab5a:	bf00      	nop
 801ab5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab5e:	bc08      	pop	{r3}
 801ab60:	469e      	mov	lr, r3
 801ab62:	4770      	bx	lr
